C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-01-14 12:20:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LACE(NDTM,M,N,INDX,JOPEN,ROW,COL,RDIR,CDIR,IH,IGAP)
C
***	MODULE	LACE
***	IDENT	14JA92
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
CMOD1076					 JB  10-Jan-1992
C	Do not contour round null (-32767 in NDTM) valued regions.
C
CMOD782 Double precision variables introduced to eliminate spurious
C	contour kinks arising from rounding errors
C						 JB  03-Jul-1989
CMOD	Standardised to LSL, and made readable	 JB  02-May-1989
C
C	DTICONTOUR version			TJH  03-Nov-1987
C
	IMPLICIT NONE
C
        INTEGER		M,N		! no. of rows, columns
  	INTEGER*2	NDTM(M,N)
	INTEGER		ROW,COL		! row, column number
	INTEGER		RDIR,CDIR	! direction of contour IH
	INTEGER		JOPEN		! 0 closed, 1 open loop
	INTEGER		IH		! scaled height
	INTEGER		IGAP		! scaled contour interval
C
	LOGICAL		INDX		! index contour?
C
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:CONTR.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:MAPARE.CMN'
C
	INTEGER		LEFT
	INTEGER		JFIRST
	INTEGER		KEMPTY
	INTEGER		I,J		! row, col no. of pixel O
	INTEGER		IPREV,JPREV	! coords of higher pixel A
	INTEGER		IDIR,JDIR	! direction of height IH 
C					   from O (toward pixel A)
	INTEGER		ORIGIN		! pixel values at O 
	INTEGER		IZA		!              at A 
	INTEGER		IB,JB		! surrounding pixel coords
	INTEGER		IC,JC		! surrounding pixel coords
	INTEGER		IX,IY		! x, y coordinates
	INTEGER		IZB,IZC		! pixel values of pts B,C
	INTEGER		IZD		! pixel value interpolated 
C					    from OACB
	INTEGER		KB
C
	REAL*8		T		! interpolated height
C
C.....................................................................
C      At first call to LACE, pixel at O < IH, pixel >= IH at A
C
C......A contour starts on the line joining the point O = (I,J) to the
C......point A = (I+IDIR,J+JDIR). The surface heights ORIGIN, IZA at 
C......these points are extracted, the values I, J, IDIR, and JDIR are 
C......fetched. JFIRST is set = 1 if the point being considered is the 
C......first point on the contour, or -1 if it is the last point, 
C......otherwise JFIRST will be 0.
C
	I = ROW
	J = COL
	IDIR = RDIR
	JDIR = CDIR
C
	JFIRST = 1
C	KEMPTY = 32760
C
	KEMPTY = 32767			! ***
C
	ORIGIN = IABS(NDTM(I,J))
	IPREV = I + IDIR
	JPREV = J + JDIR
	IZA = IABS(NDTM(IPREV,JPREV))
C
C	IF (ABS(IZA).EQ.32767 .OR. ABS(ORIGIN).EQ.32767) GOTO 130	! ***
C
C......The point where the contour crosses the line OA is determined
C......using inverse linear interpolation.
C
10	T = DBLE(ORIGIN-IH)/DBLE(ORIGIN-IZA)
	IX = (J-1+T*JDIR)*XRINC + 0.5
	IY = (NROW-I-T*IDIR)*YRINC + 0.5
	CALL DENSIT(ORIGIN,IZA,IGAP)
C
C......If the contour is an open contour a jump is made to label 20. If
C......it is a closed contour a test is made to see if this point is the
C......last point on the contour (ie IDIR =-1 and the appropriate entry 
C......in the array NDTM is +ve). If so a jump is made to label 40. If
C......not the routine continues at label 50 (if IDIR=-1) or label 60.
C
	IF (JOPEN.EQ.1)GOTO 20
	IF (JFIRST.EQ.1)GOTO 50
	IF (IDIR.NE.-1)GOTO 60
	IF (NDTM(I,J).GE.0)GOTO 40
	GOTO 50
C
C......Open contours are tested to see if they have hit the edge of the
C......mesh (ie the point is the last point on the contour). If so a
C......jump is made to label 40. If not the routine continues at label 50
C......(if IDIR=-1) or label 60.
C
20	IF (JFIRST.EQ.1)GOTO 60
	IF (JDIR.NE.0)GOTO 30
C
C	IF (J.EQ.1 .OR. J.EQ.NCOL .OR. ABS(IZA).EQ.32767 .OR.
C     &				ABS(ORIGIN).EQ.32767) GOTO 40	! ***
C
	IF (J.EQ.1 .OR. J.EQ.NCOL) GOTO 40	! ***
	IF (IDIR.NE.-1)GOTO 60
	GOTO 50
C
C30	IF (I.EQ.1 .OR. I.EQ.NROW .OR. ABS(IZA).EQ.32767 .OR.
C     &				ABS(ORIGIN).EQ.32767) GOTO 40	! ***
C
30	IF (I.EQ.1 .OR. I.EQ.NROW) GOTO 40	! ***
C
	GOTO 60
C
C......This is the last point on the contour and the variable JFIRST is
C......set to -1. Check that closed contours start and finish on the 
C......same point
C
40	JFIRST = -1
	GOTO 60
C
C......The contour is crossing the line joining (I-1,J) to (I,J) in the
C......direction of increasing J and the entry in array NDTM is set +ve
C
50	NDTM(I,J) = IABS(NDTM(I,J))
C
C......The coordinates of the point are output to draw.
C
60	CALL DRAW(IX,IY,IH,INDX,JFIRST,JOPEN)
C
C......If this is the last point on the contour we jump to label 130.
C
	IF (JFIRST.EQ.-1) GOTO 130
C
C......The contour crosses into the rectangle OACB. The variable JFIRST
C......is reset, the heights at B and C, IZB and IZC, are extracted and
C......the height at D calculated as the average of the heights at O, A,
C......B, and C.
C
	JFIRST = 0
	IB = I+JDIR
	JB = J-IDIR
	IC = I+IDIR+JDIR
	JC = J-IDIR+JDIR
	IZB = IABS(NDTM(IB,JB))
	IZC = IABS(NDTM(IC,JC))
C
C......Switch off contour plotting if any of the surrounding cell
C......vertices have not been interpolated (ie KEMPTY).
C
	IXAQ = KEMPTY
C
C	IF (ORIGIN.EQ.KEMPTY .OR. IZA.EQ.KEMPTY
C     &     .OR.IZB.EQ.KEMPTY .OR. IZC.EQ.KEMPTY) IXAQ = -1
C
	IF (ABS(ORIGIN).EQ.KEMPTY .OR. ABS(IZA).EQ.KEMPTY
     &    .OR. ABS(IZB).EQ.KEMPTY .OR. ABS(IZC).EQ.KEMPTY) THEN	! ***
	   IXAQ = -1
C	   GOTO 130
	ENDIF
C
C
	IZD = 0.25*(FLOAT(ORIGIN)+FLOAT(IZA)+FLOAT(IZB)+FLOAT(IZC))
C
C......A test is made to see if the contour crosses AD. If so a jump 
C......is made to label 90.
C
	IF (IZD.LT.IH)GOTO 90
C
C......The contour crosses OD and the variable left is set = 1. The 
C...... point where the contour crosses OD is calculated using inverse
C...... linear interpolation and output to draw.
C
65	LEFT = 1
	T = 0.5D0*DBLE(ORIGIN-IH)/DBLE(ORIGIN-IZD)
	IX = (J-1+T*(JDIR-IDIR))*XRINC+0.5
	IY = (NROW-I-T*(IDIR+JDIR))*YRINC+0.5
	CALL DENSIT(ORIGIN,IZD,IGAP)
	CALL DRAW(IX,IY,IH,INDX,JFIRST,JOPEN)
C
C......A test is made to see if the contour crosses OB. If so a jump is
C......made to label 100.
C
	IF (IZB.GE.IH)GOTO 100
C
C......The contour crosses BD. The point where it does is calculated
C......using inverse linear interpolation and output to draw.
C
70	T = 0.5D0*DBLE(IZB-IH)/DBLE(IZB-IZD)
	IX = (JB-1+T*(IDIR+JDIR))*XRINC+0.5
	IY = (NROW-IB+T*(JDIR-IDIR))*YRINC+0.5
	CALL DENSIT(IZB,IZD,IGAP)
	CALL DRAW(IX,IY,IH,INDX,JFIRST,JOPEN)
C
C......If the contour crosses into the triangle OBD (LEFT=0), it leaves
C......the rectangle by crossing OB and a jump is made to label 100. If
C......not a test is made to see if it crosses BC and if so a jump is
C......made to label 110.
C
	IF (LEFT.EQ.0)GOTO 100
	IF (IZC.GE.IH)GOTO 110
C
C......The contour crosses CD and the point where it happens is
C......calculated using inverse linear interpolation and output to draw.
C
80	T = 0.5D0*(1.0D0+DBLE(IZD-IH)/DBLE(IZD-IZC))
	IX = (J-1+T*(JDIR-IDIR))*XRINC+0.5
	IY = (NROW-I-T*(IDIR+JDIR))*YRINC+0.5
	CALL DENSIT(IZD,IZC,IGAP)
	CALL DRAW(IX,IY,IH,INDX,JFIRST,JOPEN)
C
C......If the contour crosses into the triangle ACD (LEFT=1). It leaves
C......the rectangle by crossing AC and a jump is made to label 120. If
C......not a test is made to see if it crosses BD, and if so a jump is
C......made to label 70. If not it leaves the rectangle by crossing BC
C...... and a jump is made to label 110.
C
	IF (LEFT.EQ.1)GOTO 120
	IF (IZB.GE.IH)GOTO 70
	GOTO 110
C
C......The contour crosses AD and the variable left is reset. The point
C......where the contour crosses AD is calculated using inverse linear
C......interpolation and output to draw.
C
90	LEFT = 0
	T = 0.5D0*(1.0D0+DBLE(IZD-IH)/DBLE(IZD-IZA))
	IX = (JB-1+T*(IDIR+JDIR))*XRINC+0.5
	IY = (NROW-IB+T*(JDIR-IDIR))*YRINC+0.5
	CALL DENSIT(IZD,IZA,IGAP)
	CALL DRAW(IX,IY,IH,INDX,JFIRST,JOPEN)
C
C......A test is made to see if the contour crosses CD. If so a jump is
C......made to label 80. If not the contour leaves the rectangle by
C......crossing AC and a jump is made to label 120.
C
	IF (IZC.GE.IH)GOTO 80
	GOTO 120
C
C......The contour crosses OB. The values of IZA, IDIR, and JDIR are 
C......updated and the routine returns to label 10.
C
100	IZA = IZB
	KB = IDIR
	IDIR = JDIR
	JDIR = -KB
	GOTO 10
C
C......The contour crosses BC. The values of ORIGIN, IZA, I, and J are
C......updated and the routine returns to label 10.
C
110	ORIGIN = IZB
	IZA = IZC
	I = IB
	J = JB
	GOTO 10
C
C......The contour crosses AC. The values of ORIGIN, I, J, IDIR, and 
C......JDIR are updated and the routine returns to label 10.
C
120	ORIGIN = IZC
	I = IC
	J = JC
	KB = JDIR
	JDIR = IDIR
	IDIR = -KB
	GOTO 10
C
C......The contour is completed
C
130	RETURN
	END
C
