C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-09 12:09:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SMOOTH
C
***	MODULE	SMOOTH
***	IDENT	03NO87
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	DTICONTOUR version				TJH 03-Nov-1987
CMOD	Continuity for 2nd and subsequent strings now
C	correct					     TJH/DM 14-Aug-1986
C	Created 					 DM 12-Jun-1984
C
C Smooths a contour (removing superimposed points) prior to output.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
C
C Common:
	INCLUDE 'LSL$CMNDTICONTOUR:IFCTRL.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:SMTCMN.CMN'
C
	INTEGER	  I,J,K,P	! temporary variables
	INTEGER	  ORIPTS	! value of SMTPTS when we enter SMOOTH
C
C ......................................................................
C
	IF (NOSMTH.OR.(SMTNUM.LT.1)) GO TO 40
	ORIPTS=SMTPTS
	DO 30 J=1,SMTNUM		! number of smoothing passes
	   IF (SMTPTS.LT.3) GO TO 40	! anything to do ?
C
C ... get three consecutive, non-coincident points (L,M,N).
	   IF (IENDS.EQ.0) THEN		! get the first point (L)
	      LX=SMTBUF(1,1)
	      LY=SMTBUF(2,1)
	      K=1
	      P=2
	   ELSE
	      LX=PLX
	      LY=PLY
	      K=0
	      P=1
	   ENDIF
C
10	   K=K + 1			! get the second point (M)
	   IF (K.GT.SMTPTS) THEN
	      SMTPTS=1		! all points are coincident !!
	      GO TO 40
	   ENDIF
	   MX=SMTBUF(1,K)
	   MY=SMTBUF(2,K)
	   IF ((ABS(MX-LX).LT.1.0E-3) .AND.
     &	       (ABS(MY-LY).LT.1.0E-3)) GO TO 10
C
	   K=K + 1			! now get the third point (N)
	   DO 20 I=K,SMTPTS		! loop over rest of points
	      NX=SMTBUF(1,I)
	      NY=SMTBUF(2,I)
	      IF ((ABS(NX-MX).LT.1.0E-3) .AND.
     &		  (ABS(NY-MY).LT.1.0E-3)) GO TO 20
C
C ... move point M to the mid-point of the line joining the mid-points
C ... of (L)---(M) and (M)---(N). Repeat for the whole contour.
	      SMTBUF(1,P)=0.25*(LX + 2*MX + NX)	! move middle point ...
	      SMTBUF(2,P)=0.25*(LY + 2*MY + NY)	! but retain MX and MY
	      P=P + 1
	      LX=MX				! shuffle down old M ...
	      LY=MY
	      MX=NX				! and old N
	      MY=NY
20	   CONTINUE				! get new N
	   SMTBUF(1,P)=SMTBUF(1,ORIPTS)	! pass done - P points are left
	   SMTBUF(2,P)=SMTBUF(2,ORIPTS) ! restore the final point ...
	   SMTPTS=P			! and update the point count
30	CONTINUE
	PLX=LX
	PLY=LY
40	RETURN
	END
