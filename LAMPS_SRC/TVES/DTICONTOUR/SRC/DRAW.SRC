C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-05-02 19:27:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DRAW(IX,IY,IZ,INDX,JFIRST,JOPEN)
C
***	MODULE	DRAW
***	IDENT	02MY89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C    	DTICONTOUR version				TJH 03-Nov-1987
C
C DRAW checks all output points for line labelling and draws the contour
C lines themselves. Check whether output is to be switched off at this 
C point. If IXAQ = -1 on line is to be drawn so set IP = 3 (pen up)
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	IX,IY,IZ	! (x,y,z) coordinate (scaled integer)
	LOGICAL	INDX		! index contour?
	INTEGER JFIRST		! JFIRST is set = 1 if the point is the
C                               ! first point on the contour, or -1 if
C                               ! it is the last point, otherwise
C                               ! JFIRST will be 0.
	INTEGER	JOPEN		! 0=closed contour, 1=open contour
C W/s
	LOGICAL		DONE_LAB! have we done a label on this contour?
	SAVE		DONE_LAB
	INTEGER		IP	! plotter pen control
	INTEGER		IS	! distance from last point
	INTEGER		KAXY	
	INTEGER		LA	! loop var.
	INTEGER		JWID	! len. of line gap before & after label
	INTEGER		IT	! for length of label and spacing
	INTEGER		IXR,IYR	! pen pos. after label
	INTEGER		IS1,IS2
	INTEGER		IXA,IYA
	REAL		CA	! cos 
	REAL		SA	!     and sin of slope for label pos
	REAL		XA,XB
	REAL		S	! distance from last plot pos
C
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:IFCTRL.CMN'
C
C ................................................................
C
	IP = 2
	IF (IXAQ.EQ.-1) IP = 3
C
C If last point plot line, if first point set markers, else 102
C
	IF (JFIRST) 70,20,10
C
C first point
C
10	IP = 3
	IS = 0
	IXP = IX		! store point coordinates
	IYP = IY
	NST = 0
	JFDIST = 0
	IF (JOPEN.EQ.1) THEN
	   ITDIST = 0.8*ICML
	   DONE_LAB = .TRUE.
	ELSE
	   DONE_LAB = .FALSE.
	   ITDIST = 0
	ENDIF
C
C Switch annotation on/off depending on DO_ANNO and the position 
C of the contour in the list of index or intermediate contours
C
20	IF (.NOT.DO_ANNO) GOTO 50
C
	IF (INDX) THEN
	   IF (RINDX_MOD.LE.0.0) GOTO 50
	   IF (ABS(AMOD(ZVAL,RINDX_MOD)).GT.1.0E-6) GOTO 50
	ELSE
	   IF (RINTR_MOD.LE.0.0) GOTO 50
	   IF (ABS(AMOD(ZVAL,RINTR_MOD)).GT.1.0E-6) GOTO 50
	ENDIF
C
C Calculate how far from last plot position
C
	S = FLOAT(IXP-IX)**2 + FLOAT(IYP-IY)**2
	IF (S.GT.0.0) S = SQRT(S)
	IS = S+0.5
C
C Has pen travelled far enough to consider annotating the line?
C
	IF (DONE_LAB .AND. (ITDIST+IS).LT.ICML) GOTO 50
C
C Is IX,IY acceptable for format drawing?
C Check for too closely spaced contours
C
	IF (LABSIZ.GT.IXAQ) GOTO 70
C
C Is line too twisty to allow linear annotation.
C
	IF (IS.NE.0) GOTO 30
	XA = DX
	XB = DY
	GOTO 40
C
30	XA = (IXP-IX)/S
	XB = (IYP-IY)/S
C
C Ensure acceptance if this is first possible point
C
	IF (NST.GT.0) GOTO 40
C
	DX = XA
	DY = XB
C
40	SA = (ABS(XA-DX) + ABS(XB-DY))*0.5
	DX = XA
	DY = XB
C
C The lower the GRAD value the less frequently will annotation
C occur. GRAD is in the range 0-1 where at 1 everything gets 
C through!
C
	IF (SA.GT.GRAD) GOTO 70
C
C Now store line points for later plotting
C
	NST = NST+1
	IXYBUF(NST,1) = IX
	IXYBUF(NST,2) = IY
	IPDIS(NST) = IS
	IF (NST.EQ.LABUF_MAX) GOTO 70
C
	IF (NST.EQ.1) GOTO 50
C
C Add distance to format spacing	
C
	JFDIST = JFDIST+IS
C
C Is gap long enough to plot annotation
C
	IF (JFDIST.GT.ITEN) GOTO 100
C
	GOTO 60
C
C Plot line segment	
C
50	CALL PLOTB(IX,IY,IP)
C
C Update previous point location
C
60	IXP = IX
	IYP = IY
C
C Ensure the total distance travelled along this contour does not
C get too big
C
	ITDIST = ITDIST+IS
	IF (ITDIST.GT.ICML*3)ITDIST = ICML
	GOTO 110
C
C Line gap not suitable, plot line instead of annotation
C
70	IF (NST.EQ.0) GOTO 50	
C
	KAXY = 1
C
80	DO 90 LA = KAXY,NST
	   CALL PLOTB(IXYBUF(LA,1),IXYBUF(LA,2),2)
90	CONTINUE
C
	NST = 0
	JFDIST = 0
	GOTO 50
C
C Line gap suitable, label the line. Calculate position of L.L.
C corner of annotation, and angle of contour line segments.
C routine note bends the annotation to follow the contour line.
C JWID is the length of the line gap before and after the label.
C
100	JWID = IWID/3+1
	IT = JWID
C
C Flag that we have put out a label on this contour
C
	DONE_LAB = .TRUE.
	CALL NOTE(KAXY,IXR,IYR,IS1,IS2,IT)
C
C Now join line on again after the annotation. Get the next
C X,Y position
C
	IT = IWID+JWID
C
	CALL CORDS(IXA,IYA,CA,SA,KAXY,IXR,IYR,IS1,IS2,IT,1)
C
	CALL PLOTB(IXR,IYR,3)
C
	ITDIST=0
	GOTO 80
C
110	RETURN
	END
C
