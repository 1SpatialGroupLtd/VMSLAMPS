C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-26 17:37:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POSTVL(FIG)
C
***	MODULE	POSTVL
***	IDENT	26AP89
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	DTICONTOUR version				TJH  03-Nov-1987
CMOD	Marginal cases handled better		 	 DM  17-Apr-1984
C	Standardised					TJH  25-May-1984
C
C POSTVL retrieves the Z value (FIG) that corresponds to contour integer
C (scaled) height IH, calculates an appropriate format that will
C maintain at least NSIGNF significant figures, then decomposes the
C real number obtained into the digits that need to be plotted and
C stores them in an array for use by NOTE. There are NSIG significant
C figures put into NDIG for plotting, except that any decimal point and
C trailing zeroes will be omitted. NSIGNF is the number of significant
C figures to be plotted, and NODECP indicates (if NODECP is 1) that no
C decimal places are to be given. The order of characters is that given
C in FIGPLT.
C
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:RCONVI.CMN'
C ......................................................................
C
C Calculate total number field width (NTOT), number of places
C after the decimal point (NAFT), number of digits before
C the decimal point to be displayed (NT), and the total (NTA).
C
	TIG = ABS(FIG)
	IF (TIG.GT.0.0) THEN
	   IF (NODECP) THEN
	      TIG=ALOG10(TIG+0.5)
	   ELSE
	      TIG=ALOG10(TIG*1.00001)
	   ENDIF
	ENDIF
C
	NT = 1
	IF (TIG.GT.0.0) NT = TIG+1
C
C How many decimal places must be displayed (NAFT)?
C
	NAFT = NSIGNF - NT
C
C Check value of INTEG to determine whether this number of decimals
C is to be allowed.
C
	IF (NODECP) NAFT=0
C
C Check for having sufficient places available before the decimal
C point to represent the figure properly. Set NAFT to zero if
C more than NSIGNF are required.
C
	NAFT = MAX0(NAFT,0)
	NTA = NT + NAFT
	NTOT = NTA
	IF (NAFT.NE.0) NTOT = NTOT + 1
	IF (FIG.LT.0.0) NTOT = NTOT + 1
C
C Determine size of labelling and format length parameters. Basic
C symbol size is defined by the ratio of 8 by 7 screen units. LABSIZ is
C the label height in internal grid units, IWID is the label width
C
	IWID = FLOAT(LABSIZ)*(7.0/8.0)
	HALF_LABSIZ = FLOAT(LABSIZ)/2.0
	IF (NTOT.LT.10) GOTO 10
C
C Too many digits for the storage and precision available
C
	NTOT = 9
	GOTO 20
C
C Round FIG up to the format specified by NTOT/NAFT combination
C
10	TIG = FIG + 0.1**(NAFT+1)*5.0*SIGN(1.0,FIG)
C
	XPQ = 10.0**NT
	IF (ABS(TIG).LT.XPQ) GOTO 40
C
C Put error symbols into NDIG if number too large to fit space
C
20	DO 30 I=1,NTOT
	   NDIG(I)=3
30	CONTINUE
	K = NTOT
	GOTO 100
C
C Decompose the figure into its digits (including sign and decimal
C point) - the most significant digit first
C
40	XFIG = ABS(TIG)
	XB = 0.0
	MARK = 0
	SIG = XFIG
	K = 0
	DO 70 I=1,NTA
	   XPQ = XPQ*0.1
	   J = XFIG/XPQ
	   XB = J*XPQ+XB
	   XFIG = SIG-XB
	   IF (SIG.LT.1.0 .AND. I.GE.NT) GOTO 50
	   IF (J.EQ.0 .AND. MARK.EQ.0) GOTO 70
50	   IF (MARK.EQ.1 .OR. FIG.GE.0.0) GOTO 60
C
C Put minus sign into NDIG
C
	   K = K+1
	   NDIG(K) = 1
60	   K = K+1
	   NDIG(K) = J+4
	   MARK = 1
	   IF (I.NE.NT) GOTO 70
	   IF (NAFT.EQ.0) GOTO 100
C
C Put in decimal point
C
	   K = K+1
	   NDIG(K) = 2
70	CONTINUE
C
C Figure now assembled in NDIG, so check whether we have trailing
C zeroes after the decimal point. If we do, they, and the point,
C can be removed - and hence the format shortened.
C
	DO 80 I=1,K
	   J = K-I+1
C
C Check for decimal point
C
	   IF (NDIG(J).EQ.2) GOTO 90
C
C Check for number other than a zero
C
	   IF (NDIG(J).NE.4) GOTO 100
80	CONTINUE
C
C Only gets here when a zero value is encountered
C
	J = K+1
C
C Decimal point has been found, so modify K to value of J.
C
90	K = J-1
C
C Store the number of characters to be displayed, and the format
C length (ITEN).
C
100	NDIG(10) = K
	ITEN = LABSIZ*(K+K/4+2)
	RETURN
	END
C
