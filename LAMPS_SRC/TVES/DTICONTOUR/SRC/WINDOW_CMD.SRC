	LOGICAL FUNCTION WINDOW_CMD()
C
***	MODULE	WINDOW_CMD
***	IDENT	28NO88
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
CMOD	Code for WINDOW in projection units added	TJH 28-Nov-1988
CMOD577 Now correctly offsets the window coordinates
C	if metres					TJH 06-Jun-1988
CMOD	Changed for DTICONTOUR				TJH 14-Oct-1987
C	Author    : D R Catlow
C	
C	Function to set the area of interest in the input DTM.
C	The routine interpretes the command line according to the
C	current UNITS setting.
C	The function checks that the window values are senisble,
C	and truncates if they fall outside the DTM bounds.
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'	
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'	
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'	! DTILIB parameters
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'	! DTILIB parameters
C	
C Common:
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'	! DTILIB common
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'! DTILIB common
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:FILES.CMN'
C
C W/s
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
	REAL	   	FIVEP		! 5% of max DTI range
C
C Function
	LOGICAL		READLL		! reads lat/long
C
C ......................................................................
C
	WINDOW_CMD=.TRUE.		! assume success
	IF (.NOT.DTILUN_INUSE(DTILUN)) THEN		! no file opened?
	   CALL WRITEF(
     &	        '%S You must use the FILEIN command to '//
     &			'open the DTI file first',ERROR)
	   GOTO 70
	ENDIF
C
	IF (CMDRCT.NE.4.AND.UNITS.NE.UNITS_DEG) THEN
	   CALL WRITEF('%S specifying DTI window',ERROR)
	   CALL WRITEF
     &	  ('Command requires 2 x,y coordinate pairs (SW and NE)')
	   GOTO 70
	ENDIF
C
	GOTO (10,20,30,40,50) UNITS
C
C----------------------------------------------------------------------
C	Matrix units
10	X1=NINT(REALAR(1))
	Y1=NINT(REALAR(2))
	X2=NINT(REALAR(3))
	Y2=NINT(REALAR(4))
	GOTO 60
C
C----------------------------------------------------------------------
C	Metres
20	IF (ABSOLUTE) THEN
	   X1=NINT((REALAR(1)-X_OFFSET(DTILUN))/X_GRID(DTILUN))+1
	   Y1=NINT((REALAR(2)-Y_OFFSET(DTILUN))/Y_GRID(DTILUN))+1
	   X2=NINT((REALAR(3)-X_OFFSET(DTILUN))/X_GRID(DTILUN))+1
	   Y2=NINT((REALAR(4)-Y_OFFSET(DTILUN))/Y_GRID(DTILUN))+1
	ELSE
	   X1=NINT(REALAR(1)/X_GRID(DTILUN))+1
	   Y1=NINT(REALAR(2)/Y_GRID(DTILUN))+1
	   X2=NINT(REALAR(3)/X_GRID(DTILUN))+1
	   Y2=NINT(REALAR(4)/Y_GRID(DTILUN))+1
	ENDIF
	GOTO 60
C
C-----------------------------------------------------------------------
C	Seconds
30	Y1=NINT(REALAR(1)*10)
	X1=NINT(REALAR(2)*10)
	Y2=NINT(REALAR(3)*10)
	X2=NINT(REALAR(4)*10)
	X1=((X1-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	Y1=((Y1-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	X2=((X2-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	Y2=((Y2-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	GOTO 60
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
40	IF (READLL(LLDEGS,4)) THEN
	   CALL WRITEF('%S specifying DTI window',ERROR)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   GOTO 70
	ELSE
	   Y1=LLDEGS(1)*10
	   X1=LLDEGS(2)*10
	   Y2=LLDEGS(3)*10
	   X2=LLDEGS(4)*10
	   X1=((X1-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	   Y1=((Y1-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	   X2=((X2-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	   Y2=((Y2-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	ENDIF
	GOTO 60
C
C----------------------------------------------------------------------
C	Projection units
50	IF (ABSOLUTE) THEN
	   X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,DTILUN))
     &					/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,DTILUN))
     &					/DTIPROJ_SAMPLE(2,DTILUN))+1
	   X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,DTILUN))
     &					/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,DTILUN))
     &					/DTIPROJ_SAMPLE(2,DTILUN))+1
	ELSE
	   X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,DTILUN))+1
	   X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,DTILUN))+1
	ENDIF
	GOTO 60
C
C----------------------------------------------------------------------
C
C	Are the window values sensible?
C	Does the NE coordinate exceed the SW coordinate
60	IF (X2.LE.X1.OR.Y2.LE.Y1) THEN
	   CALL WRITEF('%S ERROR specifying DTI window',ERROR)
	   CALL WRITEF
     &    ('NE coordinates should exceed SW coordinates')
	   GOTO 70
	ENDIF
C
C	Do the values need truncating?
	IF (X1.GT.X_EXTENT(DTILUN).OR.X1.LT.1.OR.
     &	   X2.GT.X_EXTENT(DTILUN).OR.X2.LT.1.OR.
     &	   Y1.GT.Y_EXTENT(DTILUN).OR.Y1.LT.1.OR.
     &	   Y2.GT.Y_EXTENT(DTILUN).OR.Y2.LT.1) THEN
	   CALL WRITEF
     &	   ('%S Specified window exceeds matrix limits',WARNING)
	   CALL WRITEF
     &	   ('                Window will be truncated to fit')
	   X1=MAX(1,MIN(X1,X_EXTENT(DTILUN)))
	   X2=MAX(1,MIN(X2,X_EXTENT(DTILUN)))
	   Y1=MAX(1,MIN(Y1,Y_EXTENT(DTILUN)))
	   Y2=MAX(1,MIN(Y2,Y_EXTENT(DTILUN)))
	ENDIF
C
C	Transfer to the DTI common block variables
	DTI_WINDOW_SWX(DTILUN) = X1
	DTI_WINDOW_SWY(DTILUN) = Y1
	DTI_WINDOW_NEX(DTILUN) = X2	
	DTI_WINDOW_NEY(DTILUN) = Y2
C
C
C Get percentage of DTI (x,y) range for MINGAP and LABEL_SIZE defaults
	CALL FIVE_PERCENT(FIVEP)
	IF (LABLSIZE.EQ.0.0) LABLSIZE=FIVEP/10.0
	IF (RMINGAP.EQ.0.0) RMINGAP=FIVEP*2.0
C
C Set flag to say that the user has defined a window
	WINSET=.TRUE.
	GOTO 80
C
C----------------------------------------------------------------------
C
70	WINDOW_CMD=.FALSE.
80	RETURN
	END
