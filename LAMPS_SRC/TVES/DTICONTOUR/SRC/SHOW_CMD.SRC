C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-30 15:33:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHOW_CMD()
C
***	MODULE	SHOW_CMD
**	IDENT	09NO87
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						TJH 03-Nov-1987
C
C Function to show command status eg SHOW LABELLING.
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
	
C
C Common blocks:
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:FILES.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:IFCTRL.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:SMTCMN.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
C
C W/s
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
	INTEGER*4	DEGR	! degree part of latlong
	INTEGER*4	MINU	! minute part of latlong
	INTEGER*4	SECO	! seconds part of latlong
	LOGICAL		NEGA	! neg latlong value
C
C Functions:
	INTEGER		RDCOMM
	INTEGER		SIGCHS
C
C Command table:
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER		SHOW_CMD_TABLE
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
C
	NOMESS=.TRUE.			! turn off CMDLIB messages
	CALL WRITEF
	CMD=RDCOMM(SHOW_CMD_TABLE)	! get command
	CMD=CMD+1
	GOTO (
     &		10,			! error/nothing	- cmd=1
     &		20,			! enable	- cmd=2
     &		130,			! contours      - cmd=3
     &		30,			! files		- cmd=4
     &		110,			! labelling	- cmd=6
     &		120,			! settings	- cmd=7
     &		100			! units		- cmd=9
     &			), CMD
C
C Command number out of range
	CALL WRITEF('%S Command not yet implemented',ERROR)
	SHOW_CMD=.FALSE.
	GOTO 140
C
C ......................................................................
C SHOW 
C
10	CALL WRITEF
	CALL WRITEF('%S Specifying command SHOW',ERROR)
	CALL WRITEF
	CALL WRITEF('Available SHOW command qualifiers are:')
	CALL WRITEF
	CALL WRITEF('CONTOURS     ENABLE        FILES     '//
     &			'LABELLING  SETTINGS    UNITS')
	GOTO 140
C
C
C ......................................................................
C ENABLE
20	CALL EXPAND('ABSOLUTE ....................'//
     &			'................................. ')
	IF (ABSOLUTE) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND('DIAGNOSTICS .................'//
     &			'................................. ')
	IF (HAD_DIAG) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('DIVIDEBY ...................'//
     &			'..................................')
	IF (DIVIDE) THEN
	   CALL WRTAPP(' On')
	   CALL WRITEF('Matrix heights to be divided by '//
     &			'.............................%F8.3 ',1./MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('FRAME ......................'//
     &			'..................................')
	IF (HAD_FRAME) THEN
	   CALL WRTAPP(' On')
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('INDEX ......................'//
     &			'..................................')
	IF (.NOT.DISABLED_INDEX) THEN
	   CALL WRTAPP(' On')
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('INTEGER_HEIGHT .............'//
     &			'.................................. ')
	IF (AC2HT) THEN
	   CALL WRTAPP ('On')
	   CALL WRITEF
     &	   ('(Contour heights will be placed in type 2 AC entries)')
	ELSE
	   CALL WRTAPP ('Off')
	   CALL WRITEF
     &	   ('(Contour heights will be placed in type 3 AC entries)')
	ENDIF
	CALL EXPAND
     &      ('LABELLING ..................'//
     &			'.................................. ')
	IF (DO_ANNO) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('MULTIPLY ..................'//
     &			'.................................. ')
	IF (MULT) THEN
	   CALL WRTAPP('On')
	   CALL WRITEF('Matrix heights to be multiplied by '//
     &			'..........................%F8.3 ',MFACTR)
	ELSE
	   CALL WRTAPP(' Off')
	ENDIF
	CALL EXPAND
     &      ('PME ........................'//
     &			'.................................. ')
	IF (PMEING) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND('SMOOTHING ..................'//
     &		'.................................. ')
	IF (SMTNUM.NE.0) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	IF (SMTNUM.NE.0) THEN
	   CALL WRITEF ('Number of smoothing '//
     &		'iterations................................ %N',SMTNUM)
	ENDIF
	CALL EXPAND
     &      ('SPOT_HEIGHTS ...............'//
     &			'.................................. ')
	IF (HAD_SPOT) THEN
	   CALL WRTAPP('On')
	   CALL WRITEF(
     &	   '(Single point contours to be output as spot heights)')
	ELSE
	   CALL WRTAPP('Off')
	   CALL WRITEF(
     &	   '(Single point contours to be omitted from output)')
	ENDIF
	CALL EXPAND
     &      ('TOFEET .....................'//
     &			'.................................. ')
	IF (M2FEET) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	CALL EXPAND
     &      ('TOMETRES ...................'//
     &			'.................................. ')
	IF (FEET2M) THEN
	   CALL WRTAPP('On')
	ELSE
	   CALL WRTAPP('Off')
	ENDIF
	GOTO 140
C
C ......................................................................
C FILES
30	CALL WRITEF('INPUT:')
	IF (DTILUN_INUSE(DTILUN)) THEN
	   CALL DTI_PRINT_HEADER(DTILUN,UNITS,ABSOLUTE)
	   IF (ZSET) THEN
	      CALL WRITEF('Z-limits are ZMIN = %F0.3  ZMAX = %F0.3',
     &					   ZWINMIN,       ZWINMAX)
	   ELSE
	      CALL WRITEF('Contours to be derived for whole DTI file '//
     &			'Z-range')
	   ENDIF
	ELSE
	   CALL WRITEF('DTI input file not yet specified')
	ENDIF
	CALL WRITEF
	CALL WRITEF('OUTPUT:')
	CALL WRITEF
	IF (IFFOPN) THEN
	   CALL WRITEF('IFF file:     %S',IFFFILE(:IFFLEN))
	   CALL WRITEF
C
C ......................................................................
C Tell user the IFF range and measurement system
C
	   GOTO (40,50,60,70,80), UNITS
C
C Grid rows and columns
40	   CALL WRITEF('IFF units are matrix rows and columns')
	   IF (DTI_WINDOW_NEX(DTILUN).GT.0.
     &     	AND.DTI_WINDOW_NEY(DTILUN).GT.0)
     &		CALL WRITEF('IFF range:   SW: %I5 %I5  NE: %I5 %I5',
     &  	DTI_WINDOW_SWX(DTILUN),
     &  	DTI_WINDOW_SWY(DTILUN),
     &  	DTI_WINDOW_NEX(DTILUN),
     &  	DTI_WINDOW_NEY(DTILUN))
	   GOTO 90
C ......................................................................
C Metres
50	   CALL WRITEF('IFF units are metres')
	   IF(ABSOLUTE)THEN
	      XOFF=X_OFFSET(DTILUN)
	      YOFF=Y_OFFSET(DTILUN)
	   ELSE
	      XOFF=0.0
	      YOFF=0.0
	   ENDIF
	   IF(DTI_WINDOW_NEX(DTILUN).GT.0.
     &     		AND.DTI_WINDOW_NEY(DTILUN).GT.0)
     &     CALL WRITEF
     &	   ('IFF range:   SW: %F10.2 %F10.2    NE: %F10.2 %F10.2',
     &     XOFF+((DTI_WINDOW_SWX(DTILUN)-1)*X_GRID(DTILUN)),
     &     YOFF+((DTI_WINDOW_SWY(DTILUN)-1)*Y_GRID(DTILUN)),
     &     XOFF+((DTI_WINDOW_NEX(DTILUN)-1)*X_GRID(DTILUN)),
     &	   YOFF+((DTI_WINDOW_NEY(DTILUN)-1)*Y_GRID(DTILUN)))
	   GOTO 90
C
C ......................................................................
C Seconds
60	   CALL WRITEF('IFF units are seconds')
	   IF(DTI_WINDOW_NEX(DTILUN).GT.0.
     &     AND.DTI_WINDOW_NEY(DTILUN).GT.0)
     &  CALL WRITEF
     &	('IFF range:    SW: %I10 %I10    NE: %I10 %I10',
     &	(LATREC(1,DTILUN)+(DTI_WINDOW_SWY(DTILUN)-1)
     &  *LATINT(DTILUN))/10,
     &  (LONREC(1,DTILUN)+(DTI_WINDOW_SWX(DTILUN)-1)
     &  *LONINT(DTILUN))/10,
     &	(LATREC(1,DTILUN)+(DTI_WINDOW_NEY(DTILUN)-1)
     &  *LATINT(DTILUN))/10,
     &	(LONREC(1,DTILUN)+(DTI_WINDOW_NEX(DTILUN)-1)
     &  *LONINT(DTILUN))/10) 
	   GOTO 90
C
C ......................................................................
C Degrees minutes seconds
70	   CALL WRITEF('IFF units are degrees, minutes, seconds')
	   CALL WRITEF
C	Convert values from tenths secs of arc
	   IF(DTI_WINDOW_NEX(DTILUN).GT.0.
     &     AND.DTI_WINDOW_NEY(DTILUN).GT.0)THEN
	      CALL EXPAND('IFF range:    SW: ')
	      CALL DTI_CVTANG(LATREC(1,DTILUN)+
     &    ((DTI_WINDOW_SWY(DTILUN)-1)*LATINT(DTILUN)),
     &	  NEGA,DEGR,MINU,SECO)
	      CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	      IF(NEGA)THEN
	         CALL APPEND('S  ')
	      ELSE
	         CALL APPEND('N  ')
	      ENDIF
C
	      CALL DTI_CVTANG(LONREC(1,DTILUN)+
     &    ((DTI_WINDOW_SWX(DTILUN)-1)*LONINT(DTILUN)),
     &	  NEGA,DEGR,MINU,SECO)
	      CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	      IF(NEGA)THEN
	         CALL APPEND('W  ')
	      ELSE
	         CALL APPEND('E  ')
	      ENDIF
C	  
	      CALL DTI_CVTANG(LATREC(1,DTILUN)
     &    +((DTI_WINDOW_NEY(DTILUN)-1)*LATINT(DTILUN)),
     &	  NEGA,DEGR,MINU,SECO)
	      CALL APPEND(' NE: ')
	      CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	      IF(NEGA)THEN
	         CALL APPEND('S  ')
	      ELSE
	         CALL APPEND('N  ')
	      ENDIF
C
	      CALL DTI_CVTANG(LONREC(1,DTILUN)
     &    +((DTI_WINDOW_NEX(DTILUN)-1)*LONINT(DTILUN)),
     &	  NEGA,DEGR,MINU,SECO)
	      CALL APPEND('%P %I3 %P0%I2 %P0%I2',DEGR,MINU,SECO)
	      IF(NEGA)THEN
	         CALL APPEND('W  ')
	      ELSE
	         CALL APPEND('E  ')
	      ENDIF
	      CALL TTWSTR
	   ENDIF
	   GOTO 90
C
C ......................................................................
C Projection units
80	   IF (DTIPROJ_SPHEROID(DTILUN).EQ.101.OR.
     &	   DTIPROJ_PROJECTION(DTILUN).EQ.22.AND.
     &     DTIPROJ_PROJ_PARAMS(4,DTILUN).GT.0.0) THEN
	      UNITS_TEXT(5)='projection units'
	   ELSE
	      UNITS_TEXT(5)='metres'
	   ENDIF
C
	   CALL WRITEF('IFF units are %S',
     &	            UNITS_TEXT(UNITS)(1:SIGCHS(UNITS_TEXT(UNITS))))
C
	   IF (ABSOLUTE)THEN
	      XOFF=DTIPROJ_ORIGIN(1,DTILUN)
	      YOFF=DTIPROJ_ORIGIN(2,DTILUN)
	   ELSE
	      XOFF=0.0
	      YOFF=0.0
	   ENDIF
C
	   IF (DTI_WINDOW_NEX(DTILUN).GT.0.
     &     AND.DTI_WINDOW_NEY(DTILUN).GT.0)
     &	CALL WRITEF
     &	('Contouring window SW: %F10.2 %F10.2    NE: %F10.2 %F10.2',
     &  XOFF+((DTI_WINDOW_SWX(DTILUN)-1)*DTIPROJ_SAMPLE(1,DTILUN)),
     &	YOFF+((DTI_WINDOW_SWY(DTILUN)-1)*DTIPROJ_SAMPLE(2,DTILUN)),
     &  XOFF+((DTI_WINDOW_NEX(DTILUN)-1)*DTIPROJ_SAMPLE(1,DTILUN)),
     &	YOFF+((DTI_WINDOW_NEY(DTILUN)-1)*DTIPROJ_SAMPLE(2,DTILUN)))
C
90	   CALL WRITEF
	ELSE
	   CALL WRITEF('IFF output file not yet specified')
	ENDIF
	GOTO 140
C
C ......................................................................
C UNITS
100	CALL WRITEF
	IF (UNITS.EQ.0) THEN
	   CALL WRITEF('UNITS .....................'//
     &			'................................. Unset')
	ELSE
	   CALL WRITEF('UNITS .....................'//
     &			'................ %S',UNITS_TEXT(UNITS))
	ENDIF
	GOTO 140
C
C ......................................................................
C LABELLING
110	IF (.NOT.DO_ANNO) THEN
	   CALL WRITEF(
     &		'Labelling is currently disabled. '//
     &			'Use the ENABLE LABELLING command to enable ')
	   CALL WRITEF('contour labelling.')
	ELSE
	   IF (DISABLED_INDEX) THEN	 
	      CALL WRITEF
     &      ('Modulus for contour labelling is %F',RINTR_MOD)
	   ELSE
	      CALL WRITEF
     &      ('Modulus for intermediate contour labelling is %F',
     &						RINTR_MOD)
	      CALL WRITEF
     &      ('Modulus for index contour labelling is %F',
     &						RINDX_MOD)
	   ENDIF
	   IF (DTILUN_INUSE(DTILUN).OR.RMINGAP.NE.0.0) THEN
	      CALL WRITEF
     &       ('Minimum gap between contour labels is %F',RMINGAP)
	   ELSE
	      CALL WRITEF(
     &	     'Minimum gap will be 10%% of DTI file maximum (x,y) range')
	   ENDIF
	   CALL WRITEF
     &     ('Maximum curvature for contour labelling is %F0.3',GRAD)
	   IF (DTILUN_INUSE(DTILUN).OR.LABLSIZE.NE.0.0) THEN
	      CALL WRITEF('Size of label characters is %F0.3',LABLSIZE)
	   ELSE
	      CALL WRITEF(
     &	     'Label size will be 1%% of DTI file maximum (x,y) range')
	   ENDIF
	   IF (NODECP) THEN
	      CALL WRITEF(
     &	     'Contour labels will be output as integer numbers')
	   ELSE
	      CALL WRITEF(
     &	     'Contour labels will be output as floating point numbers')
	   ENDIF
	ENDIF
	GOTO 140
C
C ......................................................................
C SETTINGS
C
120	CALL WRITEF
	CALL WRITEF('Feature code settings:')
	CALL WRITEF('      Contours.........................%^W%N'
     &							,CONTOUR_FC)
	CALL WRITEF('      Plot frame.......................%^W%N'
     &							,FRAME_FC)
	CALL WRITEF('      Index contour labels.............%^W%N'
     &							,INDEX_LAB_FC)
	CALL WRITEF('      Contour labels...................%^W%N'
     &							,CONT_LAB_FC)
	CALL WRITEF('      Index contours...................%^W%N'
     &							,INDEX_CONT_FC)
	CALL WRITEF('      Spot heights.....................%^W%N'
     &							,SPOT_FC)
	CALL WRITEF('      Spot height labels...............%^W%N'
     &							,SPOT_LAB_FC)
	CALL WRITEF
	CALL WRITEF('      Layer ...........................%^W%N'
     &							,LAYER)
	CALL WRITEF
	CALL WRITEF('      Scale ...........................%^D%F'
     &							,IFF_SCALE)
	CALL WRITEF
	GOTO 140
C
C ......................................................................
C CONTOURS
130	CALL WRITEF
	IF (HADZ) THEN
	   CALL WRITEF('Contour interval .........'//
     &			'.................................. %F0.3',ZGAP)
	ELSE
	   CALL WRITEF('Contour interval will be 10%% of DTI Z-range')
	ENDIF
	IF (DISABLED_INDEX) THEN
	   CALL WRITEF('Index contour generation suppressed')
	ELSE
	   IF (HADIZ) THEN
	      CALL WRITEF('Index contour interval ...'//
     &		'.................................. %F0.3',INDX_ZGAP)
	   ELSE
	      CALL WRITEF(
     &	      'Index contour interval will be 5 times the '//
     &			'intermediate contour interval')
	   ENDIF
	ENDIF
C
140	CALL WRITEF
	NOMESS=.FALSE.			! restore CMDLIB error reporting
	RETURN
	END
