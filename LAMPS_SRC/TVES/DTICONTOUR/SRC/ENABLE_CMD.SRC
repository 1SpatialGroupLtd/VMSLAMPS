C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-07 17:35:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ENABLE_CMD()
C
***	MODULE	ENABLE_CMD
***	IDENT	06MR89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Denominator for DIVIDEBY correctly output
C	when overriden by a later MULTIPLYBY		TJH 06-Mar-1989
CMOD	ENABLE ABSOLUTE command added			TJH 28-Nov-1988
C	Created						TJH 13-Oct-1987
C
C Function to set command switches 'on' eg ENABLE LABELLING. This
C replaces the grotty CMDLIB + or - mechanism and must be used in
C conjunction with function DISABLE for turning switches off again. 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
C
C Parameters:
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTICONTOUR:PARAMS.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNDTICONTOUR:ANNOT.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:IFCTRL.CMN'
	INCLUDE 'LSL$CMNDTICONTOUR:SMTCMN.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C Functions:
	LOGICAL 	LONGIN		! get integer argument
	LOGICAL  	RDCHS		! read character from line
	LOGICAL  	RDCH		! read character from line
	LOGICAL 	RDCOMM  	! read command from line
	LOGICAL 	REALIN  	! get real argument
	LOGICAL 	SMOOTH_CMD	! get ENABLE SMOOTH argument
C
C Command table:
	EXTERNAL	ENABLE_CMD_TABLE
	INTEGER		ENABLE_CMD_TABLE
C
C ......................................................................
C
	ENABLE_CMD=.TRUE.		! assume success
	NOMESS=.TRUE.			! turn off CMDLIB messages
C
	CMD=RDCOMM(ENABLE_CMD_TABLE)	! get command
	GOTO (
     &		10,	! error/nothing
     &		15,	! absolute
     &		20,	! labelling
     &		30,	! diagnostics
     &		40,	! divideby,r
     &		50,	! frame
     &		60,	! index
     &		70, 	! integer height
     &		80, 	! multiplyby,r
     &		90,	! pme
     &		100,	! spot_heights
     &		110,	! smooth
     &		120,	! tofeet
     &	        130	! tometres
     &			), CMD+1
C
C command number out of range
	CALL WRITEF('Command not yet implemented')
	ENABLE_CMD=.FALSE.
	GOTO 140
C
C ......................................................................
C DISABLE ?
C
10	CALL WRITEF
	CALL WRITEF('%S Specifying command ENABLE',ERROR)
	CALL WRITEF
	CALL WRITEF(
     &		'Available ENABLE command qualifiers are:')
	CALL WRITEF
	CALL WRITEF(
     &		'ABSOLUTE    DIAGNOSTICS   DIVIDEBY     '//
     &		'FRAME         INDEX      INTEGER_HEIGHT')
	CALL WRITEF(
     &		'LABELLING   MULTIPLYBY    PME          '//
     &		'SPOT_HEIGHTS  SMOOTH     TOFEET')
	CALL WRITEF(
     &		'TOMETRES')
	CALL WRITEF
	ENABLE_CMD=.FALSE.
	GOTO 140
C
C ......................................................................
C ENABLE ABSOLUTE
15	ABSOLUTE=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE LABELLING
20	DO_ANNO=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE DIAGNOSTICS
30	HAD_DIAG=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE DIVIDEBY 'real'
C
40	IF (MULT) THEN
	   CALL WRITEF(' ')
	   CALL WRITEF
     &	   ('%S You are already planning to multiply by %F8.3',
     &		WARNING				    ,MFACTR)
	   CALL WRITEF
     &     ('ENABLE DIVIDEBY command now overrides '//
     &	  			  'ENABLE MULTIPLYBY command')
	   MULT=.FALSE.
	ENDIF
	IF (CMDRCT.EQ.0) THEN
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a value for DIVIDEBY',
     &			WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a value for DIVIDEBY',
     &			ERROR)
	   ENDIF	   
	   CALL WRITEF('For example ENABLE DIVIDEBY 3.8')
	   IF (TTIN) THEN
	      ENABLE_CMD=REALIN('Divideby by what? ')
	      IF (.NOT.ENABLE_CMD) GOTO 140
	   ELSE
	      ENABLE_CMD=.FALSE.
	      GOTO 140
	   ENDIF	   
	ENDIF
	DIVIDE=.TRUE.
	MFACTR=1.0/REALAR(1)
	GOTO 140
C
C ......................................................................
C
C ENABLE FRAME
C
50	HAD_FRAME=.TRUE.
	GOTO 140
C ......................................................................
C
C ENABLE INDEX
C
60	DISABLED_INDEX=.FALSE.
	GOTO 140
C
C ......................................................................
C
C ENABLE INTEGER_HEIGHT
C
70	AC2HT=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE MULTIPLYBY 'real'
C
80	IF (DIVIDE) THEN
	   CALL WRITEF(' ')
	   CALL WRITEF('%S You are already planning to divide by %F8.3',
     &			WARNING				    ,1.0/MFACTR)
	   CALL WRITEF
     &     ('ENABLE MULTIPLYBY command now overrides '//
     &	  			  'ENABLE DIVIDEBY command')
	   DIVIDE=.FALSE.
	ENDIF
	IF (CMDRCT.EQ.0) THEN
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a value for MULTIPLYBY',
     &			WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a value for MULTIPLYBY',
     &			ERROR)
	   ENDIF	   
	   CALL WRITEF('For example ENABLE MULTIPLY 3.8')
	   IF (TTIN) THEN
	      ENABLE_CMD=REALIN('Multiply by what? ')
	      IF (.NOT.ENABLE_CMD) GOTO 140
	   ELSE
	      ENABLE_CMD=.FALSE.
	      GOTO 140
	   ENDIF	   
	ENDIF
C
	MULT=.TRUE.
	MFACTR=REALAR(1)
	GOTO 140
C
C ......................................................................
C ENABLE PME  - Performance monitor and evaluation
C
90	IF (PMEING) THEN
	   CALL WRITEF('%S You are already using PME !', WARNING)
	ELSE
	   CALL PME_INIT
	   PMEING=.TRUE.
	ENDIF
	GOTO 140
C
C ......................................................................
C
C ENABLE SPOT_HEIGHTS
C
100	HAD_SPOT=.TRUE.
	GOTO 140
C
C ......................................................................
C
C ENABLE SMOOTH 'iterations'
C
110	IF (.NOT.SMOOTH_CMD()) THEN
	   ENABLE_CMD=.FALSE.
	ENDIF	
	GOTO 140
C
C ......................................................................
C ENABLE TOFEET
C
120	M2FEET=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE TOMETRES
C
130	FEET2M=.TRUE.
C
140	NOMESS=.FALSE.
	RETURN
	END
