C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-12 18:03:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CAL_ABS_POS(PLOT_X,PLOT_Y,REL_X,REL_Y,
     &  SWX,SWY,NEX,NEY,COLUMN,ROW)
C
***	MODULE	CAL_ABS_POS
**	IDENT	12JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	relative coords also returned		       MWSR 09-Jan-1988
CMOD    all types of units catered for		       MWSR 09-Jan-1988
C	Created						ALB 29-Jun-1988
C
C DTICHECK function to calculate the absolute position either in metre
C in a cartessian coordinate frame or seconds of arc.
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNDTICHECK:PARAMS.PAR'
C
C Common:
C
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTI:DTIPROJ.CMN'
	INCLUDE	'LSL$CMNDTICHECK:COMMAND.CMN'
C
C Arguments
C
	REAL*8		PLOT_X		! OUT absolute x position
	REAL*8		PLOT_Y		! OUT absolute y position
	REAL*4		REL_X		! OUT relative x
	REAL*4		REL_Y		! OUT relative y
	REAL*4		SWX		! OUT - sw corner of pixel 
	REAL*4		SWY		! OUT 
	REAL*4		NEX		! OUT - ne corner of pixel
	REAL*4		NEY		! OUT
	INTEGER		COLUMN		! IN col number in matrix units
	INTEGER		ROW		! IN row number in matrix units
C
C locals
	REAL*4		XX		
	REAL*4		YY		
	REAL*4		X_POS, Y_POS
C ......................................................................
C
	CAL_ABS_POS = .TRUE.		! assume success
	X_POS = COLUMN-DTI_WINDOW_SWX(1)
	Y_POS = ROW-DTI_WINDOW_SWY(1)
C
C ......................................................................
C
C Convert the current matrix numbers to plot units
C
	IF ( PLOT_UNITS .EQ. 1 ) THEN		! matrix
	   REL_X= X_POS
	   REL_Y = Y_POS
	   SWX = REL_X-0.5
	   SWY = REL_Y-0.5
	   NEX = REL_X+0.5
	   NEY = REL_Y+0.5
	   PLOT_X = DBLE(COLUMN)
	   PLOT_Y = DBLE(ROW)
C
	ELSEIF (PLOT_UNITS .EQ. 2) THEN		! metres
C
	   XX =  (COLUMN-1)*X_GRID(1)
	   YY =  (ROW-1)*Y_GRID(1)
	   REL_X = X_POS*X_GRID(1)
	   REL_Y = Y_POS*Y_GRID(1)
	   SWX = (X_POS-0.5)*X_GRID(1)	   
	   SWY = (Y_POS-0.5)*Y_GRID(1)	   
	   NEX = (X_POS+0.5)*X_GRID(1)
	   NEY = (Y_POS+0.5)*Y_GRID(1)
	   PLOT_X = DBLE(XX) + DBLE(X_OFFSET(1))
	   PLOT_Y = DBLE(YY) + DBLE(Y_OFFSET(1))
C
	ELSEIF ( PLOT_UNITS .EQ. 3 .OR. PLOT_UNITS .EQ. 4) THEN
C
C Seconds of arc
C
	   XX = (COLUMN-1)*LONINT(1)
	   YY = (ROW-1)*LATINT(1)
	   REL_X = (X_POS)*LONINT(1)
	   REL_Y = (Y_POS)*LATINT(1)
	   PLOT_X = DBLE(XX) + DBLE(LONREC(1,1))
	   PLOT_Y = DBLE(YY) + DBLE(LATREC(1,1))
	   SWX = (X_POS-0.5)*LONINT(1)
	   SWY = (Y_POS-0.5)*LATINT(1)
	   NEX = (X_POS+0.5)*LONINT(1)
	   NEY = (Y_POS+0.5)*LATINT(1)
C
	ELSE
C
C projection units
	   XX = (COLUMN-1)*DTIPROJ_SAMPLE(1,1)
	   YY = (ROW-1)*DTIPROJ_SAMPLE(2,1)
	   PLOT_X = DBLE(XX) + DTIPROJ_ORIGIN(1,1)
	   PLOT_Y = DBLE(YY) + DTIPROJ_ORIGIN(2,1)
	   REL_X = X_POS*DTIPROJ_SAMPLE(1,1)
	   REL_Y = Y_POS*DTIPROJ_SAMPLE(2,1)
	   SWX = (X_POS-0.5)*DTIPROJ_SAMPLE(1,1)
	   SWY = (Y_POS-0.5)*DTIPROJ_SAMPLE(2,1)
	   NEX = (X_POS+0.5)*DTIPROJ_SAMPLE(1,1)
	   NEY = (Y_POS+0.5)*DTIPROJ_SAMPLE(2,1)
	ENDIF
C
	RETURN
	END
