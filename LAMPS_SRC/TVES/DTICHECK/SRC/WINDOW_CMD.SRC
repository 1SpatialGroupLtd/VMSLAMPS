C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-09 14:04:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION WINDOW_CMD()
C
***	MODULE	WINDOW_CMD
***	IDENT	09JA89
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
CMOD	Absolute coords and projection units added     MWSR 09-Jan-1989
CMOD	Changed for DTICHECK				DJG 03-Mar-1988
CMOD	Changed for DTICONTOUR				TJH 14-Oct-1987
C	Author    : D R Catlow
C	
C	Function to set the area of interest in the input DTM.
C	The routine interpretes the command line according to the
C	current UNITS setting.
C	The function checks that the window values are senisble,
C	and truncates if they fall outside the DTM bounds.
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE 'LSL$CMNDTICHECK:PARAMS.PAR'	
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'	
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'		! DTILIB common
C	
C Common:
C
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'		! DTILIB common
	INCLUDE 'LSL$CMNDTI:DTIPROJ.CMN'	! DTILIB common
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! DTILIB common
	INCLUDE 'LSL$CMNDTICHECK:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICHECK:FILES.CMN'
C
C W/s
C
	INTEGER*4	X1,Y1,X2,Y2	! window values in matrix units
	INTEGER*4	LLDEGS(4)	! window values in seconds
	REAL	   	FIVEP		! 5% of max DTI range
C
C Function
C
	LOGICAL		READLL		! reads lat/long
C
C ......................................................................
C
	WINDOW_CMD=.TRUE.		! assume success
	IF (.NOT.DTIOPN) THEN		! no file opened?
	   CALL WRITEF(
     &	        '%S You must use the FILEIN command to '//
     &			'open the DTI file first',ERROR)
	   GOTO 60
	ENDIF
C
C If there are not 4 numbers following the command, exit
C
	IF (CMDRCT.NE.4) THEN
	   CALL WRITEF('%S specifying DTI window',ERROR)
	   CALL WRITEF
     &	  ('Command requires 2 x,y coordinate pairs (SW and NE)')
	   GOTO 60
	ENDIF
C
C Process window according to currently set UNITS
C
	GOTO (10,20,30,40,50) UNITS
C
C----------------------------------------------------------------------
C	Matrix units
C
10	X1=NINT(REALAR(1))
	Y1=NINT(REALAR(2))
	X2=NINT(REALAR(3))
	Y2=NINT(REALAR(4))
	GOTO 50
C
C----------------------------------------------------------------------
C	Metres
C
20	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-X_OFFSET(DTILUN))/X_GRID(DTILUN))+1
	   Y1=NINT((REALAR(2)-Y_OFFSET(DTILUN))/Y_GRID(DTILUN))+1
	   X2=NINT((REALAR(3)-X_OFFSET(DTILUN))/X_GRID(DTILUN))+1
	   Y2=NINT((REALAR(4)-Y_OFFSET(DTILUN))/Y_GRID(DTILUN))+1
	ELSE
	   X1=NINT(REALAR(1)/X_GRID(DTILUN))+1
	   Y1=NINT(REALAR(2)/Y_GRID(DTILUN))+1
	   X2=NINT(REALAR(3)/X_GRID(DTILUN))+1
	   Y2=NINT(REALAR(4)/Y_GRID(DTILUN))+1
	ENDIF
	GOTO 50
C
C-----------------------------------------------------------------------
C	Seconds
C
30	Y1=NINT((REALAR(1)-LATORI(DTILUN))*10)
	X1=NINT((REALAR(2)-LONORI(DTILUN))*10)
	Y2=NINT((REALAR(3)-LATORI(DTILUN))*10)
	X2=NINT((REALAR(4)-LONORI(DTILUN))*10)
	X1=((X1-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	Y1=((Y1-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	X2=((X2-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	Y2=((Y2-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	GOTO 50
C
C-----------------------------------------------------------------------
C	Degrees, Minutes & Seconds
C	Call READLL to convert to .1 seconds
C
40	IF (READLL(LLDEGS,4)) THEN
	   CALL WRITEF('%S specifying DTI window',ERROR)
	   CALL WRITEF('Unable to use supplied LATLONG values')
	   GOTO 60
	ELSE
	   Y1=(LLDEGS(1)-LATORI(DTILUN))*10
	   X1=(LLDEGS(2)-LATORI(DTILUN))*10
	   Y2=(LLDEGS(3)-LATORI(DTILUN))*10
	   X2=(LLDEGS(4)-LATORI(DTILUN))*10
	   X1=((X1-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	   Y1=((Y1-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	   X2=((X2-LONREC(1,DTILUN))/LONINT(DTILUN))+1
	   Y2=((Y2-LATREC(1,DTILUN))/LATINT(DTILUN))+1
	ENDIF
	GOTO 50
C
C-----------------------------------------------------------------------
C projection units
45	CONTINUE
	IF (HAD_ABSOLUTE) THEN 
	   X1=NINT((REALAR(1)-DTIPROJ_ORIGIN(1,DTILUN))
     &             /DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y1=NINT((REALAR(2)-DTIPROJ_ORIGIN(2,DTILUN))
     &             /DTIPROJ_SAMPLE(2,DTILUN))+1
	   X2=NINT((REALAR(3)-DTIPROJ_ORIGIN(1,DTILUN))
     &             /DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y2=NINT((REALAR(4)-DTIPROJ_ORIGIN(2,DTILUN))
     &             /DTIPROJ_SAMPLE(2,DTILUN))+1
	ELSE
	   X1=NINT(REALAR(1)/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y1=NINT(REALAR(2)/DTIPROJ_SAMPLE(2,DTILUN))+1
	   X2=NINT(REALAR(3)/DTIPROJ_SAMPLE(1,DTILUN))+1
	   Y2=NINT(REALAR(4)/DTIPROJ_SAMPLE(2,DTILUN))+1
	ENDIF
	GOTO 50
C----------------------------------------------------------------------
C
C	Are the window values sensible?
C	Does the NE coordinate exceed the SW coordinate
C
50	IF (X2.LE.X1.OR.Y2.LE.Y1) THEN
	   CALL WRITEF('%S ERROR specifying DTI window',ERROR)
	   CALL WRITEF
     &    ('NE coordinates should exceed SW coordinates')
	   GOTO 60
	ENDIF
C
C	Do the values need truncating?
C
	IF (X1.GT.X_EXTENT(DTILUN).OR.X1.LT.1.OR.
     &	   X2.GT.X_EXTENT(DTILUN).OR.X2.LT.1.OR.
     &	   Y1.GT.Y_EXTENT(DTILUN).OR.Y2.LT.1.OR.
     &	   Y2.GT.Y_EXTENT(DTILUN).OR.Y2.LT.1) THEN
	   CALL WRITEF
     &	   ('%S Specified window exceeds matrix limits',WARNING)
	   CALL WRITEF
     &	   ('                Window will be truncated to fit')
C
	   X1=MAX(1,MIN(X1,X_EXTENT(DTILUN)))
	   X2=MAX(1,MIN(X2,X_EXTENT(DTILUN)))
	   Y1=MAX(1,MIN(Y1,Y_EXTENT(DTILUN)))
	   Y2=MAX(1,MIN(Y2,Y_EXTENT(DTILUN)))
	ENDIF
C
C	Transfer to the DTI common block variables
C
	DTI_WINDOW_SWX(DTILUN) = X1
	DTI_WINDOW_SWY(DTILUN) = Y1
	DTI_WINDOW_NEX(DTILUN) = X2	
	DTI_WINDOW_NEY(DTILUN) = Y2
C
C
C Get percentage of DTI (x,y) range for MINGAP and LABEL_SIZE defaults
C
	CALL FIVE_PERCENT(FIVEP)
	IF (LABLSIZE.EQ.0.0) LABLSIZE=FIVEP/10.0
	IF (RMINGAP.EQ.0.0) RMINGAP=FIVEP*2.0
C
C Set flag to say that the user has defined a window
C
	WINSET=.TRUE.
	GOTO 70
C
C----------------------------------------------------------------------
C
60	WINDOW_CMD=.FALSE.
70	RETURN
	END
