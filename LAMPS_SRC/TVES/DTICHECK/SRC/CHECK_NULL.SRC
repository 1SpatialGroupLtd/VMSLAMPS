	LOGICAL FUNCTION CHECK_NULL()
C
***	MODULE	CHECK_NULL
**	IDENT	10JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	CAL_ABS_POS returns relative coords aswell     MWSR 09-Jan-1989
C 	Modified to make more modular 			ALB 28-Jun-1988
C       Modified for DTICHECK                           DJG 03-Mar-1988
C	Created						TJH 23-Jul-1987
C
C DTICHECK function to CHECK a DTI file column for a user specifed null
C value ( NULL_VAL ). If this is found, the function
C in one or all of the following ways :
C 1) As a diagnostic message to the terminal ( if HAD_DIAG = true )
C 2) By drawing a box around the point in an IFF file ( if IFFOPN = true )
C 3) By entering commands in a LITES2 command file ( if LITES2OPN = true )
C 4) By entering commands in a ROVER command file ( if ROVEROPN = true )
C If there are a number of consecutive DTI file points with null values,
C a run-length encoded message is recorded.
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNDTICHECK:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTI:DTIDEF.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
C
C Common:
C
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTICHECK:COMMAND.CMN'
	INCLUDE	'LSL$CMNDTICHECK:FILES.CMN'
C
C W/s
C
	INTEGER		I, J, II, JJ
	LOGICAL		BRC_BUILDING_RUN_CODE	! whether building a run
	LOGICAL		OK			! return code
	LOGICAL		DTI_FAULT		!
	REAL		MRK_ST(2,5)		!
	INTEGER*2	ISQ			!
	INTEGER*2	MRK_FC			!
	INTEGER*2	ISTAT(4)		!
	REAL*8		START_XPOS		! Start absolute x coordinate 
	REAL*8		END_XPOS		! End absolute x coordinate 
	REAL*8		START_YPOS		! Start absolute y coordinate 
	REAL*8		END_YPOS		! End absolute y coordinate 
	REAL*4	        START_REL_X		! relative of above
	REAL*4		START_REL_Y
	REAL*4		END_REL_X
	REAL*4		END_REL_Y
	REAL*4		START_SWX,START_SWY,START_NEX,START_NEY
	REAL*4		END_SWX,END_SWY,END_NEX,END_NEY
C
C Functions
C
	LOGICAL		CAL_ABS_POS		! calculate plot position
C
C ......................................................................
C
	CHECK_NULL = .TRUE.		! assume success
	BRC_BUILDING_RUN_CODE = .FALSE.
C
C Process the column of the DTI file
C
C
	DO 100 I = 1,NROWS
C
  	   II = (DTI_WINDOW_SWY(1) + I - 1 )   	! II is the local window counter
	   DTI_FAULT = .FALSE.			! whether the null detected
C
C Check each DTI point for a null value for each of the 4 possible data types
C
	   IF ( DATA_TYPE(DTILUN) .EQ. DATA_BYTE) THEN
	      IF(UNSIGNED_WORD_COL(I).EQ.NULL_BYTE_VAL ) THEN
		 DTI_FAULT = .TRUE.
	      ENDIF
	   ENDIF
C
	   IF ( DATA_TYPE(DTILUN) .EQ. DATA_WORD) THEN
	      IF(WORD_COL(I) .EQ. NULL_WORD_VAL ) THEN
		 DTI_FAULT = .TRUE.
	      ENDIF
	   ENDIF
C
	   IF ( DATA_TYPE(DTILUN) .EQ. DATA_LONG) THEN	
	      IF(LONG_COL(I) .EQ. NULL_LONG_VAL ) THEN
		 DTI_FAULT = .TRUE.
	      ENDIF
	   ENDIF
C
	   IF ( DATA_TYPE(DTILUN) .EQ. DATA_REAL) THEN
	      IF(REAL_COL(I) .EQ. NULL_REAL_VAL ) THEN
		 DTI_FAULT = .TRUE.
	      ENDIF
	   ENDIF
C
C If a null value has been detected, and the previous value was not an error,
C then start building a run-length encoded message
C
	   IF ( DTI_FAULT .EQ. .TRUE. ) THEN
	      IF ( BRC_BUILDING_RUN_CODE .AND. I .NE. NROWS ) THEN 
		 GOTO 100
	      ELSE
		 BRC_BUILDING_RUN_CODE = .TRUE.
		 J =  I
		 JJ = II
	      ENDIF
	   ENDIF
C
C If this point is not an error but the last point was, then end the
C run length encoded message, and record the information.
C
	   IF ( ( DTI_FAULT .EQ. .FALSE. .OR. I .EQ. NROWS ) .AND.
     &	        BRC_BUILDING_RUN_CODE .EQ. .TRUE. ) THEN 
C
	      BRC_BUILDING_RUN_CODE = .FALSE.
C
C Call function to convert the current DTI matrix numbers ( II, JJ, COLNO ) 
C into absolute plot position
C
	      OK = CAL_ABS_POS
     &        (START_XPOS,START_YPOS,START_REL_X,START_REL_Y,
     &         START_SWX,START_SWY,START_NEX,START_NEY,COLNO,JJ)
	      OK = CAL_ABS_POS
     &        (END_XPOS,END_YPOS,END_REL_X,END_REL_Y,
     &         END_SWX,END_SWY,END_NEX,END_NEY,COLNO,(II-1))
C
C If the number of points in the run code is 1, output the message as
C a single point error
C
	      IF ( (II - JJ) .LE. 1 ) THEN
C
		 IF ( HAD_DIAG ) THEN
	            CALL WRITE_MESS(
     &		    'Null value at : ',16,
     &		    COLNO,JJ,0,0,SINGLE_POINT)
		 ENDIF
C
		 IF ( LITES2OPN .EQ. .TRUE. ) THEN
	            CALL LITES_MESS(
     &		    'Null value at : ',16,
     &		    START_XPOS,START_YPOS,END_XPOS,END_YPOS,
     &		    SINGLE_POINT)
		 ENDIF
C
		 IF ( ROVEROPN .EQ. .TRUE. ) THEN
	            CALL ROVER_MESS(
     &		    'Null value at : ',16,
     &		    COLNO,JJ,0,0,SINGLE_POINT)
		 ENDIF
C
	      ELSE		! if the error is to be run-length encoded
C
		 IF ( HAD_DIAG ) THEN
	            CALL WRITE_MESS(
     &		    'Null values between : ',22,
     &		    COLNO,JJ,COLNO,(II-1),RANGE_OF_POINTS)
		 ENDIF
C
		 IF ( LITES2OPN .EQ. .TRUE. ) THEN
	            CALL LITES_MESS(
     &		    'Null values between : ',22,
     &		    START_XPOS,START_YPOS,END_XPOS,END_YPOS,
     &		    RANGE_OF_POINTS)
		 ENDIF
		 IF ( ROVEROPN .EQ. .TRUE. ) THEN
	            CALL ROVER_MESS(
     &		    'Null values between : ',22,
     &		    COLNO,JJ,COLNO,(II-1),RANGE_OF_POINTS)
		 ENDIF
C
	      ENDIF
C
C If an IFF file is open, draw a box in the file around the point(s) in error
C
	      IF ( IFFOPN .EQ. .TRUE. ) THEN
		 CALL IFFSEL ( IFFLUN )
		 ISQ      = 0
		 MRK_FSN  = MRK_FSN + 1
		 MRK_FC   = NULL_FC
		 ISTAT(1) = MRK_FC
C
		 MRK_ST(1,1) = START_SWX 	! bottom left
		 MRK_ST(2,1) = START_SWY 
		 MRK_ST(1,2) = END_NEX 	! bottom right
		 MRK_ST(2,2) = START_SWY 	!
		 MRK_ST(1,3) = END_NEX 	! top right
		 MRK_ST(2,3) = END_NEY 		!
		 MRK_ST(1,4) = START_SWX 	! top left
		 MRK_ST(2,4) = END_NEY 	!
		 MRK_ST(1,5) = START_SWX 	! bottom left
		 MRK_ST(2,5) = START_SWY 	!     again
C
		 CALL IFFNF ( MRK_FSN, ISQ ) 
		 CALL IFFFS ( ISTAT )
		 CALL IFFST ( MRK_ST, 5, 0 )
		 CALL IFFEF
C
	      ENDIF
C
	   ENDIF
C
100	CONTINUE
C
	RETURN
	END
