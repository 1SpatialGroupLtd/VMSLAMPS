C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-10 18:44:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GO_CMD()
C
***	MODULE	GO_CMD
***	IDENT	10JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	IFF setup put into separate routine	     MWSR 09-Jan-1988
CMOD	Corener tick stuff rationalised		     MWSR 09-Jan-1988
C       Createdfor DTICHECK                           DJG 03-Mar-1988
C
C Function to check a DTI file for any of the enabled checking functions,
C SLOPE, MINUS, NULL, ZERO. The file is checked one column at a time, one
C function at a time. The results form each function are put into a
C different IFF layer.
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
C
	BYTE		CH	! a character
	LOGICAL		OK,IERR	! for error returns
	REAL		RANGE(4)
	REAL		CFT(10,2)
	REAL		CPARRY(4,4)
	REAL		MRK_ST(2,3)
	INTEGER*2	ISQ, ISTAT(4)
	INTEGER		LPOSNO
	INTEGER		CMD     	! decoded command number
	INTEGER		I, J
	REAL*4		XPOS,YPOS
	REAL*8		DUM1,DUM2
	REAL*4		SWX,SWY,NEX,NEY
C
C Functions:
C
	LOGICAL		GETCOL		! Get a column of data
	LOGICAL		CHECK_SLOPE	! Whether to check the DTI file
	LOGICAL		CHECK_MINUS	!  for > max slope, minus values,
	LOGICAL		CHECK_NULL	!  null values or zero values
	LOGICAL		CHECK_ZERO	!
	LOGICAL		IFFCREATE	! read from TT:
C
C Command table:
C
C
C Parameters:
C
	INCLUDE	'LSL$CMNDTICHECK:PARAMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common:
C
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNIFF:MHDEF.CMN'
	INCLUDE 'LSL$CMNDTICHECK:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICHECK:FILES.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C ......................................................................
C
	DATA CFT/0,1,0,7*0,0,0,1,7*0/
	MATV2   = 2			! map descriptor = type 2
	GO_CMD=.TRUE.			! assume success
	NOMESS=.TRUE.			! turn off CMDLIB messages
C

	IF ( .NOT. HAD_IFF ) GOTO 5
C
C Try to open the IFF file
C
	OK=IFFCREATE(IFFLUN,IFFFILE(1:IFFLEN),,,.TRUE.)
	IF (.NOT.OK) THEN
	   IFFOPN = .FALSE.
	   GOTO 200
	ENDIF	
C
C Write header data into IFF file
C
	IFFOPN=.TRUE.
	CALL SETUP_IFF(1)
C
	LPOSNO = LPOSE
	CALL IFFNO  ( 0, 0, 0 )
	MRK_FSN = 0
C
C Write 4 registration marks into layer 1, fc 0
C
C Bottom left :
C
	ISTAT(1) = 0
	ISQ      = 0
	MRK_FSN  = MRK_FSN + 1
	CALL CAL_ABS_POS
     &        (DUM1,DUM2,XPOS,YPOS,
     &         SWX,SWY,NEX,NEY,DTI_WINDOW_SWX(1),DTI_WINDOW_SWY(1))
	MRK_ST(1,1) = NEX
	MRK_ST(2,1) = SWY
	MRK_ST(1,2) = SWX
	MRK_ST(2,2) = SWY
	MRK_ST(1,3) = SWX
	MRK_ST(2,3) = NEY
	CALL IFFNF ( MRK_FSN, ISQ )
	CALL IFFFS ( ISTAT )
	CALL IFFST ( MRK_ST, 3, 0 )
	CALL IFFEF
C
C Top left 
C
	ISQ      = 0
	MRK_FSN  = MRK_FSN + 1
	CALL CAL_ABS_POS
     &        (DUM1,DUM2,XPOS,YPOS,SWX,SWY,NEX,NEY,
     &         DTI_WINDOW_SWX(1),DTI_WINDOW_NEY(1))
	MRK_ST(1,1) = NEX
	MRK_ST(2,1) = NEY
	MRK_ST(1,2) = SWX
	MRK_ST(2,2) = NEY
	MRK_ST(1,3) = SWX
	MRK_ST(2,3) = SWY
	CALL IFFNF ( MRK_FSN, ISQ )
	CALL IFFFS ( ISTAT )
	CALL IFFST ( MRK_ST, 3, 0 )
	CALL IFFEF
C
C Top right
C
	ISQ      = 0
	MRK_FSN  = MRK_FSN + 1
	CALL CAL_ABS_POS
     &        (DUM1,DUM2,XPOS,YPOS,SWX,SWY,NEX,NEY,
     &         DTI_WINDOW_NEX(1),DTI_WINDOW_NEY(1))
	MRK_ST(1,1) = SWX
	MRK_ST(2,1) = NEY
	MRK_ST(1,2) = NEX
	MRK_ST(2,2) = NEY
	MRK_ST(1,3) = NEX
	MRK_ST(2,3) = SWY
	CALL IFFNF ( MRK_FSN, ISQ )
	CALL IFFFS ( ISTAT )
	CALL IFFST ( MRK_ST, 3, 0 )
	CALL IFFEF
C
C Bottom right
C
	ISQ      = 0
	MRK_FSN  = MRK_FSN + 1
	CALL CAL_ABS_POS
     &        (DUM1,DUM2,XPOS,YPOS,SWX,SWY,NEX,NEY,
     &        DTI_WINDOW_NEX(1),DTI_WINDOW_SWY(1))
	MRK_ST(1,1) = NEX
	MRK_ST(2,1) = NEY
	MRK_ST(1,2) = NEX
	MRK_ST(2,2) = SWY
	MRK_ST(1,3) = SWX
	MRK_ST(2,3) = SWY
	CALL IFFNF ( MRK_FSN, ISQ )
	CALL IFFFS ( ISTAT )
	CALL IFFST ( MRK_ST, 3, 0 )
	CALL IFFEF
C
	CALL IFFUNO ( LPOSNO )
	CALL IFFEO
C
C-------------------------------------------------------------------------
C
5	IF ( .NOT. DTIOPN ) THEN
	   CALL WRITEF ('%S DTI file not yet specified',ERROR)
	   GOTO 200
	ENDIF
C
	IF ( .NOT. SLOPE .AND. .NOT. MINUS .AND.
     &       .NOT. NULL  .AND. .NOT. ZERO         ) THEN
	   CALL WRITEF ('%S No CHECKS have been ENABLED',ERROR)
	   GOTO 200
	ENDIF
C
	IF ( .NOT. IFFOPN    .AND. 
     &       .NOT. LITES2OPN .AND. .NOT. ROVEROPN ) THEN
	   HAD_DIAG = .TRUE.
	ENDIF
C
	NROWS = ( DTI_WINDOW_NEY(1) - DTI_WINDOW_SWY(1) + 1 )
C
C If checking slope values, write diagnostic message to TT, read a column
C from the DTI file (GETCOL) and check it for the number of cols there are
C in the file. End the IFF overlay at the end of the function.
C
	IF ( SLOPE ) THEN
	   IF ( IFFOPN ) THEN
	      LPOSNO = LPOSE
	      CALL IFFNO ( LAYER, 0, 0 )
	   ENDIF
	   IF ( HAD_DIAG ) CALL WRITEF ('Checking DTI file for SLOPE')
	   DO 100 COLNO = DTI_WINDOW_SWX(1), DTI_WINDOW_NEX(1)
   	      CALL GETCOL
	      CALL CHECK_SLOPE
100	   CONTINUE
	   IF ( IFFOPN ) THEN
	      CALL IFFUNO(LPOSNO)
	      CALL IFFEO
	   ENDIF
	ENDIF
C
	IF ( MINUS ) THEN
	   IF ( IFFOPN ) THEN
	      LPOSNO = LPOSE
	      CALL IFFNO ( LAYER, 0, 0 )
	   ENDIF
	   IF ( HAD_DIAG ) CALL WRITEF ('Checking DTI file for MINUS values')
	   DO 110 COLNO = DTI_WINDOW_SWX(1), DTI_WINDOW_NEX(1)
   	      CALL GETCOL
	      CALL CHECK_MINUS
110	   CONTINUE
	   IF ( IFFOPN ) THEN
	      CALL IFFUNO(LPOSNO)
	      CALL IFFEO
	   ENDIF
	ENDIF
C
	IF ( NULL ) THEN
	   IF ( IFFOPN ) THEN
	      LPOSNO = LPOSE
	      CALL IFFNO ( LAYER, 0, 0 )
	   ENDIF
	   IF ( HAD_DIAG ) CALL WRITEF ('Checking DTI file for NULL values')
	   DO 120 COLNO = DTI_WINDOW_SWX(1), DTI_WINDOW_NEX(1)
   	      CALL GETCOL
	      CALL CHECK_NULL
120	   CONTINUE
	   IF ( IFFOPN ) THEN
	      CALL IFFUNO(LPOSNO)
	      CALL IFFEO
	   ENDIF
	ENDIF
C
	IF ( ZERO ) THEN
	   IF ( IFFOPN ) THEN
	      LPOSNO = LPOSE
	      CALL IFFNO ( LAYER, 0, 0 )
	   ENDIF
	   IF ( HAD_DIAG ) CALL WRITEF ('Checking DTI file for ZERO values')
	   DO 130 COLNO = DTI_WINDOW_SWX(1), DTI_WINDOW_NEX(1)
   	      CALL GETCOL
	      CALL CHECK_ZERO
130	   CONTINUE
	   IF ( IFFOPN ) THEN
	      CALL IFFUNO(LPOSNO)
	      CALL IFFEO
	   ENDIF
	ENDIF
C
C If an IFF output file is open, then put END MAP and END JOB markers in the 
C file as this is more or less the end of DTICHECK.
C
	IF ( IFFOPN ) THEN
	   CALL IFFEM
	   CALL IFFEJ
	ENDIF
C
200     CONTINUE
	RETURN
	END
