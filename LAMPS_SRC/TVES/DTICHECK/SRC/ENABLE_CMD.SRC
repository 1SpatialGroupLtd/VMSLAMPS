C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-09 14:53:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ENABLE_CMD()
C
***	MODULE	ENABLE_CMD
**	IDENT	09JA89
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	ENABLE ABSOLUTE added			       MWSR 09-Jan-1989
C       Modified for DTICHECK                           DJG 03-Mar-1988
C	Created						TJH 13-Oct-1987
C
C Function to set command switches 'on' eg ENABLE DIAGNOSTICS.
C Function DISABLE is used to turn switches off again. 
C
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNDTICHECK:PARAMS.PAR'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'		!DTILIB parameters
C
C Common blocks:
C
	INCLUDE 'LSL$CMNDTICHECK:COMMAND.CMN'
	INCLUDE 'LSL$CMNDTICHECK:FILES.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'		!DTILIB common
C
C W/s
C
	BYTE		CH	! for use with RDCHS
	INTEGER		CMD     ! decoded command number
C
C Functions:
C
	LOGICAL 	LONGIN		! get integer argument
	LOGICAL  	RDCHS		! read character from line
	LOGICAL  	RDCH		! read character from line
	LOGICAL 	RDCOMM  	! read command from line
	LOGICAL 	REALIN  	! get real argument
C
C Command table:
C
	EXTERNAL	ENABLE_CMD_TABLE
	INTEGER		ENABLE_CMD_TABLE
C
C ......................................................................
C
	ENABLE_CMD = .TRUE.			! assume success
	NOMESS     = .TRUE.			! turn off CMDLIB messages
C
	CMD=RDCOMM(ENABLE_CMD_TABLE)	! get command
	GOTO (
     &		10,			! error
     &		20,			! diagnostics
     &		30,			! pme
     &		40,			! slope
     &		50,			! minus
     &		60,			! null
     &		70,			! zero
     &          80			! absolute
     &			), CMD+1
C
C
C
10	CALL WRITEF
	   CALL WRITEF('%S specifying enable parameter',ERROR)
           CALL WRITEF(
     &		'Available ENABLE command qualifiers are:')
	   CALL WRITEF
	   CALL WRITEF ('ABSOLUTE  DIAGNOSTICS     PME     '//
     &                  'SLOPE     MINUS     NULL     ZERO')
	   CALL WRITEF
	   ENABLE_CMD=.FALSE.
	GOTO 140
C
C ......................................................................
C ENABLE DIAGNOSTICS
C
20	HAD_DIAG=.TRUE.
	GOTO 140
C
C ......................................................................
C ENABLE PME  - Performance monitor and evaluation
C
30	IF (PMEING) THEN
	   CALL WRITEF('%S You are already using PME !', WARNING)
	ELSE
	   CALL PME_INIT
	   PMEING=.TRUE.
	ENDIF
	GOTO 140
C
C ......................................................................
C ENABLE SLOPE CHECKING
C
40	SLOPE = .TRUE.
	GOTO 140
C
C
C ......................................................................
C ENABLE MINUS CHECKING
C
50	MINUS = .TRUE.
	GOTO 140
C
C
C ......................................................................
C ENABLE NULL CHECKING
C
60	NULL = .TRUE.
	GOTO 140
C
C
C ......................................................................
C ENABLE ZERO CHECKING
C
70	ZERO  = .TRUE.
	IF(DTIOPN) THEN
	   IF((DATA_TYPE(1).EQ.DATA_BYTE.AND.NULL_BYTE_VAL.EQ.0).OR.
     &	   (DATA_TYPE(2).EQ.DATA_WORD.AND.NULL_WORD_VAL.EQ.0).OR.
     &	   (DATA_TYPE(3).EQ.DATA_LONG.AND.NULL_LONG_VAL.EQ.0).OR.
     &	   (DATA_TYPE(4).EQ.DATA_REAL.AND.NULL_REAL_VAL.EQ.0.0)) THEN
	      CALL WRITEF('%S Null value currently set to zero',WARNING)
	   ENDIF
	ENDIF
	GOTO 140
C
C ......................................................................
C ENABLE NULL CHECKING
C
80	HAD_ABSOLUTE = .TRUE.
	GOTO 140
C
C
140	NOMESS=.FALSE.
	RETURN
	END
