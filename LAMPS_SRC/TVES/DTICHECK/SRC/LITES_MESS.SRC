C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-01 16:08:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LITES_MESS(MESSAGE,MESSAGE_LEN,
     &			START_XPOS,START_YPOS,
     &			END_XPOS,END_YPOS,
     &			MODE)
C
***	MODULE	LITES_MESS
**	IDENT	01JL88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created						ALB 29-Jun-1988
C
C DTICHECK function to output lites command to .LCM file.
C
C Function returns .TRUE. if all is well.
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE	'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNDTICHECK:PARAMS.PAR'
C
C Common:
C
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE	'LSL$CMNDTICHECK:COMMAND.CMN'
	INCLUDE	'LSL$CMNDTICHECK:FILES.CMN'
C
C Arguments
C
	CHARACTER*80	MESSAGE		! message to output
	INTEGER		MESSAGE_LEN	! length of message
	REAL*8		START_XPOS	! Start absolute x coordinate 
	REAL*8		START_YPOS	! Start absolute y coordinate 
	REAL*8		END_XPOS	! End absolute x coordinate 
	REAL*8		END_YPOS	! End absolute y coordinate 
	INTEGER		MODE		! used to control type of commands output
C
C ......................................................................
C
	LITES_MESS = .TRUE.		! assume success
C
C ......................................................................
C
C If the number of points in the run code is 1, output the message as
C a single point error
C
	IF(MODE.EQ.SINGLE_POINT) THEN		! single point output
	   CALL FLWSEL ( LITES2LUN )
	   CALL FLWRTF('%%MESSAGE %S %^D%F12 %F12',
     &     MESSAGE(1:MESSAGE_LEN),START_XPOS,START_YPOS)
      	   CALL FLWRTF 
     &	   ('%%LET DTICHECK_X_POS = '//
     &	   '%^D%F12 - ''$MDOFFSET1''', START_XPOS )
      	   CALL FLWRTF 
     &	   ('%%LET DTICHECK_Y_POS = '//
     &	   '%^D%F12 - ''$MDOFFSET2''', START_YPOS )
      	   CALL FLWRTF 
     &	   ('%%POS ''DTICHECK_X_POS'' ''DTICHECK_Y_POS'' ')
	ENDIF
C
	IF(MODE.EQ.RANGE_OF_POINTS) THEN	! range of points
	   CALL FLWSEL ( LITES2LUN )
	   CALL FLWRTF('%%MESSAGE %S %^D%F12 %F12  and  %F12 %F12',
     &	   MESSAGE(1:MESSAGE_LEN),
     &	   START_XPOS, START_YPOS, END_XPOS, END_YPOS)
      	   CALL FLWRTF 
     &	   ('%%LET DTICHECK_X_POS = '//
     &	   '%^D%F12 - ''$MDOFFSET1''', START_XPOS )
      	   CALL FLWRTF 
     &	   ('%%LET DTICHECK_Y_POS = '//
     &	   '%^D%F12 - ''$MDOFFSET2''', START_YPOS )
      	   CALL FLWRTF 
     &	   ('%%POS ''DTICHECK_X_POS'' ''DTICHECK_Y_POS'' ')
	ENDIF
	CALL FLWRTF('%%TEST $CURSINWIN')
	CALL FLWRTF('%%ELSE %%ZOOM 1')
	CALL FLWRTF('%%PING')
	CALL FLWRTF('%%RESPOND')
	CALL FLWRTF('%%ABANDON')
	CALL FLWRTF('%%ABANDON')
C
	RETURN
	END
