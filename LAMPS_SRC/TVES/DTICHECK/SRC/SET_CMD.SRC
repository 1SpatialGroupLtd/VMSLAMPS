C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-04-18 17:28:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SET_CMD()
C
***	MODULE	SET_CMD
***	IDENT	03MR88
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C       Modified for DTICHECK                           DJG 03-Mar-1988
C	Created						TJH 13-Oct-1987
C
C Function to set IFF file feature code options
C Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C W/s
C
	INTEGER		CMD     	! decoded command number
C
C Functions:
C
	LOGICAL 	RDCOMM  	! read command from line
	LOGICAL		GET_FC		! read feature code
	LOGICAL		GET_LAYER	! read layer number
C
C Command table:
C
	EXTERNAL	SET_CMD_TABLE
	INTEGER		SET_CMD_TABLE
C
C Parameters:
C
	INCLUDE	'LSL$CMNDTICHECK:PARAMS.PAR'
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE	'LSL$CMNDTICHECK:COMMAND.CMN'
C
C Common:
C
	INCLUDE	'LSL$CMNDTICHECK:IFCTRL.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
C
C ......................................................................
C
	SET_CMD=.TRUE.			! assume success
	NOMESS=.TRUE.			! turn off CMDLIB messages
C
C Read the command line and check against the SET command table
C
	CMD=RDCOMM(SET_CMD_TABLE)	! get command
	GOTO (
     &		5,	! error/nothing
     &		10,	! slope_fc
     &		20,	! minus_fc
     &		30,	! null_fc
     &		40,	! zero_fc
     &		50	! layer
     &			), CMD+1
C
C
C command number out of range
C
	CALL WRITEF('%S Command not yet implemented',ERROR)
	SET_CMD=.FALSE.
	GOTO 90
C
C ......................................................................
C
5	CALL WRITEF
	CALL WRITEF('%S Specifying command SET',ERROR)
	CALL WRITEF
	CALL WRITEF('Available SET command qualifiers are:')
	CALL WRITEF
	CALL WRITEF(
     &			'SLOPE_FC          MINUS_FC       '//
     &			'NULL_FC           ZERO_FC')
	CALL WRITEF(    'LAYER')
	SET_CMD=.FALSE.
	GOTO 90
C
C ......................................................................
C SET SLOPES
C
10	CONTINUE
	   IF (CMDICT.EQ.0 .OR.
     &        INTARG(1) .LT. 0 .OR. INTARG(1) .GT. 32767 ) THEN
     	      SLOPE_FC = 1			! default
	      CALL WRITEF ('%S FC numbers must lie in the range'//
     &                     ' 0 - 32767',WARNING )
	      CALL WRITEF('Default slope_FC %^W%N restored', SLOPE_FC)
	   ELSE
	      SLOPE_FC = INTARG(1)		! input value
	      CALL WRITEF('Slope_FC set to %^W%N', SLOPE_FC)
	   ENDIF
	GOTO 90
C
C ......................................................................
C SET MINUS
C
20	CONTINUE
	   IF (CMDICT.EQ.0 .OR.
     &        INTARG(1) .LT. 0 .OR. INTARG(1) .GT. 32767 ) THEN
     	      MINUS_FC = 2			! default
	      CALL WRITEF ('%S FC numbers must lie in the range'//
     &                     ' 0 - 32767',WARNING )
	      CALL WRITEF('Default minus_FC %^W%N restored', MINUS_FC)
	   ELSE
	      MINUS_FC = INTARG(1)		! input value
	      CALL WRITEF('Minus_FC set to %^W%N', MINUS_FC)
	   ENDIF
	GOTO 90
C
C ......................................................................
C SET NULL
C
30	CONTINUE
	   IF (CMDICT.EQ.0 .OR.
     &        INTARG(1) .LT. 0 .OR. INTARG(1) .GT. 32767 ) THEN
     	      NULL_FC = 3			! default
	      CALL WRITEF ('%S FC numbers must lie in the range'//
     &                     ' 0 - 32767',WARNING )
	      CALL WRITEF('Default null_FC %^W%N restored', NULL_FC)
	   ELSE
	      NULL_FC = INTARG(1)		! input value
	      CALL WRITEF('Null_FC set to %^W%N', NULL_FC)
	   ENDIF
	GOTO 90
C
C ......................................................................
C SET ZERO
C
40	CONTINUE
	   IF (CMDICT.EQ.0 .OR.
     &        INTARG(1) .LT. 0 .OR. INTARG(1) .GT. 32767 ) THEN
     	      ZERO_FC = 4			! default
	      CALL WRITEF ('%S FC numbers must lie in the range'//
     &                     ' 0 - 32767',WARNING )
	      CALL WRITEF('Default zero_FC %^W%N restored', ZERO_FC)
	   ELSE
	      ZERO_FC = INTARG(1)		! input value
	      CALL WRITEF('Zero_FC set to %^W%N', ZERO_FC)
	   ENDIF
	GOTO 90
C
C ......................................................................
C SET layer
C
50	CONTINUE
	   IF (CMDICT.EQ.0 .OR.
     &        INTARG(1) .LT. 0 .OR. INTARG(1) .GT. 32767 ) THEN
     	      LAYER = 1			! default
	      CALL WRITEF ('%S Layer numbers must lie in the range'//
     &                     ' 0 - 32767',WARNING )
	      CALL WRITEF('Default layer %^W%N restored',
     &                    LAYER)
	   ELSE
	      LAYER = INTARG(1)		! input value
	      CALL WRITEF('layer set to %^W%N', LAYER)
	   ENDIF
	GOTO 90
C
C
90	NOMESS=.FALSE.
	RETURN
	END
