C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-10-16 17:35:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SCAN( BUF, LEN, INSIDE, H_LO, H_HI )
C
***	IDENT	16OC84
***	MODULE	SCAN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 12 September 1984
C
C This subroutine scans the points in BUF, looking for points between
C H_LO and H_HI, and marking such off in INSIDE
C
C It returns FALSE if we don't find anything IN or BELOW
C
	IMPLICIT NONE
C
C passed
C
	INTEGER		LEN		! size of input buffer(s)
	REAL		BUF(2,LEN)	! point buffer - input
	BYTE		INSIDE(LEN)	! marker buffer for above
C
	REAL		H_LO		! low bound of our region
	REAL		H_HI		! high bound
C
C for ease of use
C
	PARAMETER	X = 1
	PARAMETER	Y = 2
C
C other parameters - our MARK_ things
C
***	PARAMETER/HERE:MARK/
C
C workspace
C
	INTEGER		PTR		! DO loop variable
	LOGICAL		HAD_IN		! had a point IN
	LOGICAL		HAD_BELOW	! had a point BELOW
C
C *********************************************************************
C
C assume that we don't find anything in our band, or below it...
C
	SCAN = .FALSE.
	HAD_IN = .FALSE.
	HAD_BELOW = .FALSE.
C
C stop ourselves bottoming out - can't do a negative or zero region
C
	IF ( H_LO .GE. H_HI ) THEN
	   CALL WRITEF(
     &		'Scan error - top and bottom of scan coincident')
	   GOTO 9999
	ENDIF
C
C *********************************************************************
C
C We work under the assumption that the polygon will be plotted in
C a top downwards manner, so that all points outside our region and
C above us will already have been plotted, whereas points below us
C will not have been
C
C INSIDE is set in the following manner:
C
C PASS 1
C
C	if a point is inside our concerned region, we set INSIDE to
C	MARK_IN for it
C
C	if a point is below our concerned region, we set INSIDE to
C	MARK_BELOW for it
C
C PASS 2
C
C	if a point is marked as MARK_BELOW, but is adjacent to a point
C	marked MARK_IN or MARK_PLOT then it is changed to MARK_TRAN
C
C *********************************************************************
C
C PASS 1 - scan all points and change their states if necessary
C
	DO 1000 PTR = 1, LEN
C
	   IF ( BUF(Y,PTR).GT.H_LO .AND. BUF(Y,PTR).LT.H_HI ) THEN
C
C	    this point is inside our concerned region
C
	      INSIDE( PTR ) = MARK_IN
	      HAD_IN = .TRUE.
C
	   ELSEIF ( BUF(Y,PTR).LE.H_LO ) THEN
C
C	    this point is below our concerned region
C
	      INSIDE( PTR ) = MARK_BELOW
	      HAD_BELOW = .TRUE.
C
	   ENDIF
C
1000	CONTINUE
C
C *********************************************************************
C
C PASS 2 - detect transitions to/from MARK_BELOW
C
	IF (HAD_BELOW) THEN
C
	   DO 2000 PTR = 2, LEN-1
C
	      IF ( INSIDE(PTR).EQ.MARK_BELOW ) THEN
C
	         IF ( INSIDE(PTR-1).EQ.MARK_IN   .OR.
     &		      INSIDE(PTR-1).EQ.MARK_PLOT .OR.
     &		      INSIDE(PTR+1).EQ.MARK_IN   .OR.
     &		      INSIDE(PTR+1).EQ.MARK_PLOT ) THEN
C
		    INSIDE(PTR) = MARK_TRANS
C
	         ENDIF
C
	      ENDIF
C
2000	   CONTINUE
C
	ENDIF
C
C *********************************************************************
C
C PASS 2b - check the ends of the array
C
	IF (HAD_BELOW) THEN
	   IF ( INSIDE(1).EQ.MARK_BELOW ) THEN
C
	      IF ( INSIDE(LEN).EQ.MARK_IN   .OR.
     &	           INSIDE(LEN).EQ.MARK_PLOT .OR.
     &	           INSIDE(2).EQ.MARK_IN     .OR.
     &	           INSIDE(2).EQ.MARK_PLOT ) THEN
C
	         INSIDE(1) = MARK_TRANS
	      ENDIF
	   ENDIF
C
	   IF ( INSIDE(LEN).EQ.MARK_BELOW ) THEN
C
	      IF ( INSIDE(LEN-1).EQ.MARK_IN   .OR.
     &	           INSIDE(LEN-1).EQ.MARK_PLOT .OR.
     &	           INSIDE(1).EQ.MARK_IN       .OR.
     &	           INSIDE(1).EQ.MARK_PLOT ) THEN
C
	         INSIDE(LEN) = MARK_TRANS
	      ENDIF
	   ENDIF
	ENDIF
C
C *********************************************************************
C
	SCAN = HAD_IN .OR. HAD_BELOW
	IF (SCAN) CALL WRITEF('- SCAN - some points in or below')
C
C *********************************************************************
C
9999	RETURN
	END
