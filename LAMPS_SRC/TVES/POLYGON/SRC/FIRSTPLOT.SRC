	LOGICAL	FUNCTION FIRST_PLOT( INSIDE, IN_LEN, VALUE, PTR )
C
***	IDENT	17OC84
***	MODULE	FIRST_PLOT
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 16 October 1984
C
C This function locates the start of the first plot within the buffer,
C and returns the location and value of that start
C The function return is FALSE if we find a plot, TRUE if there is none
C
	IMPLICIT NONE
C
C we are passed
C
	INTEGER		IN_LEN		! length of buffer
	BYTE		INSIDE(IN_LEN)	! marker buffer
	BYTE		VALUE		! start of plot mark
	INTEGER		PTR		! position of start
C
C and define the marker values
C
***	PARAMETER/HERE:MARK/
C
C functions
C
	LOGICAL		NEXT_PTR	! get next value
	LOGICAL		PREV_PTR	! get previous one
C
C and workspace
C
	INTEGER		POSSIBLE	! may be start of plot
C
C *********************************************************************
C
C we start by initialising the circular buffer, to start at the
C beginning
C
	CALL INIT_CIRCULAR( IN_LEN )
C
C and now look at the first point - we are searching for one of the
C following sequences:
C
C	MARK_BELOW	MARK_IN
C
C	MARK_TRANS	MARK_IN
C
C where any number of MARK_PLOTs may be ignored between the entries
C
1000	IF ( NEXT_PTR( INSIDE, IN_LEN, VALUE, PTR ) ) THEN
C
C	   we have run out of buffer to search through - thus we
C	   have presumably not found any plots
C
	   CALL WRITEF('First_plot 1 - no more buffer')
C
	   FIRST_PLOT = .TRUE.
	   GOTO 9999
C
	ELSEIF ( VALUE.EQ.MARK_TRANS ) THEN
C
C	 we have a transition - is it the start of a plot?
C	 we must look for another entry to confirm/deny that
C
	   POSSIBLE = PTR		! remember where we are
C
C	 look up to here again
C
	   CALL CHANGE_CIRCULAR( PTR, IN_LEN )
C
1200	   IF ( NEXT_PTR( INSIDE, IN_LEN, VALUE, PTR ) ) THEN
C
C	    we have run out of buffer - this means that we have come
C	    back to just before our MARK_TRANS, and have not found a
C	    MARK_IN to follow it - this should not happen
C
	      CALL WRITEF(
     &		'First_plot 2 - no more buffer after TRANS at %N',
     &							POSSIBLE )
C
	      FIRST_PLOT = .TRUE.	! assume no plot
	      GOTO 9999
C
	   ELSEIF ( VALUE.EQ.MARK_IN ) THEN
C
C	    yes - that was the start of a plot, so note as much and
C	    get out of here
C
	      CALL RESET_CIRCULAR( POSSIBLE, IN_LEN )
	      FIRST_PLOT = .FALSE.
	      GOTO 9999
C
	   ELSEIF ( VALUE.EQ.MARK_TRANS ) THEN
C
C	    no - that must have been the end of a plot - this must be
C	    the start of a plot (ie use this value of PTR)
C
	      CALL RESET_CIRCULAR( PTR, IN_LEN )
	      FIRST_PLOT = .FALSE.
	      GOTO 9999
C
	   ELSEIF ( VALUE.EQ.MARK_BELOW ) THEN
C
C	    no - that must have been the end of a plot, so we go
C	    back to looking for a start
C
	      CALL CHANGE_CIRCULAR( 1, IN_LEN )	! back to default
	      GOTO 1000
C
	   ELSE
C
C	    this is an entry which doesn't help us make up our minds,
C	    so look further on
C
	      GOTO 1200
C
	   ENDIF
C
	ELSEIF ( VALUE.EQ.MARK_IN ) THEN
C
C	 we are obviously now inside a plot, but is this the start of
C	 one?
C
C	 note that the case of MARK_TRANS followed by MARK_IN should
C	 be checked for, in case we back up to before where we started
C	 from
C
	   POSSIBLE = PTR
C
C	 ensure that we can look all the way back
C
	   CALL CHANGE_CIRCULAR( PTR, IN_LEN )
C
1400	   IF ( PREV_PTR( INSIDE, IN_LEN, VALUE, PTR ) ) THEN
C
C	    we have run out of buffer - we have come back to our
C	    original MARK_IN, without finding a MARK_TRANS
C	    - presumably this is indeed the start of our plot
C
	      CALL WRITEF(
     &		'First_plot 3 - no more buffer before IN at %N',
     &							POSSIBLE )
C
	      CALL RESET_CIRCULAR( POSSIBLE, IN_LEN )
	      FIRST_PLOT = .FALSE.	! got a plot
	      GOTO 9999			! return that value
C
	   ELSEIF ( VALUE.EQ.MARK_BELOW ) THEN
C
C	    yes - that was the start of a plot
C
	      CALL RESET_CIRCULAR( POSSIBLE, IN_LEN )
	      FIRST_PLOT = .FALSE.
	      GOTO 9999			! return that value
C
	   ELSEIF ( VALUE.EQ.MARK_TRANS ) THEN
C
C	    yes - this is the start of a plot
C
	      CALL RESET_CIRCULAR( PTR, IN_LEN )
	      FIRST_PLOT = .FALSE.
	      GOTO 9999			! return that value
C
	   ELSEIF ( VALUE.EQ.MARK_IN ) THEN
C
C	    no - we found the middle of a plot, so give up on
C	    this idea - NB the call of PREV_PTR will not have
C	    affected our position in the buffer for NEXT_PTR
C
	      CALL CHANGE_CIRCULAR( 1, IN_LEN )
	      GOTO 1000
C
	   ELSE
C
C	    we found something that doesn't tell us anything - ignore
C	    it and try for something better - ie the entry before
C
	      GOTO 1400
C
	   ENDIF
C
	ENDIF
C
C so, we found something we aren't particularly interested in, it's not
C something to plot - we look further on
C
	GOTO 1000
C
C *********************************************************************
C
C so we have a value to return - do so
C
9999	IF ( THIS_PTR( INSIDE, IN_LEN, VALUE, PTR ) THEN
	   CONTINUE
	ENDIF
	RETURN
C
	END
