C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-10-17 12:54:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE POLYFILL( BUF, INSIDE, LEN )
C
***	IDENT	17OC84
***	MODULE	POLYFILL
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 12 September 1984
C
C Routine to split a polygon up into smaller polygons...
C
	IMPLICIT NONE
C
C we are passed
C
	INTEGER*2	LEN		! number of points in buffer
	REAL		BUF(2,LEN)	! buffer of points
	BYTE		INSIDE(LEN)	! buffer state buffer
C
C the maximum number of points we can accept in a polygon
C which we wish to fill is
C
	PARAMETER	MAX_FILL = 5
C
***	PARAMETER/HERE:MARK/
C
C functions
C
	LOGICAL		PLOT		! plot the current band
	LOGICAL		SCAN		! scan the polygon band
C
C and the array holding the points defining our polygon is
C
	REAL		OUTPUT(2,MAX_FILL)
C
C other variables
C
	REAL		TEMP
	REAL		H_MAX		! maximum height of polygon
	REAL		H_MIN		! minimum height of polygon
	REAL		H_HI, H_LO	! current bounds
C
	INTEGER		I
C
C *********************************************************************
C
C this process operates as follows
C
C 1)	if the final point matches the first one, then remove it
C
C	check the number of points - if less than MAX_FILL,
C	then we can output the whole polygon at once, otherwise we must
C	continue with the rest of this process
C
C 2)	scan the points in the buffer for maximum and minimum height
C	(ie min and max Y value)
C
C	set H_MAX to slightly above the polygon, and H_MIN to slightly
C	below. We have thus bounded the polygon.
C
C	set H_HI to H_MAX and H_LO to halfway between H_MAX and H_MIN
C	- ie we are going to be considering the top half of the area
C
C 3)	scan the points in the buffer, using SCAN
C
C	SCAN looks through all of the points, marking those IN the
C	area we're looking at, and those BELOW the area - it also notes
C	which points BELOW must be plotted anyway
C
C	if SCAN returns FALSE, then we have finished plotting all of
C	the polygon - SCAN didn't find anything IN the area being
C	considered, or BELOW it
C
C	if SCAN returns TRUE, then we have something to plot, so we
C	proceed to the next stage
C
C 4)	so we attempt to plot the bits between our lines, using PLOT
C
C	PLOT processes through the buffer, plotting any partial
C	polygons that are small enough, and marking the points forming
C	them as PLOT-ed
C
C	if PLOT returns TRUE, then we have plotted all of the polygons
C	between our two lines, so we must try the portion of space
C	below H_LO
C
C	we thus set H_HI to be H_LO, and set H_LO to be H_MIN - ie we
C	attempt to plot everything underneath us
C
C	if PLOT returns FALSE, then there were some part polygons
C	between our two lines which were still too large to plot
C
C	we thus divide our current area into two, and deal with the
C	upper one only - ie we leave H_HI as it is, and set H_LO to
C	be halfway between H_HI and H_LO
C
C	regardless, we return to step 3 above
C
C *********************************************************************
C
C do we need to remove a closing point?
C
	IF ( BUF(1,1).EQ.BUF(1,LEN) .AND. BUF(2,1).EQ.BUF(2,LEN) ) THEN
	   LEN = LEN-1
	ENDIF
C
C *********************************************************************
C
C check for the trivial case...
C (NB - we check fo less than the maximum fill size, since we shall
C  be adding the final point on again for closure when filling it in)
C
	CALL EXPAND('- Polygon ')
	IF ( LEN.LT.MAX_FILL ) THEN
	   CALL WRITAP('may be filled directly')
	   GOTO 9999			! and return immediately
	ELSE
	   CALL WRITAP('must be divided')
	ENDIF
C
C *********************************************************************
C
C so we must split the polygon into several pieces, as described above
C
C first, determine the maximum and minumum heights bounding the polygon
C
	CALL HEIGHT( BUF, LEN, H_MIN, H_MAX )
C
C and 'stretch' the area a little bit
C
	TEMP  = ( H_MAX - H_MIN ) / 100.0
	H_MAX = H_MAX + TEMP
	H_MIN = H_MIN - TEMP
C
	CALL WRITEF('--- bounds are max %F, min %F',H_MAX,H_MIN)
C
C so let us start with the top half of the area
C
	H_HI = H_MAX
	H_LO = H_MAX - (H_MAX-H_MIN)/2.0
C
C and now 'clear' the INSIDE array
C
	CALL VIOCLR( INSIDE, LEN, MARK_UNSET )
C
C and scan that to see what areas fall where
C
2000	CONTINUE
C
	CALL WRITEF('--- scanning between max %F, min %F',H_HI,H_LO)
C
	IF ( .NOT.SCAN( BUF, LEN, INSIDE, H_LO, H_HI ) ) GOTO 9999
C
	CALL EXPAND('--- after SCAN: ')
	DO 2001 I = 1,LEN
	   CALL APPEND('%^B%N ',INSIDE(I))
2001	CONTINUE
	CALL TTWLIN
C
C assuming we actually have anything in there, then we must plot it
C
	IF ( PLOT( BUF, LEN, INSIDE, OUTPUT, MAX_FILL ) ) THEN
C
C	 there are still regions unplotted in this polygon band
C	 - we must look at a smaller region - take its top half
C
	   H_LO = H_LO + ( H_HI-H_LO )/2.0
C
	ELSE
C
C	 we have plotted everything in that band - try everything below
C
	   H_HI = H_LO
	   H_LO = H_MIN
C
	ENDIF
C
	CALL EXPAND('--- after PLOT: ')
	DO 2002 I = 1,LEN
	   CALL APPEND('%^B%N ',INSIDE(I))
2002	CONTINUE
	CALL TTWLIN
C
C and try to plot some more
C
	GOTO 2000
C
9999	RETURN
	END
