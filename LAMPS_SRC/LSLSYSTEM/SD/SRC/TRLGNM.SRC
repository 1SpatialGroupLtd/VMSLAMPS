C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-04-25 20:17:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TRLGNM(LINE,LINLEN,STATUS,MXINDX)
C
***	MODULE	TRLGNM
***	IDENT	25AP85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	VMS V4 version				 DM	23-Apr-1985
C	Created 				 DM	17-Apr-1985
C
C Attempts to translate LINE as a logical name, stopping if we fail or
C encounter a concealed device or a search list.
C
	IMPLICIT NONE
C
	CHARACTER*(*) LINE
	INTEGER	LINLEN		! length of logical name
	INTEGER STATUS		! status of logical name
	INTEGER MXINDX		! largest equivalence logical name index
C
	INCLUDE '($LNMDEF)'
	INCLUDE '($RMSDEF)'
C
	CHARACTER*255 NEWLIN	! temporary variables
	INTEGER	NLINLN
C
C function:
	LOGICAL TRNLOG		! replacement for SYS$TRNLOG
C
C ......................................................................
C
	IF (LINLEN.LT.1) THEN
	   TRLGNM=RMS$_DIR
	   GO TO 20
	ENDIF
10	NEWLIN=LINE(:LINLEN)
	   IF (INDEX(LINE(:LINLEN),'::').EQ.LINLEN-1
     &	       .AND.LINLEN.GT.1) THEN
	      NLINLN=LINLEN - 2
	      IF (NLINLN.LT.1) THEN
		 TRLGNM=RMS$_NOD
		 GO TO 20
	      ENDIF
	   ELSEIF (LINE(LINLEN:LINLEN).EQ.':') THEN
	      NLINLN=LINLEN - 1
	      IF (NLINLN.LT.1) THEN
		 TRLGNM=RMS$_DEV
		 GO TO 20
	      ENDIF
	   ELSE
	      NLINLN=LINLEN
	   ENDIF
	   TRLGNM=TRNLOG(NEWLIN(:NLINLN),NLINLN,NEWLIN,
     &			 'LNM$DCL_LOGICAL',STATUS,MXINDX)
	   IF ((.NOT.TRLGNM).OR.
     &	       ((STATUS.AND.LNM$M_EXISTS).EQ.0)) GO TO 20
	   IF ((STATUS.AND.LNM$M_CONCEALED).NE.0.OR.MXINDX.GT.0) THEN
	      IF (LINE(LINLEN:LINLEN).NE.':') THEN
		 LINE=LINE(:LINLEN)//':'	! search list/concealed
		 LINLEN=LINLEN + 1		! must end with a colon
	      ENDIF
	      IF (NEWLIN(NLINLN-1:NLINLN-1).EQ.':'.AND.
     &		  LINE(LINLEN-1:LINLEN-1).NE.':') THEN
		 LINE=LINE(:LINLEN)//':'	! it's a node ...
		 LINLEN=LINLEN + 1		! so we need two colons
	      ENDIF
	      GO TO 20
	   ENDIF
	   LINE=NEWLIN(:NLINLN)			! copy back the results
	   LINLEN=NLINLN			! and go round again ...
	IF ((STATUS.AND.LNM$M_TERMINAL).EQ.0) GO TO 10	! (maybe)
C
20	RETURN
	END
C
	LOGICAL FUNCTION TRNLOG(NAME,LINLEN,LINE,TABLE,STATUS,MXINDX)
C
***	MODULE	TRNLOG
***	IDENT	24AP85
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
C	Created 				 DM	23-Apr-1985
C
C Calls SYS$TRNLNM to obtain information about (and possibly translate)
C a logical name. This is a replacement for the now obsolete SYS$TRNLOG
C (which did most of what we want, and far more conveniently too !!).
C
	IMPLICIT NONE
C
	CHARACTER*(*)NAME	! logical name to be translated
	INTEGER	LINLEN		! length of translated name
	CHARACTER*(*) LINE	! he translated name itself
	CHARACTER*(*) TABLE	! logical name table (or list)
	INTEGER STATUS		! status of logical name
	INTEGER MXINDX		! largest equivalence logical name index
C
	INCLUDE '($LNMDEF)'
	INCLUDE '($SSDEF)'
C
	INTEGER*2 ITMLSW(20)	! equivalenced to ITMLST
	INTEGER	  ITMLST(10)	! item list for SYS$TRNLNM
C
	EQUIVALENCE (ITMLST(1),ITMLSW(1))
C
C function:
	LOGICAL SYS$TRNLNM
C
	DATA ITMLST/4,2*0,4,2*0,255,3*0/    ! constant bits of item list
C
C ......................................................................
C
C ... finish setting up the item list.
	ITMLSW(2)=LNM$_ATTRIBUTES
	ITMLST(2)=%LOC(STATUS)
	ITMLSW(8)=LNM$_MAX_INDEX
	ITMLST(5)=%LOC(MXINDX)
	ITMLSW(14)=LNM$_STRING
	ITMLST(8)=%LOC(LINE)
	ITMLST(9)=%LOC(LINLEN)
	TRNLOG=SYS$TRNLNM(,TABLE,NAME,,ITMLST)
	IF (TRNLOG.EQ.SS$_NOLOGNAM) THEN	      ! doesn't exist
	   TRNLOG=SS$_NORMAL			      ! succeed ...
	   STATUS=(STATUS.AND..NOT.LNM$M_EXISTS)      ! but force STATUS
	ENDIF
	RETURN
	END
