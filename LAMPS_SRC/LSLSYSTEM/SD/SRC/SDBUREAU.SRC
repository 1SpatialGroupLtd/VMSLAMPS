C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-22 14:17:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM SDBUR
C
***	MODULE	SDBUR
***	IDENT	22JA88
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: D. Meader
C
CMOD	Rethink search list handling		 DM	22-Jan-1988
CMOD	Fix increasing length device names bug	PWD	05-Jun-1985
C	VMS V4 version created			 DM	25-Apr-1985
C
C Set/show the default directory (replaces the command file of the same
C name). This version also sets LSL$IF: and IF: to be HERE:, and
C LSL$OLDIF: to be THERE:.
C The command SD may be used simply as an abbreviation for SET DEFAULT,
C however it has a number of useful facilities which can considerably
C reduce the amount of typing required.
C
C Examples:                    Equivalent to:
C SD                           SHOW DEFAULT        (also SD @ and SD ?)
C SD FRED                      SET DEF [FRED]
C SD .FRED.BILL                SET DEF [.FRED.BILL]     
C SD DRA2:JOHN.FRED            SET DEF DRA2:[JOHN.FRED]
C SD ^                         SET DEF [-]         (also SD \)
C SD ^^^.JOHN                  SET DEF [---.JOHN]
C SD *                         select your main directory
C SD *.FRED.BILL               select one of your sub-directories
C SD *:FRED                    select login disk and directory [FRED]
C SD .                         re-select the previous current directory
C                              - can be repeated ad nauseam (also SD <)
C SD DRA1:             )
C SD logical name      )       work as you might expect
C SD [FRED]            )
C
C The logical names HERE: and THERE: are set up to refer to the current
C and previous directories.
C
	IMPLICIT NONE
C
	INCLUDE '($LNMDEF)'
C
	CHARACTER*1   ICH	! one character
	CHARACTER*255 CURDIR	! current directory
	CHARACTER*255 HOMEDR	! home (i.e. login) directory
	CHARACTER*255 INLINE	! command line (also scratch variable)
	CHARACTER*255 NEWDIR	! new directory
	CHARACTER*255 TMPLIN	! temporary variable
	INTEGER CDEVLN		! length of current device
	INTEGER CDIRLN		! length of CURDIR
	INTEGER CNODLN		! length of current node
	INTEGER COLPOS		! position of colon in INLINE
	INTEGER HDEVLN		! length of 'home' device
	INTEGER HDIRLN		! length of HOMEDR
	INTEGER HNODLN		! length of 'home' node
	INTEGER I,J,K		! temporary variables
	INTEGER INLEN		! length of INLINE
	INTEGER MXINDX		! largest equivalence logical name index
	INTEGER NDEVLN		! length of new device
	INTEGER NDIRLN		! length of NEWDIR
	INTEGER NNODLN		! length of new node
	INTEGER OK		! error code
	INTEGER STATUS		! status of logical name
C
C functions:
	LOGICAL LIB$GET_FOREIGN
	LOGICAL LIB$SET_LOGICAL
	LOGICAL SYS$SETDDIR
	LOGICAL TRLGNM
	LOGICAL TRNLOG		! replacement for SYS$TRNLOG
C
C ......................................................................
C
	OK=LIB$GET_FOREIGN(INLINE,,INLEN,)
	IF (.NOT.OK) GO TO 120
C
C ... let's get our bearings ...
C ... first get the node on which we logged in.
	OK=TRNLOG('SYS$NODE',HNODLN,HOMEDR,'LNM$SYSTEM',STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	IF ((STATUS.AND.LNM$M_EXISTS).EQ.0) THEN
	   HNODLN=0
	ELSEIF (INDEX(HOMEDR(:HNODLN),'_').EQ.1) THEN
	   HOMEDR=HOMEDR(2:HNODLN)		! strip off underline
	   HNODLN=HNODLN - 1
	ENDIF
C
C ... next get the current node.
	OK=TRNLOG('SYS$DISK',CDIRLN,CURDIR,'LNM$PROCESS',STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	CNODLN=INDEX(CURDIR(:CDIRLN),'::')	! hunt for node name
	IF (CNODLN.GT.0) THEN			! found it
	   IF (INDEX(CURDIR(:CNODLN),'_').EQ.1) THEN
	      CURDIR=CURDIR(2:)			! strip off underline
	      CDIRLN=CDIRLN - 1
	   ELSE
	      CNODLN=CNODLN + 1
	   ENDIF
	ELSEIF (HNODLN.GT.0) THEN		! use login default
	   CURDIR=HOMEDR(:HNODLN)//CURDIR
	   CNODLN=HNODLN
	   CDIRLN=CDIRLN + CNODLN
	ENDIF
C
C ... next get the current device.
	CDEVLN=INDEX(CURDIR(CNODLN+1:CDIRLN),':')
	IF (CDEVLN.EQ.0) THEN
	   CDEVLN=CNODLN			! no device available !!
	   CNODLN=0
	ELSE
	   CDEVLN=CDEVLN + CNODLN
	ENDIF
C
C ... and finally get the current directory.
	OK=SYS$SETDDIR(,CDIRLN,CURDIR(CDEVLN+1:))
	IF (.NOT.OK) GO TO 120
	CDIRLN=CDEVLN + CDIRLN
C
C ... at last we can look at the command line !
C ... see if he just wants to find out where he is.
	IF (INLEN.EQ.0) GO TO 10
	IF (INLINE(:INLEN).NE.'@'.AND.INLINE(:INLEN).NE.'?') GO TO 20
10	IF (CNODLN.GT.0.AND.HNODLN.GT.0) THEN	! don't report home node
	   IF (CURDIR(:CNODLN).EQ.HOMEDR(:HNODLN)) THEN
	      CURDIR=CURDIR(CNODLN+1:CDIRLN)
	      CDIRLN=CDIRLN - CNODLN
	   ENDIF
	ENDIF
	GO TO 130
C
C ... we need to do some work, so we need more context.
C ... get home base.
20	TMPLIN='SYS$LOGIN_DEVICE'
	J=16
	OK=TRLGNM(TMPLIN,J,STATUS,MXINDX)	! recursively translate
	IF (.NOT.OK) GO TO 120
	HOMEDR(HNODLN+1:)=TMPLIN(:J)
	HDEVLN=HNODLN + J
	OK=TRNLOG('SYS$LOGIN',J,TMPLIN,'LNM$JOB',STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	I=INDEX(TMPLIN(:J),':')
	HOMEDR(HDEVLN+1:)=TMPLIN(I+1:J)
	HDIRLN=HDEVLN + J - I
	IF (INLINE(:INLEN).EQ.'.'.OR.INLINE(:INLEN).EQ.'<') GO TO 80
C
C ... the command isn't a special case.
C ... translate in case it's a logical name.
	OK=TRLGNM(INLINE,INLEN,STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	IF (INDEX(INLINE(:INLEN),'[').GT.0.OR.
     &	    INDEX(INLINE(:INLEN),'<').GT.0) GO TO 90
C
C ... analyse the command line.
C ... first of all we look for a double colon (node).
	COLPOS=INDEX(INLINE(:INLEN),'::')
	IF (COLPOS.EQ.0) THEN
	   NNODLN=CNODLN		 	 ! none, use ...
	   IF (CNODLN.GT.0) THEN
	      IF (CURDIR(:CNODLN).NE.HOMEDR(:HNODLN)) THEN
		 NEWDIR(:NNODLN)=CURDIR(:CNODLN) ! current (def) node
	      ELSE
		 NNODLN=0			 ! unless it's home base
	      ENDIF
	   ENDIF
	ELSE
	   COLPOS=COLPOS + 1
	   IF (INLINE(:COLPOS-2).EQ.'*') THEN
	      NNODLN=0				! *::DUA1:FRED etc
	      INLINE=INLINE(COLPOS+1:)
	      INLEN=INLEN - COLPOS
	      COLPOS=0
	   ELSE
	      I=COLPOS				! node specified ...
	      TMPLIN=INLINE(:I)
	      OK=TRLGNM(TMPLIN,I,STATUS,MXINDX)	! translate it ...
	      IF (.NOT.OK) GO TO 120
	      IF (INDEX(TMPLIN(:I),'_').EQ.1) THEN
		 TMPLIN=TMPLIN(2:I)		! strip off underline
		 I=I - 1
	      ENDIF
	      IF (HNODLN.GT.0.AND.
     &		  TMPLIN(:I).EQ.HOMEDR(:MAX(HNODLN,1))) THEN
		 NNODLN=0			! already on this node ?
	      ELSE
		 NNODLN=I
		 NEWDIR(:NNODLN)=TMPLIN(:I)	! no, patch it in
	      ENDIF
	   ENDIF
	ENDIF
	IF (NNODLN.EQ.0) THEN			! if heading home ...
	   CURDIR=CURDIR(CNODLN+1:)		! forget about ...
	   CDIRLN=CDIRLN - CNODLN		! current node
	   CDEVLN=CDEVLN - CNODLN		! (it might cause ...
	   CNODLN=0				! problems later)
	ENDIF
	IF (COLPOS.NE.INLEN) GO TO 30
	NEWDIR(NNODLN+1:)=CURDIR(CNODLN+1:CDIRLN)   ! if last use ...
	NDEVLN=NNODLN + CDEVLN - CNODLN		    ! current device ...
	NDIRLN=NNODLN + CDIRLN - CNODLN		    ! and directory
	GO TO 70
C
C ... next for a single colon (device).
30	I=COLPOS
40	COLPOS=INDEX(INLINE(I+1:INLEN),':')
	IF (COLPOS.EQ.0) THEN
	   TMPLIN=INLINE(I+1:INLEN)		! none found ...
	   J=INLEN - I
	   OK=TRLGNM(TMPLIN,J,STATUS,MXINDX)	! translate it anyway
	   IF (.NOT.OK) GO TO 120
	   IF (INDEX(TMPLIN(:J),'[').GT.0.OR.
     &	       INDEX(TMPLIN(:J),'<').GT.0) THEN	! have another look ...
	      NEWDIR(NNODLN+1:)=TMPLIN(:J)	! found some brackets !!
	      INLINE=NEWDIR			! can't parse it further
	      INLEN=I + J
	      GO TO 90				! just hand it over
	   ELSEIF (INDEX(TMPLIN(:J),':').GT.0) THEN
	      INLINE(I+1:)=TMPLIN(:J)		! found a colon !
	      INLEN=I + J
	      GO TO 40				! go try again
	   ELSE
	      NDEVLN=NNODLN + CDEVLN - CNODLN	! really none, use ...
	      NEWDIR(NNODLN+1:NDEVLN)=CURDIR(CNODLN+1:CDEVLN) ! curr dev
	   ENDIF
	ELSE
	   IF (INLINE(I+1:MAX(I+COLPOS-1,I+1)).EQ.'*') THEN
	      IF (I.EQ.0) THEN
		 NNODLN=0			! *:FRED etc
		 NDEVLN=HDEVLN - HNODLN
		 NEWDIR=HOMEDR(HNODLN+1:HDEVLN)
	      ELSE				! e.g. LSL780::*:FRED
		 NDEVLN=NNODLN + HDEVLN - HNODLN
		 NEWDIR(NNODLN+1:)=HOMEDR(HNODLN+1:HDEVLN)
	      ENDIF
	   ELSE
	      TMPLIN=INLINE(I+1:I+COLPOS)	 ! device specified ...
	      J=COLPOS
	      OK=TRLGNM(TMPLIN,J,STATUS,MXINDX)	 ! translate it ...
	      IF (.NOT.OK) GO TO 120
	      NDEVLN=NNODLN + J
	      NEWDIR(NNODLN+1:NDEVLN)=TMPLIN(:J) ! and patch it in
	   ENDIF
	ENDIF
	IF (I+COLPOS.NE.INLEN) GO TO 50		     ! if end of line
	IF (MXINDX.GT.0) THEN			     ! & not search list
	   NDIRLN=NDEVLN
	ELSEIF (CDEVLN.LT.CDIRLN) THEN
	   NEWDIR(NDEVLN+1:)=CURDIR(CDEVLN+1:CDIRLN) ! then use ...
	   NDIRLN=NDEVLN + CDIRLN - CDEVLN	     ! current directory
	ELSE
	   NDIRLN=CDIRLN
	ENDIF
	GO TO 70
C
C ... now look for a dot.
50	I=I + COLPOS + 1			       ! next character
	IF (INDEX(INLINE(:INLEN),'.').EQ.I) THEN
	   NEWDIR(NDEVLN+1:)=CURDIR(CDEVLN+1:CDIRLN-1) ! if 1st add ...
	   NDIRLN=NDEVLN + CDIRLN - CDEVLN - 1	       ! current dir
	ELSEIF (INLINE(I:I).EQ.'*') THEN
	   IF (I.EQ.1) THEN
	      NEWDIR=HOMEDR(HNODLN+1:HDIRLN-1)	       ! if *.XX add ...
	      NDIRLN=HDIRLN - HNODLN - 1       	       ! home dev & dir
	      NDEVLN=HDEVLN - HNODLN
	      NNODLN=0
	   ELSE						! e.g. SD DRA1:*
	      NEWDIR(NDEVLN+1:)=HOMEDR(HDEVLN+1:HDIRLN-1)
	      NDIRLN=NDEVLN + HDIRLN - HDEVLN - 1
	   ENDIF
	   I=I + 1				       ! lose the *
	ELSE
	   NDIRLN=NDEVLN + 1
	   NEWDIR(NDIRLN:NDIRLN)='['		       ! append first [
	ENDIF
	IF (I.LE.INLEN) NEWDIR(NDIRLN+1:)=INLINE(I:INLEN)
	NDIRLN=NDIRLN + INLEN - I + 2
	NEWDIR(NDIRLN:NDIRLN)=']'		       ! append final ]
	I=INDEX(NEWDIR,'<')
	IF (I.NE.0) NEWDIR(I:I)='['		       ! make < into [
C
C ... go up one or more directory levels ?
	DO 60 I=NDEVLN+2,NDIRLN-1
	   ICH=NEWDIR(I:I)
	   IF (ICH.EQ.'.') GO TO 70		! can't have ^ after dot
	   IF (ICH.EQ.'^'.OR.ICH.EQ.'\') NEWDIR(I:I)='-'
60	CONTINUE
70	CNODLN=NNODLN				! make it all 'current'
	CDEVLN=NDEVLN
	CDIRLN=NDIRLN
	CURDIR=NEWDIR
	GO TO 110				! set new default
C
C ... go back to previous directory.
80	OK=TRNLOG('THERE',INLEN,INLINE,'LNM$PROCESS',STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	IF ((STATUS.AND.LNM$M_EXISTS).EQ.0) THEN  ! THERE not set up ?
	   INLEN=HDIRLN
	   INLINE=HOMEDR			  ! make THERE home base
	ENDIF
	I=INDEX(INLINE(:INLEN),'::')
	IF (I.GT.0) I=I + 1
	GO TO 100
C
C ... he doesn't want to use any of the clever stuff.
C ... hunt for a node specification.
90	I=INDEX(INLINE(:INLEN),'::')
	IF (I.EQ.0) THEN			  ! add node if none ...
	   IF (CNODLN.GT.0.AND.HNODLN.GT.0) THEN  ! and not home base
	      IF (CURDIR(:CNODLN).NE.HOMEDR(:HNODLN)) THEN
		 INLINE=CURDIR(:CNODLN)//INLINE
		 INLEN=INLEN + CNODLN
		 I=CNODLN
	      ENDIF
	   ENDIF
	ELSE					! check for home base
	   IF (INDEX(INLINE(:I),'_').EQ.1) THEN
	      INLINE=INLINE(2:)			! strip off underline
	   ELSE
	      I=I + 1
	   ENDIF
	   IF (HNODLN.GT.0.AND.
     &	       INLINE(:I).EQ.HOMEDR(:MAX(HNODLN,1))) THEN
	      INLINE=INLINE(I+1:)		! already on this node
	      I=0
	   ENDIF
	ENDIF
C
C ... hunt for a device specification.
100	J=INDEX(INLINE(I+1:INLEN),':')
	IF (J.EQ.0) THEN			! add device if none
	   INLINE(I+1:)=CURDIR(CNODLN+1:CDEVLN)//INLINE(I+1:INLEN)
	   J=CDEVLN - CNODLN
	   CDIRLN=INLEN + J
	ELSE
	   K=I + J				! translate it
	   TMPLIN=INLINE(I+1:K)
	   OK=TRLGNM(TMPLIN,J,STATUS,MXINDX)
	   IF (.NOT.OK) GO TO 120
	   CDIRLN=I + J
	   IF (K.LT.INLEN) THEN			! add rest of line ...
	      INLINE(I+1:)=TMPLIN(:J)//INLINE(K+1:INLEN)
	      CDIRLN=CDIRLN + INLEN - K
	   ELSE					! (if any)
	      INLINE(I+1:CDIRLN)=TMPLIN(:J)
	   ENDIF
	ENDIF
	CNODLN=I
	CDEVLN=I + J
	CURDIR=INLINE
C
C ... perform the SET DEFAULT.
C ... if the current node is our home node, then we don't want to put it
C ... into HERE: or SYS$DISK (which would invoke the network).
110	IF (CNODLN.GT.0.AND.HNODLN.GT.0) THEN
	   IF (CURDIR(:CNODLN).EQ.HOMEDR(:HNODLN)) THEN
	      CURDIR=CURDIR(CNODLN+1:CDIRLN)
	      CDIRLN=CDIRLN - CNODLN
	      CDEVLN=CDEVLN - CNODLN
	   ENDIF
	ENDIF
C
C ... set the new default directory.
C ... we have to do it somewhat messily because of bugs in SYS$SETDDIR.
	OK=SYS$SETDDIR(CURDIR(:CDIRLN),J,TMPLIN)       ! check syntax
	IF (.NOT.OK) GO TO 120
	OK=SYS$SETDDIR(TMPLIN(:J),,)		       ! put us back
	IF (.NOT.OK) GO TO 120
	OK=SYS$SETDDIR(CURDIR(CNODLN+1:CDIRLN),,)      ! set directory
	IF (.NOT.OK) GO TO 120
	IF (INDEX(CURDIR(:CDIRLN),'[').GT.0) THEN      ! parse it if ...
	   OK=SYS$SETDDIR(,CDIRLN,CURDIR(CDEVLN+1:))   ! not search list
	   IF (.NOT.OK) GO TO 120
	   CDIRLN=CDEVLN + CDIRLN
	ENDIF
	OK=LIB$SET_LOGICAL('SYS$DISK',CURDIR(:CDEVLN)) ! set node/device
	IF (.NOT.OK) GO TO 120
C
C ... set up HERE and THERE.
	OK=TRNLOG('HERE',INLEN,INLINE,'LNM$PROCESS',STATUS,MXINDX)
	IF (.NOT.OK) GO TO 120
	IF ((STATUS.AND.LNM$M_EXISTS).EQ.0) THEN  ! HERE not set up ?
	   INLEN=HDIRLN
	   INLINE(:INLEN)=HOMEDR(:HDIRLN)	  ! make THERE home base
	ENDIF
	OK=LIB$SET_LOGICAL('THERE',INLINE(:INLEN))
	IF (.NOT.OK) GO TO 120
	OK=LIB$SET_LOGICAL('LSL$OLDIF',INLINE(:INLEN))
	IF (.NOT.OK) GO TO 120
	OK=LIB$SET_LOGICAL('HERE',CURDIR(:CDIRLN))
	IF (.NOT.OK) GO TO 120
	OK=LIB$SET_LOGICAL('LSL$IF',CURDIR(:CDIRLN))
	IF (.NOT.OK) GO TO 120
	OK=LIB$SET_LOGICAL('IF',CURDIR(:CDIRLN))
	IF (OK) GO TO 130
C
C ... report an error.
120	CALL SYS$GETMSG(%VAL(OK),INLEN,INLINE,,)
	CALL LIB$PUT_OUTPUT(INLINE(:INLEN))
	GO TO 140
C
C ... report the default directory.
130	CALL LIB$PUT_OUTPUT('  '//CURDIR(:CDIRLN))
C
140	CALL EXIT(OK.OR.'10000000'X)		! set $STATUS
	END
