	.TITLE	QUO
	.IDENT	/09SE88/

	.IIF	NOT_DEFINED	DEBUG,	DEBUG=0

;MOD	UIS$* processes now called VSW$*	 DM	09-Sep-1988
;MOD	Don't show UIS and RDB stuff		 DM	13-Jun-1988
;MOD	Allow workspace up to 99999 pages !	 DM	11-Jan-1988
;MOD	Cluster processes suppressed		 DM	05-Jan-1988
;MOD	VMS V4: changed/added a few bits	ACM	23-Apr-1985
;MOD	VMS V4 / DECNET mods			 DM	28-Mar-1985
;MOD	MACRO version with $RSN stuff		AJW	13-Jan-1984
;MOD	Provides some info on hib processes	AJW	30-Jun-1983
;MOD	Created					AJW	21-Sep-1982

;	Program to provide various bits of information about the
;	running VAX/VMS system

;	To get everything available, this should be installed with
;	WORLD privilege

	.ENABLE SUPPRESSION		; to get rid of all those nasty SS$_s


	.LIBRARY	/SYS$LIBRARY:LIB/

	.IF	EQUAL	DEBUG
	$SSDEF
	.ENDC

	$JPIDEF
	$STATEDEF
	$RSNDEF
	$PCBDEF
	$FABDEF
	$RABDEF

; macro to locate a character in string at (R2) and of lenght R3,
; and if found, and if past R6, then update R6

	.MACRO	LOCM	CHAR,?L1

	LOCC	CHAR,R3,(R2)
	BEQL	L1		; if string not found
	CMPL	R1,R6
	BLSS	L1
	MOVL	R1,R6
L1:
	.ENDM	LOCM

	JPIEFN=33
	LONGWORD_SIZE=4
	IMAGNAME_SIZE=128
	PRC_USER_NAME_SIZE=15
	TERM_SIZE=7


; workspace:
	.PSECT	QUO_PURE_DATA,NOEXE,NOWRT,LONG

S_SYMBIONT:	.ASCII	/SYMBIONT/
S_OPCOM:	.ASCII	/OPCOM/
S_JOBCONTROL:	.ASCII	/JOB_CONTROL/
S_ACP:		.ASCII	/ACP/
S_ERRFMT:	.ASCII	/ERRFMT/
S_DECNET:	.ASCII	/DECNET/
S_NULL:		.ASCII	/NULL/
S_SWAPPER:	.ASCII	/SWAPPER/
S_CACHE:	.ASCII	/CACHE_SERVER/
S_CLUSTER:	.ASCII	/CLUSTER_SERVER/
S_CONFIGURE:	.ASCII	/CONFIGURE/
S_VWS$DISPLAYMGR:.ASCII	/VWS$DISPLAYMGR/
S_VWS$EMULATORS:.ASCII	/VWS$EMULATORS/
S_RDMS_MONITOR:	.ASCII	/RDMS_MONITOR/

BATCH:		.ASCII	/BATCH/


	ASSUME	SCH$C_COLPG	EQUAL	1
	ASSUME	SCH$C_MWAIT	EQUAL	2
	ASSUME	SCH$C_CEF	EQUAL	3
	ASSUME	SCH$C_PFW	EQUAL	4
	ASSUME	SCH$C_LEF	EQUAL	5
	ASSUME	SCH$C_LEFO	EQUAL	6
	ASSUME	SCH$C_HIB	EQUAL	7
	ASSUME	SCH$C_HIBO	EQUAL	8
	ASSUME	SCH$C_SUSP	EQUAL	9
	ASSUME	SCH$C_SUSPO	EQUAL	10
	ASSUME	SCH$C_FPG	EQUAL	11
	ASSUME	SCH$C_COM	EQUAL	12
	ASSUME	SCH$C_COMO	EQUAL	13
	ASSUME	SCH$C_CUR	EQUAL	14

NOT_AVAILABLE:	.ASCII	"]N/A."
NA_LEN=.-NOT_AVAILABLE

S_SCH:		.ASCII	/COLPG/
		.ASCII	/MWAIT/
		.ASCII	/CEF  /
		.ASCII	/PFW  /
		.ASCII	/LEF  /
		.ASCII	/LEFO /
		.ASCII	/HIB  /
		.ASCII	/HIBO /
		.ASCII	/SUSP /
		.ASCII	/SUSPO/
		.ASCII	/FPG  /
		.ASCII	/COM  /
		.ASCII	/COMO /
		.ASCII	/CUR  /

	ASSUME	RSN$_ASTWAIT	EQUAL	1
	ASSUME	RSN$_MAILBOX	EQUAL	2
	ASSUME	RSN$_NPDYNMEM	EQUAL	3
	ASSUME	RSN$_PGFILE	EQUAL	4
	ASSUME	RSN$_PGDYNMEM	EQUAL	5
	ASSUME	RSN$_BRKTHRU	EQUAL	6
	ASSUME	RSN$_IACLOCK	EQUAL	7
	ASSUME	RSN$_JQUOTA	EQUAL	8
	ASSUME	RSN$_LOCKID	EQUAL	9
	ASSUME	RSN$_SWPFILE	EQUAL	10
	ASSUME	RSN$_MPLEMPTY	EQUAL	11
	ASSUME	RSN$_MPWBUSY	EQUAL	12
	ASSUME	RSN$_SCS	EQUAL	13
	ASSUME	RSN$_CLUSTRAN	EQUAL	14
;	ASSUME	RSN$_MAX	EQUAL	15

S_RSN:		.ASCII	/ASTWAIT /
		.ASCII	/MAILBOX /
		.ASCII	/NPDYNMEM/
		.ASCII	/PGFILE  /
		.ASCII	/PGDYNMEM/
		.ASCII	/BRKTHRU /
		.ASCII	/IACLOCK /
		.ASCII	/JQUOTA  /
		.ASCII	/LOCKID  /
		.ASCII	/SWPFILE /
		.ASCII	/MPLEMPTY/
		.ASCII	/MPWBUSY /
		.ASCII	/SCS	 /
		.ASCII	/CLUSTRAN/
		.ASCII	/MAX     /


JPI_WAITFR_LST:	$WAITFR -
		EFN=JPIEFN

GETJPI_LST:	$GETJPI -
		EFN=JPIEFN -
		PIDADR=PIDADR -
		ITMLST=ITMLST -
		IOSB=GETJPI_IOSB

; This is what it will all look like, with a count along the top
; in offset from LINEB (char posn is one greater)
;          1         2         3         4         5         6         7
;01234567890123456789012345678901234567890123456789012345678901234567890123456789
;TTA0: 00010001 [100,100] FIFTEEN___CHARS TWELVE_CHARS 99/99 SUSPO12345 NINECHARS

CTRSTR:		.ASCID -
^!5*  !XL [!3OB,!3OB] !15*  !12*  !2UL/!2<!UL!> !5* !5UL !9* ^
; 5  1 8 1     9     1 15  1 12  1 2  1 2      1 5   5  1 9
; 4  5 13 14   23    24 39 40 52 53 55 56 58 59 64  69 70 79

CTRSTR_MUTEX:	.ASCID ^(!XL)^

	.PSECT	QUO_DATA,NOEXE,LONG

PIDADR:		.BLKL		1		; PID passed to GETJPI
GETJPI_IOSB:	.BLKL		2		; IOSB for GETJPI
SUSPND:		.BLKL		1		; process was suspended
IMAGLEN:	.BLKL		1		; length of above
PRCLEN:		.BLKL		1		; no. of chars
STATE:		.BLKL		1		; Process stare (current,COM,LEF,etc)
TERMLEN:	.BLKL		1		; no. of chars
UIC:		.BLKL		1		; UIC, as two words
USERLEN:	.BLKL		1		; no. of chars
STS:		.BLKL		1		; status
FIRST_TIME:	.LONG		1

FAO_LST:	.LONG	9			; arg list for FAO
		.ADDRESS	CTRSTR
		.LONG	0
		.ADDRESS	LINE
PID:		.BLKL		1		; PID
FAO_UIC1:	.BLKL		1
FAO_UIC2:	.BLKL		1
PRI:		.BLKL		1		; current running priority
PRIB:		.BLKL		1		; base priority
WSSIZE:		.BLKL		1		; current working set size

FAO_LST_MUTEX:	.LONG		4		; arg list for FAO
		.ADDRESS	CTRSTR_MUTEX
		.LONG		0
		.ADDRESS	LINE71
EFWM:		.BLKL		1		; event flag wait mask


ITMLST:						; for $GETJPI
	.WORD		IMAGNAME_SIZE
	.WORD		JPI$_IMAGNAME
	.ADDRESS	IMAGNAME
	.ADDRESS	IMAGLEN

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_PID
	.ADDRESS	PID
	.LONG		0

	.WORD		PRC_USER_NAME_SIZE
	.WORD		JPI$_PRCNAM
	.ADDRESS	PRCNAM
	.ADDRESS	PRCLEN

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_PRI
	.ADDRESS	PRI
	.LONG		0

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_PRIB
	.ADDRESS	PRIB
	.LONG		0

	.WORD		TERM_SIZE
	.WORD		JPI$_TERMINAL
	.ADDRESS	TERMINAL
	.ADDRESS	TERMLEN

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_UIC
	.ADDRESS	UIC
	.LONG		0

	.WORD		PRC_USER_NAME_SIZE
	.WORD		JPI$_USERNAME
	.ADDRESS	USERNAME
	.ADDRESS	USERLEN

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_STATE
	.ADDRESS	STATE
	.LONG		0

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_EFWM
	.ADDRESS	EFWM
	.LONG		0

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_WSSIZE
	.ADDRESS	WSSIZE
	.LONG		0

	.WORD		LONGWORD_SIZE
	.WORD		JPI$_STS
	.ADDRESS	STS
	.LONG		0

	.LONG	0

QUO_FAB:	$FAB -
		FNM=<SYS$OUTPUT>,-
		RAT=CR,-
		FAC=PUT

QUO_RAB:	$RAB -
		FAB=QUO_FAB,-
		ROP=ASY,-
		RBF=LINEB

TTCHAN:		.BLKW		1		; for TT channel

LINE:		.WORD		80		; char descr for expanded line
		.BLKW		1
		.ADDRESS	LINEB

LINE71:		.WORD		80-71+1		; char descr to LINEB+71
		.BLKW		1
		.ADDRESS	LINEB+71

LINEB:		.BLKB		80		; for putting the text into



; the following are pointed to by the item list

IMAGNAME:	.BLKB		IMAGNAME_SIZE		; name of image being executed
PRCNAM:		.BLKB		PRC_USER_NAME_SIZE	; name of process
TERMINAL:	.BLKB		TERM_SIZE		; terminal name
USERNAME:	.BLKB		PRC_USER_NAME_SIZE	; name of user

	.PSECT	QUO_CODE,NOWRT

	.ENTRY	QUO,^M<>

	.IF	NE	DEBUG
	$SETSFM_S	ENBFLG=#1	; signal System Service failures
	.ENDC


; set up our output

	$CREATE		FAB=QUO_FAB
	BLBS	R0,10$
	BRW	END
10$:

	$CONNECT	RAB=QUO_RAB
	BLBS	R0,20$
	BRW	END
20$:

	MNEGL	#1,PIDADR		; to start a wildcard search

; loop calling SYS$GETJPI

LOOP:
	$GETJPI_G	GETJPI_LST

	CLRL	SUSPND

	CMPL	R0,#SS$_NORMAL
	BEQL	50$

	CMPL	R0,#SS$_SUSPENDED
	BEQL	50$

	CMPL	R0,#SS$_NOPRIV		; if no privilege, go round again
	BEQL	LOOP

	CMPL	R0,#SS$_NOMOREPROC	; if no more, exit OK
	BNEQ	40$
	MOVL	#SS$_NORMAL,R0
40$:	BRW	END1
50$:

; wait for the information to come back

	$WAITFR_G	JPI_WAITFR_LST
	CMPL	R0,#SS$_NORMAL
	BEQL	60$
	BRW	END		; exit if failed
60$:

	MOVZWL	GETJPI_IOSB,R0
	CMPL	R0,#SS$_NORMAL
	BEQL	80$
	CMPL	R0,#SS$_SUSPENDED
	BEQL	70$
	BRW	END		; exit if failed

70$:	MNEGL	#1,SUSPND	; if suspended, mark, and put N/A in imagename
	MOVC3	#NA_LEN,NOT_AVAILABLE,IMAGNAME
	MOVL	#NA_LEN,IMAGLEN

; discard any DECnet stuff in one of the normal states.
; states LEF, LEFO, HIB, HIBO are contiguous

80$:	MOVAL	USERNAME,R4

	CMPC3	#6, (R4), S_DECNET
	BNEQ	85$

	MOVL	STATE,R6
	CMPL	R6,#SCH$C_COM
	BNEQ	81$		; can't branch directly to 90$ (too far)
	BRW	90$
81$:	CMPL	R6,#SCH$C_LEF
	BGEQU	82$		; can't branch directly to 100$
	BRW	100$
82$:	CMPL	R6,#SCH$C_HIBO
	BLEQU	83$		; can't branch directly to 100$
	BRW	100$
83$:	BRW	LOOP

; discard any permanent system processes in one of the normal states.

84$:	BRW	100$		; convenient branch point

85$:	CMPW	UIC+2,#1	; all system processes are [1,n] or [0,0]
	BGTR	84$

	TSTL	TERMLEN		; and do not have a terminal
	BNEQ	84$

	MOVL	STATE,R6
	CMPL	R6,#SCH$C_COM
	BEQL	86$
	CMPL	R6,#SCH$C_LEF
	BLSSU	84$
	CMPL	R6,#SCH$C_HIBO
	BGTRU	84$

86$:	MOVAL	PRCNAM,R4

	CMPC3	#8, (R4), S_SYMBIONT
	BNEQ	89$

88$:	BRW	90$		; convenient branch point

89$:	CMPC3	#4, (R4), S_NULL
	BEQL	90$

	CMPC3	#7, (R4), S_SWAPPER
	BEQL	90$

	CMPC3	#12, (R4), S_CACHE
	BEQL	90$

	CMPC3	#14, (R4), S_CLUSTER
	BEQL	90$

	CMPC3	#9, (R4), S_CONFIGURE
	BEQL	90$

	CMPC3	#5, (R4), S_OPCOM
	BEQL	90$

	CMPC3	#11, (R4), S_JOBCONTROL
	BEQL	90$

	CMPC3	#6, (R4), S_ERRFMT
	BEQL	90$

	CMPC3	#14, (R4), S_VWS$DISPLAYMGR
	BEQL	90$

	CMPC3	#13, (R4), S_VWS$EMULATORS
	BEQL	90$

	CMPC3	#12, (R4), S_RDMS_MONITOR
	BEQL	90$

	ADDL	#3,R4
	CMPC3	#3, (R4), S_ACP
	BEQL	90$

	ADDL	#2,R4
	CMPC3	#3, (R4), S_ACP
	BNEQ	100$

90$:	BRW	LOOP
100$:

; expand the returned numbers into LINE
	MOVZWL	UIC+2,FAO_UIC1
	MOVZWL	UIC,FAO_UIC2
	$FAO_G	FAO_LST
	CMPL	R0,#SS$_NORMAL
	BEQL	110$
	BRW	END
110$:

; put the terminal name in, if there was one
	TSTL	TERMLEN
	BLEQ	120$
	MOVC3	TERMLEN, TERMINAL, LINEB
	BRB	127$
120$:
	BBC	#PCB$V_BATCH,STS,127$
	MOVC3	#5,BATCH,LINEB
127$:

; and then the other names
	MOVC3	PRCLEN, PRCNAM, LINEB+25
	MOVC3	USERLEN, USERNAME, LINEB+41

; add state name
; check that STATE is in range, and index into the list of ASCII text
	SUBL3	#1,STATE,R6
	BGEQ	121$
	BPT				; should NEVER get here
121$:	CMPL	R6,#SCH$C_CUR
	BLSS	122$
	BPT
122$:	MULL2	#5,R6
	MOVC3	#5,S_SCH(R6),LINEB+60

	CMPL	STATE,#SCH$C_MWAIT
	BNEQ	130$

; if it is a MWAIT, see if it is named

	MOVL	EFWM,R6
	CMPL	R6,#RSN$_MAX
	BGEQU	125$
	DECL	R6
	BGEQ	124$
	BPT			; if state was 0 - should NEVER happen
124$:	MULL2	#8,R6		; index into list of names
	MOVAB	LINEB+71,R7
	MOVC3	#8,S_RSN(R6),(R7)	; and move it into LINE
	LOCC	#^A/ /,#8,(R7)
	SUBL3	R0,#8,R7	; R7 is no of bytes of name
	BRB	126$

125$:
; else add number to end
	MOVL	#8,R7		; 8 chars will be expanded
	$FAO_G	FAO_LST_MUTEX
	CMPL	R0,#SS$_NORMAL
	BEQL	126$
	BRW	END

126$:	BRW	170$		; stepping stone

130$:
; move the name of the image starting after the last ] or : or >
	MOVAB	IMAGNAME,R2
	CLRL	R7
	MOVL	IMAGLEN,R3
	BLEQ	170$		; no image name
	ADDL3	R2,R3,R7	; R7 is one char past last char of name
	MOVL	R2,R6		; initialise R6 to start of IMAGNAME

	LOCM	#^A/:/		; input in R2,R3, result in R6
	LOCM	#^A/]/
	LOCM	#^A/>/

	ADDL3	#1,R6,R2	; update the start position ...
	SUBL3	R2,R7,R3	; and the length

	LOCM	#^A/]/		; look again in case we found a root 1st time
	LOCM	#^A/>/

	INCL	R6		; R6 is first char of image name
	SUBL3	R6,R7,R5	; R5 is length of image name

; get start of file type
	LOCC	#^A/./,R5,(R6)
	BEQL	160$		; if string not found
	MOVL	R1,R7		; one byte beyond end of source string
160$:	SUBL2	R6,R7		; R7 is length of string
	BLEQ	170$		; if no image name

; here with start of string in R6
	MOVC3	R7,(R6),LINEB+71

170$:
; no of chars to output
	ADDL2	#71,R7
	CVTLW	R7,QUO_RAB+RAB$W_RSZ

; write the line out
; wait for the last PUT to complete
	BBSC	#0,FIRST_TIME,175$
	$WAIT	RAB=QUO_RAB
	BLBC	R0,END
175$:


PUTLAB:
	$PUT	RAB=QUO_RAB
	BLBC	R0,END
	BRW	LOOP

END1:
	BBSC	#0,FIRST_TIME,END
	$WAIT	RAB=QUO_RAB
	BLBC	R0,END
	$CLOSE	FAB=QUO_FAB
END:
	RET

	.END	QUO
