;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1995-06-29 11:49:42.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	QUO
	.IDENT	/29JN95/

; *** See also QUO_AXP.MAR for AXP version

	.IIF	NOT_DEFINED	DEBUG,	DEBUG=0

;MOD	Improve foramt for MUTEX EFWM		WJJ	29-Jun-1995
;MOD1476 Allow UICs > 377 (up to 777)		PGH	13-Mar-1995
;MOD	LSL$QUO_SKIP_USER now a search list	PGH	16-Dec-1992
;MOD	Spell states right to avoid STRANMAX	PGH	15-Dec-1992
;MOD	get usernames from LSL$QUO_SKIP_USER	PGH	27-Jun-1992
;MOD	use PPGCNT+GPGCNT instead of WSSIZE	CCB	10-Feb-1992
;MOD	... and parse command using LIB$TPARSE	CCB	10-Feb-1992
;MOD	allow nodename/qual, ignore DECW	CCB	30-Oct-1990
;MOD	allow parameters (FULL,ALL,WIDE)	PGH	20-Jun-1989
;MOD	ignore all SYSTEM detached processes	PGH	20-Jun-1989
;MOD	RDB V3 - add RPC$ (and LSL,DECW$)	PGH	01-Feb-1989
;MOD	VMS V5 - add SMISERVER, change NULL	PGH	14-Nov-1988
;MOD	UIS$* processes now called VSW$*	 DM	09-Sep-1988
;MOD	Don't show UIS and RDB stuff		 DM	13-Jun-1988
;MOD	Allow workspace up to 99999 pages !	 DM	11-Jan-1988
;MOD	Cluster processes suppressed		 DM	05-Jan-1988
;MOD	VMS V4: changed/added a few bits	ACM	23-Apr-1985
;MOD	VMS V4 / DECNET mods			 DM	28-Mar-1985
;MOD	MACRO version with $RSN stuff		AJW	13-Jan-1984
;MOD	Provides some info on hib processes	AJW	30-Jun-1983
;MOD	Created					AJW	21-Sep-1982

;	Program to provide various bits of information about the
;	running VAX/VMS system

;	To get everything available, this should be installed with
;	WORLD privilege

	.ENABLE SUPPRESSION		; to get rid of all those nasty SS$_s


	.LIBRARY	/SYS$LIBRARY:LIB/

	.IF	EQUAL	DEBUG
	$SSDEF
	.ENDC

	$PSCANDEF
	$JPIDEF
	$STATEDEF
	$RSNDEF
	$PCBDEF
	$FABDEF
	$RABDEF
	$TPADEF
	$LNMDEF

; macro to locate a character in string at (R2) and of length R3,
; and if found, and if past R6, then update R6

	.MACRO	LOCM	CHAR,?L1

	LOCC	CHAR,R3,(R2)
	BEQL	L1		; if string not found
	CMPL	R1,R6
	BLSS	L1
	MOVL	R1,R6
L1:
	.ENDM	LOCM

	JPIEFN=33
	LONGWORD_SIZE=4
	IMAGNAME_SIZE=128
	PRC_USER_NAME_SIZE=15
	TERM_SIZE=7
	NODE_SIZE=6
	IMAGE_ROOM=9


; workspace:
		.PSECT	QUO_PURE_DATA,NOEXE,NOWRT,LONG

; tables for LIB$TPARSE
		$INIT_STATE	STATAB,KEYTAB

		$STATE		START
; enter QUAL state if we get a '/'
		$TRAN		'/',QUAL
; read a nodename (filespec syntax), execute NODE_PROC, and repeat
		$TRAN		TPA$_FILESPEC,START,NODE_PROC	
		$TRAN		TPA$_EOS,TPA$_EXIT

		$STATE		QUAL
; read a qualifier string and go back to START
		$TRAN		TPA$_SYMBOL,START,QUAL_PROC
		$TRAN		TPA$_EOS,TPA$_EXIT

		$END_STATE

BATCH:		.ASCII		/BATCH/
S_SYSTEM:	.ASCII		/SYSTEM/
S_DECW:		.ASCII		/DECW/
S_SPACES:	.ASCII		/      /

NODE_LINE:	.ASCII		/Processes on node /
NODE_LINEL=.-NODE_LINE

		ASSUME	SCH$C_COLPG	EQUAL	1
		ASSUME	SCH$C_MWAIT	EQUAL	2
		ASSUME	SCH$C_CEF	EQUAL	3
		ASSUME	SCH$C_PFW	EQUAL	4
		ASSUME	SCH$C_LEF	EQUAL	5
		ASSUME	SCH$C_LEFO	EQUAL	6
		ASSUME	SCH$C_HIB	EQUAL	7
		ASSUME	SCH$C_HIBO	EQUAL	8
		ASSUME	SCH$C_SUSP	EQUAL	9
		ASSUME	SCH$C_SUSPO	EQUAL	10
		ASSUME	SCH$C_FPG	EQUAL	11
		ASSUME	SCH$C_COM	EQUAL	12
		ASSUME	SCH$C_COMO	EQUAL	13
		ASSUME	SCH$C_CUR	EQUAL	14

S_NA:		.ASCII		"n/a"
NA_LEN=.-S_NA

S_SCH:		.ASCII		/COLPG/
		.ASCII		/MWAIT/
		.ASCII		/CEF  /
		.ASCII		/PFW  /
		.ASCII		/LEF  /
		.ASCII		/LEFO /
		.ASCII		/HIB  /
		.ASCII		/HIBO /
		.ASCII		/SUSP /
		.ASCII		/SUSPO/
		.ASCII		/FPG  /
		.ASCII		/COM  /
		.ASCII		/COMO /
		.ASCII		/CUR  /

		ASSUME	RSN$_ASTWAIT	EQUAL	1
		ASSUME	RSN$_MAILBOX	EQUAL	2
		ASSUME	RSN$_NPDYNMEM	EQUAL	3
		ASSUME	RSN$_PGFILE	EQUAL	4
		ASSUME	RSN$_PGDYNMEM	EQUAL	5
		ASSUME	RSN$_BRKTHRU	EQUAL	6
		ASSUME	RSN$_IACLOCK	EQUAL	7
		ASSUME	RSN$_JQUOTA	EQUAL	8
		ASSUME	RSN$_LOCKID	EQUAL	9
		ASSUME	RSN$_SWPFILE	EQUAL	10
		ASSUME	RSN$_MPLEMPTY	EQUAL	11
		ASSUME	RSN$_MPWBUSY	EQUAL	12
		ASSUME	RSN$_SCS	EQUAL	13
		ASSUME	RSN$_CLUSTRAN	EQUAL	14
;		ASSUME	RSN$_MAX	EQUAL	15

S_RSN:		.ASCII		/ASTWAIT /
		.ASCII		/MAILBOX /
		.ASCII		/NPDYNMEM/
		.ASCII		/PGFILE  /
		.ASCII		/PGDYNMEM/
		.ASCII		/BRKTHRU /
		.ASCII		/IACLOCK /
		.ASCII		/JQUOTA  /
		.ASCII		/LOCKID  /
		.ASCII		/SWPFILE /
		.ASCII		/MPLEMPTY/
		.ASCII		/MPWBUSY /
		.ASCII		/SCS     /
		.ASCII		/CLUSTRAN/
		.ASCII		/MAX     /


JPI_WAITFR_LST:	$WAITFR -
		EFN=JPIEFN

GETJPI_LST:	$GETJPI -
		EFN=JPIEFN -
		PIDADR=PIDADR -
		ITMLST=ITMLST -
		IOSB=GETJPI_IOSB

; This is what it will all look like, with a count along the top
; in offset from LINEB (char posn is one greater)
;          1         2         3         4         5         6         7
;01234567890123456789012345678901234567890123456789012345678901234567890123456789
;TTA0: 00010001 [100,100] FIFTEEN___CHARS TWELVE_CHARS 99/99 SUSPO12345 NINECHARS

CTRSTR:		.ASCID -
^!5*  !XL [!3OW,!3OW] !15*  !12*  !2UL/!2<!UL!> !5* !5UL !9* ^
; 5  1 8 1     9     1 15  1 12  1 2  1 2      1 5   5  1 9
; 4  5 13 14   23    24 39 40 52 53 55 56 58 59 64  69 70 79

;CTRSTR_MUTEX:	.ASCID ^(!XL)^
CTRSTR_MUTEX:	.ASCID ^!XL^

; things for logical name translation

LOGDESC:	.ASCID		/LSL$QUO_SKIP_USER/	; name to translate
TABDESC:	.ASCID		/LNM$FILE_DEV/		; in this table
TRNATTR:	.LONG		LNM$M_CASE_BLIND	; ignore case

	.PSECT	QUO_DATA,NOEXE,LONG

TPABLK:		.LONG		TPA$K_COUNT0
		.BLKB		TPA$K_LENGTH0-4

PIDADR:		.BLKL		1		; PID passed to GETJPI
GETJPI_IOSB:	.BLKL		2		; IOSB for GETJPI
SUSPND:		.BLKL		1		; process was suspended
IMAGLEN:	.BLKL		1		; length of above
PRCLEN:		.BLKL		1		; no. of chars
STATE:		.BLKL		1		; Process stare (current,COM,LEF,etc)
TERMLEN:	.BLKL		1		; no. of chars
UIC:		.BLKL		1		; UIC, as two words
USERLEN:	.BLKL		1		; no. of chars
NODELEN:	.BLKL		1		; no. of chars
STS:		.BLKL		1		; status
PPGCNT:		.BLKL		1		; private page count
GPGCNT:		.BLKL		1		; global page count
FIRST_TIME:	.LONG		1		; true if first time through
HAD_FULL:	.LONG		0		; true if Full listing
HAD_ALL:	.LONG		0		; true if All listing
HAD_WIDE:	.LONG		0		; true if Wide listing
HAD_NODE:	.LONG		0		; true if /node given
LSTPID:		.LONG		0		; PID last time

FAO_LST:	.LONG		9		; arg list for FAO
		.ADDRESS	CTRSTR
		.LONG		0
		.ADDRESS	LINE
PID:		.BLKL		1		; PID
FAO_UIC1:	.BLKL		1
FAO_UIC2:	.BLKL		1
PRI:		.BLKL		1		; current running priority
PRIB:		.BLKL		1		; base priority
WSSIZE:		.BLKL		1		; current working set size

FAO_LST_MUTEX:	.LONG		4		; arg list for FAO
		.ADDRESS	CTRSTR_MUTEX
		.LONG		0
		.ADDRESS	LINE71
EFWM:		.BLKL		1		; event flag wait mask


SCAN_LST:					; for $PROCESS_SCAN
		.BLKW		1
		.WORD		pscan$_NODENAME
		.BLKL		1
		.LONG		pscan$M_WILDCARD

		.LONG		0

JPIFLAGS:
		.LONG		JPI$M_IGNORE_TARGET_STATUS

ITMLST:						; for $GETJPI
		.WORD		LONGWORD_SIZE
		.WORD		JPI$_GETJPI_CONTROL_FLAGS
		.ADDRESS	JPIFLAGS
		.LONG		0

		.WORD		IMAGNAME_SIZE
		.WORD		JPI$_IMAGNAME
		.ADDRESS	IMAGNAME
		.ADDRESS	IMAGLEN

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_PID
		.ADDRESS	PID
		.LONG		0
	
		.WORD		PRC_USER_NAME_SIZE
		.WORD		JPI$_PRCNAM
		.ADDRESS	PRCNAM
		.ADDRESS	PRCLEN

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_PRI
		.ADDRESS	PRI
		.LONG		0

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_PRIB
		.ADDRESS	PRIB
		.LONG		0
	
		.WORD		TERM_SIZE
		.WORD		JPI$_TERMINAL
		.ADDRESS	TERMINAL
		.ADDRESS	TERMLEN

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_UIC
		.ADDRESS	UIC
		.LONG		0

		.WORD		PRC_USER_NAME_SIZE
		.WORD		JPI$_USERNAME
		.ADDRESS	USERNAME
		.ADDRESS	USERLEN

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_STATE
		.ADDRESS	STATE
		.LONG		0

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_EFWM
		.ADDRESS	EFWM
		.LONG		0

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_PPGCNT
		.ADDRESS	PPGCNT
		.LONG		0

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_GPGCNT
		.ADDRESS	GPGCNT
		.LONG		0

		.WORD		LONGWORD_SIZE
		.WORD		JPI$_STS
		.ADDRESS	STS
		.LONG		0

		.WORD		NODE_SIZE
		.WORD		JPI$_NODENAME
		.ADDRESS	NODENAME
		.ADDRESS	NODELEN

		.LONG		0

QUO_FAB:	$FAB -
		FNM=<SYS$OUTPUT>,-
		RAT=CR,-
		FAC=PUT

QUO_RAB:	$RAB -
		FAB=QUO_FAB,-
		ROP=ASY,-
		RBF=LINEB

TTCHAN:		.BLKW		1		; for TT channel

LINE:		.WORD		80		; char descr for expanded line
		.BLKW		1
		.ADDRESS	LINEB

LINE71:		.WORD		80-71+1		; char descr to LINEB+71
		.BLKW		1
		.ADDRESS	LINEB+71

LINEB:		.BLKB		80		; for putting the text into

LINLEN:		.BLKL		1		; line length


; the following are pointed to by the item list

IMAGNAME:	.BLKB		IMAGNAME_SIZE		; name of image being executed
PRCNAM:		.BLKB		PRC_USER_NAME_SIZE	; name of process
TERMINAL:	.BLKB		TERM_SIZE		; terminal name
USERNAME:	.BLKB		PRC_USER_NAME_SIZE	; name of user
NODENAME:	.BLKB		NODE_SIZE		; node name

; things for logical name translation

TRNLIST:
		.WORD		4			; buffer length
		.WORD		LNM$_INDEX		; ... which depth ?
		.ADDRESS	INDEX			; ... set here
		.ADDRESS	INDLEN			; ... not used
		.WORD		PRC_USER_NAME_SIZE	; buffer length
		.WORD		LNM$_STRING		; ... want translation
EQVBUFP:	.ADDRESS	EQVBUF0			; ... into this
EQVDSCP:	.ADDRESS	EQVDSC0			; ... pointed at by
		.LONG		0

INDEX:		.LONG		0			; translation index
INDLEN:		.LONG		0			; not used


EQVBUF0:	.BLKB		PRC_USER_NAME_SIZE	; translation buffer
EQVDSC0:	.LONG		0			; and its descriptor
		.ADDRESS	EQVBUF0

EQVBUF1:	.BLKB		PRC_USER_NAME_SIZE	; translation buffer
EQVDSC1:	.LONG		0			; and its descriptor
		.ADDRESS	EQVBUF1

EQVBUF2:	.BLKB		PRC_USER_NAME_SIZE	; translation buffer
EQVDSC2:	.LONG		0			; and its descriptor
		.ADDRESS	EQVBUF2

EQVBUF3:	.BLKB		PRC_USER_NAME_SIZE	; translation buffer
EQVDSC3:	.LONG		0			; and its descriptor
		.ADDRESS	EQVBUF3

; and finally, the program itself !

	.PSECT	QUO_CODE,NOWRT

	.ENTRY	QUO,^M<>

	.IF	NE	DEBUG
	$SETSFM_S	ENBFLG=#1	; signal System Service failures
	.ENDC


; set up our output

	$CREATE		FAB=QUO_FAB
	BLBS	R0,10$
	BRW	END
10$:

	$CONNECT	RAB=QUO_RAB
	BLBS	R0,20$
	BRW	END
20$:

	MNEGL	#1,PIDADR		; to start a wildcard search

; now find if we have a command

	PUSHAL	LINLEN			; line length (3rd arg)
	PUSHL	#0			; null prompt (2nd arg)
	PUSHAL	LINE			; line buffer (1st arg)
	CALLS	#3,G^LIB$GET_FOREIGN	; get command line (if any)

	MOVZWL	LINLEN,TPABLK+TPA$L_STRINGCNT
	MOVAB	LINEB,TPABLK+TPA$L_STRINGPTR
	PUSHAL	KEYTAB
	PUSHAL	STATAB
	PUSHAL	TPABLK
	CALLS	#3,G^LIB$TPARSE
	BLBS	R0,25$
	BRW	END

25$:	BLBC	HAD_NODE,30$
	$PROCESS_SCAN_S	PIDCTX=PIDADR,ITMLST=SCAN_LST
	BLBS	R0,30$
	BRW	END

; translate logical name for skip users (if any)
; This can be a search list, so translate at several index depths

30$:	MOVL	#0, INDEX		; start at index 0
	MOVAL	EQVBUF0,EQVBUFP		; buffer pointer
	MOVAL	EQVDSC0,EQVDSCP		; length pointer
	$TRNLNM_S -
		LOGNAM = LOGDESC,-
		TABNAM = TABDESC,-
		ATTR = TRNATTR,-
		ITMLST = TRNLIST
	TSTL	EQVDSC0			; anything found ?
	BNEQ	31$			; yes - keep looking
	BRW	LOOP			; no - so start now
;
31$:	MOVL	#1, INDEX		; next index
	MOVAL	EQVBUF1,EQVBUFP		; buffer pointer
	MOVAL	EQVDSC1,EQVDSCP		; length pointer
	$TRNLNM_S -
		LOGNAM = LOGDESC,-
		TABNAM = TABDESC,-
		ATTR = TRNATTR,-
		ITMLST = TRNLIST
	TSTL	EQVDSC1			; anything found ?
	BNEQ	32$			; yes - keep looking
	BRW	LOOP			; no - so start now
;
32$:	MOVL	#2, INDEX		; next index
	MOVAL	EQVBUF2,EQVBUFP		; buffer pointer
	MOVAL	EQVDSC2,EQVDSCP		; length pointer
	$TRNLNM_S -
		LOGNAM = LOGDESC,-
		TABNAM = TABDESC,-
		ATTR = TRNATTR,-
		ITMLST = TRNLIST
	TSTL	EQVDSC2			; anything found ?
	BNEQ	33$			; yes - keep looking
	BRW	LOOP			; no - so start now
;
33$:	MOVL	#3, INDEX		; next index
	MOVAL	EQVBUF3,EQVBUFP		; buffer pointer
	MOVAL	EQVDSC3,EQVDSCP		; length pointer
	$TRNLNM_S -
		LOGNAM = LOGDESC,-
		TABNAM = TABDESC,-
		ATTR = TRNATTR,-
		ITMLST = TRNLIST

; ready to start asking about processes
; loop calling SYS$GETJPI
LOOP:
	$GETJPI_G	GETJPI_LST

	CLRL	SUSPND

	CMPL	R0,#SS$_NORMAL
	BEQL	50$

	CMPL	R0,#SS$_SUSPENDED
	BEQL	50$

	CMPL	R0,#SS$_NOPRIV		; if no privilege, go round again
	BEQL	LOOP

	CMPL	R0,#SS$_NOMOREPROC	; if no more, exit OK
	BNEQ	40$
	MOVL	#SS$_NORMAL,R0
40$:	BRW	END1
50$:

; wait for the information to come back

	$WAITFR_G	JPI_WAITFR_LST
	CMPL	R0,#SS$_NORMAL
	BEQL	60$
	BRW	END		; exit if failed
60$:

; check the i/o status block

	MOVZWL	GETJPI_IOSB,R0
	CMPL	R0,#SS$_NORMAL
	BEQL	75$
	CMPL	R0,#SS$_SUSPENDED
	BEQL	70$
	CMPL	R0,#SS$_NOMOREPROC	; if no more, exit OK
	BEQL	65$
	BRW	END			; exit if failed
65$:	MOVL	#SS$_NORMAL,R0
	BRW	END1

70$:	DECL	SUSPND		; if suspended, mark, and put N/A in imagename
	MOVC3	#NA_LEN,S_NA,IMAGNAME
	MOVL	#NA_LEN,IMAGLEN

; here with valid process to check
75$:	TSTL	HAD_ALL		; All qualifier ?
	BEQL	78$		; no - test further
	BRW	100$		; show everything

; stepping stone for processes to skip
77$:	BRW	85$		; skip this process

; skip any processes belonging to specified users (LSL$QUO_SKIP_USER)
78$:	TSTW	EQVDSC0		; anything to skip ?
	BEQL	80$		; no
	CMPC3	EQVDSC0, USERNAME, EQVBUF0
	BEQL	77$		; ignore skip processes
	TSTW	EQVDSC1		; anything to skip ?
	BEQL	80$		; no
	CMPC3	EQVDSC1, USERNAME, EQVBUF1
	BEQL	77$		; ignore skip processes
	TSTW	EQVDSC2		; anything to skip ?
	BEQL	80$		; no
	CMPC3	EQVDSC2, USERNAME, EQVBUF2
	BEQL	77$		; ignore skip processes
	TSTW	EQVDSC3		; anything to skip ?
	BEQL	80$		; no
	CMPC3	EQVDSC3, USERNAME, EQVBUF3
	BEQL	77$		; ignore skip processes

; single out detached processes for special treatment

80$:	TSTL	TERMLEN		; they do not have a terminal
	BNEQ	82$
	BBS	#PCB$V_BATCH,STS,82$	; batch process

; any detached processes in odd states do need reporting

	MOVL	STATE,R6
	CMPL	R6,#SCH$C_COM
	BEQL	83$		; state OK
	CMPL	R6,#SCH$C_CUR
	BEQL	83$		; state OK
	CMPL	R6,#SCH$C_LEF
	BGEQU	81$		; test further
	BRW	100$		; show this one (state is peculiar)
81$:	CMPL	R6,#SCH$C_HIBO
	BLEQU	83$		; state OK
82$:	BRW	100$		; show this one (eg state is peculiar)

; here with detached process with state OK - test for system owner

83$:	CMPW	UIC+2,#1	; system processes are [1,n] or [0,0]
	BGTR	84$		; not system by UIC
	BRW	LOOP		; ignore system detached processes
84$:	MOVAL	USERNAME,R4	; test for system by name
	CMPC3	#6, (R4), S_SYSTEM
	BEQL	85$		; ignore system processes
	CMPC3	#4, PRCNAM, S_DECW
	BEQL	85$		; ignore DECWindows processes
	BRB	100$		; show other processes

; here with detached process with username SYSTEM, or process name DECW*
; ... or other skippable process

85$:	TSTL	HAD_FULL	; Full qualifier ?
	BNEQ	100$		; report everything
	BRW	LOOP		; else discard

; here with something to output - expand the returned numbers into LINE

100$:
	BLBC	HAD_NODE,102$
	CMPW	PID+2,LSTPID+2		; is it the same node
	BEQL	102$
	BLBS	FIRST_TIME,101$
	CLRW	QUO_RAB+RAB$W_RSZ	; write a blank line
	BSBW	WAITLAB
	BSBW	PUTLAB
101$:	BSBW	WAITLAB
	MOVC3	#NODE_LINEL,NODE_LINE,LINEB
	MOVC3	NODELEN,NODENAME,LINEB+NODE_LINEL
	ADDW3	#NODE_LINEL,NODELEN,QUO_RAB+RAB$W_RSZ
	BSBW	PUTLAB

102$:	BSBW	WAITLAB
	MOVL	PID,LSTPID
	MOVZWL	UIC+2,FAO_UIC1
	MOVZWL	UIC,FAO_UIC2
	ADDL3	PPGCNT,GPGCNT,WSSIZE
	$FAO_G	FAO_LST
	CMPL	R0,#SS$_NORMAL
	BEQL	110$
	BRW	END
110$:

; put the terminal name in, if there was one

	TSTL	TERMLEN			; anything there ?
	BLEQ	120$			; no
	CMPL	TERMLEN,#6		; too big ?
	BLEQU	115$			; no
	MOVC3	#4, S_SPACES, LINEB+6	; zap the first half of the pid
115$:	MOVC3	TERMLEN, TERMINAL, LINEB
	BRB	127$
120$:
	BBC	#PCB$V_BATCH,STS,127$	; batch process
	MOVC3	#5,BATCH,LINEB

; and then the other names

127$:	MOVC3	PRCLEN, PRCNAM, LINEB+25

	TSTL	USERLEN		; have we got a username
	BLEQ	128$
	TSTL	USERNAME
	BLEQ	128$
	MOVC3	USERLEN, USERNAME, LINEB+41
	BRB	129$

128$:	MOVC3	#NA_LEN,S_NA,LINEB+41	; if no username (eg SWAPPER)

; add state name
; check that STATE is in range, and index into the list of ASCII text

129$:	SUBL3	#1,STATE,R6
	BGEQ	121$
	BPT				; should NEVER get here
121$:	CMPL	R6,#SCH$C_CUR
	BLSS	122$
	BPT
122$:	MULL2	#5,R6
	MOVC3	#5,S_SCH(R6),LINEB+60

	CMPL	STATE,#SCH$C_MWAIT
	BNEQ	130$

; if it is a MWAIT, see if it is named

	MOVL	EFWM,R6
	CMPL	R6,#RSN$_MAX
	BGEQU	125$
	DECL	R6
	BGEQ	124$
	BPT			; if state was 0 - should NEVER happen
124$:	MULL2	#8,R6		; index into list of names
	MOVAB	LINEB+71,R7
	MOVC3	#8,S_RSN(R6),(R7)	; and move it into LINE
	LOCC	#^A/ /,#8,(R7)
	SUBL3	R0,#8,R7	; R7 is no of bytes of name
	BRB	126$

125$:
; else add number to end
	MOVL	#8,R7		; 8 chars will be expanded
	$FAO_G	FAO_LST_MUTEX
	CMPL	R0,#SS$_NORMAL
	BEQL	126$
	BRW	END

126$:	BRW	170$		; stepping stone

130$:
; move the name of the image starting after the last ] or : or >
	MOVAB	IMAGNAME,R2
	CLRL	R7
	MOVL	IMAGLEN,R3
	BLEQ	126$		; no image name
	ADDL3	R2,R3,R7	; R7 is one char past last char of name
	MOVL	R2,R6		; initialise R6 to start of IMAGNAME
	BLBS	SUSPND,160$

	LOCM	#^A/:/		; input in R2,R3, result in R6
	LOCM	#^A/]/
	LOCM	#^A/>/

	ADDL3	#1,R6,R2	; update the start position ...
	SUBL3	R2,R7,R3	; and the length

	LOCM	#^A/]/		; look again in case we found a root 1st time
	LOCM	#^A/>/

	INCL	R6		; R6 is first char of image name
	SUBL3	R6,R7,R5	; R5 is length of image name

; get start of file type
	LOCC	#^A/./,R5,(R6)
	BEQL	160$		; if string not found
	MOVL	R1,R7		; one byte beyond end of source string
160$:	SUBL2	R6,R7		; R7 is length of string
	BLEQ	170$		; if no image name
	TSTL	HAD_WIDE	; Wide qualifier ?
	BNEQ	165$		; report everything
	CMPL	R7,#IMAGE_ROOM	; only room for 9 chars on the line
	BLSS	165$		; OK
	MOVL	#IMAGE_ROOM,R7	; trim back

; here with start of string in R6
165$:	MOVC3	R7,(R6),LINEB+71


170$:
; no of chars to output
	ADDL2	#71,R7
	CVTLW	R7,QUO_RAB+RAB$W_RSZ
	BSBB	PUTLAB
	BRW	LOOP

; write the line out
PUTLAB:
	BICL2	#1,FIRST_TIME
	$PUT	RAB=QUO_RAB
	BLBC	R0,END
	RSB

; wait for the last PUT to complete
WAITLAB:
	BBS	#0,FIRST_TIME,10$
	$WAIT	RAB=QUO_RAB
	BLBC	R0,END
10$:	RSB

END1:
	BBSC	#0,FIRST_TIME,END
	$WAIT	RAB=QUO_RAB
	BLBC	R0,END
	$CLOSE	FAB=QUO_FAB
END:
	RET

; LIB$TPARSE action procedures
NODE_PROC:
	.WORD	0
	MNEGL	#1,HAD_NODE
	MOVW	TPA$L_TOKENCNT(AP),SCAN_LST
	MOVL	TPA$L_TOKENPTR(AP),SCAN_LST+4
	MNEGL	#1,R0
	RET

QUAL_PROC:
	.WORD	^M<R2,R3>

	MOVL	TPA$L_TOKENCNT(AP),R2
	MOVL	TPA$L_TOKENPTR(AP),R3

	LOCC	#^A/F/,R2,(R3)
	BEQL	10$			; if not found
	MNEGL	#1,HAD_FULL		; yes
10$:	LOCC	#^A/A/,R2,(R3)
	BEQL	11$			; if not found
	MNEGL	#1,HAD_ALL		; yes
11$:	LOCC	#^A/W/,R2,(R3)
	BEQL	12$			; if not found
	MNEGL	#1,HAD_WIDE		; yes

12$:	MNEGL	#1,R0
	RET

	.END	QUO
