$! LSLINSTALL_VTRAK.COM - procedure for automating LSL VTRAK installations
$!
$! Copyright Laser-Scan Ltd, Cambridge, England
$!
$! LSLINSTALL version				PGH 05-Jul-1990
$!
$	on control_C then goto abort
$	on error then goto abort
$	on warning then goto abort
$	ws="write sys$output"
$	savdef=f$environment("DEFAULT")
$	savprot=f$environment("PROTECTION")
$	set prot=(sy:rwed,ow:rwed,gr:rwed,w)/default
$!
$! ------------------------------------------------------------------
$!
$	ws " "
$	ws "This procedure will carry out the product-specific installation for"
$	ws "the Laser-Scan VTRAK software package."
$	ws " "
$       read/end=abort/prompt="OK to proceed [Y] ?  " sys$command yes
$	if yes.eqs."" then yes=1
$	if .not.yes then goto abort
$! 
$! check available resources 
$! 
$       username=f$edit(f$getjpi("","username"),"collapse") 
$	if username.nes."SYSTEM"  
$	then  
$	   ws " "
$	   ws "%LSLINSTALL-F-NOTSYSTEM, only user SYSTEM may install LAMPS software" 
$	   ws " "
$	   goto abort
$	endif 
$! 
$! ************************************************************************
$!
$	do_vtrak=""
$	if f$search("LSL$PUBLIC_ROOT:[000000]VTRAK.DIR").nes."" then do_vtrak=1
$	if .not.do_vtrak
$	then
$	   ws " "
$	   ws "%LSLINSTALL-W-PRODUCTNOTFND, product VTRAK not found"
$	   ws " "
$	   goto abort
$	endif
$!
$! ------------------------------------------------------------------
$!
$	ws " "
$	ws "The procedure will create the following captive usernames:"
$	ws "[100,1]   = [VTRAK]  	! VTRAK captive user
$	ws " "
$	group100=f$identifier(%X0040FFFF,"number_to_name")
$	if group100.eqs."" then goto groupOK
$	if group100.eqs."LSL" then goto groupOK
$	ws " "
$	ws "%LSLINSTALL-F-GROUPNOTLSL, UIC group [100,*] is occupied by ",group100
$	ws "-LSLINSTALL-F-OTHERGROUP, Modify procedure to use group other than [100,*]"
$	ws " "
$	goto abort
$groupOK:
$	ws " "
$	ws "Creating user [VTRAK]"
$	ws " "
$	set default sys$system
$	run authorize
COP LSLUSER VTRAK/UIC=[100,1]/PASSWORD=VTRAK/PWDEXPIRED
MOD VTRAK/OWNER="LSL VTRAK user"/DIRECTORY=[VTRAK]
MOD VTRAK/WSDEF=1536/WSQUO=12288/WSEXT=30000/PGFLQUO=100000
MOD VTRAK/FILLM=30/BYTLM=25000/PRIV=GRPNAM/DEFPRV=GRPNAM
SHOW VTRAK/BRIEF
$	ws " "
$       read/end=abort/prompt="Press RETURN to continue  " sys$command yes
$!
$! ------------------------------------------------------------------
$!
$	ws " "
$	ws "The procedure will now create the VTRAK site-specific directories"
$	ws " "
$!
$	create/dir/log lsl$site_root:[vtrak]/prot=(gr:rwe)/owner=[VTRAK]
$	create/dir/log lsl$site_root:[vtrak.com]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.cdl]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.error]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.macros]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.menus]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.parameters]/prot=(gr:rwe)
$	create/dir/log lsl$site_root:[vtrak.profiles]/prot=(gr:rwe)
$!
$	create/dir/log lsl$data_root:[vtrak]/prot=(gr:rwe)/owner=[VTRAK]
$	create/dir/log lsl$data_root:[vtrak.iff]/prot=(gr:rwe)
$	create/dir/log lsl$data_root:[vtrak.scanned_images]/prot=(gr:rwe)
$	create/dir/log lsl$data_root:[vtrak.source_data]/prot=(gr:rwe)
$!
$	create/dir/log lsl$user_root:[vtrak]/prot=(gr:rwe)/owner=[VTRAK]
$	set directory/version=5/log lsl$user_root:[vtrak]
$!
$	ws " "
$       read/end=abort/prompt="Press RETURN to continue  " sys$command yes
$!
$! ------------------------------------------------------------------
$!
$	ws " "
$	ws "The procedure will now copy the VTRAK site-specific files"
$!
$	from_spec="LSL$PUBLIC_ROOT:[VTRAK.PARAMETERS]*.*"
$	to_spec="LSL$SITE_ROOT:[VTRAK.PARAMETERS]"
$	gosub copy_files
$!
$	from_spec="LSL$PUBLIC_ROOT:[VTRAK.COM]VTRAKQUEUEINI.COM"
$	to_spec="SYS$MANAGER:"
$	gosub copy_files
$!
$	from_spec="LSL$PUBLIC_ROOT:[VTRAK.COM]VTRAK_LOGIN.COM"
$	to_spec="LSL$USER_ROOT:[VTRAK]"
$	gosub copy_files
$!
$	from_spec="LSL$PUBLIC_ROOT:[VTRAK.ACCEPT]ACCEPT_TEST.GREY"
$	to_spec="LSL$DATA_ROOT:[VTRAK.SCANNED_IMAGES]
$	gosub copy_files
$!
$	ws " "
$       read/end=abort/prompt="Press RETURN to continue  " sys$command yes
$!
$! ------------------------------------------------------------------
$!
$	type sys$input

The automated part of the VTRAK-specific installation is now complete.

The following further steps should be taken at appropriate times; please note
them and refer to the VTRAK installation documentation for further information.

1) edit the file LSL$USER_ROOT:[VTRAK]VTRAK_LOGIN.COM and add the VTRAK licence
and tape drive names.

2) Edit SYS$MANAGER:LSLOGIN.COM and ensure that it calls the required 
package initialisation files (VTRAKINI, and POSTPROCESSINI), assuming that
these facilities are to be made available system-wide. See the "LSL LAMPS
Installation Guide" for information on editing LSLOGIN.COM.

3) Increase the size of the pagefile to allow for 60000 blocks for a standard 
VTRAK. For simple VMS installations this can be done using the DEC-supplied 
procedure SYS$UPDATE:SWAPFILES.COM.

$       read/end=abort/prompt="Press RETURN to continue  " sys$command yes
$	type sys$input

4) add the contents of the VTRAK SYSGEN parameters file supplied as 
LSL$PUBLIC_ROOT:[VTRAK.SYSTEM.SYSEXE]MODPARAMS.DAT to the system parameters
file SYS$SYSTEM:MODPARAMS.DAT. These are suitable for a standard (medium)
VTRAK installation. If the raster files to be handled are extra large, or
unusually small, then set the SYSGEN parameters accordingly, using multiples 
of the example parameters.

5) Run the DEC-supplied AUTOGEN tuning procedure. See the documentation of the 
TUNE stage of the main LSLINSTALL procedure for more information on AUTOGEN.

$       read/end=abort/prompt="Press RETURN to continue  " sys$command yes
$	ws " "
$	ws "VTRAK-specific installation terminating sucessfully"
$	goto exit
$!
$! ************************************************************************
$! ************************************************************************
$!
$! subroutine to copy files, checking if exists
$!
$copy_files:
$	name=""
$	lastspec=""
$nextfile:
$	filespec=f$search(from_spec)
$	if filespec.eqs.lastspec then goto nofile
$	if filespec.eqs."" then goto nofile
$	lastspec=filespec
$	name=f$parse(filespec,,,"name")+f$parse(filespec,,,"type")
$	if f$search(to_spec+name,2).nes.""
$	then
$	   ws "%LSLINSTALL-W-EXISTS, file ",to_spec,name," already exists"
$          read/end=abort/prompt="Overwrite it [N] ?  " sys$command yes
$	   if .not.yes then goto nextfile
$	endif
$	ws "	",name
$	copy/nolog/noconf 'filespec' 'to_spec'
$	goto nextfile
$nofile:
$	ws " "
$	if name.eqs."" 
$	then
$	   ws "%LSLINSTALL-F-NOTEMPLATES, No files found in ",from_spec
$	   ws " "
$	   goto abort
$	endif
$	return
$!
$! ************************************************************************
$! ************************************************************************
$!
$! here for abnormal exits
$!
$abort:
$	ws "%LSLINSTALL-W-ABORT. Procedure terminated abnormally"
$!
$! ************************************************************************
$!
$! all done
$!
$exit:
$	set noverify
$	set default 'savdef'
$	set prot=('savprot')/default
$	exit
