C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-09-25 13:17:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE STATE( IS_BATCH )
C
***	IDENT	25SE86
***	MODULE	STATE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 5 June 1985
C
	IMPLICIT NONE
C
C argument
C
	LOGICAL		IS_BATCH	! set true if we're in BATCH
C
C parameters required
C
	INCLUDE	'($JPIDEF)'
C
C function used
C
	INTEGER	LIB$GETJPI	! get process information
C
C workspace
C
	INTEGER		IERR	! return code
	CHARACTER*20	RESULT	! mode of process
	INTEGER		RESLEN	! length of mode string
C
C find out about ourselves
C
	IERR = LIB$GETJPI(
     &			 JPI$_MODE,	! info required
     &			 ,		! no process ID
     &			 ,		! no process name
     &			 ,		! return value
     &			 RESULT,	! return string
     &			 RESLEN		! length in return string
     &			 )
C
	IF (.NOT.IERR) THEN
	   TYPE *,'*** FATAL - Error getting program mode information'
	   CALL LIB$SIGNAL( %VAL(IERR) )
	   IS_BATCH = .TRUE.		! assume we're batch
	   GOTO 9999			! and give this up
	ENDIF
C
C otherwise, what is our state?
C
	IF ( RESULT(1:RESLEN).EQ.'BATCH' ) THEN
	   IS_BATCH = .TRUE.
	ELSE
	   IS_BATCH = .FALSE.
	ENDIF
C
9999	RETURN
        END
