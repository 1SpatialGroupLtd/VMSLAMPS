	SUBROUTINE CHKBOX(I_RIV_STA,I_RIV_FIN,I_CON_STA,I_CON_FIN)
C
***	IDENT	29OC85
***	MODULE	CHKBOX
C
C	Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.
C	Created   : ACM				Feb	1984
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:RIV3D/
C
C parameters in
	INTEGER		I_RIV_STA,I_RIV_FIN	! river-box sec range
	INTEGER		I_CON_STA,I_CON_FIN	! contour-box sec range
C
***	COMMON/HERE:RIV3D/
***	COMMON/HERE:QUADTREE/			! has NBOX
C
C workspace
	INTEGER		I_RIV,I_CON		! riv/con-box sec indics
	INTEGER		IP_RIV			! riv pnt RIV index
	INTEGER		IP_RIV_STA,IP_RIV_FIN	! IP_RIV DO range
	INTEGER		IP_CON			! con pnt P index
	INTEGER		IP_CON_STA,IP_CON_FIN	! IP_CON DO range
	INTEGER		STA_PTR,LAST_PTR,CURR_PTR	! INTP pointers
	REAL		P1X,P1Y,P2X,P2Y		! river seg end points
	REAL		Q1X,Q1Y,Q2X,Q2Y		! contour seg end points
	REAL		X,Y,Z			! int pt coords
	REAL		DX,DY
	REAL		NEW_DIST,CURR_DIST	! distances to P1
C
C functions
	LOGICAL		SEGINT			! check int betw segs
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Finds all intersections between river and contour sections
C	in ranges given, and puts them into the linked list of int pts
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C for each river section
	DO 40 I_RIV = I_RIV_STA, I_RIV_FIN
C
C for each segment in this river section
	  IP_RIV_STA = RIVBOX(1,I_RIV,NBOX)
	  IP_RIV_FIN = RIVBOX(2,I_RIV,NBOX)
	  DO 30 IP_RIV = IP_RIV_STA,IP_RIV_FIN-1
C
C set up river seg end points
	    P1X = RIVP(1,IP_RIV)
	    P1Y = RIVP(2,IP_RIV)
	    P2X = RIVP(1,IP_RIV+1)
	    P2Y = RIVP(2,IP_RIV+1)
C
C set up pointer to first int pt record for this river segment
	    STA_PTR = HEAD(IP_RIV)
C
C for each contour section
	    DO 20 I_CON = I_CON_STA,I_CON_FIN
C
C for each segment in this contour section
	      IP_CON_STA = CONBOX(1,I_CON,NBOX)
	      IP_CON_FIN = CONBOX(2,I_CON,NBOX)
	      DO 10 IP_CON = IP_CON_STA, IP_CON_FIN-1
C
C set up contour seg end points
	        Q1X = CONTOUR(1,IP_CON)
	        Q1Y = CONTOUR(2,IP_CON)
	        Q2X = CONTOUR(1,IP_CON+1)
	        Q2Y = CONTOUR(2,IP_CON+1)
C
	        IF (SEGINT(P1X,P1Y,P2X,P2Y,Q1X,Q1Y,Q2X,Q2Y,X,Y))THEN
C
C create a new contour-intersection pt record
	          TAILPTR = TAILPTR+1
	          INTP(1,TAILPTR) = X
	          INTP(2,TAILPTR) = Y
	          INTP(3,TAILPTR) = HEIGHT	            
C
C place this int pt into its linked list, ordered by dist along seg
	          IF (STA_PTR.EQ.NILL) THEN
C
C if list of ints along this segment is empty, place int at head of list
	            HEAD(IP_RIV) = TAILPTR
	            INTP(4,TAILPTR) = NILL
	          ELSE
C
C else, note distance of int found from start of segment and then move
C through list until this noted distance is less than the distance
C to the current intersection -then place the new intersection into the
C list just before this element
	            NEW_DIST = ABS(X-P1X)+ABS(Y-P1Y)
	            CURR_PTR = STA_PTR
C
5	            LAST_PTR = CURR_PTR
	            CURR_PTR = INTP(4,LAST_PTR)
	            IF (CURR_PTR.EQ.NILL) THEN
C
C come to end if list, so append new int to end of list
	              INTP(4,LAST_PTR) = TAILPTR
	              INTP(4,TAILPTR) = NILL
	            ELSE
	              DX = INTP(1,CURR_PTR)-P1X
	              DY = INTP(2,CURR_PTR)-P1Y
	              CURR_DIST = ABS(DX)+ABS(DY)
	              IF (NEW_DIST.GT.CURR_DIST) GOTO 5
	              INTP(4,LAST_PTR) = TAILPTR
	              INTP(4,TAILPTR) = CURR_PTR
	            END IF
	          END IF
	        END IF
10	      CONTINUE	! loop for next point in contour
20	    CONTINUE	! loop for next contour section
30	  CONTINUE	! loop for next point in river
40	CONTINUE	! loop for next river section
C
	END
