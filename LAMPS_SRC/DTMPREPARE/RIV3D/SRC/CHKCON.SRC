C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-09-25 12:08:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHKCON
C
***	IDENT	25SE86
***	MODULE	CHKCON
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Created   : ACM					Jan 1985
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:RIV3D/
C
***	COMMON/HERE:RIV3D/
***	COMMON/HERE:QUADTREE/
C
C workspace
	INTEGER		STARIV,FINRIV	! riv sec range
	INTEGER		STACON,FINCON	! con sec range
	INTEGER		NCSECS		! No. of contour sections
	INTEGER		NRSECS		! No. of river sections
	INTEGER		NRSEGS		! No. of riv segments in a box
	INTEGER		NCSEGS		! No. of con segments in a box
	INTEGER		IBOX(0:MAXDEP)	! quad indices for each depth
	INTEGER		IX,IY		! current box index coords
	INTEGER		IQ		! box index
	INTEGER		NCHKS		! No. of seg int checks required
	LOGICAL		GROUNDED	! river box not subdivided?
	LOGICAL 	OVERFLOW	! BOX dimension overflow?
C
C functions
	LOGICAL		DIVBOX		! divide box into quarters
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Finds all intersections between contour in CONTOUR and
C	every river
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C initialise structure by setting up box 1 at level 0
	CONBOX(1,1,1) = 1		! No. of contour sections
	CONBOX(2,1,1) = STRLEN-1	! No. of contour segments
C
	CONBOX(1,4,1) = 1		! index of first point
	CONBOX(2,4,1) = STRLEN		! index of last point
C
	CONSTA(1,0) = 1			! box 1 at level 0 starts at 1
	RIVSTA(1,0) = 1			! follow river tree also
C
	USED(1) = 3+1			! 1st subsection to start at 5
	USED(2) = 0
	USED(3) = 0
	USED(4) = 0
C
C start recursive procedure for quad-tree riv/con intersection check
C
	BOXDEP = 0
C
40	IBOX(BOXDEP) = 0
50	IBOX(BOXDEP) = IBOX(BOXDEP)+1	! boxes are numbered 1 to 4
	IF (IBOX(BOXDEP).GT.4) THEN	! if no more boxes at this depth
	  BOXDEP = BOXDEP-1		! pop box depth,
	  IF (BOXDEP.GT.0) GOTO 50	! until stack empty
	  GOTO 60			! return
	END IF
C
	NBOX = IBOX(BOXDEP)		! quarter number
C
	STARIV = RIVSTA(NBOX,BOXDEP)	! RIVBOX addr of riv box
	IF (STARIV.EQ.0) GOTO 50	! empty river box?
	NRSEGS = RIVBOX(2,STARIV,NBOX)	! No. of riv segs
C
	STACON = CONSTA(NBOX,BOXDEP)	! CONBOX addr of con box
	IF (STACON.EQ.0) GOTO 50	! empty contour box?
	NCSEGS = CONBOX(2,STACON,NBOX)	! No. of con segs
C
	NCHKS = NRSEGS*NCSEGS		! No. of checks required
C
C find next box lower left corner
	IF (BOXDEP.NE.0) THEN
	  IX = (NBOX-1)/2
	  IY = (NBOX-1)-2*IX
	  LL(1,BOXDEP) = LL(1,BOXDEP-1)+IX*BOXWID(1,BOXDEP)
	  LL(2,BOXDEP) = LL(2,BOXDEP-1)+IY*BOXWID(2,BOXDEP)
	END IF
C
C if > max number of checks required in box, and further subdivision is
C still possible, and corresponding river box is divided, then subdivide
C
	IF (BOXDEP.GE.MAXDEP) THEN
	  GROUNDED = .TRUE.
	  GOTO 77
	END IF
C
	RIVSTA(1,BOXDEP+1) = RIVBOX(1,STARIV+1,NBOX) ! find where next
	RIVSTA(2,BOXDEP+1) = RIVBOX(2,STARIV+1,NBOX) ! riv boxes start
	RIVSTA(3,BOXDEP+1) = RIVBOX(1,STARIV+2,NBOX)
	RIVSTA(4,BOXDEP+1) = RIVBOX(2,STARIV+2,NBOX)
C
	GROUNDED = RIVSTA(1,BOXDEP+1).EQ.0.AND.	! river box not divided
     +	           RIVSTA(2,BOXDEP+1).EQ.0.AND.	! if and only if all 4
     +	           RIVSTA(3,BOXDEP+1).EQ.0.AND.	! sub boxes are null
     +	           RIVSTA(4,BOXDEP+1).EQ.0
C
77	IF ((NCHKS.GT.MAXCHK).AND..NOT.GROUNDED)
     +	THEN
	  DO 65 IQ = 1,4
65	  CONSTA(IQ,BOXDEP+1) = USED(IQ)+1
C
	  CONBOX(1,STACON+1,NBOX) = CONSTA(1,BOXDEP+1) ! note start addr
	  CONBOX(2,STACON+1,NBOX) = CONSTA(2,BOXDEP+1)
	  CONBOX(1,STACON+2,NBOX) = CONSTA(3,BOXDEP+1)
	  CONBOX(2,STACON+2,NBOX) = CONSTA(4,BOXDEP+1)
C
	  STACON = CONSTA(NBOX,BOXDEP)
	  NCSECS = CONBOX(1,STACON,NBOX)! No. of contour sections
	  STACON = STACON+3		! index of first section record
	  FINCON = STACON+NCSECS-1	! index of last section record
C
	  OVERFLOW =
     +	    .NOT.DIVBOX(CONBOX,MAXCONBOX,STACON,FINCON,CONTOUR,MAXPTS)
C					! divide into 4 boxes
	  IF (OVERFLOW) THEN
	    CALL WRITEF('*** FATAL - Contour storage overflow')
	    CALL EXIT
	  END IF
C
	  DO 66 IQ = 1,4
	  NCSECS = CONBOX(1,CONSTA(IQ,BOXDEP+1),IQ)
	  IF (NCSECS.EQ.0.) THEN	! box was empty
	    CONSTA(IQ,BOXDEP+1) = 0	! start address := nul
	    USED(IQ) = USED(IQ)-3	! to be overwritten
	  END IF
66	  CONTINUE

	  BOXDEP = BOXDEP+1		! push box depth
C
	  GOTO 40			! start over at new depth
	ELSE				! check this box for intersectns
	  STARIV = RIVSTA(NBOX,BOXDEP)+3! set river section range
	  NRSECS = RIVBOX(1,RIVSTA(NBOX,BOXDEP),NBOX)
	  FINRIV = STARIV+NRSECS-1
	  STACON = CONSTA(NBOX,BOXDEP)+3! set contour section range
	  NCSECS = CONBOX(1,CONSTA(NBOX,BOXDEP),NBOX)
	  FINCON = STACON+NCSECS-1
C
	  CALL CHKBOX(STARIV,FINRIV,STACON,FINCON)
	END IF
C
	GOTO 50				! move on to next box
C
60	END
