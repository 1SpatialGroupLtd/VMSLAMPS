C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-09-25 11:14:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DIVSEC(BOX,BOXDIM,X1,X2,X3,Y1,Y2,Y3,
     +	                        NSECS,NSEGS,P,PDIM,IP_STA,IP_FIN)
C
***     IDENT   25SE86
***     MODULE  DIVSEC
C
C       Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.
C       Created   : ACM					Mar 1985
C
	IMPLICIT        NONE
C
***	PARAMETER/HERE:RIV3D/
C
C parameters in
	INTEGER		BOXDIM			! BOX dimension
	INTEGER		BOX(2,BOXDIM,4)		! tree for extension
	INTEGER		IP_STA,IP_FIN		! sec end pt P indices
	INTEGER		NSECS(4)		! section count
	INTEGER		NSEGS(4)		! segment count
	INTEGER		PDIM			! P dimension 
	REAL		P(2,PDIM)		! array of path points
	REAL		X1,X2,X3,Y1,Y2,Y3	! sub box x and y limits
C
***	COMMON/HERE:QUADTREE/
C
C workspace
	INTEGER		IP		! original point P index
	INTEGER		IA,IB      	! consecutive segment indices
	INTEGER         IQ,JQ		! quadrant index
	INTEGER		ISEC,TSEC	! BOX 2nd index
	INTEGER		IXBOX,IYBOX,JXBOX,JYBOX	! PI and PJ INT coords
	INTEGER		IBOX,JBOX,KBOX	! box indices
	INTEGER		MAP(2,4)	! misc. look-up function
	REAL		XBOX,YBOX	! PJ coords wrt box lwr lft cnr
	REAL		DX,DY		! sub box dimensions
	REAL		XI,YI,XJ,YJ	! consec pts PI and PJ
	REAL		FIN(2)		! store for sec end pt
	REAL		AX,AY,A		! vector scale factors
C
	DATA	MAP/3,2,1,4,4,1,2,3/
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Divides a single path section in a box into the 4 quarter boxes
C
C	Function result true iff function is successfull
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	DX = BOXWID(1,BOXDEP+1)		! set sub box dimensions
	DY = BOXWID(2,BOXDEP+1)
C
C clip first and last segments to box, because DO loop requires all
C points to be within one of the four quarter boxes
C
C clip last segment
	XI = P(1,IP_FIN-1)		! PI
	YI = P(2,IP_FIN-1)
	XJ = P(1,IP_FIN)		! PJ
	YJ = P(2,IP_FIN)
	IF (XI.NE.XJ) THEN		! not vertical
	  IF (XJ.LT.X1) THEN
	    AX = (X1-XJ)/(XI-XJ)
	  ELSE IF (XJ.GT.X3) THEN
	    AX = (X3-XJ)/(XI-XJ)
	  ELSE
	    AX = 0
	  END IF
	ELSE
	  AX = 0
	END IF
C
	IF (YI.NE.YJ) THEN		! not horizontal
	  IF (YJ.LT.Y1) THEN
	    AY = (Y1-YJ)/(YI-YJ)
	  ELSE IF (YJ.GT.Y3) THEN
	    AY = (Y3-YJ)/(YI-YJ)
	  ELSE
	    AY = 0
	  END IF
	ELSE
	  AY = 0
	END IF
C
	A = MAX(AX,AY)
	FIN(1) = XJ			! store original value of end pt
	FIN(2) = YJ			! to be restored later
	P(1,IP_FIN) = XJ+A*(XI-XJ)	! change end pt to new pt in box
	P(2,IP_FIN) = YJ+A*(YI-YJ)
C
C clip first segment
	XI = P(1,IP_STA)		! PI
	YI = P(2,IP_STA)
	XJ = P(1,IP_STA+1)		! PJ
	YJ = P(2,IP_STA+1)
	IF (XI.NE.XJ) THEN		! not vertical
	  IF (XI.LT.X1) THEN
	    AX = (X1-XI)/(XJ-XI)
	  ELSE IF (XI.GT.X3) THEN
	    AX = (X3-XI)/(XJ-XI)
	  ELSE
	    AX = 0
	  END IF
	ELSE
	  AX = 0
	END IF
C
	IF (YI.NE.YJ) THEN		! not horizontal
	  IF (YI.LT.Y1) THEN
	    AY = (Y1-YI)/(YJ-YI)
	  ELSE IF (YI.GT.Y3) THEN
	    AY = (Y3-YI)/(YJ-YI)
	  ELSE
	    AY = 0
	  END IF
	ELSE
	  AY = 0
	END IF
C
	A = MAX(AX,AY)
	XI = XI+A*(XJ-XI)		! change sta pt to new pt in box
	YI = YI+A*(YJ-YI)
C
	XBOX = XI-X1			! PI coords wrt box lwr lft cnr
	YBOX = YI-Y1
	IXBOX = XBOX/DX			! PI int coords wrt box ll cnr
	IYBOX = YBOX/DY
	IXBOX = MAX(0,MIN(1,IXBOX))
	IYBOX = MAX(0,MIN(1,IYBOX))
C
	IBOX = 2*IXBOX+IYBOX+1		! No. of box PI is in
C
C start path in box JBOX with pt PI
	NSEGS(IBOX) = NSEGS(IBOX)+1	! count another segment
	NSECS(IBOX) = NSECS(IBOX)+1	! count another section
	ISEC = USED(IBOX)+NSECS(IBOX)
	IF (ISEC.GT.BOXDIM) THEN	! BOX dimension overflow?
	  CALL WRITEF(
     & '*** FATAL - Boxdim (%^L%N) is too small ***',BOXDIM)
	  DIVSEC = .FALSE.		! failure
	  CALL EXIT			! better?
	  GOTO 90			! return
	END IF
	BOX(1,ISEC,IBOX) = IP_STA	! P index of section start pnt
C
C now loop for each intermediate seg (ie. not first or last segs in sec)
C
	XJ = XI				! initialise DO-loop
	YJ = YI
	JBOX = IBOX
C
	DO 70 IP = IP_STA+1,IP_FIN
	XI = XJ				! PI
	YI = YJ
	IBOX = JBOX
C
	XJ = P(1,IP)			! PJ
	YJ = P(2,IP)
	XBOX = XJ-X1			! PJ coords wrt box lwr lft cnr
	YBOX = YJ-Y1
C
	JXBOX = XBOX/DX			! PJ int coords wrt box ll cnr
	JYBOX = YBOX/DY
	JXBOX = MAX(0,MIN(1,JXBOX))
	JYBOX = MAX(0,MIN(1,JYBOX))
	JBOX = 2*JXBOX+JYBOX+1		! No. of box PJ is in
C
	IF (IBOX.EQ.JBOX) THEN
C
C points in same box
	  NSEGS(IBOX) = NSEGS(IBOX)+1	! just count another segment
	ELSE
C
C points not in same box
C
C stop path in box IBOX with pt PJ
	  ISEC = USED(IBOX)+NSECS(IBOX)
	  BOX(2,ISEC,IBOX) = IP
C
C start path in box JBOX with pt PI
	  NSEGS(JBOX) = NSEGS(JBOX)+1	! count another segment
	  NSECS(JBOX) = NSECS(JBOX)+1	! count another section
	  ISEC = USED(JBOX)+NSECS(JBOX)
	  IF (ISEC.GT.BOXDIM) THEN	! BOX dimension overflow?
	    CALL WRITEF(
     & '*** FATAL - Boxdim (%^L%N) is too small ***',BOXDIM)
	    DIVSEC = .FALSE.		! failure
	    CALL EXIT
	    GOTO 90			! return
	  END IF
	  BOX(1,ISEC,JBOX) = IP-1	! P index of section start pnt
C
	  IF (IBOX+JBOX.NE.5) GOTO 70	! boxes not diagonally opposite
C
C boxes diagonally opposite
C
C start and stop a 1 seg section in box KBOX traversed by this segment
	  IF ((X2-XJ)*(YI-YJ)+(Y2-YJ)*(XJ-XI).GT.0) THEN
	    KBOX = MAP(1,IBOX)
	  ELSE
	    KBOX = MAP(2,IBOX)
	  END IF
C
C start path in box KBOX with pt PI
	  NSEGS(KBOX) = NSEGS(KBOX)+1	! count another segment
	  NSECS(KBOX) = NSECS(KBOX)+1	! count another section
	  TSEC = USED(KBOX)+NSECS(KBOX)
	  IF (TSEC.GT.BOXDIM) THEN	! BOX dimension overflow?
	    CALL WRITEF(
     & '*** FATAL - Boxdim (%^L%N) is too small ***',BOXDIM)
	    DIVSEC = .FALSE.		! failure
	    CALL EXIT
	    GOTO 90			! return
	  END IF
	  BOX(1,TSEC,KBOX) = IP-1	! P index of section start pnt
C
C stop path in box KBOX with pt PJ
	  BOX(2,TSEC,KBOX) = IP
	END IF
70	CONTINUE			! loop for next point
C
C close box with path still open
	BOX(2,ISEC,JBOX) = IP_FIN
C
	DIVSEC = .TRUE.			! function was successful
C
C restore original end pt
90	P(1,IP_FIN) = FIN(1)
	P(2,IP_FIN) = FIN(2)
	END
