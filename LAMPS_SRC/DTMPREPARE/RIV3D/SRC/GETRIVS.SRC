C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-09-25 11:48:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	SUBROUTINE GETRIVS
C
***     IDENT   25SE86
***     MODULE  GETRIVS
C
C       Copyright : Laser-Scan Laboratories Ltd, Cambridge, England.
C
CMOD	Messages modified for ridge-line option		TJH 10-Oct-1985
C       Created   : ACM  Feb 1984
C
	IMPLICIT        NONE
C
***	PARAMETER/HERE:RIV3D/
***     COMMON/HERE:RIV3D/
***	COMMON/LSL$CMNIFF:IFFHAN/	! has IERCD
C
C workspace
	INTEGER		I
	INTEGER*2	FTN		! feature code
	INTEGER		IP_RIV		! RIV index
	INTEGER		COMLEN		! command line length
	REAL		RANGE(4)	! point coord ranges
	REAL		MAXRANGE	! max range dimension
	LOGICAL		GOT_STRING	! got a complete string?
C
C functions
	INTEGER		TXTCML		! read a command line
	LOGICAL		RDFNAM		! read IFF filename
	LOGICAL		APPRIV		! append a river string to RIV
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Appends every river from the river IFF file (within the
C	specified range of overlays) into the RIV array
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C open river IFF file
10	CALL IFFOPN(2,RIVFILE,0)
	IF (IERCD.NE.0) THEN		! if bad, get another filename
	  RFLEN = INDEX(RIVFILE,' ')
	  IF (RFLEN.EQ.0) RFLEN = 80
	  CALL WRITEF
     &	  ('*** WARNING - '//
     &     'Can''t open %S IFF file %S',LINE_TYPE,RIVFILE(1:RFLEN))
20	  COMLEN = TXTCML('%S filename> ',LINE_TYPE)
	  IF (COMLEN.EQ.-10) GOTO 20	! do not quit
	  CALL BSLN
	  GOT_RIVFILE = RDFNAM(RIVFILE)	! read filename from TXTBUF
	  IF (.NOT.GOT_RIVFILE) GOTO 20	! get another filename
	  GOTO 10			! try this filename
	END IF
C
C get river coordinate ranges
	CALL IFFNXC('RA',IELEN)		! find range entry
	IF (IELEN.EQ.-1) THEN
	  CALL WRITEF('*** WARNING - No range in %S file',LINE_TYPE)
	  GOTO 20			! try another river file
	END IF
C
	CALL EIHRR(RANGE,4,1)		! read X and Y ranges
	XMIN = RANGE(1)			! set ranges
	XMAX = RANGE(2)
	YMIN = RANGE(3)
	YMAX = RANGE(4)
	MAXRANGE = MAX(XMAX-XMIN,YMAX-YMIN)
	SHIFT = MAXRANGE/10000
	IF (TCHDST.LT.0) TCHDST= MAXRANGE/500
C
C set state data to initial-state
	N_RIVPTS = 0			! clear riv pt count
	N_RIVERS = 0			! clear river count
	IP_RIV = 0			! no points in RIV yet
	STRLEN = 0			! no points in RIVER yet
	CALL IFFRWD			! rewind IFF file
	FEATURE_OPEN = .FALSE.
C
C read and process each relevant IFF entry
30	CALL IFFNXT(IECODE,IELEN)	! find next IFF entry
C
	IF (IELEN.EQ.-1) THEN		! fatal error?
	  IF (RIDGE) THEN
	     CALL WRITEF('*** WARNING - Error reading ridge file')
	  ELSE
	     CALL WRITEF('*** WARNING - Error reading river file')
	  ENDIF
	  GOTO 20			! try another river file
	END IF
C
	IF (IECODE.EQ.'NF') THEN
	  FEATURE_OPEN = .TRUE.		! change state
	  FSN = 0			! clear longword
	  CALL EIHRI(FSN,1,1)		! read feature sequence number
	  FTN = 0			! no FS entry seen yet
	ELSE IF (IECODE.EQ.'FS') THEN
	  CALL EIHRI(FTN,1,1)		! read feature type number
	ELSE IF (IECODE.EQ.'ST') THEN
	  DO 32 I = 1,NRFC		! check for river feature code
32	  IF (FTN.EQ.RFC(I)) GOTO 33
	  IF (NRFC.GT.0) GOTO 34
33	  CALL GETSTR(RIVER)		! append river ST
34	  CONTINUE
	ELSE IF (IECODE.EQ.'EF') THEN
	  FEATURE_OPEN = .FALSE.	! change state
	ELSE IF (IECODE.EQ.'NO') THEN
35	  CALL EIHRI(OSN,1,1)		! read overlay number
	  IF (OSN.LT.OSNMIN) THEN	! overlay not in range?
	    FEATURE_OPEN = .FALSE.	! change state
	    CALL IFFNXC('NO',IELEN)	! find next overlay
	    IF (IELEN.EQ.-1) GOTO 40	! no further overlays
	    GOTO 35			! check this overlay number
	  ELSE IF(OSN.GT.OSNMAX) THEN	! no further overlay of interest
	    FEATURE_OPEN = .FALSE.	! change state
	    CALL IFFNXC('NO',IELEN)	! find next overlay
	    IF (IELEN.EQ.-1) GOTO 40	! no further overlays
	    GOTO 35			! check this overlay number
	  END IF
	ELSE IF (IECODE.EQ.'EO') THEN
	  FEATURE_OPEN = .FALSE.	! change state
	ELSE IF (IECODE.EQ.'EJ') THEN
	  GOTO 40			! return
	END IF
C
	GOT_STRING = STRLEN.GT.0.AND..NOT.FEATURE_OPEN
	IF (GOT_STRING) THEN		! append string to RIV array?
	  RIVERS_FULL = .NOT.APPRIV(IP_RIV,STRLEN)
	  IF (RIVERS_FULL) THEN
	    CALL FLWRTF
     &	      ('*** FATAL - Total number of %S points > %^L%N',
     &	      LINE_TYPE,MAXRP)
	    CALL EXIT
	    CALL FLWRTF('    Excess points ignored')
	    GOTO 40			! return
	  END IF
	  N_RIVERS = N_RIVERS+1		! count rivers
	  IF (N_RIVERS.GT.MAXRIVS) THEN
	    CALL WRITEF
     &	      ('*** FATAL - '//
     &	       'river storage overflow (> %N rivers)',MAXRIVS)
	    CALL EXIT
	  END IF
	  N_RIVPTS = N_RIVPTS+STRLEN	! count river points
	  STRLEN = 0
	  IF (NOTBATCH) WRITE(*,'(1H+,I7,'' '')')N_RIVERS! show progress
	END IF
C
	GOTO 30				! move on to next IFF entry
C
40	IF (PANOUT) CALL IFFCLO(2)
	END
