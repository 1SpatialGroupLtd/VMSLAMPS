	SUBROUTINE NODHGTS
C
***	IDENT	01NO85
***	MODULE	NODHGTS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Feb 1985
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:RIV3D/
C
***	COMMON/HERE:RIV3D/
C
C workspace
	INTEGER		I_RIV		! river counter
	INTEGER		IP,IP_STA,IP_FIN! river end pt RIV indices
	INTEGER		NRPTS		! No. of pts in a river
	INTEGER		IEND		! end index = 1,2
	INTEGER		INODE		! node index
	INTEGER		INODE_1,INODE_2	! node indices
	INTEGER		PTR,PTR_1,PTR_2	! INTP pointers
	REAL		L,L1,L2		! dist of int from node
	REAL		DX,DY
	REAL		X1,Y1,Z1	! int pt at river start
	REAL		X2,Y2,Z2	! int pt at river end
	LOGICAL		FLOWS_DOWN! river/ridge falls from start to fin?
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Estimates node heights wherever possible
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C put height and distance from river/ridge end of the intersections
C nearest to either end of the river/ridge into the nodes corresponding
C to each end
C
C for each river do
	IP_FIN = 0			! index of previous end point
	DO 50 I_RIV = 1,N_RIVERS
	  IP_STA = IP_FIN+2		! RIV index of first point
	  NRPTS = RIVP(1,IP_STA-1)	! No. of pts in river
	  IP_FIN = IP_STA+NRPTS-1	! RIV index of last point
C
C find contour intersection nearest to each end of river
	  PTR_1 = NILL
	  PTR_2 = NILL
	  PTR = NILL
C
	  DO 10 IP = IP_STA,IP_FIN
	    PTR = HEAD(IP)
14	    IF (PTR.EQ.NILL) GOTO 10	! found first intersection?
	    IF (PTR_1.NE.NILL) GOTO 15
	    PTR_1 = PTR		! note position of 1st intersection
15	    PTR_2 = PTR
	    PTR = INTP(4,PTR)
	    GOTO 14
10	  CONTINUE
C
C direction of flow defined?
	  IF (PTR_1.EQ.NILL.OR.PTR_1.EQ.PTR_2) GOTO 50
C
C found both intersection points, so now set them up
	  X1 = INTP(1,PTR_1)
	  Y1 = INTP(2,PTR_1)
	  Z1 = INTP(3,PTR_1)
C
	  X2 = INTP(1,PTR_2)
	  Y2 = INTP(2,PTR_2)
	  Z2 = INTP(3,PTR_2)
C
C find dists if int pts from respective nodes
	  INODE_1 = ENDS(1,I_RIV)
	  INODE_2 = ENDS(2,I_RIV)
C
	  DX = NODE(1,INODE_1)-X1
	  DY = NODE(2,INODE_1)-Y1
	  L1 = SQRT(DX**2+DY**2)
C
	  DX = NODE(1,INODE_2)-X2
	  DY = NODE(2,INODE_2)-Y2
	  L2 = SQRT(DX**2+DY**2)
C
C put hgt and dist of int from nodes into appropriate nodes
	  FLOWS_DOWN = Z1.GT.Z2
	  IF (FLOWS_DOWN) THEN
	    NODE(3,INODE_1) = Z1
	    NODE(4,INODE_1) = L1
	    NODE(5,INODE_2) = Z2
	    NODE(6,INODE_2) = L2
	  ELSE
	    NODE(3,INODE_2) = Z2
	    NODE(4,INODE_2) = L2
	    NODE(5,INODE_1) = Z1
	    NODE(6,INODE_1) = L1
	  END IF
C
50	CONTINUE
C
C now, for each node with an intersection both up and downstream,
C set its heights into NODE(3,INODE) using linear interpolation
C along the length of the river between these two points - else set
C this height := -1 to signal that the node height is not defined
C
	DO 60 INODE = 1,N_NODES
	  Z1 = NODE(3,INODE)
	  Z2 = NODE(5,INODE)
	  IF (Z1.EQ.-1.OR.Z2.EQ.-1) THEN
	    NODE(3,INODE) = -1
	  ELSE
	    L1 = NODE(4,INODE)
	    L2 = NODE(6,INODE)
	    NODE(3,INODE) = (Z1*L2+Z2*L1)/(L1+L2)
	  END IF
60	CONTINUE
C
	END
