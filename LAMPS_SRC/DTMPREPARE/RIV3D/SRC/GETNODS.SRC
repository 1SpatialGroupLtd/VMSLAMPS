	SUBROUTINE GETNODS
C
***	IDENT	25SE86
***	MODULE	GETNODS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Feb 1985
C
CMOD	modified to call routine which references 
C	  nodes to rivers for the network		JMPW May  1986
Cmod	alter the way the touch dist is used 		JMPW July 1986
	IMPLICIT NONE
C
***	PARAMETER/HERE:RIV3D/		! array dimensions for .CMN
C
***	COMMON/HERE:RIV3D/		! has RIV
C
C workspace
	INTEGER		I,INODE		! loop counters
	INTEGER		I_RIV		! river counter
	INTEGER		IP_STA,IP_FIN	! RIV pt river start & end inds
	INTEGER		NRPTS		! No. of pts in a river
	REAL		X(2),Y(2)	! start & end pt coords
	REAL		DX,DY		! vec diff betwn pts
	REAL		DS		! approx dist between points
	REAL		TCHD2		! squar of touch dist
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Finds all river nodes
C
C	A 'river node' is any pnt that is a river end pnt or a river
C	junction.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	TCHD2 = TCHDST**2
	N_NODES = 0			! zero node count
C
C for each river do
	IP_FIN = 0			! index of previous end point
	DO 30 I_RIV = 1,N_RIVERS
C
	  IP_STA = IP_FIN+2		! RIV index of first point
	  NRPTS = RIVP(1,IP_STA-1)	! No. of pts in river
	  IP_FIN = IP_STA+NRPTS-1	! RIV index of last point
C
	  X(1) = RIVP(1,IP_STA)		! P(1) is start point
	  Y(1) = RIVP(2,IP_STA)
	  X(2) = RIVP(1,IP_FIN)		! P(2) is end point
	  Y(2) = RIVP(2,IP_FIN)
C
C check both end pts against list of nodes accumulated so far
	  DO 20 I = 1,2			! for start and end pts do
	    DO 10 INODE = 1,N_NODES	! for each old node do
	      DX = X(I)-NODE(1,INODE)
	      DY = Y(I)-NODE(2,INODE)
	      DS = DX**2 + DY**2
	      IF (DS.LE.TCHD2) THEN	! not a new node
	        ENDS(I,I_RIV) = INODE	! note pointer to node
C
CC force ends together
C	        GOTO(7,8) I
C7	        RIVP(1,IP_STA) = NODE(1,INODE)
C	        RIVP(2,IP_STA) = NODE(2,INODE)
C	        GOTO 20
C8	        RIVP(1,IP_FIN) = NODE(1,INODE)
C	        RIVP(2,IP_FIN) = NODE(2,INODE)
C	        GOTO 20
C
C force ends apart
	        GOTO(7,8) I
7	        DX = RIVP(1,IP_STA+1)-RIVP(1,IP_STA)
	        DY = RIVP(2,IP_STA+1)-RIVP(2,IP_STA)
	        DS = ABS(DX)+ABS(DY)
	        DX = DX*SHIFT/DS
	        DY = DY*SHIFT/DS
	        RIVP(1,IP_STA) = RIVP(1,IP_STA)+DX
	        RIVP(2,IP_STA) = RIVP(2,IP_STA)+DY
	        GOTO 20
8	        DX = RIVP(1,IP_FIN-1)-RIVP(1,IP_FIN)
	        DY = RIVP(2,IP_FIN-1)-RIVP(2,IP_FIN)
	        DS = ABS(DX)+ABS(DY)
	        DX = DX*SHIFT/DS
	        DY = DY*SHIFT/DS
	        RIVP(1,IP_FIN) = RIVP(1,IP_FIN)+DX
	        RIVP(2,IP_FIN) = RIVP(2,IP_FIN)+DY
	        GOTO 20
	      END IF
10	    CONTINUE
C
C no match found, so add new node to list
	    IF (N_NODES.EQ.MAXNODS) THEN
	      CALL WRITEF
     &	      ('*** FATAL - Node storage overflow (> %N nodes)',N_NODES)
	      CALL EXIT
	    END IF
	    N_NODES = N_NODES+1
	    NODE(1,N_NODES) = X(I)
	    NODE(2,N_NODES) = Y(I)
	    NODE(3,N_NODES) = -1
	    NODE(5,N_NODES) = -1
	    ENDS(I,I_RIV) = N_NODES	! note pointer to node
20	  CONTINUE			! loop for end pt
C
	  IF (NOTBATCH) WRITE(*,'(1H+,I7,'' '')')N_NODES ! show progress
30	CONTINUE			! loop for next I river
C
C	now to reference the nodes to thier rivers
C
	CALL NDTORV
C
40	END
