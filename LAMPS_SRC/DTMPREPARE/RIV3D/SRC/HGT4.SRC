C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-10-29 12:18:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	REAL FUNCTION HGT4(HA1,HA2,HB1,HB2,LA1,LA2,LB1,LB2)
C
***	IDENT	29OC85
***	MODULE	HGT4
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					Feb 1985
C
CMOD	Ridge-line code added				TJH 14-OCT-1985
C
	IMPLICIT NONE
C
C parameters
***	PARAMETER/HERE:RIV3D/
C
***	COMMON/HERE:RIV3D/		! RIVFILE, etc
C
	REAL		DEEP
	PARAMETER(	DEEP = 0.8*CONTOUR_INTERVAL)
C
C parameters in
	REAL		HA1,HA2		! hgts at vertical ends of cross
	REAL		HB1,HB2		! hgts at horiz ends of cross
	REAL		LA1,LA2		! lengths of vert arms of cross
	REAL		LB1,LB2		! lengths of horiz arms of cross
C
C workspace
	REAL		HA,HB		! interp hgts at cross centre
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Returns hgt of point in centre of cross
C
C	Returns HGT4 = -1 if height is undefined
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF (HA1.GE.0.AND.HA2.GE.0) THEN
	  IF (HA1.NE.HA2) THEN
	    HA = (LA1*HA2+LA2*HA1)/(LA1+LA2)
	  ELSE
	    IF (RIDGE) THEN	! ensure ht >= surrounding contour ht
	      HA = HA1+DEEP-DEEP*((LA1-LA2)/(LA1+LA2))**2
	    ELSE		! ensure ht <= surrounding contour ht
	      HA = HA1-DEEP+DEEP*((LA1-LA2)/(LA1+LA2))**2
	    END IF
	  END IF
	ELSE
	  HA = -1
	END IF
C   
	IF (HB1.GE.0.AND.HB2.GE.0) THEN
	  IF (HA1.NE.HA2) THEN
	    HB = (LB1*HB2+LB2*HB1)/(LB1+LB2)
	  ELSE
	    IF (RIDGE) THEN	! ensure ht >= surrounding contour ht
	      HB = HB1+DEEP-DEEP*((LB1-LB2)/(LB1+LB2))**2
	    ELSE		! ensure ht <= surrounding contour ht
	      HB = HB1-DEEP+DEEP*((LB1-LB2)/(LB1+LB2))**2
	    END IF
	  END IF
	ELSE
	  HB = -1
	END IF
C
	IF (HA.GE.0.AND.HB.GE.0) THEN
	  HGT4 = (HA+HB)/2
	ELSE IF (HA.GE.0) THEN
	  HGT4 = HA
	ELSE IF (HB.GE.0) THEN
	  HGT4 = HB
	ELSE
	  HGT4 = -1
	END IF
C
	END
