C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-03-19 11:29:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SETRIVS
C
***	IDENT	17FE86
***	MODULE	SETRIVS
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C	Created   : ACM					Jan 1985
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:RIV3D/
C
***	COMMON/HERE:RIV3D/
***	COMMON/HERE:QUADTREE/
C
C workspace
	INTEGER		STARIV,FINRIV	! riv sec range
	INTEGER		NRPTS		! No. of river points
	INTEGER		NRSECS		! No. of river sections
	INTEGER		NRSEGS		! No. of riv segments in a box
	INTEGER		IQ		! box index
	INTEGER		ID		! subdivision depth
	INTEGER		IBOX(0:MAXDEP)	! quad indices for each depth
	INTEGER		IX,IY		! current box index coords
	INTEGER		I_RIV		! river index
	INTEGER		IP_RIV_STA	! river section start RIV index
	INTEGER		IP_RIV_FIN	! river section fin RIV index
	LOGICAL		OVERFLOW	! BOX index overflow in DIVBOX?
	REAL		PCENT		! percentage of river area set
	REAL		DPC,DELPC	! PCENT increment
C
C functions
	LOGICAL		DIVBOX		! divide into quarters
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sets all rivers in RIV into river quadCtree structure,
C	terminating a branch only when a box contains no river
C	segments, or the maximum depth of subdivision has been reached
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C too few rivers?
	IF (N_RIVERS.LT.1) GOTO 70	! return
C
C find dimensions of outer box
	BOXWID(1,0) = XMAX-XMIN
	BOXWID(2,0) = YMAX-YMIN
C
C find lower-left corner of this box
	LL(1,0) = XMIN
	LL(2,0) = YMIN
C
C set dimensions of subsequent box subdivisions to be used
	DO 10 ID = 1,MAXDEP
	BOXWID(1,ID) = BOXWID(1,ID-1)/2
10	BOXWID(2,ID) = BOXWID(2,ID-1)/2
C
C initialise structure by setting up box 1 at level 0
	RIVSTA(1,0) = 1			! box 1 at level 0 starts at 1
	RIVBOX(1,1,1) = N_RIVERS	! No. of riv sections
	RIVBOX(2,1,1) = (N_RIVPTS-N_RIVERS)	! No. of riv segs
C
	IP_RIV_FIN = 0	
C
	DO 40 I_RIV = 4,N_RIVERS+3	! set river segments into box 1
	IP_RIV_STA = IP_RIV_FIN+2
	NRPTS = RIVP(1,IP_RIV_STA-1)
	IP_RIV_FIN = IP_RIV_STA+NRPTS-1
	RIVBOX(1,I_RIV,1) = IP_RIV_STA
40	RIVBOX(2,I_RIV,1) = IP_RIV_FIN
C
	USED(1) = 3+N_RIVERS		! amount of RIVBOX used so far
	USED(2) = 0
	USED(3) = 0
	USED(4) = 0
C
C start "recursive" procedure for setting up full river quad-tree
C
	PCENT = 0			! clear % of riv area set
	DELPC = 0			! diff in PCENT init := 0
	BOXDEP = 0			! start with whole map
C
50	IBOX(BOXDEP) = 0
60	IBOX(BOXDEP) = IBOX(BOXDEP)+1	! boxes are numbered 1 to 4
	IF (IBOX(BOXDEP).GT.4) THEN	! if no more boxes at this depth
	  BOXDEP = BOXDEP-1		! pop box depth,
	  IF (BOXDEP.GT.0) GOTO 60	! until stack empty
	  GOTO 70			! return
	END IF
C
	NBOX = IBOX(BOXDEP)
	STARIV = RIVSTA(NBOX,BOXDEP)
	IF (STARIV.EQ.0) GOTO 69	! nul (empty) box?
C
C find next box lower left corner
	IF (BOXDEP.NE.0) THEN
	  IX = (NBOX-1)/2
	  IY = (NBOX-1)-2*IX
	  LL(1,BOXDEP) = LL(1,BOXDEP-1)+IX*BOXWID(1,BOXDEP)
	  LL(2,BOXDEP) = LL(2,BOXDEP-1)+IY*BOXWID(2,BOXDEP)
	END IF
C
C subdivide if possible and necessary
	NRSEGS = RIVBOX(2,STARIV,NBOX)	! No. of river segments in box
	IF (NRSEGS.GT.MINRSEGS.AND.BOXDEP.LT.MAXDEP) THEN
	  DO 65 IQ = 1,4
65	  RIVSTA(IQ,BOXDEP+1) = USED(IQ)+1
C
	  NRSECS = RIVBOX(1,STARIV,NBOX)! No. of river sections
	  STARIV = STARIV+3		! index of first section record
	  FINRIV = STARIV+NRSECS-1	! index of last section record
C
	  OVERFLOW =
     +	    .NOT.DIVBOX(RIVBOX,MAXRIVBOX,STARIV,FINRIV,RIVP,MAXRP)
C					! subdivide into 4 boxes
	  IF (OVERFLOW) THEN
	    CALL WRITEF('*** RIVER STORAGE OVERFLOW')
	    CALL EXIT
	  END IF
C
C record start addresses of each sub-box, defined as nul (:== 0) if box
C contained no river segments, or ancestor could not be divided
	  DO 66 IQ = 1,4
	  NRSECS = RIVBOX(1,RIVSTA(IQ,BOXDEP+1),IQ)
	  IF (NRSECS.EQ.0.OR.OVERFLOW) THEN		! box was empty
	    RIVSTA(IQ,BOXDEP+1) = 0	! start address := nul
	    USED(IQ) = USED(IQ)-3	! to be overwritten
	  END IF
66	  CONTINUE
C
	  STARIV = STARIV-3
	  RIVBOX(1,STARIV+1,NBOX) = RIVSTA(1,BOXDEP+1) ! addr of box 1
	  RIVBOX(2,STARIV+1,NBOX) = RIVSTA(2,BOXDEP+1) ! addr of box 2
	  RIVBOX(1,STARIV+2,NBOX) = RIVSTA(3,BOXDEP+1) ! addr of box 3
	  RIVBOX(2,STARIV+2,NBOX) = RIVSTA(4,BOXDEP+1) ! addr of box 4
C
	  BOXDEP = BOXDEP+1		! push box depth
	  GOTO 50			! start over at new depth
	ELSE
C box will not be divided, so set all sub-box addrs to a null value = 0
	  RIVBOX(1,STARIV+1,NBOX) = 0	! addr of box 1
	  RIVBOX(2,STARIV+1,NBOX) = 0	! addr of box 2
	  RIVBOX(1,STARIV+2,NBOX) = 0	! addr of box 3
	  RIVBOX(2,STARIV+2,NBOX) = 0	! addr of box 4
	END IF
C
C show percentage of map area checked so far
C (not too often, as writing to screen is real-time consuming)
69	DPC = 100.0/4**BOXDEP
	PCENT = PCENT+DPC
	IF (DELPC.LT.0.5) THEN
	  DELPC = DELPC+DPC
	ELSE
	  IF (NOTBATCH) WRITE(*,'(1H+,F6.1,''% '')')PCENT
	  DELPC = 0
	END IF
C
	IF (PCENT.LT.100) GOTO 60	! move on to next box
C
70	IF (NOTBATCH) WRITE(*,'(1H+,F6.1,''% '')')PCENT
	END
