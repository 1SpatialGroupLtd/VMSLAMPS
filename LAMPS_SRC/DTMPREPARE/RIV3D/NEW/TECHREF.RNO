.title I3D Technical Documentation
.c;I3D Technical Reference
.s2
.c;ACM 6th-Jan-1988
.s2
.c;---------------------------------------------
.s4
CONTENTS
.s1
.ls
.le;Junction#height#estimation####################2
.le;Height#interpolation##########################6
.le;Notes#########################################8
.els

.page
.hl1^&JUNCTION HEIGHT ESTIMATION\&

The I3D junction height estimation procedure is defined functionally as
follows: 
.s1
.lm 8
Input##: Link/node structured 3D network in which all free end nodes and
possibly also some other nodes (the more the better) but no other points,
have a height set (all features must have been broken at every heighted
point before structuring).
.s1
Output#: The same network on plan exactly (no x or y coordinates changed,
deleted or added) but with every node height now set (using linear
interpolation as described below); and all two-arm nodes removed (and
junction structure changed accordingly).

.lm 0
.s1
The network may contain "cycles" and need not be "connected", but it must
have the following characteristics:
.ls
.le;There are just two kinds of link: those which must and those which need not
have monotonic fall (or "directed" and "undirected" respectively)

.le;There are no junctions between links of different kind

.le;Every free-end of a link has a height set

.le;No link has the same height set at each end. 
.els

Where (some connected component(s) of-) the network has flow, the direction of
flow along each link will be set as heights are interpolated along it. The
flow in the network as a whole must be consistent (i_.e_. no link must
change direction of fall; no non-terminal node must be a source or a sink;
and every path between every pair of nodes of different height anywhere in
the network must have monotonic fall).

.page
The first stage in height interpolation is therefore to find a consistant
flow through (each connected component of-) the network. This is done as
follows:
.ls
.le;Take any node

.le;Scan outwards from this node (building up a spanning tree for the network
component containing this node), noting the min and max heights in the network
untill there are no more nodes connected. 

.le;If this component is to have a flow then
.ls
.le;If not both of the min and max heighted nodes are terminal nodes, then warn
that the heighting in inconsistant and create a LITES2 command file indication
the position of all nodes with height outside the range of terminal node
heights -and stop. 

.le;Fix the direction of flow out from max ht terminal, and into min ht
terminal.

.le;Fix flow along each link of each path which is connected only by 2-arm
nodes where not all heights along the path are equal (note any such paths along
which fall is not monotonic for reporting later) 

.le;If any up/down paths were detected then indicate inflection points
in a LITES2 command file and stop.

.le;If any links (in this connected component directed network) are still not
directed, then 
.ls
.le;Fix max hts at to-ends and min hts at from-ends of all links already
directed

.le;Fix direction along all 2-arm connected paths for which the min ht at one
end is > the max ht at the other end 
.els

.le;If any links are still not directed (unlikely by this stage) then scan all
possible permutations of remaining directions until one is found which is legal
in the sense that there are no non-free-end nodes which are sources or sinks
(viz_. all arms out or all arms in resp_.). 

.le;If any node has not yet been visited, take this node and proceed from stage
1 above (i_.e_. repeat this process for each connected component of the
original possibly composite network).
.els


.page
Having established all flow directions, the algorithm which follows can be used
to find a height for each junction, starting each component with the node with
max ht and working out with a breadth first scan over a spanning tree of this
network (a "minimum spanning tree" might be best?).

In this algorithm, legal paths through the network are iether always
"upstream", always "downstream" (i_.e_. along rivers), or are undirected (eg_.
along ridge -lines, valley -lines or roads) 
.els

Each node height is estimated using linear interpolation along the length of
the path between the closest heighted nodes to it in iether direction ALONG A
LEGAL PATH THROUGH IT. The algorithm is as follows:
.lit

	Routine Find_node_height(a,Node_height)
Finds a height (Node_height) for node with index (a)
	i = 0
	For each node (b) reachable from (a) do
	  Disconnect link from (b) to (a)
	  i = i+1
	  Find_nearest_height(b,Ht(i),Dst(i))
	  Reconnect link from (b) to (a)
	end do

	Of all of the heights and associated distances found, for a node in a
	directed network, keep only the min height upstream and max height
	downstream -while for a node in an undirected network, where any
	heights are equal, keep only the closest. 

	If < 2 heights left, warn that no height can be estimated for this
	node and fail.

	If > 2 heights left, warn that contour map used to place heighted points
	must be incomplete

	Node_height = Sum(h(i)*w(i))/Sum(w(i)), where w(i) = 1/d(i)
	or          = h(i) if d(i) = 0 for some i.

	End
.el

.page
The algorithm for finding the closest heighted node (b) in the network to a
given node (a) (a variation of the more common algorithm required to find the
shortest-path from given node (a) to given node (b)) is as follows (see note 1):
.s1
Call the length (on plan) of the link ^&from\& node (a) ^&to\& node (b)
Dist(a,b). Specify that Dist(a,b) = 0 if (a) is not connected to (b) (no links
can have zero length). In this application Dist(a,b) always = Dist(b,a),
but use the sign bit to mark the direction of flow in an upstream directed link,
while always taking the abolute value to obtain a distance. 
.s1
Dist could be a 2D array Dist(1..N,1..N), but generally most of this array
would be unused, so it is better to use two linked lists with each node; one
giving the distances of nodes it is incident to and one giving the distances of
nodes it is incident from. 
.s1
A_list is a list of all nodes for which a min dist from (a) has just been
established by the previous iteration. 
.s1
B_list is a list of nodes reached so far which have not been in the A_list.
.s1
C_list is a list of closest heights which cut (a) off from the rest of the
network. 
.s1
Mindist(i) is the minimum dist from node (a) to node (i).
.s4
The algorithm is on the next page.

.page
.lit
	Routine Find_nearest_height(a,Ht,Dst)
Finds the height (Ht) of the nearest heighted node to node (a) along a legal
path and the distance (Dst) of this node from (a) along this path. 
	Begin
	Clear A_list, B_list & C_list
	Mindist(a) = 0
	Add (a) to A_list
	Repeat
	  For each node (v) in A_list do
	    For each node (w) reachable from (v) do
	      if (Mindist(w)=0) then Mindist(w) = Mindist(v)+Dist(v,w)
	      else Mindist(w) = min(Mindist(w), Mindist(v)+Dist(v,w))
	      Add (w) to B_list
	    end do
	  end do
	  Clear A_list
	  Minmin = min(Mindist of all nodes in B_list)
	  For all nodes (w) in B_list do
	    If (Mindist(w)= Minmin) then
	      Remove (w) from B_list
	      If ((w) is a height node then add (w) to C_list
	      else add (w) to A_list
	    end if
	  end do
	until (A_list is empty)
	If (C_list is empty) then no heights are reacheable from (a).
	Nearest-height node (b) is node in C_list with min Mindist value. 
	Ht = Height(b)
	Dst = Mindist(b)
	End.
.el

.hl1^&HEIGHT INTERPOLATION\&

The I3D interpolation procedure is defined functionally as follows:
.s1
.lm 8
Input##: Link/node structured 3D network in which there are no 2-arm nodes, all
links have a height set at both ends (whether they are free ends or junctions
-if they are junctions then it is up to the process by which these heights were
set to ensure that each link end at the same junction has the same height).
Some heights may also be set along each link - the more the better. 
.s1
Output#: The same network on plan exactly (no x or y coordinates changed,
deleted or added) but with every height now set, using iether linear or spline
(-under tension) interpolation along the length of each feature (see note 6).
.s1
.lm 0
With linear interpolation, features will generally have a slope discontinuity
at junctions, whereas spline interpolation will give slope continuity accross
junctions. 

.page
Interpolation is carried out as follows:
.lit

	If spline interpolation is to be used then set up all tangent planes
	  For each node with 2 or more arms do
	    Find the normal N defining a tangent plane for this node, equal to
	    the average "upward normal" to each "incident link vector" V, where
	    the "incident link vector" is the vector entering or leaving the
	    node, with a height at the non-node end obtained by linear
	    interpolation along the feature, and the "upward normal" is the
	    most upwards vector which is normal to V (see note 2).
	  end do
	end if

	For each link do
	  Get 3D link coords into P3(x/y/z,i)

	  From P3, obtain 2D coords P2(s/h,i), where P2(s) is distance of point
	  along feature from the start and P2(h) = P3(z).

	  If using linear interpolation then
	    Linearly interpolate missing (h)s directly into P3(z)s (see note 4)
	  else
	    Constrain both spline ends as follows:
	      Get end node tangent plane normals, using the node index which has
	      now been written into the JP entry (see note 2).
	      If either end node has no tangent plane (because it had just one
	      arm) then the spline end is "free" -i.e. is constrained to have
	      zero curvature (2nd derivative = 0), else the spline end is
	      constrained to be tangential to the tangent plane. 1st derivative
	      = P(z)/(Sqrt(P(x)^2+P(y)^2), where P = V - N*(V.N)/(N.N) (see
	      note 3)

	    Obtain P2NORM = P2 with (s) and (h) coordinates normalised,
	    and also normalise gradients (see note 5)

	    Obtain TP2NORM = P2NORM with unset heights omitted

	    Pass TP2NORM and normalised gradients to GET_SPLINE_COEFFS to
	    obtain spline coefficients CC

	    Pass CC, P2NORM and TP2NORM to GET_SPLINE_POINTS to obtain the
	    spline interpolated (h) values for every (h) in P2NORM

	    Set all heights P3(z) = unnormalised TP2NORM(h)

	    Write P3 back to where it came from.
	  end if
	end do

	If spline interpolation was used then restore link-to-node pointers
	(see note 2)

	End.
.el

.page
.hl1^&NOTES\&
.ls
.le
It may seem that using a shortest path algorithm is overkill if you only
consider the average case of a simple river junction between two contours, as
below: 
.lit

              |                             |
              |   d1              d2        |        river
--------------*---------*-------------------*---------------------
              |h1       |                   |h2
              |         |                   |
              |         |                   |
              |         |                   |        river
              |         |-------------------*--------------------
              |                             |
              | contour                     | contour

.el
However, on flatish ground it is possible to have a considerable number of
nodes in a large area containing no contour lines and then it immediately
becomes necessary to use the shortest-path rule for choosing the best path from
a given node to a heighted point to use for height interpolation. In simple
cases like that above, the algorithm will terminate very fast in any case. 

.le
For incident link vector V = (x,y,z), the "upwards normal vector" is
(x,y,z)x(0,0,1)x(x,y,z) = (-xz,-yz,x_^2+y_^2), where "x" denotes the "vector
product".
.s1
Tangent plane normal coords are kept in arrays NODE(NODE__X,i), NODE(NODE__Y,i)
and NODE(NODE__Z,i), with node index (i) being incremented for each node
encountered. In order that the normal vector associated with the node at the
end of a given link can later be accessed when setting link end gradients,
the node index (i) is written into to link(end)-to-node pointer field
(the JP entry) associated with each link as it is being used for tangent plane
normal vector determination. The pointer values being overwritten is also kept
associated with the node in NODE(NODE_JB,i) _& NODE(NODE_JO,i), so that these
can later be restored to preserve the junction structure.
.le
V is the incident link end vector and N is the tangent plane normal.
P is the projection of V, rooted at the node T, into the tangent plane, and
is obtained as follows, where "." denotes the "scalar product":
.lit

P = V + a*N for some a, but P.N = 0 because P lies in the tangent plane
=> (V + a*N).N = 0, => V.N + a*N.N = 0,
=> a = -V.N/N.N, => P = V - N*(V.N)/(N.N).

.el
The gradient of this vector is rise/run. The rise is P(z) and the run
is Sqrt(P(x)_^2+P(y)_^2), by Pythagoras.
.le
To linearly interpolate a height (h) between heights h1 a distance d1 to one
side, and h2 a distance d2 to the other side, if niether d(i) is zero then
.lit
h = (h1/d1 + h2/d2)/(1/h1 + 1/h2)
  = (h1*d2 + h2*d1)/(d1+d2)
else if d(i) is zero then h = h(i).
.el
.le
To normalise a set of values x(i) is to apply a linear transformation which
will map the range [min(x(i)) to max(x(i))] to [0 to 1]. To do this, first
find
.lit

MIN = min(x(i)) and MAX = max(x(i)). Put RANGE = max(XMAX-XMIN,1E-5)
then each xnorm(i) = (x(i) - XMIN)/XRANGE

.el
To unnormalise, apply the inverse transformation
.lit

x(i) = XRANGE*xnorm(i) + XMIN.

.el

.le;A sline-under tension is a spline whose shape varies with a "tension"
parameter from that of a normal cubic spline with tension zero, to that of
linear interpolation with tension infinite. In fact, the maximum value which
can be used for this tension parameter without getting floating overflow
during spline calculation is about 90. By increasing the tension as necessary
it is always possible to ensure that the interpolated curve between any two
original data points has no points of inflection. If the data points have
monotonic height difference then the required tension will never be infinite,
though it may be large than 90, in which case normal linear interpolation
can be used instead.
.els

