	LOGICAL FUNCTION BORDER_CHECK(FC_NUM,
     &					INSIDE_BORDER,
     &					FIRST_POINT,
     &					AT_BORDER)
C
***	MODULE  BORDER_CHECK
***	IDENT	01JN92
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created by ALB 					14-Jun-1988
C
C Function used by ITCHECK
C
C The purpose of this function is to check whether any feature lies outside
C the border described by the four coordinate pairs in BFEAT array. 
C
C BFEAT is temp array which can be either a direct copy from BOUND_FEAT if 
C INSIDE_BORDER is FALSE or is reduced by an amount equal to BORDER_TOL if
C INSIDE_BORDER is TRUE.
C 
C
	IMPLICIT NONE
C	
C parameters
C	
        INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C	
C common blocks
C	
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:ATTRIB.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:BOUNDS.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C arguments
C
	INTEGER*4	FC_NUM		!fc number being processed
	LOGICAL		INSIDE_BORDER	!TRUE if check whether feature just in
	LOGICAL		FIRST_POINT	!TRUE if checking whether first point
					!touches border. Only valid if 
					!INSIDE_BORDER is TRUE
	LOGICAL		AT_BORDER	!TRUE if outside border or outsider
					!slightly smaller border if 
					!INSIDE_BORDER true
C
C w/s
C
	LOGICAL		IN_SPOT		!TRUE if bit set for spot height
	INTEGER*4	FC_PTR		!element in GRPFCT
	INTEGER*4	FC_OFFSET	!offset in GRPFCT element
	INTEGER*4	BF_ADD1		!address of a boundary element
	INTEGER*4	BF_ADD2		!address of a boundary element
	INTEGER*4	NUM_XY		!number of points in CB
	INTEGER*4	NUM_POINTS	!number of points in feature
C	
	REAL		BFEAT(2,MAX_BFEAT)!local array for BOUND_FEAT
C
	REAL		X_DIFF1		!x diff used in DIST1 & ANGLE1 calc
	REAL		Y_DIFF1		!y diff used in DIST1 & ANGLE1 calc
	REAL		X_DIFF2		!x diff used in DIST2 & ANGLE2 calc
	REAL		Y_DIFF2		!y diff used in DIST2 & ANGLE2 calc
	REAL		X_DIFF3		!x diff used in DIST3 calculation
	REAL		Y_DIFF3		!y diff used in DIST3 calculation
	REAL		X_DIFF4		!x diff used in DIST4 calculation
	REAL		Y_DIFF4		!y diff used in DIST4 calculation
C
	REAL		DIST1		!Dist between pnt and a border pnt
	REAL		DIST2		!Dist between pnt and next border pnt
	REAL		DIST3		!Dist   " border pnt and next border pnt
	REAL		DIST4		!Min dist between point and border
C
	REAL		X_NEAREST	!nearest x pos on boundary to point
	REAL		Y_NEAREST	!nearest y pos on boundary to point
C
	REAL		ANGLE1		!Angle between point and boundary point
	REAL		ANGLE2		!Angle two vectors between two border
C					!points and data point
	REAL		TOT_ANGLE	!Sum of all ANGLE2's for one data point
C
	INTEGER*4    	I,J		!counters
	INTEGER*2	IELEN
	INTEGER*2	IECODE
	INTEGER*2	IENDS
	INTEGER*2	LUN		!input IFF file lun
	INTEGER		IFFIN_NUM	!input IFF file number
	LOGICAL		OK		!return code
C
C Functions
C
	LOGICAL		LIB$EXTZV	!bit extraction function
	LOGICAL		IFFOPEN		!open IFF file
	LOGICAL		ERRCOP		!copy errorous FC to output IFF file
	LOGICAL		ERRPTS		!move points near error to temp array
	LOGICAL		ERRTAB		!put message to output text error file
C
C************************************************************************
C
	BORDER_CHECK = .TRUE.			!assume success
	AT_BORDER = .FALSE.
	LUN = IFFIN_LUN
C
C************************************************************************
C Pull border in if checking whether just inside border.
C
	IF(INSIDE_BORDER) THEN
	   BFEAT(1,1) = BOUND_FEAT(1,1) + BORDER_TOL
	   BFEAT(2,1) = BOUND_FEAT(2,1) + BORDER_TOL
	   BFEAT(1,2) = BOUND_FEAT(1,2) + BORDER_TOL
	   BFEAT(2,2) = BOUND_FEAT(2,2) - BORDER_TOL
	   BFEAT(1,3) = BOUND_FEAT(1,3) - BORDER_TOL
	   BFEAT(2,3) = BOUND_FEAT(2,3) - BORDER_TOL
	   BFEAT(1,4) = BOUND_FEAT(1,4) - BORDER_TOL
	   BFEAT(2,4) = BOUND_FEAT(2,4) + BORDER_TOL
	   BFEAT(1,5) = BOUND_FEAT(1,5) + BORDER_TOL
	   BFEAT(2,5) = BOUND_FEAT(2,5) + BORDER_TOL
	ELSE
	   DO 20 I = 1,MAX_BFEAT
	      BFEAT(1,I) = BOUND_FEAT(1,I)
	      BFEAT(2,I) = BOUND_FEAT(2,I)
20	   CONTINUE
	ENDIF
C -----------------------------------------------------------------------------
C find whether spot
C
	FC_PTR = IATTRIB_TABLE(FC_NUM,1)/32 + 1		! get pointer
	FC_OFFSET = MOD(IATTRIB_TABLE(FC_NUM,1),32)	! get offset
	IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
C -----------------------------------------------------------------------------
C Does the first point lie outside of the reduced border
C
	IF(INSIDE_BORDER.AND.FIRST_POINT) THEN
	   IF(ATTRIB_TABLE(FC_NUM,4).LE.
     &	   (MAX(BFEAT(1,1),BFEAT(1,2)))) THEN
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 2			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,4).GE.
     &	   (MIN(BFEAT(1,3),BFEAT(1,4)))) THEN
	      BF_ADD1 = 3			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
C
	   IF(ATTRIB_TABLE(FC_NUM,5).LE.
     &	   (MAX(BFEAT(2,1),BFEAT(2,4)))) THEN
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,5).GE.
     &	   (MIN(BFEAT(2,2),BFEAT(2,3)))) THEN
	      BF_ADD1 = 2			! assign address of border point
	      BF_ADD2 = 3			! assign address of border point
	      GOTO 100
	   ENDIF
C -----------------------------------------------------------------------------
C Does the last point lie outside of the reduced border
C
	ELSEIF(INSIDE_BORDER.AND.(.NOT.FIRST_POINT)) THEN
	   IF(ATTRIB_TABLE(FC_NUM,6).LE.
     &	   (MAX(BFEAT(1,1),BFEAT(1,2)))) THEN
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 2			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,6).GE.
     &	   (MIN(BFEAT(1,3),BFEAT(1,4)))) THEN
	      BF_ADD1 = 3			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
C
	   IF(ATTRIB_TABLE(FC_NUM,7).LE.
     &	   (MAX(BFEAT(2,1),BFEAT(2,4)))) THEN
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,7).GE.
     &	   (MIN(BFEAT(2,2),BFEAT(2,3)))) THEN
	      BF_ADD1 = 2			! assign address of border point
	      BF_ADD2 = 3			! assign address of border point
	      GOTO 100
	   ENDIF
C -----------------------------------------------------------------------------
C Do any of the points lie outside the map corners
C
	ELSE
	   IF(ATTRIB_TABLE(FC_NUM,8).GT.
     &	   (MIN(BFEAT(1,3),BFEAT(1,4))+BORDER_TOL)) THEN
	      XERR1=ATTRIB_TABLE(FC_NUM,8)
	      YERR1=MAX_TABLE(FC_NUM,1)
	      VECERR1=IMAX_TABLE(FC_NUM,5)
	      BF_ADD1 = 3			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,9).GT.
     &	   (MIN(BFEAT(2,2),BFEAT(2,3))+BORDER_TOL)) THEN
	      YERR1=ATTRIB_TABLE(FC_NUM,9)
	      XERR1=MAX_TABLE(FC_NUM,2)
	      VECERR1=IMAX_TABLE(FC_NUM,6)
	      BF_ADD1 = 2			! assign address of border point
	      BF_ADD2 = 3			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,10).LT.
     &	   (MAX(BFEAT(1,1),BFEAT(1,2))-BORDER_TOL)) THEN
	      XERR1=ATTRIB_TABLE(FC_NUM,10)
	      YERR1=MAX_TABLE(FC_NUM,3)
	      VECERR1=IMAX_TABLE(FC_NUM,7)
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 2			! assign address of border point
	      GOTO 100
	   ENDIF
	   IF(ATTRIB_TABLE(FC_NUM,11).LT.
     &	   (MAX(BFEAT(2,1),BFEAT(2,4))-BORDER_TOL)) THEN
	      YERR1=ATTRIB_TABLE(FC_NUM,11)
	      XERR1=MAX_TABLE(FC_NUM,4)
	      VECERR1=IMAX_TABLE(FC_NUM,8)
	      BF_ADD1 = 1			! assign address of border point
	      BF_ADD2 = 4			! assign address of border point
	      GOTO 100
	   ENDIF
	ENDIF
C
	GOTO 500		! feature inside four point map border
C -----------------------------------------------------------------------------
C loop through points in feature and test whether any point is outside
C of border
C
100	CONTINUE
	NUM_POINTS = IATTRIB_TABLE(FC_NUM,13)	! get number of points
	IFFIN_NUM = IATTRIB_TABLE(FC_NUM,14)
	IF(IFFIN_NUM.NE.LAST_IFFIN) THEN
	   IF(OPEN_IFFIN) THEN
	      CALL IFFCLO(LUN)
	      OPEN_IFFIN = .FALSE.
	   ENDIF
C
C re-open IFF file
C
	   OK = IFFOPEN(LUN,IFFIN_FNAME(IFFIN_NUM),
     &				IFFIN_FID(1,IFFIN_NUM),,1)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK,
     &			IFFIN_FNAME(IFFIN_NUM) (1:IFFIN_LEN(IFFIN_NUM)))
	      BORDER_CHECK = .FALSE.
	      GOTO 999
	   ENDIF
	   OPEN_IFFIN = .TRUE.
	   LAST_IFFIN = IFFIN_NUM
	ENDIF
C
	CALL IFFSEL(LUN)
	CALL IFFPKE(IECODE,IELEN,IATTRIB_TABLE(FC_NUM,12))
	NUM_POINTS=0				!Total point counter
	CALL IFFNXC('CB',IELEN)
C
250	CONTINUE
C
	CALL CBINOUT(XY(1,NUM_POINTS+1),.FALSE.,NUM_XY)
C
   	NUM_POINTS=NUM_POINTS+NUM_XY
C
	CALL IFFNXT(IECODE,IELEN)
	IF(IECODE.EQ.'CB')THEN		!Another CB entry?
	  GOTO 250
	ENDIF
C
C*****************************************************************************
C
	DO 450 I = 1,NUM_POINTS
	   IF(BF_ADD1.EQ.3.AND.BF_ADD2.EQ.4) THEN
	      IF(XY(1,I).LT.MIN(BFEAT(1,3),BFEAT(1,4))) GOTO 450	
	   ENDIF
	   IF(BF_ADD1.EQ.2.AND.BF_ADD2.EQ.3) THEN
	      IF(XY(2,I).LT.MIN(BFEAT(2,2),BFEAT(2,3))) GOTO 450	
	   ENDIF
	   IF(BF_ADD1.EQ.1.AND.BF_ADD2.EQ.2) THEN
	      IF(XY(1,I).GT.MAX(BFEAT(1,1),BFEAT(1,2))) GOTO 450	
	   ENDIF
	   IF(BF_ADD1.EQ.1.AND.BF_ADD2.EQ.4) THEN
	      IF(XY(2,I).GT.MAX(BFEAT(2,1),BFEAT(2,4))) GOTO 450	
	   ENDIF
	   TOT_ANGLE = 0.0
	   DO 400 J = 1,4
	      X_DIFF1 = BFEAT(1,J) - XY(1,I) 
	      Y_DIFF1 = BFEAT(2,J) - XY(2,I) 
	      X_DIFF2 = BFEAT(1,J+1) - XY(1,I) 
	      Y_DIFF2 = BFEAT(2,J+1) - XY(2,I)
	      IF((ABS(Y_DIFF1).GT.TOLERANCE).OR.
     &	      (ABS(X_DIFF1).GT.TOLERANCE)) THEN
		 ANGLE1 = ATAN2(Y_DIFF1,X_DIFF1) 
	      ELSE
		 ANGLE1 = 0.0
	      ENDIF
	      IF((ABS(Y_DIFF2).GT.TOLERANCE).OR.
     &	      (ABS(X_DIFF2).GT.TOLERANCE)) THEN
		 ANGLE2 = ANGLE1 - ATAN2(Y_DIFF2,X_DIFF2) 
	      ELSE
		 ANGLE2 = ANGLE1
	      ENDIF
	      IF(ANGLE2.LT.-(PI-TOLERANCE)) THEN
		 ANGLE2 = 2*PI + ANGLE2
	      ELSEIF(ANGLE2.GT.(PI+TOLERANCE)) THEN
		 ANGLE2 = -(2*PI - ANGLE2)
	      ENDIF
	      TOT_ANGLE = TOT_ANGLE + ANGLE2
400	   CONTINUE
C -----------------------------------------------------------------------------
C Check whether point is outside map border.  If so then check whether 
C the distance is greater than the BORDER TOLERANCE
C
	   IF(TOT_ANGLE.LT.TOLERANCE) THEN	! point outside boundary
C .............................................................................
C calculate distance between two corner points along boundary line
C 
	      X_DIFF3 = BFEAT(1,BF_ADD1) - BFEAT(1,BF_ADD2) 
	      Y_DIFF3 = BFEAT(2,BF_ADD1) - BFEAT(2,BF_ADD2) 
	      DIST3 = SQRT(X_DIFF3**2 + Y_DIFF3**2)
C .............................................................................
C calculate distance between vertex and the 1st of the two corner points
C 
	      X_DIFF1 = XY(1,I) - BFEAT(1,BF_ADD1) 
	      Y_DIFF1 = XY(2,I) - BFEAT(2,BF_ADD1) 
	      DIST1 = SQRT(X_DIFF1**2 + Y_DIFF1**2)
C .............................................................................
C calculate distance between vertex and the 2nd of the two corner points
C 
	      X_DIFF2 = XY(1,I) - BFEAT(1,BF_ADD2) 
	      Y_DIFF2 = XY(2,I) - BFEAT(2,BF_ADD2) 
	      DIST2 = SQRT(X_DIFF2**2 + Y_DIFF2**2)
C .............................................................................
C Find nearest position on boundary to point being processed
C
	      X_NEAREST = BFEAT(1,BF_ADD1) + 
     &	      X_DIFF3 * (DIST1 * DIST3/(DIST1 + DIST2))
 	      Y_NEAREST = BFEAT(2,BF_ADD1) + 
     &	      Y_DIFF3 * (DIST1 * DIST3/(DIST1 + DIST2))
C .............................................................................
C now calculate distance between this position to point
C 
	      X_DIFF4 = XY(1,I) - X_NEAREST
	      Y_DIFF4 = XY(2,I) - Y_NEAREST
	      DIST4 = SQRT(X_DIFF4**2 + Y_DIFF4**2)
	      IF(DIST4.GT.BORDER_TOL) THEN
	         AT_BORDER = .TRUE.
	         GOTO 500
	      ENDIF
	   ENDIF
450	CONTINUE
C
500	CONTINUE
C
C*************************************************************************
C
999	CONTINUE
	RETURN
C
	END
