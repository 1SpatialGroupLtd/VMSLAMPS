C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-01 16:46:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK4()
C
***	MODULE	CHECK4
***	IDENT	01JN92
C	
C	Copyright Laser-Scan, Cambridge, England.
C	Author	: D Catlow
C	Created : 22OC84
C
C Modified from CHECK4 in module TCHECK			by ALB 1-MAR-1988
C
C Converted to function to enable easier exit if IFF file error in this
C or called functions
C
CMOD1120 Use QUICK_SORT					 JB 1-Jun-1992
C
C
C	Function for ITCHECK to
C	1. Carry out profiles across the map at a fixed x interval
C	to check the validity of adjacent item heights.
C
C	N.B. Uses sorted TENTRY
C
	IMPLICIT NONE
C	
C parameters
C	
        INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C	
C common blocks
C	
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:ATTRIB.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C
	PARAMETER	MAX_INTER=1024	!max number of intersections
C					!allowed for one profile line
C w/s
	LOGICAL		IN_SPOT		!TRUE if bit set for spot height
	LOGICAL		IN_CLIFF	!TRUE if bit set for cliff
	LOGICAL		IN_RIDGE	!TRUE if bit set for ridgerline
	LOGICAL		IN_RIVER	!TRUE if bit set for river
	INTEGER*4	FC_PTR		!element in GRPFCT
	INTEGER*4	FC_OFFSET	!offset in GRPFCT element
C
	REAL		X1
	REAL		X2
	REAL		Y1
	REAL		Y2
	REAL		TEMPR		!for sort
	REAL		XVAL		!x transect  coord.
	REAL		XRIGHT		!value of 100th XVAL
	REAL		XSTART		!value of 1st XVAL
	REAL		YIN		!y intersection
	REAL		INSECT(100,MAX_INTER)
C					!saved intersection pts.
	REAL		CVAL1		!contour value (item 1)
	REAL		CVAL2		!contour value (item 2)
	REAL		MIN_X(NUMCON)	!min x array used for storing
C
	INTEGER*4	POS1		!address of item1 in IFF file
	INTEGER*4	POS2		!address of item2 in IFF file
	INTEGER*4	VECTS (100,MAX_INTER)
C					!saved intersection vec nos
	INTEGER*4	NPROFS		!number of profiles
	INTEGER*4	PROFIL(100,MAX_INTER)
C					!contour pointers
	INTEGER*4	TEMP1,TEMP2	!for sort
	INTEGER*4	NTIMES		!number of passes through
C					 line data required
	INTEGER*4	REM		!number of XVALs in final pass
	INTEGER*4	TO		!loop limit
	INTEGER*4	I,J,K,L		!counters
	INTEGER*4	NPT		!no of pts in contour entry
	INTEGER*4	NSECT(100)	!number of intersections
	INTEGER*2	IECODE		!IFF entry code
	INTEGER*2	IELEN		!IFF entry length
        INTEGER*2       IENDS           !additional string variable
	INTEGER*2	NPTS		!number of points in ST entry 
	LOGICAL		SORTED		!Used in sort of intersections
C
	LOGICAL		CRT		!TRUE if terminal and is a CRT
	LOGICAL		OK		!return code
	INTEGER*2	LUN		!input IFF file LUN
	INTEGER		IFFIN_NUM	!input IFF file number
	INTEGER		NUM_XY		!number of xy pairs read in CB entry
C
C externals
	INTEGER*4	COMPARE	
	EXTERNAL	COMPARE		!compare function
	EXTERNAL	SWAP		!swap routine
C
C Functions
C
	LOGICAL		OUTPUT_CRT	!TRUE if SYS$OUTPUT is CRT
	LOGICAL		LIB$EXTZV	!bit extraction function
	INTEGER		IFFOPEN		!open an input IFF 
	LOGICAL		ERRCOP		!copy errorous feature to output IFF
	LOGICAL		ERRPTS		!move points near error to array
	LOGICAL		ERRTAB		!put error message into error text file
	LOGICAL		CHKTAB		!check if error has already been 
C					!tabulated (to avoid duplication)
C
C****************************************************************************
C
	CHECK4 = .TRUE.			!assume success
	LUN = IFFIN_LUN
	CRT = OUTPUT_CRT()
C
C****************************************************************************
C	Sort on minimum x
C
C run quicksort after loading temp sort array with min x
C
	IF (.NOT.HAD_XSORT) THEN
	   DO 100 I = 1,NUM_FC
	      MIN_X(I) = ATTRIB_TABLE(I,10)
100	   CONTINUE
C
	   CALL QUICK_SORT(MIN_X(1),NUM_FC,COMPARE,SWAP,SORT_WS)
C
	   HAD_XSORT=.TRUE.			
	ENDIF
C
C****************************************************************************
C	Calculate number of profiles required
C
	NPROFS =INT((RANGE(2)-RANGE(1))/PROFILE_INT)	!no of profiles
C
C	Profiles are processed 100 at a time, so calculate
C	number of passes (NTIMES) required.
C
	NTIMES =NPROFS/100		
	REM=MOD(NPROFS,100)		
	IF (REM.GT.0) NTIMES=NTIMES+1	!number of passes required
C
C****************************************************************************
C
	DO 800 L=1,NTIMES		!main loop
C
C	Initialise intersection counters
C
	  DO 250 K=1,100
	    NSECT(K)=0
250	  CONTINUE
C
	  IF(L.EQ.1)THEN
	    XSTART=RANGE(1)		!first profile left hand border
	  ELSE
            XSTART=XSTART+(PROFILE_INT*100)	!for all but first pass
	  ENDIF
C
C****************************************************************************
C	Retrieve line items
C
280	  DO 600 J=1,NUM_FC
	    IF (CRT) THEN
	      CALL PERCENT(' <PROCESSING CHECK 4> ',22,NUM_FC*NTIMES,
     &		J+NUM_FC*(L-1))					!write % done
	    ENDIF
C
	    FC_PTR = IATTRIB_TABLE(TENTRY(J),1)/32 + 1		! get pointer
	    FC_OFFSET = MOD(IATTRIB_TABLE(TENTRY(J),1),32)	! get offset
	    IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
	    IN_CLIFF = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CLIFF))
	    IN_RIDGE = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIDGE))
	    IN_RIVER = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIVER))
C
C	Bypass processing if spot, ridge, river or cliff
C
	    IF (IN_SPOT.OR.IN_RIDGE.OR.IN_RIVER.OR.IN_CLIFF) GOTO 600
C
C	Leaving contours, lakes and coastline
C
C****************************************************************************
C	Compare contour with spot heights
C
	    TO=100
	    IF(L.EQ.NTIMES)TO=REM		!last pass
	    XRIGHT=XSTART+(TO*PROFILE_INT)	!final XVAL of pass
C
	    IF (XRIGHT.LT.ATTRIB_TABLE(TENTRY(J),10)) GOTO 500 !since sorted
C
C****************************************************************************
C	Get line coords.
C
	    IFFIN_NUM = IATTRIB_TABLE(TENTRY(J),14)
	    IF (IFFIN_NUM.NE.LAST_IFFIN) THEN
	      IF(OPEN_IFFIN) THEN
	         CALL IFFCLO(LUN)
	         OPEN_IFFIN = .FALSE.
	      ENDIF
C
C re-open IFF file
C
	      OK = IFFOPEN(LUN, IFFIN_FNAME(IFFIN_NUM),
     &				IFFIN_FID(1,IFFIN_NUM),,1)
	      IF (.NOT.OK) THEN
		 CALL LSL_PUTMSG(OK,
     &			IFFIN_FNAME(IFFIN_NUM)(1:IFFIN_LEN(IFFIN_NUM)))
	         CHECK4 = .FALSE.
	         GOTO 999
	      ENDIF
C
	      OPEN_IFFIN = .TRUE.
	      LAST_IFFIN = IFFIN_NUM
	    ENDIF
C 
 	    CALL IFFSEL(LUN)
	    CALL IFFPKE(IECODE,IELEN,IATTRIB_TABLE(TENTRY(J),12))
C
C set to NF entry
C
	    NPT=0
300	    CALL IFFNXC('CB',IELEN)				!set to CB entry
C
320	    CONTINUE
C
	    CALL CBINOUT(XY(1,NPT+1),.FALSE.,NUM_XY)
	    NPT = NPT + NUM_XY
C
	    CALL IFFNXT(IECODE,IELEN)	!another CB for this feature?
	    IF(IECODE.EQ.'CB')GOTO 320	!get more coords.
C
C****************************************************************************
C Compare with X profile lines
C
	    DO 500 K=1,TO
	      XVAL=XSTART+(K*PROFILE_INT)
C
C Test XVAL against contour XMIN and XMAX 
C
 	      IF(XVAL.LT.ATTRIB_TABLE(TENTRY(J),10))GOTO 500	
  	      IF(XVAL.GT.ATTRIB_TABLE(TENTRY(J), 8))GOTO 600	!since sorted
C
C*************************************************************************
C	Test for possible intersection of line XVAL with vert X1,Y1 to X2,Y2
C
	      DO 400 I=2,NPT
	         X1=XY(1,I-1)
	         X2=XY(1,I)
	         Y1=XY(2,I-1)
	         Y2=XY(2,I)
  	         IF(X1.EQ.X2)GOTO 400
	         IF(X1.LT.XVAL.AND.X2.LT.XVAL)GOTO 400
	         IF(X1.GT.XVAL.AND.X2.GT.XVAL)GOTO 400
C	
C intersect
C
	         NSECT(K)=NSECT(K)+1		!increment count of number
C						!of intersections for 
C						!this profile line
C
C**************************************************************************
C	Test if we've exceeded max number of intersections allowed
C	(If this happens too many times the limit can be increased)
C
	         IF(NSECT(K).GT.MAX_INTER)THEN
	            CALL WRITEF
     &	            ('Too many intersections detected for profile %F',
     &			XVAL)
	            CALL WRITEF
     &			('Remaining intersections will be ignored')
	            GOTO 500
	         ENDIF
C
C**************************************************************************
C
	         YIN=(Y1+(Y2-Y1)*(XVAL-X1)/(X2-X1))	!Calculate Y intersect
C
	         INSECT(K,NSECT(K))=YIN			!Save intersection
	         VECTS (K,NSECT(K))=I			!vector 
	         PROFIL(K,NSECT(K))=TENTRY(J)		!and ATTRIB pointer
C	  	
400	      CONTINUE
C
C***************************************************************************
C
500	    CONTINUE
C
C***************************************************************************
C
600	  CONTINUE
C
C***************************************************************************
C	Process the 100 (or less) profiles.....
C	Sort intersections and check heights
C
	  DO 700 K=1,TO
C
640	    CONTINUE
	    SORTED=.TRUE.	
C
	    DO 660 J=2,NSECT(K)
	      IF(INSECT(K,J-1).LE.INSECT(K,J))GOTO 660
	      TEMPR=INSECT(K,J-1)
	      TEMP1=PROFIL(K,J-1)
	      TEMP2=VECTS (K,J-1)
	      INSECT(K,J-1)=INSECT(K,J)
	      PROFIL(K,J-1)=PROFIL(K,J)
	      VECTS (K,J-1)=VECTS (K,J)
	      INSECT(K,J)=TEMPR
	      PROFIL(K,J)=TEMP1
	      VECTS (K,J)=TEMP2
C
	      SORTED=.FALSE.
CC
C****************************************************************************
C
660	    CONTINUE
C
	    IF (.NOT.SORTED) GOTO 640
C
C****************************************************************************
C	Now check profiles and tabulate errors
C
	    DO 680 J=2,NSECT(K)
	      CVAL1=ATTRIB_TABLE(PROFIL(K,J-1),3)
	      CVAL2=ATTRIB_TABLE(PROFIL(K,J),3)
	      IF(CVAL2.EQ.CVAL1)GOTO 680
	      IF(CVAL2.GT.(CVAL1+CONTOUR_INT).OR.
     &		 CVAL2.LT.(CVAL1-CONTOUR_INT))THEN
C
C Set up values for ERRTAB!!!!
C
	         NUMERR=10				!error number
	         XERR1=XSTART+(K*PROFILE_INT)
	         YERR1=INSECT(K,J-1)
	         XERR2=XSTART+(K*PROFILE_INT)
	         YERR2=INSECT(K,J)
	         ITEM1=IATTRIB_TABLE(PROFIL(K,J-1),2)
	         ITEM2=IATTRIB_TABLE(PROFIL(K,J),2)
	         CODE1=IATTRIB_TABLE(PROFIL(K,J-1),1)
	         CODE2=IATTRIB_TABLE(PROFIL(K,J),1)
	         HEIGHT1=ATTRIB_TABLE(PROFIL(K,J-1),3)
	         HEIGHT2=ATTRIB_TABLE(PROFIL(K,J),3)
		 FILE1 = IATTRIB_TABLE(PROFIL(K,J-1),14)
		 FILE2 = IATTRIB_TABLE(PROFIL(K,J),14)
	         VECERR1=VECTS(K,J-1)
	         VECERR2=VECTS(K,J)
C
	         POS1=IATTRIB_TABLE(PROFIL(K,J-1),12)
                 POS2=IATTRIB_TABLE(PROFIL(K,J),12)
C
C Check if an error relating to these two lines has already
C been tabulated.
C
	         IF(CHKTAB(POS1,POS2))GOTO 680	!yes, so don't output
	         IF(HAD_OUTPUT) THEN
	            RDPOS=POS1
	            VECERR=VECERR1
		    FILE = FILE1
	            OK = ERRPTS()
	            IF(.NOT.OK) THEN
	               CHECK4 = .FALSE.
	               GOTO 999
	            ENDIF
	            OK = ERRCOP()
	            IF(.NOT.OK) THEN
	               CHECK4 = .FALSE.
	               GOTO 999
	            ENDIF
	            RDPOS=POS2
	            VECERR=VECERR2
		    FILE = FILE2
	            OK = ERRPTS()
	            IF(.NOT.OK) THEN
	               CHECK4 = .FALSE.
	               GOTO 999
	            ENDIF
	            OK = ERRCOP()
	            IF(.NOT.OK) THEN
	               CHECK4 = .FALSE.
	               GOTO 999
	            ENDIF
	         ENDIF
	         OK = ERRTAB()
	         IF(.NOT.OK) THEN
	            CHECK4 = .FALSE.
	            GOTO 999
	         ENDIF
	      END IF
C
680	    CONTINUE
C
700	  CONTINUE
C
C****************************************************************************
C
800	CONTINUE
C
C****************************************************************************
C
999	CONTINUE
C
	RETURN
	END
C
