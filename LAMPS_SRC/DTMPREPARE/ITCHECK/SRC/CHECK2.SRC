C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-13 19:27:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK2()
C
***	MODULE  CHECK2
***	IDENT	13JA93
C	
C	Copyright Laser-Scan, Cambridge, England.
C	Author	: D Catlow
C	Created : 02OCT84
C
CMOD	 Modified from CHECK2 in module TCHECK 		ALB	29-FEB-1988
C
CMOD1169 Add MIN_X, MIN_Y, MAX_X and MAX_Y to use	RJH	 8-Dec-1992
C	 for checking instead of CORNERS
C
C	Subroutine for ITCHECK to check for:
C	1. Contours and spot heights that lie outside or cross 
C	the map borders
C	2. Contour and lake loop closure 
C	3. Unconnected contours
C	4. Linking contours with height mismatch
C	5. Contours linking too many items
C
C	NB. Uses unsorted PNTERS
C
	IMPLICIT NONE
C	
C parameters
        INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C	
C common blocks
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:ATTRIB.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:BOUNDS.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C w/s
	LOGICAL		IN_SUPPLE	!TRUE if bit set for supple height
	LOGICAL		IN_SPOT		!TRUE if bit set for spot height
	LOGICAL		IN_CLIFF	!TRUE if bit set for cliff
	LOGICAL		IN_RIDGE	!TRUE if bit set for ridgerline
	LOGICAL		IN_RIVER	!TRUE if bit set for river
	INTEGER*4	FC_PTR		!element in GRPFCT
	INTEGER*4	FC_OFFSET	!offset in GRPFCT element
C	
	REAL		DISTSE		!Dist st/end
	REAL		DISTES		!Dist end/st
	REAL		DISTEE		!Dist end/end
	REAL		DISTSS		!Dist st/st
	REAL		DISTS		!Minimum dist START
	REAL		DISTE		!Minimum dist END
	REAL		MNDISS		!Minimum distance from start
	REAL		MNDISE		!Minimum distance from end
C	
	REAL		MIN_X		! minimum X within map border
	REAL		MIN_Y		! minimum Y within map border
	REAL		MAX_X		! maximum X within map border
	REAL		MAX_Y		! maximum Y within map border
C	
	INTEGER*4	TOL		!Number of items connecting
C					!within tolerance
	INTEGER*4       CONECT		!Number of connections
	INTEGER*4	COUNT_END	!Number of connections to end
	INTEGER*4	COUNT_START	!Number of commections to start
	INTEGER*4    	I,J		!counters
	INTEGER*4	NPTS
	INTEGER*2	IELEN
	INTEGER*2	IECODE
	INTEGER*2	IENDS
	INTEGER		IFFIN_NUM	!input IFF file number
	LOGICAL		OUT_SIDE	!TRUE if feature is outsider border
	LOGICAL		CRT		!TRUE if terminal is a CRT
	LOGICAL		OK		!return code
C
C Functions
	LOGICAL		OUTPUT_CRT	!TRUE if SYS$OUTPUT is CRT
	LOGICAL		BORDER_CHECK	!check whether outside 4 point border
	LOGICAL		LIB$EXTZV	!bit extraction function
	LOGICAL		ERRCOP		!copy errorous FC to output IFF file
	LOGICAL		ERRPTS		!move points near error to temp array
	LOGICAL		ERRTAB		!put message to output text error file
C
C************************************************************************
C
	CHECK2 = .TRUE.			!assume success
	CRT = OUTPUT_CRT()
C
C************************************************************************
C find minimum and maximum coordinates within map border
C
	MIN_X = MIN(CORNERS(3,1),CORNERS(3,2))
	MIN_Y = MIN(CORNERS(4,2),CORNERS(4,3))
	MAX_X = MAX(CORNERS(3,3),CORNERS(3,4))
	MAX_Y = MAX(CORNERS(4,1),CORNERS(4,4))
C
C************************************************************************
C
	DO 300 I=1,NUM_FC
C
	   IF(CRT) THEN
	      CALL PERCENT(' <PROCESSING CHECK 2> ',22,NUM_FC,I)
	   ENDIF
C
	   CONECT=0
	   COUNT_START=0
	   COUNT_END  =0
	   MNDISS=99999.0
	   MNDISE=99999.0
C
C find whether supplementary spot ridge or river
C
	   FC_PTR = IATTRIB_TABLE(I,1)/32 + 1		! get pointer
	   FC_OFFSET = MOD(IATTRIB_TABLE(I,1),32)	! get offset
	   IN_SUPPLE = LIB$EXTZV(FC_OFFSET,1,
     &		GRPFCT(FC_PTR,SUPPLEMENTARY))
	   IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
	   IN_CLIFF = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CLIFF))
	   IN_RIDGE = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIDGE))
	   IN_RIVER = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIVER))
C -----------------------------------------------------------------------------
C Do any of the points lie outside the 4 coordinate pairs describing the
C map border
C
	   IF (HAD_4_POINTS) THEN
	      OK = BORDER_CHECK(I,.FALSE.,.FALSE.,OUT_SIDE)
	      IF(.NOT.OK) THEN
		 CHECK2 = .FALSE.
		 GOTO 999
	      ENDIF
C
	      IF(OUT_SIDE) THEN
	         GOTO 40
	      ELSE
	         GOTO 50
	      ENDIF
	   ENDIF
C -----------------------------------------------------------------------------
C Do any of the points lie outside the map corners
C
	   IF (ATTRIB_TABLE(I,8).GT.(MAX_X+BORDER_TOL))THEN
	      XERR1=ATTRIB_TABLE(I,8)
	      YERR1=MAX_TABLE(I,1)
	      VECERR1=IMAX_TABLE(I,5)
	      GOTO 40
	   ENDIF
C
	   IF (ATTRIB_TABLE(I,9).GT.(MAX_Y+BORDER_TOL))THEN
	      YERR1=ATTRIB_TABLE(I,9)
	      XERR1=MAX_TABLE(I,2)
	      VECERR1=IMAX_TABLE(I,6)
	      GOTO 40
	   ENDIF
C
	   IF (ATTRIB_TABLE(I,10).LT.(MIN_X-BORDER_TOL))THEN
	      XERR1=ATTRIB_TABLE(I,10)
	      YERR1=MAX_TABLE(I,3)
	      VECERR1=IMAX_TABLE(I,7)
	      GOTO 40
	   ENDIF
C
	   IF (ATTRIB_TABLE(I,11).LT.(MIN_Y-BORDER_TOL))THEN
	      YERR1=ATTRIB_TABLE(I,11)
	      XERR1=MAX_TABLE(I,4)
	      VECERR1=IMAX_TABLE(I,8)
	      GOTO 40
	   ENDIF
C
	   GOTO 50
C -----------------------------------------------------------------------------
C
40	   CONTINUE
	   NUMERR=8
	   ITEM1=IATTRIB_TABLE(I,2)
	   HEIGHT1=ATTRIB_TABLE(I,3)
	   CODE1=IATTRIB_TABLE(I,1)
	   FILE1 = IATTRIB_TABLE(I,14)
C
	   IF(IN_SPOT) THEN		!Spot height
	      NUMERR=15
	      OK = ERRTAB()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
              RDPOS=IATTRIB_TABLE(I,12)
	      IF(HAD_OUTPUT) THEN 
	         VECERR = 1
		 FILE = FILE1
		 OK = ERRCOP()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
	      GOTO 300
	   ENDIF
C
   	   IF(HAD_OUTPUT) THEN
	      VECERR=VECERR1
	      RDPOS=IATTRIB_TABLE(I,12)
	      FILE = FILE1
	      OK = ERRPTS()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
	      OK = ERRCOP(IFFIN_NUM)
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
	   ENDIF
	   OK = ERRTAB()
	   IF(.NOT.OK) THEN
	      CHECK2 = .FALSE.
	      GOTO 999
	   ENDIF
C -----------------------------------------------------------------------------
C Check for loop closure and connections
C
50	   CONTINUE
	   IF(IN_SUPPLE.OR.IN_SPOT.OR.IN_RIDGE.OR.
     &	   IN_RIVER.OR.IN_CLIFF) GOTO 300
C
C don't test supplementary, rivers, ridges, spot heights or cliffs
C
	   DISTSE=SQRT((ATTRIB_TABLE(I,4)-ATTRIB_TABLE(I,6))**2+
     &     (ATTRIB_TABLE(I,5)-ATTRIB_TABLE(I,7))**2) 
	   IF(DISTSE.LE.MIN_TOL)GOTO 300   	!closed loop within tol
C
	   IF (DISTSE.GT.MAX_TOL) THEN		!unclosed loop with
	      MNDISE=MIN(DISTSE,MNDISE)
	      MNDISS=MIN(DISTSE,MNDISS)
	      GOTO 55
	   ELSE
	      IF (IATTRIB_TABLE(TENTRY(I),13).LT.4)THEN
	         MNDISE=MIN(DISTSE,MNDISE)
	         MNDISS=MIN(DISTSE,MNDISS)
	         GOTO 55
	      ELSE 
	         NUMERR=20
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=ATTRIB_TABLE(I,3)
	         CODE1=IATTRIB_TABLE(I,1)
	         VECERR1=1
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1 = IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            VECERR=1
	            RDPOS=IATTRIB_TABLE(I,12)
	      	    FILE = FILE1
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	      ENDIF	
C
	      OK = ERRTAB()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
	      GOTO 300
	   ENDIF	  
C
C***********************************************************************
C Is the start at a sheet border? (note use of BORDER_TOL)
C
55	   CONTINUE
C -----------------------------------------------------------------------------
C Do test if border is defined by four points
C
	   IF (HAD_4_POINTS) THEN
	      OK = BORDER_CHECK(I,.TRUE.,.TRUE.,OUT_SIDE)
	      IF(.NOT.OK) THEN
		 CHECK2 = .FALSE.
		 GOTO 999
	      ENDIF
	      IF(OUT_SIDE) THEN
	         GOTO 60
	      ELSE
	         GOTO 80
	      ENDIF
	   ENDIF
C -----------------------------------------------------------------------------
C Do test if border is rectangular
C
	   IF  (ATTRIB_TABLE(I,4).LE.(MIN_X+BORDER_TOL) .OR.
     &		ATTRIB_TABLE(I,4).GE.(MAX_X-BORDER_TOL)) GOTO 60
C
	   IF  (ATTRIB_TABLE(I,5).LE.(MIN_Y+BORDER_TOL) .OR.
     &		ATTRIB_TABLE(I,5).GE.(MAX_Y-BORDER_TOL)) GOTO 60
C
           GOTO 80
C
60	   CONTINUE
	   MNDISS=0.0			!treat border as a connection
	   CONECT=CONECT+1
	   COUNT_START=COUNT_START+1
	   GOTO 140
C
C************************************************************************
C Search for items connecting to start
C
80	   CONTINUE
	   DO 100 J=1,NUM_FC
C
C find whether supplementary spot ridge river or cliff
C
	      FC_PTR = IATTRIB_TABLE(J,1)/32 + 1		! get pointer
	      FC_OFFSET = MOD(IATTRIB_TABLE(J,1),32)		! get offset
	      IN_SUPPLE = LIB$EXTZV(FC_OFFSET,1,
     &		GRPFCT(FC_PTR,SUPPLEMENTARY))
	      IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
	      IN_CLIFF = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CLIFF))
	      IN_RIDGE = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIDGE))
	      IN_RIVER = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIVER))
C
C do not process if supplementary spot ridge or river
C
	      IF(IN_SUPPLE.OR.IN_SPOT.OR.IN_RIDGE.OR.
     &	      IN_RIVER.OR.IN_CLIFF) GOTO 100
C
	      IF(J.EQ.I)GOTO 100
	      DISTSS=SQRT((ATTRIB_TABLE(I,4)-ATTRIB_TABLE(J,4))**2+
     &        (ATTRIB_TABLE(I,5)-ATTRIB_TABLE(J,5))**2)
	      DISTSE=SQRT((ATTRIB_TABLE(I,4)-ATTRIB_TABLE(J,6))**2+
     &        (ATTRIB_TABLE(I,5)-ATTRIB_TABLE(J,7))**2)
	      DISTS=MIN(DISTSS,DISTSE)
	      MNDISS=MIN(MNDISS,DISTS)	!Save minimum distance
C
	      IF(DISTS.GT.MIN_TOL)GOTO 100	!no height check
	      CONECT=CONECT+1
	      COUNT_START=COUNT_START+1
	      IF(J.LT.I)GOTO 100
C
C	Check for equal height values
C
	      IF(ATTRIB_TABLE(I,3).EQ.ATTRIB_TABLE(J,3))THEN
	         GOTO 100
	      ELSE
	         NUMERR=4
	         ITEM1=IATTRIB_TABLE(I,2)
	         ITEM2=IATTRIB_TABLE(J,2)
	         HEIGHT1=ATTRIB_TABLE(I,3)
	         HEIGHT2=ATTRIB_TABLE(J,3)
	         CODE1=IATTRIB_TABLE(I,1)
	         CODE2=IATTRIB_TABLE(J,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1 = IATTRIB_TABLE(I,14)
		 FILE2 = IATTRIB_TABLE(J,14)
	         IF(DISTSS.LT.DISTSE) THEN
	            XERR2=ATTRIB_TABLE(J,4)
	            YERR2=ATTRIB_TABLE(J,5)
	            VECERR1=1
	            VECERR2=1	  
	         ELSE
	            XERR2=ATTRIB_TABLE(J,6)
	            YERR2=ATTRIB_TABLE(J,7)
	            VECERR1=1
	            VECERR2=IATTRIB_TABLE(J,13)
	         ENDIF
	         IF(HAD_OUTPUT)THEN
	            VECERR=VECERR1
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
	            VECERR=VECERR2	  
	            RDPOS=IATTRIB_TABLE(J,12)
	            FILE = FILE2
		    OK = ERRPTS()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF	
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
C
100	   CONTINUE
C
C************************************************************************
C Is the end at a sheet border? (note use of BORDER_TOL)
C
C -----------------------------------------------------------------------------
C Do test if border is defined by four points
C
140	   CONTINUE
	   IF (HAD_4_POINTS) THEN
	      OK = BORDER_CHECK(I,.TRUE.,.FALSE.,OUT_SIDE)
	      IF(.NOT.OK) THEN
		 CHECK2 = .FALSE.
		 GOTO 999
	      ENDIF
	      IF(OUT_SIDE) THEN
	         GOTO 160
	      ELSE
	         GOTO 180
	      ENDIF
	   ENDIF
C -----------------------------------------------------------------------------
C Do test if border is rectangular
C
     	   IF ( ATTRIB_TABLE(I,6).LE.(MIN_X+BORDER_TOL).OR.
     &		ATTRIB_TABLE(I,6).GE.(MAX_X-BORDER_TOL))GOTO 160
C
	   IF ( ATTRIB_TABLE(I,7).LE.(MIN_Y+BORDER_TOL).OR.
     &		ATTRIB_TABLE(I,7).GE.(MAX_Y-BORDER_TOL))GOTO 160
C
	   GOTO 180
C
160	   CONTINUE
	   MNDISE=0.0
	   CONECT=CONECT+1
	   COUNT_END=COUNT_END+1
	   GOTO 240
C
C************************************************************************
C Search for items connecting to the end
C
180	   CONTINUE
     	   DO 200 J=1,NUM_FC
C
C find whether supplementary spot ridge river or cliff
C
	      FC_PTR = IATTRIB_TABLE(J,1)/32 + 1		! get pointer
	      FC_OFFSET = MOD(IATTRIB_TABLE(J,1),32)		! get offset
	      IN_SUPPLE = LIB$EXTZV(FC_OFFSET,1,
     &		GRPFCT(FC_PTR,SUPPLEMENTARY))
	      IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
	      IN_CLIFF = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CLIFF))
	      IN_RIDGE = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIDGE))
	      IN_RIVER = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,RIVER))
C
C do not process if supplementary spot ridge or river
C
	      IF(IN_SUPPLE.OR.IN_SPOT.OR.IN_RIDGE.OR.
     &	      IN_RIVER.OR.IN_CLIFF) GOTO 200
C
	      IF(J.EQ.I)GOTO 200
	      DISTES=SQRT((ATTRIB_TABLE(I,6)-ATTRIB_TABLE(J,4))**2+
     &        (ATTRIB_TABLE(I,7)-ATTRIB_TABLE(J,5))**2)
	      DISTEE=SQRT((ATTRIB_TABLE(I,6)-ATTRIB_TABLE(J,6))**2+
     &        (ATTRIB_TABLE(I,7)-ATTRIB_TABLE(J,7))**2)
	      DISTE=MIN(DISTES,DISTEE)
	      MNDISE=MIN(MNDISE,DISTE)	!Save minimum distance
C
	      IF(DISTE.GT.MIN_TOL)GOTO 200	!unconnected
	      CONECT=CONECT+1
	      COUNT_END=COUNT_END+1
	      IF(J.LT.I)GOTO 200
C
C Check for equal height values
C
	      IF(ATTRIB_TABLE(I,3).EQ.ATTRIB_TABLE(J,3))THEN
	         GOTO 200
	      ELSE
C
	         NUMERR=4
	         ITEM1=IATTRIB_TABLE(I,2)
	         ITEM2=IATTRIB_TABLE(J,2)
	         CODE1=IATTRIB_TABLE(I,1)
	         CODE2=IATTRIB_TABLE(J,1)
	         HEIGHT1=ATTRIB_TABLE(I,3)
	         HEIGHT2=ATTRIB_TABLE(J,3)
	         XERR1=ATTRIB_TABLE(I,6)
	         YERR1=ATTRIB_TABLE(I,7)
		 FILE1 = IATTRIB_TABLE(I,14)
		 FILE2 = IATTRIB_TABLE(J,14)
	         IF(DISTES.LT.DISTEE)THEN	
	            XERR2=ATTRIB_TABLE(J,4)
	            YERR2=ATTRIB_TABLE(J,5)
	            VECERR1=IATTRIB_TABLE(I,13)
	            VECERR2=1	  
	         ELSE
	            XERR2=ATTRIB_TABLE(J,6)
	            YERR2=ATTRIB_TABLE(J,7)
	            VECERR1=IATTRIB_TABLE(I,13)
	            VECERR2=IATTRIB_TABLE(J,13)
	         ENDIF
	         IF(HAD_OUTPUT)THEN
	            VECERR=VECERR1
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
		    OK = ERRPTS()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
	            VECERR=VECERR2
	            RDPOS=IATTRIB_TABLE(J,12)
	            FILE = FILE2
		    OK = ERRPTS()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK2 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF	
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
C
200	   CONTINUE
C
C**************************************************************************
C
C	Is the number of connections valid?
C
240	   CONTINUE
	   IF(CONECT.EQ.2)GOTO 300			!OK
	   IF(CONECT.GT.2)THEN			!Too many
	      NUMERR=5
	      ITEM1=IATTRIB_TABLE(I,2)
	      HEIGHT1=ATTRIB_TABLE(I,3)
	      CODE1=IATTRIB_TABLE(I,1)
	      FILE1 = IATTRIB_TABLE(I,14)
	      IF(COUNT_START.GT.COUNT_END)THEN
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
	         VECERR1=1
	      ELSE
	         XERR1=ATTRIB_TABLE(I,6)
	         YERR1=ATTRIB_TABLE(I,7)
	         VECERR1=IATTRIB_TABLE(I,13)
	      ENDIF
C
	      IF(HAD_OUTPUT)THEN
	         RDPOS=IATTRIB_TABLE(I,12)
	         VECERR=VECERR1
	         FILE = FILE1
		 OK = ERRPTS()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
		 OK = ERRCOP()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
C
	      OK = ERRTAB()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
              GOTO 300
	   ENDIF
C
	   IF(CONECT.EQ.1)THEN
	      IF(MNDISS.GT.MAX_TOL.OR.MNDISE.GT.MAX_TOL)GOTO 300
C
250	      CONTINUE
	      NUMERR=6
	      ITEM1=IATTRIB_TABLE(I,2)
	      HEIGHT1=ATTRIB_TABLE(I,3)
	      CODE1=IATTRIB_TABLE(I,1)
	      FILE1 = IATTRIB_TABLE(I,14)
	      IF(COUNT_START.EQ.0)THEN
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
	         VECERR1=1
	      ELSE
	         XERR1=ATTRIB_TABLE(I,6)
	         YERR1=ATTRIB_TABLE(I,7)
	         VECERR1=IATTRIB_TABLE(I,13)
	      ENDIF
C
	      IF(HAD_OUTPUT)THEN
	         RDPOS=IATTRIB_TABLE(I,12)
	         VECERR=VECERR1
	         FILE = FILE1
		 OK = ERRPTS()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
		 OK = ERRCOP()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
 	      ENDIF
C
	      OK = ERRTAB()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
              GOTO 300
	   END IF
C
	   IF (CONECT.EQ.0)THEN			!unconnected
	      IF(MNDISE.GT.MAX_TOL.AND.MNDISS.GT.MAX_TOL)GOTO 300
	      IF(MNDISE.GT.MAX_TOL .OR.MNDISS.GT.MAX_TOL)GOTO 250
	      NUMERR=7
	      ITEM1=IATTRIB_TABLE(I,2)
	      CODE1=IATTRIB_TABLE(I,1)
	      HEIGHT1=ATTRIB_TABLE(I,3)
	      XERR1=ATTRIB_TABLE(I,4)
	      YERR1=ATTRIB_TABLE(I,5)
	      FILE1 = IATTRIB_TABLE(I,14)
	      VECERR1=1
C
C Copy both start and end to the plot file
C
	      IF(HAD_OUTPUT)THEN
	         RDPOS=IATTRIB_TABLE(I,12)
	         VECERR=1
	         FILE = FILE1
		 OK = ERRCOP()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	         VECERR=IATTRIB_TABLE(I,13)
		 OK = ERRPTS()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
		 OK = ERRCOP()
		 IF(.NOT.OK) THEN
		    CHECK2 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
c
	      OK = ERRTAB()
	      IF(.NOT.OK) THEN
	         CHECK2 = .FALSE.
	         GOTO 999
	      ENDIF
	   END IF
C
300	CONTINUE
C
C*************************************************************************
C
999	CONTINUE
	RETURN
	END
C
