C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-23 16:26:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CPMINMAX(IN_CORNERS)
C
***	MODULE	CPMINMAX
***	IDENT	23FE88
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created by 					ALB 23-FEB-1988
C
C Calculate minimum and maximum corner points from the different IFF files
C and store in CORNERS in common SHEET.CMN
C
	IMPLICIT NONE
C	
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C arguments
C
	REAL		IN_CORNERS(4,4)	! sheet border for current IFF file
C
C w/s
C
	INTEGER		I		! loop counter
	INTEGER		J		! loop counter
C
C if window TRUE then load into SAVE_CORNERS instead of CORNERS
C
	IF(HAD_WINDOW) THEN		! window set
C
C if first IFF file load directly into SAVE_CORNERS
C
	   IF(.NOT.HAD_FIRSTCP)	THEN
	      DO 40 I=1,4	
	         DO 30 J=1,4
		    SAVE_CORNERS(J,I) = IN_CORNERS(J,I)
30	         CONTINUE
40	      CONTINUE
	      HAD_FIRSTCP = .TRUE. 
	   ELSE			!	calculate min max cp		
C
C NW corner
C
	      SAVE_CORNERS(1,1)=MIN(SAVE_CORNERS(1,1),IN_CORNERS(1,1))
	      SAVE_CORNERS(2,1)=MAX(SAVE_CORNERS(2,1),IN_CORNERS(2,1))
	      SAVE_CORNERS(3,1)=MIN(SAVE_CORNERS(3,1),IN_CORNERS(3,1))
	      SAVE_CORNERS(4,1)=MAX(SAVE_CORNERS(4,1),IN_CORNERS(4,1))
C
C SW corner
C
	      SAVE_CORNERS(1,2)=MIN(SAVE_CORNERS(1,2),IN_CORNERS(1,2))
	      SAVE_CORNERS(2,2)=MIN(SAVE_CORNERS(2,2),IN_CORNERS(2,2))
	      SAVE_CORNERS(3,2)=MIN(SAVE_CORNERS(3,2),IN_CORNERS(3,2))
	      SAVE_CORNERS(4,2)=MIN(SAVE_CORNERS(4,2),IN_CORNERS(4,2))
C
C SE corner
C
	      SAVE_CORNERS(1,3)=MAX(SAVE_CORNERS(1,3),IN_CORNERS(1,3))
	      SAVE_CORNERS(2,3)=MIN(SAVE_CORNERS(2,3),IN_CORNERS(2,3))
	      SAVE_CORNERS(3,3)=MAX(SAVE_CORNERS(3,3),IN_CORNERS(3,3))
	      SAVE_CORNERS(4,3)=MIN(SAVE_CORNERS(4,3),IN_CORNERS(4,3))
C
C NE corner
C
	      SAVE_CORNERS(1,4)=MAX(SAVE_CORNERS(1,4),IN_CORNERS(1,4))
	      SAVE_CORNERS(2,4)=MAX(SAVE_CORNERS(2,4),IN_CORNERS(2,4))
	      SAVE_CORNERS(3,4)=MAX(SAVE_CORNERS(3,4),IN_CORNERS(3,4))
	      SAVE_CORNERS(4,4)=MAX(SAVE_CORNERS(4,4),IN_CORNERS(4,4))
	   ENDIF
C
	ELSE				! window not set
C
	   IF(.NOT.HAD_FIRSTCP)	THEN
	      DO 80 I=1,4	
	         DO 70 J=1,4
		    CORNERS(J,I) = IN_CORNERS(J,I)
70	         CONTINUE
80	      CONTINUE
	      HAD_FIRSTCP = .TRUE. 
	   ELSE			!	calculate min max cp		
C
C NW corner
C
	      CORNERS(1,1) = MIN(CORNERS(1,1),IN_CORNERS(1,1))	
	      CORNERS(2,1) = MAX(CORNERS(2,1),IN_CORNERS(2,1))
	      CORNERS(3,1) = MIN(CORNERS(3,1),IN_CORNERS(3,1))
	      CORNERS(4,1) = MAX(CORNERS(4,1),IN_CORNERS(4,1))
C
C SW corner
C
	      CORNERS(1,2) = MIN(CORNERS(1,2),IN_CORNERS(1,2))
	      CORNERS(2,2) = MIN(CORNERS(2,2),IN_CORNERS(2,2))
	      CORNERS(3,2) = MIN(CORNERS(3,2),IN_CORNERS(3,2))
	      CORNERS(4,2) = MIN(CORNERS(4,2),IN_CORNERS(4,2))
C
C SE corner
C
	      CORNERS(1,3) = MAX(CORNERS(1,3),IN_CORNERS(1,3))
	      CORNERS(2,3) = MIN(CORNERS(2,3),IN_CORNERS(2,3))
	      CORNERS(3,3) = MAX(CORNERS(3,3),IN_CORNERS(3,3))
	      CORNERS(4,3) = MIN(CORNERS(4,3),IN_CORNERS(4,3))
C
C NE corner
C
	      CORNERS(1,4) = MAX(CORNERS(1,4),IN_CORNERS(1,4))
	      CORNERS(2,4) = MAX(CORNERS(2,4),IN_CORNERS(2,4))
	      CORNERS(3,4) = MAX(CORNERS(3,4),IN_CORNERS(3,4))
	      CORNERS(4,4) = MAX(CORNERS(4,4),IN_CORNERS(4,4))
	   ENDIF
	ENDIF
	RETURN
	END
