	LOGICAL FUNCTION TOLERANCE_CMD()
C
***	MODULE	TOLERANCE_CMD
***	IDENT	16MR88
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C Created by					ALB  18-Feb-1988
C
C Function tolerances to be used during the checks
C
	IMPLICIT NONE
C
C
C parameters
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C common blocks
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C W/s.
C
	INTEGER	CMD		! command number
C
C define check table
C
	EXTERNAL 	TOLERANCE_CMD_TABLE
	INTEGER 	TOLERANCE_CMD_TABLE
C
C Functions.
C
	INTEGER 	RDCOMM
C
C***********************************************************************
C
C Initialise.
C
	TOLERANCE_CMD=.TRUE.		! assume success
C
C***********************************************************************
C	
	NOMESS = .TRUE.			! suppress error message
C	
	CMD = RDCOMM(TOLERANCE_CMD_TABLE)
	NOMESS = .FALSE.		! reset command processing messages
	GOTO (
     &		100,		! unrecognised tolerance command
     &		120,		! set border tolerance
     &		140,		! set maximum tolerance
     &		160		! set minimum tolerance
     &			) CMD+1
C
C unrecognised tolerance command 
C
100	CONTINUE
	CALL WRITEF('%S Specifying command TOLERANCE',ERROR)
	CALL WRITEF('Available TOLERANCE command qualifiers are')
	CALL WRITEF
	CALL WRITEF('BORDER  MAXIMUM  MINIMUM')
	TOLERANCE_CMD = .FALSE.
	GOTO 999
C
C border sub-command
C
120	CONTINUE
	IF(CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE BORDER',ERROR)
	   CALL WRITEF('Command requires tolerance value')
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF(REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE BORDER',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &		REALAR(1))
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	BORDER_TOL = REALAR(1)
	HAD_TOL_BOR = .TRUE.			! got border tol (remember)
	GOTO 1000
C
C maximum sub-command
C
140	CONTINUE
	IF(CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE MAXIMUM',ERROR)
	   CALL WRITEF('Command requires tolerance value')
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF(REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE MAXIMUM',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &		REALAR(1))
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF(HAD_TOL_MIN) THEN
	   IF(REALAR(1).LE.MIN_TOL) THEN	
	      CALL WRITEF('%S Specifying command TOLERANCE MAXIMUM',
     &		ERROR)
	      CALL WRITEF('Value %F0.3 <= previously specified '//
     &		'TOLERANCE MINIMUM %F0.3',REALAR(1),MIN_TOL)
	      TOLERANCE_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	ENDIF
	MAX_TOL = REALAR(1)
	HAD_TOL_MAX = .TRUE.			! got maximum tol (remember)
	GOTO 1000
C
C minimum sub-command
C
160	CONTINUE
	IF(CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE MINIMUM',ERROR)
	   CALL WRITEF('Command requires tolerance value')
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF(REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command TOLERANCE MINIMUM',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &		REALAR(1))
	   TOLERANCE_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF(HAD_TOL_MAX) THEN
	   IF(REALAR(1).GE.MAX_TOL) THEN	
	      CALL WRITEF('%S Specifying command TOLERANCE MINIMUM',
     &		ERROR)
	      CALL WRITEF('Value %F0.3 >= previously specified '//
     &		'TOLERANCE MAXIMUM %F0.3',REALAR(1),MAX_TOL)
	      TOLERANCE_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	ENDIF
	MIN_TOL = REALAR(1)
	HAD_TOL_MIN = .TRUE.			! got minimum tol (remember)
	GOTO 1000
C
999	CONTINUE				! abnormal exit	
C
1000	CONTINUE				! normal exit	
	RETURN
C
	END
