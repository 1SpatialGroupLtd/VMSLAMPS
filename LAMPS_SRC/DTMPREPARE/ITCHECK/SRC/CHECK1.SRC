C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-29 14:36:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	LOGICAL FUNCTION CHECK1()
C
***	MODULE	CHECK1
***	IDENT	29MY92
C	
C	Copyright Laser-Scan, Cambridge, England.
C
C Modified from CHECK1 in module TCHECK			ALB 22-FEB-1988
C converted to a function
C
C	Subroutine for ITCHECK to check:
C	1. Contour heights are divisible by the contour interval
C	2. Supplemnet contour heights are divisible by the supplement interval
C	3. Index contour heights are divisible by the index interval
C	4. All index and contour heights lie within between upper and
C	   lower limit
C	5. All max contours values between the upper and lower limits are 
C	present
C	6. Check that coastline has height of 0
C	7. Check that cliffs have height values between upper and lower limits
C
C	Uses unsorted PNTERS
C
	IMPLICIT NONE
C
C parameters
C
	INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C	
C common blocks	
C
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:ATTRIB.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:BOUNDS.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C w/s
C
	REAL		RCVAL		!Real height
	LOGICAL		IN_CLIFF	!TRUE if bit set for cliff
	LOGICAL		IN_COAST	!TRUE if bit set for coast
	LOGICAL		IN_CONTOUR	!TRUE if bit set for contour
	LOGICAL		IN_INDEX	!TRUE if bit set for index
	LOGICAL		IN_SUPPLE	!TRUE if bit set for supplementary
	INTEGER*4	FC_PTR		!element in GRPFCT
	INTEGER*4	FC_OFFSET	!offset in GRPFCT element
	INTEGER*4	BASE_LEVEL_CONT	!minimum contour level relative to zero
	INTEGER*4	BASE_LEVEL_INDEX!minimum index level relative to zero
	INTEGER*4	CURR_LEVEL	!current contour level relative to zero
	INTEGER*4	I		!Counter
	INTEGER*4	J		!array subscript
	INTEGER*4	NUM_CLEVEL	!Number of contour possible levels
	INTEGER*4	IFFIN_NUM	!IFF input file number
	LOGICAL		CHERE(1024)	!Contour present ?
	INTEGER*4	NUM_ILEVEL	!Number of index contour possible levels
	INTEGER		IFC_NUM(1024)	!Save feature code number if Index
	LOGICAL		IHERE(1024)	!Index contour present ?
	LOGICAL		CRT		!TRUE if terminal is a CRT
	LOGICAL		OK		!return code
C
C functions
C
	LOGICAL		OUTPUT_CRT	!TRUE if SYS$OUTPUT is CRT
	LOGICAL		LIB$EXTZV	!bit extraction function
	LOGICAL		ERRCOP		!copy errorous feature to output IFF
	LOGICAL		ERRTAB		!put error message into text error file
C
C************************************************************************* 
C
	CHECK1 = .TRUE.			! assume success
C
C************************************************************************* 
C
C initialise variables
C
	CRT = OUTPUT_CRT()		! is output device a CRT
C
C get base level for contour feature and number of levels
C 
	IF(ABS(MOD(MIN_CONTOUR,CONTOUR_INT)).GT.TOLERANCE) THEN
	   BASE_LEVEL_CONT = MIN_CONTOUR/CONTOUR_INT + 1
	   IF(ABS(MOD(MAX_CONTOUR,CONTOUR_INT)).GT.TOLERANCE) THEN
	      NUM_CLEVEL=(MAX_CONTOUR - MIN_CONTOUR)/CONTOUR_INT
	   ELSE
	      NUM_CLEVEL=(MAX_CONTOUR - MIN_CONTOUR)/CONTOUR_INT + 1
	   ENDIF	   
	ELSE
	   BASE_LEVEL_CONT = MIN_CONTOUR/CONTOUR_INT
	   IF(ABS(MOD(MAX_CONTOUR,CONTOUR_INT)).GT.TOLERANCE) THEN
	      NUM_CLEVEL=(MAX_CONTOUR - MIN_CONTOUR)/CONTOUR_INT + 1
	   ELSE
	      NUM_CLEVEL=(MAX_CONTOUR - MIN_CONTOUR)/CONTOUR_INT + 1
	   ENDIF	   
	ENDIF
C
C get base level for index contour feature and number of levels
C 
	IF(ABS(MOD(MIN_CONTOUR,INDEX_INT)).GT.TOLERANCE) THEN
	   BASE_LEVEL_INDEX = MIN_CONTOUR/INDEX_INT + 1
	   IF(ABS(MOD(MAX_CONTOUR,INDEX_INT)).GT.TOLERANCE) THEN
	      NUM_ILEVEL=(MAX_CONTOUR - MIN_CONTOUR)/INDEX_INT
	   ELSE
	      NUM_ILEVEL=(MAX_CONTOUR - MIN_CONTOUR)/INDEX_INT + 1
	   ENDIF	   
	ELSE
	   BASE_LEVEL_INDEX = MIN_CONTOUR/INDEX_INT
	   IF(ABS(MOD(MAX_CONTOUR,INDEX_INT)).GT.TOLERANCE) THEN
	      NUM_ILEVEL=(MAX_CONTOUR - MIN_CONTOUR)/INDEX_INT + 1
	   ELSE
	      NUM_ILEVEL=(MAX_CONTOUR - MIN_CONTOUR)/INDEX_INT + 1
	   ENDIF	   
	ENDIF
C
C set CHERE and IHERE arrays to .FALSE.
C
	DO 20 I=1,NUM_CLEVEL
	   CHERE(I)=.FALSE.
20	CONTINUE
	DO 40 I=1,NUM_ILEVEL
	   IHERE(I)=.FALSE.
40	CONTINUE
C
C*************************************************************************
C
	DO 100 I=1,NUM_FC
C
	   IF(CRT) THEN
	      CALL PERCENT(' <PROCESSING CHECK 1> ',22,NUM_FC,I)!write % done
	   ENDIF
C
 	   RCVAL=ATTRIB_TABLE(I,3)				!Item height
C
	   FC_PTR = IATTRIB_TABLE(I,1)/32 + 1			! get pointer
	   FC_OFFSET = MOD(IATTRIB_TABLE(I,1),32)		! get offset
	   IN_CLIFF = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CLIFF))
	   IN_COAST = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,COAST))
	   IN_INDEX = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,INDEX_C))
	   IN_CONTOUR = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,CONTOUR))
	   IN_SUPPLE = LIB$EXTZV(FC_OFFSET,1,
     &		GRPFCT(FC_PTR,SUPPLEMENTARY))
C -----------------------------------------------------------------------------
C if coastline check for 0 height
C
	   IF(IN_COAST) THEN		! feature code is coastline
	      IF(RCVAL.NE.0.0)THEN
	         NUMERR=16
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
	         GOTO 100
	      ENDIF
	      GOTO 100
	   ENDIF
C -----------------------------------------------------------------------------
C if cliff check that height values are between lower and upper limits
C
	   IF(IN_CLIFF) THEN		! feature code is cliff
	      IF(RCVAL.GT.MAX_CONTOUR.OR.RCVAL.LT.MIN_CONTOUR)THEN
	         NUMERR=25
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
	      ENDIF
C
 	      RCVAL=ATTRIB_TABLE(I,15)		! Ancillary height
	      IF(RCVAL.GT.MAX_CONTOUR.OR.RCVAL.LT.MIN_CONTOUR)THEN
	         NUMERR=26
		 ITEM1=IATTRIB_TABLE(I,2)
		 HEIGHT1=RCVAL
		 CODE1=IATTRIB_TABLE(I,1)
		 XERR1=ATTRIB_TABLE(I,4)
		 YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
		 IF(HAD_OUTPUT)THEN
		    RDPOS=IATTRIB_TABLE(I,12)
		    FILE = FILE1
		    OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
		 ENDIF
		 OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
		 GOTO 100
	      ENDIF
	      GOTO 100
	   ENDIF
C -----------------------------------------------------------------------------
C check if feature code is contour, index, or supplementary whether height
C is in range
C
	   IF(IN_CONTOUR.OR.IN_INDEX.OR.IN_SUPPLE) THEN	
	      IF(RCVAL.GT.MAX_CONTOUR.OR.RCVAL.LT.MIN_CONTOUR)THEN
                 NUMERR=2					!Error
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
	         GOTO 100
	      END IF
	   ENDIF
C -----------------------------------------------------------------------------
C if supplementary check whether divisible by supple_int
C
	   IF(IN_SUPPLE) THEN				!TRUE if supplementary
	      IF(ABS(MOD(RCVAL,SUPPLE_INT)).GT.TOLERANCE) THEN 
	         NUMERR=1					!Error
C
C	! not divisible by supplement CI
C
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
                 GOTO 100
	      END IF
	      GOTO 100
	   ENDIF
C -----------------------------------------------------------------------------
C if contour check whether divisible by contour_int
C
	   IF(IN_CONTOUR) THEN				!TRUE if contour
	      IF(ABS(MOD(RCVAL,CONTOUR_INT))
     &		.GT.TOLERANCE) THEN	!not divisable by CONTOUR_INT
	         NUMERR=22					!Error
C
C	! not divisible by CI
C
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
                 GOTO 100
	      ELSE
	         CURR_LEVEL = INT(RCVAL/CONTOUR_INT)
	         CHERE(CURR_LEVEL - BASE_LEVEL_CONT + 1) =.TRUE.
C
C save FC number in case contour is really an index contour
C
	         IFC_NUM(CURR_LEVEL - BASE_LEVEL_CONT + 1) = I
	      ENDIF
	   ENDIF
C -----------------------------------------------------------------------------
C if index check whether divisible by index CI
C
	   IF(IN_INDEX) THEN				!TRUE if index
              IF(ABS(MOD(RCVAL,INDEX_INT)).GT.TOLERANCE) THEN !not index
	         NUMERR=21					!Error
C
C	! not divisible by index CI
C
	         ITEM1=IATTRIB_TABLE(I,2)
	         HEIGHT1=RCVAL
	         CODE1=IATTRIB_TABLE(I,1)
	         XERR1=ATTRIB_TABLE(I,4)
	         YERR1=ATTRIB_TABLE(I,5)
		 FILE1=IATTRIB_TABLE(I,14)
	         IF(HAD_OUTPUT)THEN
	            RDPOS=IATTRIB_TABLE(I,12)
	            FILE = FILE1
	            OK = ERRCOP()
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
	         ENDIF
	         OK = ERRTAB()
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
                 GOTO 100
	      ELSE
	         CURR_LEVEL = INT(RCVAL/INDEX_INT)
	         IHERE(CURR_LEVEL - BASE_LEVEL_INDEX + 1) =.TRUE.
		 GOTO 100
	      ENDIF
	   ENDIF
C
100	CONTINUE
C -----------------------------------------------------------------------------
C	Check if all possible contour values are present if one missing
C then check whether index contour present in its place
C
	NUMERR=3
	DO 200 I=1,NUM_CLEVEL

	   IF(.NOT.CHERE(I))THEN
	      HEIGHT1=((I + BASE_LEVEL_CONT - 1)*CONTOUR_INT)
C
C see if multiple of index check whether index contour present instead
C
	      IF(ABS(MOD(HEIGHT1,INDEX_INT)).GT.TOLERANCE) THEN 	!not index 
	      	 OK = ERRTAB()					!Error
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
	      ELSE         
	         CURR_LEVEL = INT(HEIGHT1/INDEX_INT) 	! get level in IHERE
	         IF(.NOT.IHERE(CURR_LEVEL - BASE_LEVEL_INDEX + 1)) THEN 
	      	    OK = ERRTAB()					!Error
		    IF(.NOT.OK) THEN
		       CHECK1 = .FALSE.
		       GOTO 999
		    ENDIF
		 ENDIF
	      ENDIF
	   END IF
C
200	CONTINUE
C -----------------------------------------------------------------------------
C Check if all possible index contour values are present
C
	DO 300 I=1,NUM_ILEVEL
	   IF(.NOT.IHERE(I))THEN
	      HEIGHT1=((I + BASE_LEVEL_INDEX - 1)*INDEX_INT)
C
C see if contour present instead
C
	      CURR_LEVEL = INT(HEIGHT1/CONTOUR_INT) 	! get level in CHERE
	      IF(.NOT.CHERE(CURR_LEVEL - BASE_LEVEL_CONT + 1)) THEN 
	         NUMERR=23
	         OK = ERRTAB()					!Error
		 IF(.NOT.OK) THEN
		    CHECK1 = .FALSE.
		    GOTO 999
		 ENDIF
	      ELSE
	         J =IFC_NUM(CURR_LEVEL - BASE_LEVEL_CONT + 1)
	         ITEM1=IATTRIB_TABLE(J,2)
	         CODE1=IATTRIB_TABLE(J,1)
	         XERR1=ATTRIB_TABLE(J,4)
	         YERR1=ATTRIB_TABLE(J,5)
		 FILE1=IATTRIB_TABLE(J,14)
	         NUMERR = 24
	         OK = ERRTAB()					!Warning
	         IF(.NOT.OK) THEN
	            CHECK1 = .FALSE.
	            GOTO 999
	         ENDIF
	      ENDIF
	   END IF
C
300	CONTINUE
C
C***************************************************************************
C
999	CONTINUE
	RETURN
C
	END
