C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-01 16:48:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ERRPTS()
C
***	MODULE	ERRPTS
***	IDENT	01JN92
C
C	Copyright Laser Scan Laboratories, Cambridge, England
C	Author: D Catlow
C	Created: 26FE85
C
C Modified from ERRPTS in module TCHECK 		by ALB 1-MAR-1988
C Routine converted into a FUNCTION
C
CMOD	XY_ERROR array redimensioned from 18000 to 50000
C	and placed into (equivalenced) common		TJH 09-Jan-1989
C
C Routine to place up to NUM_ERR_PTS data points in points array close to
C where detected error occurs.  This is a temporary array prior to copying
C to the output error file.
C
C
	IMPLICIT NONE
C
C	
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C structures
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
C w/s
C
	INTEGER		NUM_XY		!number of xy pairs read from CB
C
	LOGICAL		OK		!return code
	INTEGER*4	I		!counter
	INTEGER*4	TOTPTS		!total number of pts
	INTEGER*4	MINUS		!
	INTEGER*4	OFFSET
	INTEGER*2	IENDS
	INTEGER*2	IELEN
	INTEGER*2	IECODE
	INTEGER*2	LUN
C
C functions
C
	LOGICAL		IFFOPEN		!open an input IFF file
C
C************************************************************************
C
	ERRPTS = .TRUE.			! assume success
	LUN = IFFIN_LUN
C
C************************************************************************
C
C
C Don't report error if outside window
C
	IF((HAD_WINDOW).AND.(NUMERR.NE.0)) THEN
	   IF(.NOT.((XERR1.GE.WINDOW(1,1)).AND.
     &     (XERR1.LE.WINDOW(1,2)).AND.
     &	   (YERR1.GE.WINDOW(2,1)).AND.
     &	   (YERR1.LE.WINDOW(2,2)))) GOTO 1000 !  outside window
	ENDIF
C
C check whether last IFF is same as current
C
	IF(FILE.NE.LAST_IFFIN) THEN
	   IF(OPEN_IFFIN) THEN
	      CALL IFFCLO(LUN)
	      OPEN_IFFIN = .FALSE.
	   ENDIF
C
C re-open IFF file
C
	   OK=IFFOPEN(LUN,IFFIN_FNAME(FILE),
     &				IFFIN_FID(1,FILE),,1)
	   IF(.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK,
     &			IFFIN_FNAME(FILE)(1:IFFIN_LEN(FILE)))
	      ERRPTS = .FALSE.
	      GOTO 999
	   ENDIF
	   OPEN_IFFIN = .TRUE.
	   LAST_IFFIN = FILE
	ENDIF
C
	CALL IFFSEL(LUN)
C
C read in feature
C

	TOTPTS=0
	CALL IFFPKE(IECODE,IELEN,RDPOS)
	CALL IFFNXC('CB',IELEN)
60	CONTINUE
C
C load error feature xy's values into error array  
C
	CALL CBINOUT(XY_ERROR(1,TOTPTS+1),.FALSE.,NUM_XY)
	TOTPTS = TOTPTS + NUM_XY
C
	CALL IFFNXT(IECODE,IELEN)
	IF(IECODE.EQ.'CB') GOTO 60	!get more points
C
C	  	  
	MINUS = NUM_ERR_PTS/2		!set minus to half num of error points 
C
	IF(VECERR-MINUS.LE.0.OR.TOTPTS.LE.NUM_ERR_PTS)THEN
	    VECERR=0
	    GOTO 1000		!output first NUM_ERR_PTS points
	ENDIF	
C
	IF(VECERR+MINUS.GT.TOTPTS)THEN
	   MINUS=NUM_ERR_PTS - (TOTPTS-VECERR)
	ENDIF
	OFFSET=VECERR-MINUS
C
C Transfer NUM_ERR_PTS points into buffer POINTS
C
 	DO 100 I=1,NUM_ERR_PTS
	   POINTS(1,I)=XY_ERROR(1,OFFSET+I)
	   POINTS(2,I)=XY_ERROR(2,OFFSET+I)
100     CONTINUE
C
999	CONTINUE
1000	CONTINUE
	RETURN
C
	END
