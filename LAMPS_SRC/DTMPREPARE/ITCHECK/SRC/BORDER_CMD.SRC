	LOGICAL FUNCTION BORDER_CMD()
C
***	MODULE	BORDER_CMD
***	IDENT	15JN88
C
C	Copyright : Laser-Scan Laboratories, Cambridge, England
C
C Created by					ALB 23-FEB-1988	
C	
C This function is designed to set up at User defined border
C which will replace the border calculated from the CP's.  If this 
C routine is run it will over-ride any corner points calculated from 
C the IFF files CP entry.  
C
C If more than four points are supplied then the function assumes
C user wished to define a border which is not necessarily rectanglar
C in shape.  If this is the case then parsing of the command line 
C is done outsides of RDCOMM
C
C Use of IFF corners can be restored by running 
C BORDER without any command arguments
C
C	Function returns .TRUE. if successful.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'	
C	
C Common:
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'		! LSLLIB common
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE	'LSL$CMNITCHECK:SHEET.CMN'
C
C W/s
C
	INTEGER		I		! loop counter
	INTEGER		J		! loop counter
	BYTE		CH		! character read from command line
	REAL	 	IN_BOUND(2,MAX_BFEAT)	!temp array to allow input check
C
C Function
C
	LOGICAL		RDCH
	LOGICAL		RDCHS
	LOGICAL		RDREAL
C ......................................................................
C
	BORDER_CMD=.TRUE.		! assume success
C
C ......................................................................
C
	IF ((.NOT.(CMDRCT.GE.4)).AND.(CMDRCT.NE.0)) THEN
	   CALL WRITEF('%S Specifying command BORDER',ERROR)
	   CALL WRITEF('Command requires either: ')
	   CALL WRITEF('   2 x,y coordinate pairs (SW and NE)')
	   CALL WRITEF('or')
	   CALL WRITEF('   4 x,y coordinate pairs (SW, NW, NE and SE)')
	   BORDER_CMD =.FALSE.
	   GOTO 999
	ENDIF
C------------------------------------------------------------------------------
C Test whether we are defining more than two points if so block 
C for processing four input coordinate pairs
C
	IF(CMDRCT.GT.4) GOTO 200
C -----------------------------------------------------------------------------
C Processing two coordinate pairs
C
	IF(REALAR(1).GT.REALAR(3).AND.CMDRCT.NE.0) THEN
	   CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   CALL WRITEF('NE x coordinate < SW x coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(REALAR(2).GT.REALAR(4).AND.CMDRCT.NE.0) THEN
	   IF (BORDER_CMD) THEN
	      CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   ENDIF
	   CALL WRITEF('NE y coordinate < SW y coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(.NOT.BORDER_CMD) GOTO 999 	! error detected
C
	IF(CMDRCT.EQ.4) THEN
	   IF(.NOT.HAD_BORDER) THEN
C
C copy corner points in CORNERS into SAVE_CORNERS 
C	
	      DO 40 I = 1,4
		 DO 30 J = 1,4
		    SAVE_CORNERS(J,I) = CORNERS(J,I)
30		 CONTINUE
40	      CONTINUE
	   ENDIF
	   CORNERS(1,1)=REALAR(1)
	   CORNERS(3,1)=REALAR(1)
	   CORNERS(1,2)=REALAR(1)
	   CORNERS(3,2)=REALAR(1)
	   CORNERS(2,1)=REALAR(2)
	   CORNERS(4,1)=REALAR(2)
	   CORNERS(2,2)=REALAR(2)
	   CORNERS(4,2)=REALAR(2)
	   CORNERS(1,3)=REALAR(3)
	   CORNERS(3,3)=REALAR(3)
	   CORNERS(1,4)=REALAR(3)
	   CORNERS(3,4)=REALAR(3)
	   CORNERS(2,3)=REALAR(4)
	   CORNERS(4,3)=REALAR(4)
	   CORNERS(2,4)=REALAR(4)
	   CORNERS(4,4)=REALAR(4)
	   HAD_BORDER = .TRUE.
	   HAD_4_POINTS = .FALSE.
	   GOTO 1000
	ENDIF
	IF(CMDRCT.EQ.0) THEN
C
C copy corner points in SAVE_CORNERS into CORNERS (ie restore min max corner
C points from IFF files)
C	
	   DO 80 I = 1,4
	      DO 70 J = 1,4
	        CORNERS(J,I) = SAVE_CORNERS(J,I)
70	     CONTINUE
80	   CONTINUE
	   HAD_BORDER = .FALSE.
	   HAD_4_POINTS = .FALSE.
	   GOTO 1000
	ENDIF
C -----------------------------------------------------------------------------
C Processing four coordinate pairs
C
200	CONTINUE
	CALL BSLN		
C
C	Set to first numeric character (ie skip BORDER command)
210	CONTINUE
	DO 220 I=DCPTR,TXTPTR
	   IF(RDCH(CH)) THEN 
	      BORDER_CMD = .FALSE. 
	      GOTO 999			! error
	   ENDIF
	   IF (CH.GT.47.AND.CH.LT.58) GOTO 230	! found first numeric
220	CONTINUE
C
230	CONTINUE
	CALL BSCH
C
	DO 250 I = 1,4	
	   DO 250 J = 1,2 
	      IF(RDCHS(CH)) THEN
		 CALL WRITEF('%S Specifying command BORDER',ERROR)
		 CALL WRITEF('Command requires either: ')
		 CALL WRITEF('   2 x,y coordinate pairs (SW and NE)')
		 CALL WRITEF('or')
		 CALL WRITEF('   4 x,y coordinate pairs (SW, NW, NE '//
     &		 'and SE)')
		 BORDER_CMD =.FALSE.
	         GOTO 999
	      ENDIF
	      CALL BSCH
	      IF(RDREAL(IN_BOUND(J,I))) THEN
		 CALL WRITEF('%S Specifying command BORDER',ERROR)
		 CALL WRITEF('Real argument not found')
		 BORDER_CMD =.FALSE.
	         GOTO 999
	      ENDIF
250	   CONTINUE
260	CONTINUE
	IF(IN_BOUND(1,1).GT.IN_BOUND(1,4)) THEN
	   CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   CALL WRITEF('SE x coordinate < SW x coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(IN_BOUND(1,2).GT.IN_BOUND(1,3)) THEN
	   IF(BORDER_CMD) THEN
	      CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   ENDIF
	   CALL WRITEF('NE x coordinate < NW x coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(IN_BOUND(2,1).GT.IN_BOUND(2,2)) THEN
	   IF(BORDER_CMD) THEN
	      CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   ENDIF
	   CALL WRITEF('NW y coordinate < SW y coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(IN_BOUND(2,4).GT.IN_BOUND(2,3)) THEN
	   IF(BORDER_CMD) THEN
	      CALL WRITEF('%S Specifying command BORDER',ERROR) 
	   ENDIF
	   CALL WRITEF('NE y coordinate < SE y coordinate')
	   BORDER_CMD = .FALSE.
	ENDIF
	IF(.NOT.BORDER_CMD) THEN
	   GOTO 999
	ELSE			! new data ok so load up BOUND_FEAT array
	   DO 350 I = 1,4
	      DO 300 J = 1,2
		 BOUND_FEAT(J,I) = IN_BOUND(J,I)
300	      CONTINUE
350	   CONTINUE 
	ENDIF
	BOUND_FEAT(1,5) = BOUND_FEAT(1,1)	! set last  x and y point to be
	BOUND_FEAT(2,5) = BOUND_FEAT(2,1)	! same as start x and y point
	HAD_BORDER = .TRUE.
	HAD_4_POINTS = .TRUE.
C *****************************************************************************
C
999	CONTINUE
1000	CONTINUE
	RETURN
	END
