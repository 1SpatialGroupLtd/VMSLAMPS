C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-19 13:51:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK_CMD()
C
***	MODULE	CHECK_CMD
***	IDENT	07AP88
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C Created by					ALB  16-Feb-1988
C
C Function to set which checks are to be performed when the GO command
C is executed.
C
	IMPLICIT NONE
C
C
C parameters
C
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C
C common blocks
C
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SELECT.CMN'
C
C W/s.
C
	LOGICAL GOT_CHECK	! return code
	LOGICAL OK		! return code
	LOGICAL EOL		! end of line
	INTEGER START		! lower limit for a range check set
	INTEGER FINISH		! upper limit for a range check set
	INTEGER	CMD		! command number
	INTEGER I		! loop controls.
	INTEGER*2 BUFF_PTR	! to remember buffer pointer
	BYTE CH			! for use with RDCH & RDCHS
C
C define check table
C
	EXTERNAL 	CHECK_CMD_TABLE
	INTEGER 	CHECK_CMD_TABLE
C
C Functions.
C
	INTEGER 	RDCOMM
	LOGICAL*1 	READRANG
	LOGICAL*1 	RDCHS
	LOGICAL*1 	RDCH
C
C***********************************************************************
C
C Initialise.
C
	CHECK_CMD=.TRUE.		! assume success
	GOT_CHECK = .FALSE.
C
C***********************************************************************
C
C assume ALL set limits to be complete range
C 
	START = 1
	FINISH =	NUM_CHECK
C	
C read all the checks or range checks given with this command 
C set logical switches for required checks to .TRUE.
C
	NOMESS = .TRUE.
	CALL DCPSAV(BUFF_PTR)			! save the buffer pointer
	CMD = RDCOMM(CHECK_CMD_TABLE)
	NOMESS = .FALSE.
	GOTO (
     &		5,		! probably check number or range supplied
     &		300		! ALL found
     &			) CMD+1
5	CONTINUE
	CALL DCPSET(BUFF_PTR)			! reset buffer pointer
10	CONTINUE
	EOL = RDCHS(CH)
	IF(.NOT.EOL) THEN				! more feature codes
	   IF ((CH.GE.48).AND.(CH.LE.57)) THEN		! 0 - 9
	      GOTO 200
	   ELSEIF (CH.EQ.COMMA) THEN			! check the delimiter. 
	      GOTO 10
	   ELSE						! unexpected char
	      CALL WRITEF('%S Specifying command CHECK',ERROR)
	      CALL WRITEF('Unexpected character "%^B%C" '//
     &		'at this point.',CH)
	      CHECK_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	ELSE						! no more FC's
	   IF(.NOT.GOT_CHECK) THEN
	      CALL WRITEF('%S Specifying command CHECK',ERROR)
	      CALL WRITEF('Command require check number or range '//
     &		'of check numbers')
	      CHECK_CMD = .FALSE.
	      GOTO 999
	   ENDIF
	   GOTO 400
	ENDIF
C
C***********************************************************************
C
C Got an explicit ft code or range of ft codes.
C
200	CONTINUE
	OK = READRANG(START,FINISH)
	IF (.NOT.OK) THEN 
	   CHECK_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF ((START.LT.1).OR.(START.GT.NUM_CHECK)) THEN
	   CALL WRITEF('%S Specifying command CHECK',ERROR)
	   CALL WRITEF('Illegal check %^L%N.',START)
	   CALL WRITEF('Checks must be between 1 - %I',NUM_CHECK)
	   CHECK_CMD = .FALSE.
	   GOTO 999
	ENDIF
	IF ((FINISH.LT.1).OR.(FINISH.GT.NUM_CHECK)) THEN
	   CALL WRITEF('%S Specifying command CHECK',ERROR)
	   CALL WRITEF('Illegal check %^L%N.',FINISH)
	   CALL WRITEF('Checks must be between 1 - %I',NUM_CHECK)
	   CHECK_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C Initialise logical switches
C
	IF (HAD_CHECK) THEN
	   DO 210 I = 1,NUM_CHECK
	      CHECK(I) = .FALSE.
210	   CONTINUE
	   HAD_CHECK = .FALSE.
	ENDIF
C
C reset logical switches for checks
C
300	CONTINUE
	DO 310 I=START,FINISH
	   CHECK(I) = .TRUE.
	   GOT_CHECK = .TRUE.
310	CONTINUE
	GOTO 10
C
C***********************************************************************
C
400	CONTINUE
	HAD_CHECK = .TRUE.
C
C***********************************************************************
C
999	CONTINUE	
	RETURN
C
	END
