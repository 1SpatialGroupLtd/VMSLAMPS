C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-05-29 18:12:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GO_CMD()
C
***	MODULE	GO_CMD
***	IDENT	29MY92
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
C Created by 						ALB 18-Feb-1988
C
CMOD (M884) If index and supplementary contour intervals 
C are unset, now defaults them to the contour interval
C and warns user.					CAB 11-MAY-1990
C
CMOD1120Picks up error in CHECK0 if data arrays are overrun 
C							 JB 29-May-1992
C
C Go command for checking.  This command performs the following
C task:
C
C 1) Checks whether manditory commands have executed.
C
C 2) Run preliminary check (CHECK0) run once only.  Once CHECK0 has run
C    then flag so that no more IFF files can be opened.
C
C 3) Test at start of each check as to whether test is required
C
C 4) At the start of check confirm available of parameters for check.
C
C 5) Call appriopriate subroutine to run check
C
C  Function returns .TRUE. if all is well, otherwise .FALSE.
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSL messages
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'	
C
C Common:
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'		! LSLLIB common
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'			! IFF common
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SELECT.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C W/s
	INTEGER		I		!counter
	INTEGER		RET_CODE	!return code
	INTEGER		IERR		!system error code
	LOGICAL		OK		!return code
C
C Functions
C
	LOGICAL		CHECK0		!do checks 0
	LOGICAL		CHECK1		!do checks 1
	LOGICAL		CHECK2		!"    "    2
	LOGICAL		CHECK3		!"    "    3
	LOGICAL		CHECK4		!"    "    4
	LOGICAL		CHECK5		!"    "    5
	LOGICAL		CHECK6		!"    "    6
	LOGICAL		ERRCOP		!numerr=0 function closes output IFF
	INTEGER		FLWCLO		!close file
C
C ......................................................................
C initialise
C
	GO_CMD=.TRUE.		! assume success
	ERRCNT = 0
C
C check that manditory commands have been executed.
C
C ......................... >>> 1 <<< .........................
C
	IF(.NOT.HAD_IFFIN) THEN				! no IFF files
	   IF(GO_CMD) THEN
	      CALL WRITEF('%S Specifying command GO',ERROR)
	   ENDIF
	   CALL WRITEF('No input IFF files open.              '//
     &	   '>> Execute command IFF')
	   GO_CMD = .FALSE.
	ENDIF
C
	IF (.NOT.HAD_LOOKUP) THEN			! no group table
	   IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	   CALL WRITEF('No group definition table defined.    '//
     &	   '>> Execute command LOOKUP')
	   GO_CMD = .FALSE.
	ENDIF
C
	IF(.NOT.HAD_CHECK) THEN				! no checks
	   IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	   CALL WRITEF('No checks selected.                   '//
     &	   '>> Execute command CHECK')
	   GO_CMD = .FALSE.
	ENDIF
C
	IF(.NOT.GO_CMD) GOTO 999
C
C ......................... >>> 2 <<< .........................
C pre-processing to ensure that each check has everything it needs.
C
C contour interval with check 1,4 & 6
C
	IF(.NOT.HAD_CONTOUR) THEN
	   IF(CHECK(1).OR.CHECK(4).OR.CHECK(6)) THEN
	      IF(GO_CMD) THEN
	         CALL WRITEF('%S Specifying command GO',ERROR)
	      ENDIF
   	      CALL WRITEF('Contour interval not specified.      '//
     &	      ' >> Execute command CONTOUR_INTERVAL')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
C
C index contour interval with check 1
C
	IF(.NOT.HAD_INDEX) THEN
	   IF(CHECK(1)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',WARNING)
	      CALL WRITEF('Index interval not specified.         '//
     &        '>> Defaulting to previously specified CONTOUR_INTERVAL.')
	      INDEX_INT = CONTOUR_INT
	   ENDIF
	ENDIF
C
C supplementary contour interval with checks 1 
C
	IF(.NOT.HAD_SUPPLE) THEN
	   IF(CHECK(1)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',WARNING)
	      CALL WRITEF('Supplementary interval not specified. '//
     &	      '>> Defaulting to previously specified CONTOUR_INTERVAL.')
	      SUPPLE_INT = CONTOUR_INT
	   ENDIF
	ENDIF
C
C lower and upper contour limits check 1 
C
	IF(.NOT.HAD_ZLIMITS) THEN
	   IF(CHECK(1)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	      CALL WRITEF('Contour limits not specified.        '//
     &        ' >> Execute command ZLIMITS')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
C
C border tolerance with check 2 
C
	IF(.NOT.HAD_TOL_BOR) THEN
	   IF(CHECK(2)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	      CALL WRITEF('Border tolerance not specified.      '//
     &	      ' >> Execute command TOLERANCE BORDER')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
C
C maximum tolerance with check 2 
C
	IF(.NOT.HAD_TOL_MAX) THEN
	   IF(CHECK(2)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	      CALL WRITEF('Maximum tolerance not specified.     '//
     &	      ' >> Execute command TOLERANCE MAXIMUM')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
C
C minimum tolerance with check 2 
C
	IF(.NOT.HAD_TOL_MIN) THEN
	   IF(CHECK(2)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	      CALL WRITEF('Minimum tolerance not specified.     '//
     &	      ' >> Execute command TOLERANCE MINIMUM')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
C
C profile with check 4 
C
	IF(.NOT.HAD_PROFILE) THEN
	   IF(CHECK(4)) THEN
	      IF(GO_CMD) CALL WRITEF('%S Specifying command GO',ERROR)
	      CALL WRITEF('Profile interval not specified.      '//
     &        ' >> Execute command PROFILE')
	      GO_CMD = .FALSE.
	   ENDIF
	ENDIF
	IF(.NOT.GO_CMD) GOTO 999
C
C    Run preliminary check (CHECK0) run once only. Once CHECK0 has 
C    then flag so that no more IFF files can be opened unless command 
C    CLOSE IFF executed.
C
C ......................... >>> 3 <<< .........................
C
	IF (.NOT.HAD_CHECK0) THEN
	   DO 20 I = 1,NUM_IFFIN
	     OK = CHECK0(I)		! run check for each IFF file
	     IF (.NOT.OK) THEN
	       IF (I.LT.NUM_IFFIN .OR. I.GT.1) THEN
		 NUM_IFFIN = I
		 CALL WRITEF ('%S Number of IFF files restricted to %N',
     &							ERROR,NUM_IFFIN)
		 CALL WRITEF
	       ENDIF
C
	       CALL WRITEF
	       CALL WRITEF
	       GOTO 25
	     ENDIF
20	   CONTINUE
C
25	   CONTINUE
	   HAD_CHECK0 = .TRUE.	! use to suppress opening of input IFF files
	ENDIF
C
C ......................... >>> 4 <<< .........................
C processing (do each check selected) after checking whether any FC has
C been validated in CHECK0
C
	IF(NUM_FC.EQ.0)	THEN
	   CALL WRITEF('%S No feature code match found',ERROR)
	   CALL WRITEF('Either:-   FC has been deselected     '//
     &	   '>>  Execute SELECT command')
	   CALL WRITEF('or	   Lookup file is invalid     '//
     &	   '>>  Execute LOOKUP command')
	   GO_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C .............................................................
C check 1 
C
	IF (CHECK(1)) THEN
	   OK = CHECK1()
	   IF(.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(1) = .FALSE.			! reset checks good return
	ENDIF
C
C .............................................................
C check 2 
C
	IF(CHECK(2)) THEN
	   OK = CHECK2()
	   IF(.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(2) = .FALSE.			! reset checks good return
	ENDIF
C
C .............................................................
C check 3 
C
	IF(CHECK(3)) THEN
	   OK = CHECK3()
	   IF(.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(3) = .FALSE.			! reset checks good return
	ENDIF
C
C .............................................................
C check 4 
C
	IF(CHECK(4)) THEN
	   OK = CHECK4()
	   IF (.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(4) = .FALSE.			! reset checks good return
	ENDIF
C
C .............................................................
C check 5 
C
	IF(CHECK(5)) THEN
	   OK = CHECK5()
	   IF (.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(5) = .FALSE.			! reset checks good return
	ENDIF
C
C .............................................................
C check 6 
C
	IF(CHECK(6)) THEN
	   OK = CHECK6()
	   IF (.NOT.OK) THEN
	      GO_CMD = .FALSE.
	      GOTO 998
	   ENDIF
	   OVERNO = OVERNO + 1
	   NEWOVR = .FALSE.
	   CHECK(6) = .FALSE.			! reset checks good return
	ENDIF
C
C ......................... >>> 5 <<< .........................
C close LIST, LITES2 and OUTPUT file after checks
C
998	CONTINUE
C
C close list file
C
	IF (OPEN_LIST) THEN
	   RET_CODE = FLWCLO(LIST_LUN,IERR)	
	   IF(RET_CODE.NE.LSL__NORMAL) THEN
	      CALL WRITEF('%S in closing tabulation file %S',
     &		ERROR,LIST_FNAME)
	      CALL LSL_PUTMSG(RET_CODE)
	      IF(RET_CODE.EQ.LSL__SYSCLOSE) THEN
	         CALL LSL_ADDMSG(IERR)
	      ENDIF
	   ENDIF
	   OPEN_LIST = .FALSE.
	ENDIF
C
C close lites2 file
C
	IF (HAD_LITES2) THEN
	   IF(OPEN_LITES2) THEN
	      CALL FLWSEL(LITES2_LUN)
	      CALL FLWRTF
     &	      ('%%MESSAGE *** END OF LITES COMMAND FILE ***')
	      CALL FLWRTF('%%PING')
	      CALL FLWRTF('%%PING')
	      RET_CODE = FLWCLO(LITES2_LUN,IERR)
	      IF(RET_CODE.NE.LSL__NORMAL) THEN
	         CALL WRITEF('%S Closing LITES2 file %S',
     &		 ERROR,LITES2_FNAME(:LITES2_LEN))
		 CALL LSL_PUTMSG(RET_CODE)
	         IF(RET_CODE.EQ.LSL__SYSCLOSE) THEN
	            CALL LSL_ADDMSG(IERR)
	         ENDIF
	         GO_CMD = .FALSE.
	      ELSE
		 OPEN_LITES2 = .FALSE.
	      ENDIF
	   ENDIF
	   HAD_LITES2 = .FALSE.
	ENDIF
C
C closes output iff file
C
	CONTINUE
	IF (HAD_OUTPUT) THEN
	   IF(OPEN_OUTPUT) THEN
	      NUMERR = 0
	      CALL IFFSEL(IFFOUT_LUN)
	      OK = ERRCOP()		! call finishes off & closes output file
	   ENDIF	      
	   HAD_OUTPUT = .FALSE.
	ENDIF
C .............................................................
C
999	CONTINUE
C
	RETURN
	END
C
