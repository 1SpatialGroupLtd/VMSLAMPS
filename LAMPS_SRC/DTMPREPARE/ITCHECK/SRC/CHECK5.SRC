C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-06-01 16:46:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK5()
C
***	MODULE CHECK5
***	IDENT  01JN92
C
C	Copyright: Laser Scan Laboratories, Cambridge, England
C	Author   : D Catlow
C	Created  : 02OC84
C
C Modified from CHECK5 in module TCHECK			by ALB 2-MAR-1988
C Converted to function in ITCHECK
C
C	Subroutine for ITCHECK to check for:
C	1. Contours with internal loops
C	2. Start/end vectors that cross
C
	IMPLICIT NONE
C	
C parameters
C	
        INCLUDE 'LSL$CMNITCHECK:CONSTANTS.PAR'
C
C common block
C	
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNITCHECK:ATTRIB.CMN'
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:ERROR.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
C
C w/s
C
	LOGICAL		IN_SPOT		!TRUE if bit set for spot height
	LOGICAL		IN_RIDGE	!TRUE if bit set for ridgerline
	LOGICAL		IN_RIVER	!TRUE if bit set for river
	INTEGER*4	FC_PTR		!element in GRPFCT
	INTEGER*4	FC_OFFSET	!offset in GRPFCT element
C
	REAL		XMAX(3600)	!50 pt rect x maximum
	REAL		YMAX(3600)	!50 pt rect y maximum
	REAL		XMIN(3600)	!50 pt rect x minimum
	REAL		YMIN(3600)	!50 pt rect y minimum
	REAL		XY1(2)		!vector coords
	REAL		XY2(2)		!  "      "
	REAL		XY3(2)		!  "	  "
	REAL		XY4(2)		!  "	  "
	REAL		XYSECT(2)	!xy intersection point
	INTEGER*4	ISEQ
	INTEGER*4	NPT		!Total number of points
	INTEGER*4	NPTS		!Number of pts in ST entry
	INTEGER*4	I		!loop counter
	INTEGER*4	J		!loop counter
	INTEGER*4	N		!loop counter
	INTEGER*2	IELEN
	INTEGER*2	IECODE
	INTEGER*2	LUN		!IFF file LUN
	INTEGER		NUM_XY		!number of points in CB
	INTEGER		IFFIN_NUM	!IFF file number
	LOGICAL		CRT		!TRUE if terminal and is a CRT
	LOGICAL		OK		!return code
C
C Functions
C
	LOGICAL		OUTPUT_CRT	!TRUE if SYS$OUTPUT is CRT
	LOGICAL		LIB$EXTZV	!bit extraction function
	LOGICAL		IFFOPEN		!open an input IFF 
	LOGICAL		CROSS		!TRUE if input vectors cross
	LOGICAL		ERRCOP		!copy errorous FC to output IFF file
	LOGICAL		ERRPTS		!move near't pts to error to temp array
	LOGICAL		ERRTAB		!put error message into error text file

C
C****************************************************************************
C
	CHECK5 = .TRUE.			!assume success
	LUN = IFFIN_LUN
	CRT = OUTPUT_CRT()
C
C****************************************************************************
C
C	Get line coords.
C
	DO 600 I=1,NUM_FC
	IF(CRT) THEN
	   CALL PERCENT(' <PROCESSING CHECK 5> ',22,NUM_FC,I)	!write % done
	ENDIF
C
	IFFIN_NUM = IATTRIB_TABLE(I,14)
	IF(IFFIN_NUM.NE.LAST_IFFIN) THEN
	   IF(OPEN_IFFIN) THEN
	      CALL IFFCLO(LUN)
	      OPEN_IFFIN = .FALSE.
	   ENDIF
C
C re-open IFF file
C
	   OK = IFFOPEN(LUN,IFFIN_FNAME(IFFIN_NUM),
     &				IFFIN_FID(1,IFFIN_NUM),,1)
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(OK,
     &			IFFIN_FNAME(IFFIN_NUM)(1:IFFIN_LEN(IFFIN_NUM)))
	      CHECK5 = .FALSE.
	      GOTO 999
	   ENDIF
	   OPEN_IFFIN = .TRUE.
	   LAST_IFFIN = IFFIN_NUM
	ENDIF
C
	CALL IFFSEL(LUN)
	
	CALL IFFPKE(IECODE,IELEN,IATTRIB_TABLE(I,12))
C
	FC_PTR = IATTRIB_TABLE(I,1)/32 + 1		! get pointer
	FC_OFFSET = MOD(IATTRIB_TABLE(I,1),32)		! get offset
	IN_SPOT = LIB$EXTZV(FC_OFFSET,1,GRPFCT(FC_PTR,SPOT))
C
	IF(IN_SPOT) THEN			! FC is spot 
C
C Spot height check
C
	   CALL IFFNXC('CB',IELEN)
C
	   CALL CBINOUT(XY(1,1),.FALSE.,NUM_XY)
C
	   IF(NUM_XY.EQ.1) GOTO 600	!	spot height has one point
C
	   RDPOS=IATTRIB_TABLE(I,12)
	   ITEM1=IATTRIB_TABLE(I,2)
	   CODE1=IATTRIB_TABLE(I,1)
	   HEIGHT1=ATTRIB_TABLE(I,3)
	   XERR1=ATTRIB_TABLE(I,4)
	   YERR1=ATTRIB_TABLE(I,5)
	   FILE1=IATTRIB_TABLE(I,14)
	   NUMERR=17
	   IF(HAD_OUTPUT) THEN
	      FILE=FILE1
	      OK = ERRCOP()
	      IF(.NOT.OK) THEN
		 CHECK5 = .FALSE.
		 GOTO 999
	      ENDIF
	   ENDIF
	   OK = ERRTAB()
	   IF(.NOT.OK) THEN
	      CHECK5 = .FALSE.
	      GOTO 999
	   ENDIF
	   GOTO 600
	ENDIF
C
	CALL IFFPKE(IECODE,IELEN,IATTRIB_TABLE(I,12))
	NPT=0
	ISEQ = 0			! clear longword
	CALL EIHRI(ISEQ,1,1)
	CALL IFFNXC('CB',IELEN)
C
250	CONTINUE
C
	CALL CBINOUT(XY(1,NPT+1),.FALSE.,NUM_XY)
	NPT = NPT + NUM_XY
C
	CALL IFFNXT(IECODE,IELEN)	!another CB for this feature?
	IF(IECODE.EQ.'CB')GOTO 250	!get more coords.
C
C********************************************************************
C
C	Test first for crossing of end vectors
C
	IF(NPT.LE.3)GOTO 600 
	IF(XY(1,1).EQ.XY(1,NPT).AND.XY(2,1).EQ.XY(2,NPT))THEN
C	   CALL WRITEF('Exact loop closure - item %N',IATTRIB_TABLE(I,2))
	   GOTO 300
	ENDIF
C
	IF(CROSS(XY(1,1),XY(1,2),XY(1,NPT-1),XY(1,NPT),XYSECT)) THEN
	   NUMERR=12
	   ITEM1=ISEQ
	   HEIGHT1=ATTRIB_TABLE(I,3)
	   CODE1=IATTRIB_TABLE(I,1)
	   FILE1=IATTRIB_TABLE(I,14)
	   XERR1=XYSECT(1)
	   YERR1=XYSECT(2)
	   VECERR=1
	   VECERR1=1
	   IF(HAD_OUTPUT)THEN
	      IFFIN_NUM = IATTRIB_TABLE(I,14)
	      RDPOS=IATTRIB_TABLE(I,12) 		!position to NF
	      FILE=FILE1
	      OK = ERRCOP()
	      IF(.NOT.OK) THEN
		 CHECK5 = .FALSE.
		 GOTO 999
	      ENDIF
	   ENDIF
	   OK = ERRTAB()
	   IF(.NOT.OK) THEN
	      CHECK5 = .FALSE.
	      GOTO 999
	   ENDIF
	ENDIF
C
300	CONTINUE
C
	DO 470 N=4,NPT
C
	XY1(1)=XY(1,N-1)
	XY1(2)=XY(2,N-1)
	XY2(1)=XY(1,N)
	XY2(2)=XY(2,N)
C
	DO 460 J=N+2,NPT
C
	XY3(1)=XY(1,J-1)
	XY3(2)=XY(2,J-1)
	XY4(1)=XY(1,J)
	XY4(2)=XY(2,J)
C
	IF(XY3(1).EQ.XY2(1).AND.XY3(2).EQ.XY2(2))THEN
	   ITEM1=ISEQ
	   CODE1=IATTRIB_TABLE(I,1)
	   HEIGHT1=ATTRIB_TABLE(I,3)
	   FILE1=IATTRIB_TABLE(I,14)
	   NUMERR=18			!report duplicate points	  
	   VECERR1=J-1
	   XERR1=XY3(1)
	   YERR1=XY3(2)
	   OK = ERRTAB()
	   IF(.NOT.OK) THEN
	      CHECK5 = .FALSE.
	      GOTO 999
	   ENDIF
	   GOTO 460
	ENDIF
C
C***********************************************************************
C
C	Compare verts XY1 - XY2 and XY3 - XY4
C
	IF(CROSS(XY1,XY2,XY3,XY4,XYSECT))THEN
	   NUMERR=11
	   ITEM1=ISEQ
	   VECERR=N
	   VECERR1=N
	   CODE1=IATTRIB_TABLE(I,1)
	   HEIGHT1=ATTRIB_TABLE(I,3)
	   FILE1=IATTRIB_TABLE(I,14)
	   XERR1=XYSECT(1)
	   YERR1=XYSECT(2)	  
	   RDPOS=IATTRIB_TABLE(I,12)
	   IF(HAD_OUTPUT) THEN
	      FILE=FILE1
	      OK = ERRPTS()
	      IF(.NOT.OK) THEN
 		 CHECK5 = .FALSE.
	 	 GOTO 999
	      ENDIF
	      OK = ERRCOP()
	      IF(.NOT.OK) THEN
		 CHECK5 = .FALSE.
	 	 GOTO 999
	      ENDIF
	   ENDIF
	   OK = ERRTAB()
	   IF(.NOT.OK) THEN
	      CHECK5 = .FALSE.
	      GOTO 999
	   ENDIF
	END IF
C	Continue search.....
C
C**********************************************************************	
C
460	CONTINUE
C
470	CONTINUE
C
600	CONTINUE
C
C**********************************************************************
C
999	RETURN
C
	END
