C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-07 19:38:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SHOW_CMD()
C
***	MODULE	SHOW_CMD
***	IDENT	08DE92
C
C	Copyright (C), Laser-Scan Ltd., Cambridge, England
C
CMOD	Modified from SHOW_CMD in DTITILE		ALB	23-Feb-1988
C
CMOD    Reference CORNERS(2,4) instead of CORNERS(4,4)	RJH	 8-Dec-1992
CMOD	Use ITCHECK.LIS insted of ITCHECK.LST		 JB	 7-Jan-1993
C
C 	Function to show command status.
C 	Namely, checks, files, group, intervals, selection, tolerance,
C 	window,zlimits
C
C 	Function returns .TRUE. if all is well, .FALSE. if an error
C
	IMPLICIT NONE
C
C Parameters :
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common blocks :
	INCLUDE 'LSL$CMNITCHECK:CONTROL.CMN'
	INCLUDE 'LSL$CMNITCHECK:GROUP.CMN'
	INCLUDE 'LSL$CMNITCHECK:SHEET.CMN'
 	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'	
C
C W/s
	INTEGER		CMD     	! decoded command number
	INTEGER		NCOL    	! number of letters in group name
	INTEGER		RET_CODE	! for use with RDCHS
	INTEGER		I		! loop counter
C
C Function:
	INTEGER		RDCOMM
C
C Command table:
	EXTERNAL	SHOW_CMD_TABLE
	INTEGER		SHOW_CMD_TABLE
C
C ......................................................................
C
	SHOW_CMD=.TRUE.			! assume success
C
	CMD=RDCOMM(SHOW_CMD_TABLE)	! get command
	CMD=CMD+1
	GOTO (
     &		100,			! error/nothing	- cmd=1
     &		150,			! border	- cmd=2
     &		200,			! checks	- cmd=3
     &		300,			! files		- cmd=4
     &		400,			! groups	- cmd=5
     &		500,			! intervals	- cmd=6
     &		600,			! selections	- cmd=7
     &		700,			! tolerance	- cmd=8
     &		800,			! window	- cmd=9
     &		900			! zlimits	- cmd=10
     &			), CMD
C
C Command number out of range
	CALL WRITEF('%S Command not yet implemented',ERROR)
	SHOW_CMD=.FALSE.
	GOTO 999
C
C ......................................................................
C Error or nothing 
C
100	CONTINUE
	CALL WRITEF('%S Specifying command SHOW',ERROR)
	CALL WRITEF('Available SHOW command qualifiers are:')
	CALL WRITEF
     &  ('      BORDER      CHECKS      FILES       GROUPS'//
     &   '      INTERVALS')
	CALL WRITEF
     &  ('      SELECTIONS  TOLERANCES  WINDOWS     ZLIMITS')
	GOTO 1000
C
C show border
C
150	CONTINUE
	CALL WRITEF('BORDER:')
	IF(HAD_BORDER.AND.HAD_4_POINTS) THEN
	   CALL WRITEF('   Border setting : SW X = %F0 ',
     &	   BOUND_FEAT(1,1))
	   CALL WRITEF('                    SW Y = %F0 ',
     &	   BOUND_FEAT(2,1))
	   CALL WRITEF('                    NW X = %F0 ',
     &	   BOUND_FEAT(1,2))
	   CALL WRITEF('                    NW Y = %F0 ',
     &	   BOUND_FEAT(2,2))
	   CALL WRITEF('                    NE X = %F0 ',
     &	   BOUND_FEAT(1,3))
	   CALL WRITEF('                    NE Y = %F0 ',
     &	   BOUND_FEAT(2,3))
	   CALL WRITEF('                    SE X = %F0 ',
     &	   BOUND_FEAT(1,4))
	   CALL WRITEF('                    SE Y = %F0 ',
     &	   BOUND_FEAT(2,4))
C
	ELSEIF (HAD_BORDER .AND. .NOT.HAD_4_POINTS) THEN
	   CALL WRITEF('   Border setting : SW X = %F0 ',CORNERS(1,2))
	   CALL WRITEF('                    SW Y = %F0 ',CORNERS(2,2))
	   CALL WRITEF('                    NE X = %F0 ',CORNERS(1,4))
	   CALL WRITEF('                    NE Y = %F0 ',CORNERS(2,4))
	ELSE
	   CALL WRITEF('   Border not set MIN MAX CP from IFF '//
     &		'files will be used')
	ENDIF
	GOTO 1000
C
C ......................................................................
C Show checks
C
200	CONTINUE
	CALL WRITEF ('CHECKS:')
	IF(HAD_CHECK) THEN
	   CALL EXPAND('   Current setting are ')
	   DO 210 I = 1,NUM_CHECK
	      IF(CHECK(I)) THEN
	         CALL APPEND(' %I0',I)
	      ENDIF
210	   CONTINUE
	   CALL TTWLIN
	ELSE
	   CALL WRITEF ('   Checks have not been specified ')
	ENDIF
	GOTO 1000
C
C show files
C
300	CONTINUE
	CALL WRITEF('FILES:')
C
C input IFF files
C
	IF (HAD_IFFIN) THEN
	   DO 310 I = 1,NUM_IFFIN
	      CALL WRITEF('   IFF file %S selected for input',
     &			IFFIN_FNAME(I)(:IFFIN_LEN(I)))
310	   CONTINUE
	ELSE
	   CALL WRITEF('   IFF input files not yet specified')
	ENDIF
C
	IF (HAD_LIST) THEN
	   CALL WRITEF('   LIST file %S selected for tabulated errors',
     &			LIST_FNAME(:LIST_LEN))
	ELSE
	   CALL WRITEF('   LIST file not specified (default '//
     &		'to ITCHECK.LIS)')
	ENDIF
C
	IF (HAD_LITES2) THEN
	   CALL WRITEF('   LITES2 file %S selected ',
     &			LITES2_FNAME(:LITES2_LEN))
	ELSE
	   CALL WRITEF('   LITES2 file not yet specified')
	ENDIF
C
	IF (HAD_OUTPUT) THEN
	   CALL WRITEF('   OUTPUT IFF file %S for errors selected ',
     &			IFFOUT_FNAME(:IFFOUT_LEN))
	ELSE
	   CALL WRITEF('   OUTPUT file not yet specified')
	ENDIF
C
	IF (HAD_LOOKUP) THEN
	   CALL WRITEF('   LOOKUP file %S loaded the last group '//
     &		'definition table',LOOKUP_FNAME(:LOOKUP_LEN))
	ELSE
	   CALL WRITEF('   LOOKUP file not yet specified')
	ENDIF
	GOTO 1000
C
C show groups
C
400	CONTINUE
	CALL WRITEF('GROUPS:')
	IF(GRPCNT.GT.0) THEN
	   DO 410 I = 1,GRPMAX
	      IF(GRPDEF(I)) THEN
	         NCOL = INDEX(GRPNAM(I),' ') - 1
		 CALL WRITEF('   %S have been defined',GRPNAM(I)(:NCOL))
		 CALL SHSELE(4,I)		! show features for group
	      ENDIF
410	   CONTINUE
	ELSE
	   CALL WRITEF ('   No group definition tables loaded')
	ENDIF
	GOTO 1000
C
C show intervals
C
500	CONTINUE
	CALL WRITEF('INTERVALS:')
	IF(HAD_CONTOUR) THEN
	   CALL WRITEF('   Contour interval is %F0.2 ',CONTOUR_INT)
	ELSE
	   CALL WRITEF('   No contour interval specified')
	ENDIF
C
	IF(HAD_INDEX) THEN
	   CALL WRITEF('   Index interval is %F0.2 ',INDEX_INT)
	ELSE
	   CALL WRITEF('   No index interval specified')
	ENDIF
C
	IF(HAD_SUPPLE) THEN
	   CALL WRITEF('   Supplementary interval is %F0.2 ',SUPPLE_INT)
	ELSE
	   CALL WRITEF('   No supplementary interval specified')
	ENDIF
	IF(HAD_PROFILE) THEN
	   CALL WRITEF('   Profile interval is %I0 ',PROFILE_INT)
	ELSE
	   CALL WRITEF('   No profile interval specified')
	ENDIF
	GOTO 1000
C
C show selection
C
600	CONTINUE
	CALL WRITEF('SELECTIONS:')
	CALL SHSELE(1)
	IF(HAD_LOOKUP) THEN	
	   CALL SHSELE(2)
	ELSE
	   CALL WRITEF('   LOOKUP file not yet specified')
	ENDIF
	CALL SHSELE(3)
	GOTO 1000
C
C show tolerance
C
700	CONTINUE
	CALL WRITEF('TOLERANCES:')
	IF(HAD_TOL_BOR) THEN
	   CALL WRITEF('   Border tolerance value is %F0.3 ',
     &		BORDER_TOL)
	ELSE
	   CALL WRITEF('   No border tolerance specified')
	ENDIF
	IF(HAD_TOL_MIN) THEN
	   CALL WRITEF('   Minimum tolerance value is %F0.2 ',
     &		MIN_TOL)
	ELSE
	   CALL WRITEF('   No minimum tolerance specified')
	ENDIF
	IF(HAD_TOL_MAX) THEN
	   CALL WRITEF('   Maximum tolerance value is %F0.2 ',
     &		MAX_TOL)
	ELSE
	   CALL WRITEF('   No maximum tolerance specified')
	ENDIF
	GOTO 1000
C
C show window
C
800	CONTINUE
	CALL WRITEF('WINDOW:')
	IF(HAD_WINDOW) THEN
	   CALL WRITEF('   Window setting : SW X = %F0 ',WINDOW(1,1))
	   CALL WRITEF('                    SW Y = %F0 ',WINDOW(2,1))
	   CALL WRITEF('                    NE X = %F0 ',WINDOW(1,2))
	   CALL WRITEF('                    NE Y = %F0 ',WINDOW(2,2))
	ELSE
	   CALL WRITEF('   Window not set MIN MAX CP from IFF '//
     &		'files will be used')
	ENDIF
	GOTO 1000
C
C show zlimits
C
900	CONTINUE
	CALL WRITEF('ZLIMITS:')
	IF(HAD_ZLIMITS) THEN
	   CALL WRITEF('   Lower contour limit is %F0.3 ',
     &		MIN_CONTOUR)
	   CALL WRITEF('   Upper contour limit is %F0.3 ',
     &		MAX_CONTOUR)
	ELSE
	   CALL WRITEF('   No lower and upper contour limits '//
     &		'specified')
	ENDIF
	GOTO 1000
C
C .....................................................................
C Exit
C
999	CONTINUE
	CALL WRITEF
1000	CONTINUE
	NOMESS=.FALSE.			! restore CMDLIB error reporting
C
	RETURN
	END
C
