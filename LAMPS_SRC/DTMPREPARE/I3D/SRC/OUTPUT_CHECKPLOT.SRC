C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-30 13:39:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OUTPUT_CHECKPLOT(
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	OUTPUT_CHECKPLOT
***	IDENT	30MY90
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created 						ALB 5-May-1988
C
CMOD 889 Now passes pen control to CBINOUT		TJH 30-May-1990
CMOD	 Changed the order in which I3D does things in so that the ONEARM
C	 stage is no longer required			ACM 17-Jan-1989
C
C Description
C	Creates symbols which will be output as line features in a
C	checkplot IFF file.  These symbols will be output to overlay the
C	river/ridgeline at the centre of the link. There will be three
C	symbol features to represent whether the flow is:- 
C
C	a)	upstream along link	-	arrow head
C	b)	downstream along link	-	reverse arrow head
C	c)	undirected		-	square
C
	IMPLICIT NONE
C	
C Parameters
        INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
C
C Common blocks
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C Structures
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
C VM array declarations
	INCLUDE	'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		STA_PNT,FIN_PNT	! end pnt indices
	INTEGER		NOD1		! 1st node index from link array
	INTEGER		NOD2		! 2nd node index from link array
	INTEGER		IPNT1,IPNT2	! end pnt indices
	INTEGER		IPNT,ILNK	! PNT/LNK index
	INTEGER		SYM_INDEX	! index in symbols array
	INTEGER		NO_POINTER 	! start of layer in output IFF
	INTEGER		LAST_ROW	! last row
	INTEGER		I,J		! loop counters
C
	INTEGER*2	IELEN
	INTEGER*2	IECODE	
	INTEGER*2	EXT_FSN		! external feature number
	INTEGER*2	INT_FSN		! internal feature number
	INTEGER*2	ISTAT(4)	! for use with IFFFS call 
	DATA	ISTAT/4*0/
C
	REAL		BUF_R(2,IFF_MAXCBROW) ! x y z values from CB
	REAL		ANGLE		! angle of central vector
	REAL		SYMBOLS(2,20)	! unrotate symbol table
	REAL		OUT_SYMBOL(2,10)! rotated symbol for output
	REAL		LEN,LEN_LNK
	REAL		F
	REAL		X_POS		! x position of link centre
	REAL		Y_POS		! y position of link centre
	REAL		DX,DY		! vec coords
C
	LOGICAL		OK		! return code
	LOGICAL		PENDOWN		! CB pen control
C
C Functions
	LOGICAL		IFFOPEN
	LOGICAL		IFFCREATE
C
C **********************************************************************
C
	OUTPUT_CHECKPLOT = .TRUE.		! assume success
C
C ......................................................................
C
	PENDOWN = .FALSE.
C
C Symbol array initialisation
C
	DO 1 I = 1,20
	   SYMBOLS(1,I) = UNDEFINE
	   SYMBOLS(2,I) = UNDEFINE
1	CONTINUE
C
	DX = RANGE(2)-RANGE(1)
	DY = RANGE(4)-RANGE(3)
C	F = MAX(MAX(DX,DY),200.0)*2/1000
	F = 10*SYMBOL_SCALE_FACTOR
C
	SYMBOLS(1,1) =  F			! square
	SYMBOLS(2,1) =  F
	SYMBOLS(1,2) = -F
	SYMBOLS(2,2) =  F
	SYMBOLS(1,3) = -F
	SYMBOLS(2,3) = -F
	SYMBOLS(1,4) =  F
	SYMBOLS(2,4) = -F
	SYMBOLS(1,5) =  F
	SYMBOLS(2,5) =  F
C
	SYMBOLS(1,7) = -F			! arrow head
	SYMBOLS(2,7) =  F
	SYMBOLS(1,8) =  0
	SYMBOLS(2,8) =  0
	SYMBOLS(1,9) = -F
	SYMBOLS(2,9) = -F
C
	SYMBOLS(1,11) =  F			! reverse arrow head
	SYMBOLS(2,11) =  F
	SYMBOLS(1,12) =  0
	SYMBOLS(2,12) =  0
	SYMBOLS(1,13) =  F
	SYMBOLS(2,13) = -F
C
C ......................................................................
C
C Create a checkplot IFF file
C
C First copy the entries up to 'NO' from first river/ridgeline file to
C output checkplot 
C
	IF (.NOT.OPEN_FILEIN) THEN
	   OK = IFFOPEN(FILEIN_LUN,FILEIN_FNAME(1),FILEIN_FID(1,1),,1)
	   IF (.NOT.OK) THEN		
	      CALL LSL_PUTMSG(OK)
	      OUTPUT_CHECKPLOT = .FALSE.
	      GOTO 999
	   ENDIF
	   OPEN_FILEIN = .TRUE.
	ENDIF
C
C Create a new output IFF file
C
	IF (.NOT.OPEN_CHECKPLOT) THEN
	   OK = IFFCREATE(CHECKPLOT_LUN,CHECKPLOT_FNAME,,,,1)
	   IF (.NOT.OK) THEN		
	      CALL LSL_PUTMSG(OK)
	      OUTPUT_CHECKPLOT = .FALSE.
	      GOTO 90
	   ENDIF
	   OPEN_CHECKPLOT = .TRUE.
	ENDIF
C
C Select file and rewind
C
	CALL IFFSEL(FILEIN_LUN)			! select input IFF file	
	CALL IFFRWD				! rewind input file
C
C .......................... get next entry in IFF .....................
C
5	CALL IFFSEL(FILEIN_LUN)			! select input IFF file	
	CALL IFFNXT(IECODE,IELEN)
C
	IF (IELEN.EQ.-1) GOTO 80		! end of file
C
	IF (IECODE.EQ.'SH') GOTO 5		! remove 'SH'
	IF (IECODE.EQ.'JB') GOTO 5		! remove 'JB'
	IF (IECODE.EQ.'JP') GOTO 5		! remove 'JP'
	IF (IECODE.EQ.'NO') GOTO 10		! layer entry found
C
	CALL EIHCPY(CHECKPLOT_LUN)		! copy input to output
	GOTO 5				
C ----------------------------------------------------------------------
C NO found
C
C Layer to hold the checkplot symbol features	
C
C Save pointer to NO so we can fill out the remainder of the entry later
C
10	CALL IFFSEL(CHECKPLOT_LUN)		! select checkplot IFF	
	NO_POINTER = LPOSE		
	CALL IFFNO(LAYER_NUM,0,0)
	INT_FSN = 0
	EXT_FSN = 0
C
	DO 70	ILNK = 1,NUM_LNKS
	   IF (LNK_I(LNK_GRP,ILNK).NE.RIVER) GOTO 70	! skip if ridge
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 70	! skip if deleted
C
	   IF (LNK_I(LNK_FLO,ILNK).EQ.UNDIRECTED) THEN
	      SYM_INDEX = 1			! square
	   ELSEIF (LNK_I(LNK_FLO,ILNK).EQ.DOWNHILL) THEN
	      SYM_INDEX = 7			! arrow
	   ELSE
	      SYM_INDEX = 11			! reverse arrow
	   ENDIF	
C
C Find the link centre and bearing of vector at that location
C
	   STA_PNT = LNK_I(LNK_STA,ILNK)
	   FIN_PNT = LNK_I(LNK_FIN,ILNK)
	   IPNT = STA_PNT
	   LEN_LNK = 0
20	   IPNT = PNT_I(PNT_NXT,IPNT)
	   LEN_LNK = LEN_LNK+PNT_R(PNT_LEN,IPNT)
	   IF (IPNT.NE.FIN_PNT) GOTO 20
C
	   LEN = LEN_LNK/2
C
	   IPNT = STA_PNT
	   LEN_LNK = 0
30	   IPNT = PNT_I(PNT_NXT,IPNT)
	   LEN_LNK = LEN_LNK+PNT_R(PNT_LEN,IPNT)
	   IF (LEN_LNK.GT.LEN) GOTO 40
	   IF (IPNT.NE.FIN_PNT) GOTO 30
C
40	   IPNT1 = PNT_I(PNT_PRV,IPNT)
	   IPNT2 = IPNT
	   	
	   DX = PNT_R(PNT_XXX,IPNT2) - PNT_R(PNT_XXX,IPNT1)
	   DY = PNT_R(PNT_YYY,IPNT2) - PNT_R(PNT_YYY,IPNT1)
	   F = (LEN_LNK-LEN)/PNT_R(PNT_LEN,IPNT)
	   X_POS = PNT_R(PNT_XXX,IPNT2) - DX*F
	   Y_POS = PNT_R(PNT_YYY,IPNT2) - DY*F
	   ANGLE = ATAN2(DY,DX)				! get bearing
	   CALL ROTATE_SYMBOL(OUT_SYMBOL,ANGLE,SYMBOLS(1,SYM_INDEX))
C
	   DO 50 J = 1,10
	      IF (OUT_SYMBOL(1,J).LE.UNDEFINE) GOTO 60
	      LAST_ROW = J
C
C offset symbol to link centre and put into output buffer for CB's
C
	      BUF_R(1,J) = OUT_SYMBOL(1,J) + X_POS
	      BUF_R(2,J) = OUT_SYMBOL(2,J) + Y_POS
50	   CONTINUE
60	   CONTINUE
C
	   INT_FSN = INT_FSN + 1
	   EXT_FSN = EXT_FSN + 1
	   CALL IFFNF(EXT_FSN,INT_FSN)			! NF entry
	   IF (LNK_I(LNK_FLO,ILNK).EQ.UNDIRECTED) THEN
	      ISTAT(1) = BOX_FC
	   ELSE
	      ISTAT(1) = ARROW_FC
	   ENDIF
	   CALL IFFFS(ISTAT)				! FS entry
	   CALL CBINOUT(BUF_R,.TRUE.,2,LAST_ROW,PENDOWN)! CB entry
	   CALL IFFEF					! EF entry
C
70	CONTINUE	
C
	CALL IFFUNO(NO_POINTER)
	CALL IFFEO
	CALL IFFEM
	CALL IFFEJ
C
80	CALL IFFRLA(.FALSE.)			! switch off look ahead
	CALL IFFCLO(CHECKPLOT_LUN)		! close checkplot IFF
	OPEN_CHECKPLOT = .FALSE.
C
90	CALL IFFCLO(FILEIN_LUN)			! close input IFF
	OPEN_FILEIN = .FALSE.
C
999	RETURN
	END
