C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-07-16 11:31:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION INTSECT(	NUM_TERRAIN_VECS,
     &					LNK_IBUFF,
     &					LNK_RBUFF,
     &					PNT_RBUFF,
     &					LNK_I,
     &					LNK_R,
     &					MNX_I,
     &					PNT_I,
     &					PNT_R,
     &					MAX_LNKS,
     &					MAX_PNTS)
C
***	MODULE	INTSECT
***	IDENT	16JL92
C	
C Copyright Laser-Scan, Cambridge, England.
C 	
C Created 						ALB 11-Apr-1988
C
CMOD	Changed the order in which I3D does things so
C	that the ONEARM stage is no longer required	ACM 21-Dec-1988
C
CMOD1121Remove divide by zero in do 400 loop	 	 JB 15-Jun-1992
C
C The purpose of this routine is to test whether the terrain 
C rectangle overlaps or is in close proximity (ie with touch tolerance)
C to any river/ridgeline feature.  If so the function proceeds to
C calculate whether the features do in fact touch or cross.
C Intersection point x,y,z coords are stored in a new PNT point
C which is inserted into the linked list of points for this feature.
C
	IMPLICIT NONE
C	
C Parameters
        INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
C
C common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C structure (included here to get IFF_MAXCBROW parameter)
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
	INTEGER		MAXCBROW
	PARAMETER	(MAXCBROW = IFF_MAXCBROW + 1)	
C
C arguments
	INTEGER		MAX_LNKS		! max number of links
	INTEGER		MAX_PNTS		! max number of points 
C dynamically allocated arrays
	INTEGER		LNK_I(LNK_ATTRIBS,MAX_LNKS)	
	REAL		LNK_R(LNK_ATTRIBS,MAX_LNKS)
	INTEGER		MNX_I(MNX_ATTRIBS,MAX_LNKS)	
	INTEGER		PNT_I(PNT_ATTRIBS,MAX_PNTS)
	REAL		PNT_R(PNT_ATTRIBS,MAX_PNTS)
C other data
	INTEGER		NUM_TERRAIN_VECS
	INTEGER		LNK_IBUFF(LNK_ATTRIBS)
	REAL		LNK_RBUFF(LNK_ATTRIBS)
	REAL		PNT_RBUFF(PNT_ATTRIBS,MAXCBROW)
C
C Workspace
	INTEGER		PNT_STA,PNT_FIN	! PNT indices
	INTEGER		IMNX		! MNX index
	INTEGER		ILNK		! LNK index
	INTEGER		I,J,K		! loop counters
	INTEGER		INT_INDEX	! index of heighted pt
C
	REAL		XY1(2)		! start of terrain vector 
	REAL		XY2(2)		! end of terrain vector 
	REAL		XY3(2)		! start of river/ridgeline vector 
	REAL		XY4(2)		! end of river/ridgeline vector 
	REAL		XYSECT(2)	! xy intersection 
	REAL		XLEN		! x comp of vector length
	REAL		YLEN		! y comp of vector length
	REAL		XDIFF		! x dist from vertex to int pt
	REAL		YDIFF		! y dist from vertex to int pt
	REAL		VEC_LENGTH	! length of vector
	REAL		DIST		! dist from vertex to int pt
C
	LOGICAL		VECS_CROSS	!TRUE if vectors cross
C
C functions
	LOGICAL		CROSS,INSERT_PT
C
C **********************************************************************
C
	INTSECT = .TRUE.			! assume success
C
C ----------------------------------------------------------------------
C Outer loop for checking terrain box against river/ridgeline boxes
C
	DO 600 IMNX = 1,NUM_LNKS		! for each riv/ridge do
C
	   ILNK = MNX_I(MNX_LNK,IMNX)	! get next LNK index
C ......................................................................
C If max x of terrain box less than min x of a river/ridgeline box then
C finish intersection processing for this terrain feature, because
C there can be no more intersection for this terrain feature as
C river/ridgeline features are sorted on x min 
C
	   IF(LNK_RBUFF(LNK_MXX).LT.(LNK_R(LNK_MNX,ILNK)-TOUCH_TOL))
     &	      GOTO 999 
C ......................................................................
C If max y of terrain box less than min y of a river/ridgeline box then
C bypass processing for this river/ridgeline feature.
C 
	   IF(LNK_RBUFF(LNK_MXY).LT.(LNK_R(LNK_MNY,ILNK)-TOUCH_TOL))
     &	      GOTO 600
C ......................................................................
C If min x of terrain box greater than max x of a river/ridgeline box then
C bypass processing for this river/ridgeline feature.
C 
	   IF(LNK_RBUFF(LNK_MNX).GT.(LNK_R(LNK_MXX,ILNK)+TOUCH_TOL))
     &	      GOTO 600
C ......................................................................
C If min y of terrain box greater than max y of a river/ridgeline box then
C bypass processing for this river/ridgeline feature.
C 
	   IF(LNK_RBUFF(LNK_MNY).GT.(LNK_R(LNK_MXY,ILNK)+TOUCH_TOL))
     &	      GOTO 600
C ......................................................................
C get start and (fin-1) PNT indices for river or ridge feature
C	   
	   PNT_STA = LNK_I(LNK_STA,ILNK)
	   PNT_FIN = LNK_I(LNK_FIN,ILNK)-1
C
C ----------------------------------------------------------------------
C loop for checking terrain vectors against river/ridgeline vectors
C
	   DO 400 J = PNT_STA,PNT_FIN	! for each river/ridgeline vector do
	      XY3(1) = PNT_R(PNT_XXX,J)
	      XY3(2) = PNT_R(PNT_YYY,J)
	      XY4(1) = PNT_R(PNT_XXX,J+1)
	      XY4(2) = PNT_R(PNT_YYY,J+1)
C
	      IF (J.EQ.PNT_STA) THEN	! extend start vec by touch_tol 
		 XLEN = XY3(1) - XY4(1)
		 YLEN = XY3(2) - XY4(2)
		 VEC_LENGTH = SQRT(XLEN*XLEN + YLEN*YLEN)
		 IF (VEC_LENGTH .LE. COORD_TOL) GOTO 400	! bug fix
C
		 XY3(1) = XY3(1) + (XLEN/VEC_LENGTH) * TOUCH_TOL 
		 XY3(2) = XY3(2) + (YLEN/VEC_LENGTH) * TOUCH_TOL
	      ENDIF
C
	      IF (J.EQ.PNT_FIN) THEN	! extend end vector by touch_tol
		 XLEN = XY4(1) - XY3(1)
		 YLEN = XY4(2) - XY3(2)
		 VEC_LENGTH = SQRT(XLEN*XLEN + YLEN*YLEN)
		 IF (VEC_LENGTH .LE. COORD_TOL) GOTO 400 	! bug fix
C
		 XY4(1) = XY4(1) + (XLEN/VEC_LENGTH) * TOUCH_TOL
		 XY4(2) = XY4(2) + (YLEN/VEC_LENGTH) * TOUCH_TOL
	      ENDIF
C
C ----------------------------------------------------------------------
C loop for checking terrain vectors against river/ridgeline vector
C
	      DO 300 K = 1,NUM_TERRAIN_VECS-1	! for each terr vec do
		 XY1(1) = PNT_RBUFF(PNT_XXX,K)
		 XY1(2) = PNT_RBUFF(PNT_YYY,K)
		 XY2(1) = PNT_RBUFF(PNT_XXX,K+1)
		 XY2(2) = PNT_RBUFF(PNT_YYY,K+1)
		 VECS_CROSS = CROSS(XY1,XY2,XY3,XY4,XYSECT)
C
C ----------------------------------------------------------------------
C load intersection array if VECS_CROSS is TRUE
C
		 IF (VECS_CROSS) THEN
C
C insert intersection point into PNT linked list, creating a new
C point only when int pos is not within TOUCH_TOL of an existing point 
C
	            INTSECT = INSERT_PT(
     &				J,
     &				PNT_R,PNT_I,
     &				XYSECT(1),XYSECT(2),	! int x,y coords
     &				LNK_RBUFF(LNK_ZZZ),	! int z coord
     &				MAX_PNTS)
	            IF (.NOT.INTSECT) GOTO 999
		 ENDIF
300	      CONTINUE		! end of loop for each contour vector
400	   CONTINUE		! end of loop for each river/ridgeline vec
600	CONTINUE		! end of loop for each river/ridgeline
C
999	RETURN
	END
C
