C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-15 20:38:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FIND_HEIGHTED_RIVER_POINT(
     &	FLOW_CODE,ROOT_NODE,
     &	PATH_DIST,HEIGHT_FOUND,N_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	FIND_HEIGHTED_RIVER_POINT
***	IDENT	14FE89
C
C Copyright Laser Scan Laboratories, Cambridge, England.
C 
C Created						ACM 08-Jan-1989
C
C Description
C	Finds the lowest/highest heighted point from node ROOT_NODE
C	amongst all possible unheighted paths up/down-stream (depending
C	on FLOW_CODE value). 
C
C	Stores path leading to furthest point as a list of the indices
C	of the links along this path. 
C
C Algorithm
C	Use a depth-first scan of the river network, starting from node
C	ROOT_NODE. Pop stack whenever a heighted point is found, or no
C	link can be found having the flow direction given by FLOW_CODE.
C	Path to lowest/highest heighted point found so far is stored.
C
C ----------------------------------------------------------------------
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Data in
	INTEGER		FLOW_CODE	! uphill or downhill?
	INTEGER		ROOT_NODE	! node from which path to start
C
C Data out
	REAL		PATH_DIST	! dist to heighted point found
	REAL		HEIGHT_FOUND	! height found
	INTEGER		N_LINKS		! num links in path found
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		INOD,IARM,JARM,KARM,ILNK,JLNK,IPNT! array indics
	INTEGER		LEVEL,ILEV	! NOD stack level
	INTEGER		CUR_NOD,NXT_NOD	! node indices
	INTEGER		STA_PNT,FIN_PNT	! link PNT start/fin indices
	INTEGER		FLOW		! flow code
	REAL		MINMAX_HT	! min/max ht found
	REAL		DIST		! dist along link to heighted pt
	REAL		HT
	LOGICAL		CAN_PUSH	! can stack be pushed?
	LOGICAL		HT_DEFINED	! heighted point (or node) found
	LOGICAL		BEST_PATH	! best path so far?
C
C ----------------------------------------------------------------------
C
	FIND_HEIGHTED_RIVER_POINT = .FALSE.
	DIST = 0
	IF (FLOW_CODE.EQ.UPHILL) THEN
	   MINMAX_HT = INFINITY			! want min uphill ht
	ELSE
	   MINMAX_HT = -INFINITY		! want max downhill ht
	ENDIF
	N_LINKS = 0
C
C Find next unvisited RIVER node
C
	LEVEL = 0				! zero stack level
	NXT_NOD = ROOT_NODE
	GOTO 155				! push node onto stack
C
C Find next path up/downhill from this node
C
30	CUR_NOD = STN_I(STN_NOD,LEVEL)		! node visited prev
C	MINMAX_HT = STN_R(STN_ZZZ,LEVEL)	! min/max ht to cur nod
	IARM = STN_I(STN_ARM,LEVEL)		! next arm to try
	CAN_PUSH = .FALSE.
	GOTO 50
C
40	IARM = ARM_I(ARM_NXT,IARM)		! next arm from same nod
50	IF (IARM.EQ.NIL) GOTO 120	! no more arms - pop node stack
	ILNK = ARM_I(ARM_LNK,IARM)
	FLOW = LNK_I(LNK_FLO,ILNK)
C
C Any undirected link found will not be traversed, but neither will it
C render the ROOT_NODE heighting attempt invalid. Heights will be set
C using only those links directed so far. When EXPERIMENTING, heights
C set by HEIGHT_RIVER_NODES are unset by CHECK_FLOW after checking for
C flow legality in any case.
C
	IF (FLOW.EQ.UNDIRECTED) GOTO 40		! try next arm
C
	IF (LNK_I(LNK_ND1,ILNK).EQ.CUR_NOD) THEN
	   IF (FLOW.NE.FLOW_CODE) GOTO 40	! try next arm
	   NXT_NOD = LNK_I(LNK_ND2,ILNK)
	ELSE
	   IF (FLOW.EQ.FLOW_CODE) GOTO 40	! try next arm
	   NXT_NOD = LNK_I(LNK_ND1,ILNK)
	ENDIF
C
C If node visted before and still unheighted, then skip it
C
	IF (NOD_L(NOD_VIS,NXT_NOD).AND.
     &	    NOD_I(NOD_ZZZ,NXT_NOD).EQ.IFF_ABSENT) GOTO 40
C
C Check for height defined along this link
C
	STA_PNT = LNK_I(LNK_STA,ILNK)
	FIN_PNT = LNK_I(LNK_FIN,ILNK)
	HT_DEFINED = .FALSE.
	DIST = 0
	IF (LNK_I(LNK_ND1,ILNK).EQ.CUR_NOD) THEN
	   IPNT = STA_PNT
60	   DIST = DIST+PNT_R(PNT_LEN,IPNT)
	   IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 70
	   HT_DEFINED = .TRUE.
	   HT = PNT_R(PNT_ZZZ,IPNT)
	   GOTO 100
70	   IF (IPNT.NE.FIN_PNT) THEN
	      IPNT = PNT_I(PNT_NXT,IPNT)
	      GOTO 60
	   ENDIF
	   IF (NOD_I(NOD_ZZZ,LNK_I(LNK_ND2,ILNK)).NE.IFF_ABSENT) THEN
	      HT_DEFINED = .TRUE.
	      HT = NOD_R(NOD_ZZZ,LNK_I(LNK_ND2,ILNK))
	      GOTO 100
	   ENDIF
	ELSE
	   IPNT = FIN_PNT
80	   IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 90
	   HT_DEFINED = .TRUE.
	   HT = PNT_R(PNT_ZZZ,IPNT)
	   GOTO 100
90	   DIST = DIST+PNT_R(PNT_LEN,IPNT)
	   IF (IPNT.NE.STA_PNT) THEN
	      IPNT = PNT_I(PNT_PRV,IPNT)
	      GOTO 80
	   ENDIF
	   IF (NOD_I(NOD_ZZZ,LNK_I(LNK_ND1,ILNK)).NE.IFF_ABSENT) THEN
	      HT_DEFINED = .TRUE.
	      HT = NOD_R(NOD_ZZZ,LNK_I(LNK_ND1,ILNK))
	      GOTO 100
	   ENDIF
	ENDIF
C
C If the dist to the point found is the longest so far, then store the
C path leading to this point as a list of the indices of the links along
C this path. 
C
100	IF (HT_DEFINED) THEN
	   IF (FLOW_CODE.EQ.UPHILL) THEN
	      BEST_PATH = HT.LT.MINMAX_HT
	   ELSE
	      BEST_PATH = HT.GT.MINMAX_HT
	   ENDIF
	   IF (BEST_PATH) THEN
	      PATH_DIST = DIST
	      HEIGHT_FOUND = HT
	      MINMAX_HT = HT
	      DO 110 ILEV = 1,LEVEL-1
C Node at level ILEV
	         INOD = STN_I(STN_NOD,ILEV)
C First arm at this node
	         JARM = NOD_I(NOD_ARM,INOD)
C Second arm at this node, or NIL
	         KARM = ARM_I(ARM_NXT,JARM)
C105	         IF (KARM.NE.NIL) THEN
105	            IF (KARM.NE.STN_I(STN_ARM,ILEV))
     &	            THEN
	               IF (KARM.EQ.NIL) THEN
	                  CALL LSL_PUTMSG(I3D__INTRNLERR,1,
     &	                     'FIND_HEIGHTED_RIVER_POINT')	
                          GOTO 999
	               ENDIF
	               JARM = KARM
	               KARM = ARM_I(ARM_NXT,JARM)
	               GOTO 105
	            ENDIF
C	         ENDIF
	         JLNK = ARM_I(ARM_LNK,JARM)
	         IF (FLOW_CODE.EQ.UPHILL) THEN
	            PUP_I(PUP_LNK,ILEV) = JLNK
	         ELSE
	            PDN_I(PDN_LNK,ILEV) = JLNK
	         ENDIF
	         PATH_DIST = PATH_DIST+LNK_R(LNK_LEN,JLNK)
110	      CONTINUE
	      IF (FLOW_CODE.EQ.UPHILL) THEN
	         PUP_I(PUP_LNK,LEVEL) = ILNK
	      ELSE
	         PDN_I(PDN_LNK,LEVEL) = ILNK
	      ENDIF
	      N_LINKS = LEVEL
	   ENDIF
	   GOTO 40				! try next arm
	ENDIF
C
155	CAN_PUSH = .TRUE.			! no hghted point found
C
120	IF (CAN_PUSH) THEN			! push node stack
	   IF (LEVEL.GT.0) STN_I(STN_ARM,LEVEL) = ARM_I(ARM_NXT,IARM)
	   LEVEL = LEVEL+1			! incr stack level
	   NOD_L(NOD_VIS,NXT_NOD) = .TRUE.	! mark node visited
	   STN_I(STN_NOD,LEVEL) = NXT_NOD	! note node visited
	   STN_I(STN_ARM,LEVEL) = NOD_I(NOD_ARM,NXT_NOD) ! first arm
C	   STN_R(STN_ZZZ,LEVEL) = MINMAX_HT	! min/max ht
	   GOTO 30
	ELSE IF (LEVEL.GT.1) THEN		! pop node stack
	   LEVEL = LEVEL-1			! decr stack level
	   GOTO 30
	ENDIF
C
	FIND_HEIGHTED_RIVER_POINT = .TRUE.	! search complete
999	RETURN
	END
