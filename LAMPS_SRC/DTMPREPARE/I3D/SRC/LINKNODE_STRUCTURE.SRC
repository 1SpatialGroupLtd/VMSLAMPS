C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-25 17:14:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LINKNODE_STRUCTURE(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &		PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	LINKNODE_STRUCTURE
***	IDENT	25AU93
C
C 	Copyright Laser-Scan, Cambridge, England.
C 
C 	Created						ACM 20-Dec-1988
C
CMOD1288 Get NOD_FSN from LNK_FSN			 JB 24-Aug-1993
C
C Description:	Sets up river/ridgeline link-node structure.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		INOD,ILNK,IARM,IPNT,NOD_INDEX
	INTEGER		NOD1,NOD2
	INTEGER		STA_PNT,FIN_PNT
	INTEGER		FSN_LNK
	INTEGER		GRP_LNK,GRP_NOD
	INTEGER		IARM1,IARM2
	INTEGER		ILNK1,ILNK2
	INTEGER		STA_PNT1,FIN_PNT1
	INTEGER		STA_PNT2,FIN_PNT2
	INTEGER		N_ARMS
	INTEGER		INOD1,INOD2
	INTEGER		I
	REAL		XSTA,YSTA,ZSTA,XFIN,YFIN,ZFIN
	REAL		NOD_TOL_SQ
	LOGICAL		SAME_NODE
C
C **********************************************************************
C
	LINKNODE_STRUCTURE = .FALSE.		! assume the worst
C
	DO 10 INOD = 1,MAX_NODS			! zero arm count/node
	   NOD_I(NOD_ARM,INOD) = NIL
	   NOD_I(NOD_ZZZ,INOD) = IFF_ABSENT
	   NOD_I(NOD_GRP,INOD) = IFF_ABSENT
C	   NOD_L(NOD_DEL,INOD) = .FALSE.
10	CONTINUE
C
C	DO 110 ILNK = 1,MAX_LNKS
C	   LNK_L(LNK_DEL,ILNK) = .FALSE.
C110	CONTINUE
C
	NUM_NODS = 0				! zero node count
	NUM_ARMS = 0				! zero arm count
C
	NOD_TOL_SQ = NOD_TOL**2
C
C Find node at each link end, creating a new one only if there is not
C one sufficiently near by already
C
	DO 60 ILNK = 1,NUM_LNKS
C
	   STA_PNT = LNK_I(LNK_STA,ILNK)	! start point index
	   FIN_PNT = LNK_I(LNK_FIN,ILNK)	! fin point index
C
	   XSTA = PNT_R(PNT_XXX,STA_PNT)	! LNK start coords
	   YSTA = PNT_R(PNT_YYY,STA_PNT)
	   ZSTA = PNT_R(PNT_ZZZ,STA_PNT)
C
	   XFIN = PNT_R(PNT_XXX,FIN_PNT)	! LNK fin coords
	   YFIN = PNT_R(PNT_YYY,FIN_PNT)
	   ZFIN = PNT_R(PNT_ZZZ,FIN_PNT)
C
	   FSN_LNK = LNK_I(LNK_FSN,ILNK)
	   GRP_LNK = LNK_I(LNK_GRP,ILNK)
C
	   DO 20 INOD = 1,NUM_NODS
	      GRP_NOD = NOD_I(NOD_GRP,INOD)
	      IF (GRP_LNK.NE.GRP_NOD) GOTO 20	! keep groups separate
	      SAME_NODE = (XSTA-NOD_R(NOD_XXX,INOD))**2 +
     &	                  (YSTA-NOD_R(NOD_YYY,INOD))**2 .LT. NOD_TOL_SQ
	      IF (SAME_NODE) THEN
	         NOD_INDEX = INOD		! found matching node
	         GOTO 30
	      ENDIF
20	   CONTINUE
C
	   IF (NUM_NODS.GE.MAX_NODS) THEN	! check for NOD overflow
	     CALL LSL_PUTMSG(I3D__INTRNLERR,1,'LINKNODE_STRUCTURE')
	     GOTO 999
	   ENDIF
C
C Add new node
C
	   NUM_NODS = NUM_NODS+1		! count a new node
	   NOD_INDEX = NUM_NODS
	   NOD_I(NOD_GRP,NOD_INDEX) = GRP_LNK	! feature group
	   NOD_R(NOD_XXX,NOD_INDEX) = XSTA	! position
	   NOD_R(NOD_YYY,NOD_INDEX) = YSTA
C
C Set node FSN from link
C
	   NOD_I(NOD_FSN,NOD_INDEX) = FSN_LNK
C
30	   IF (PNT_I(PNT_ZZZ,STA_PNT).NE.IFF_ABSENT)	! height
     &	      NOD_R(NOD_ZZZ,NOD_INDEX) = ZSTA
C
	   LNK_I(LNK_ND1,ILNK) = NOD_INDEX	! note node at LNK end
C
C Set up new ARM
C
	   IF (NUM_ARMS.GE.MAX_ARMS) THEN	! check for ARM overflow
	     CALL LSL_PUTMSG(I3D__INTRNLERR,2,'LINKARME_STRUCTURE')
	     GOTO 999
	   ENDIF
C
	   NUM_ARMS = NUM_ARMS+1
	   ARM_I(ARM_LNK,NUM_ARMS) = ILNK
C
C Add arm to head of linked list of arms for this node
	   ARM_I(ARM_NXT,NUM_ARMS) = NOD_I(NOD_ARM,NOD_INDEX)
	   NOD_I(NOD_ARM,NOD_INDEX) = NUM_ARMS
C
	   DO 40 INOD = 1,NUM_NODS
	      GRP_NOD = NOD_I(NOD_GRP,INOD)
	      IF (GRP_LNK.NE.GRP_NOD) GOTO 40	! keep groups separate
	      SAME_NODE = (XFIN-NOD_R(NOD_XXX,INOD))**2 +
     &	                  (YFIN-NOD_R(NOD_YYY,INOD))**2 .LT. NOD_TOL_SQ
	      IF (SAME_NODE) THEN
	         NOD_INDEX = INOD		! found matching node
	         GOTO 50
	      ENDIF
40	   CONTINUE
C
	   IF (NUM_NODS.GE.MAX_NODS) THEN	! check for NOD overflow
	     CALL LSL_PUTMSG(I3D__INTRNLERR,3,'LINKNODE_STRUCTURE')
	     GOTO 999
	   ENDIF
C
	   NUM_NODS = NUM_NODS+1		! count a new node
	   NOD_INDEX = NUM_NODS
	   NOD_I(NOD_GRP,NOD_INDEX) = GRP_LNK	! feature group
	   NOD_R(NOD_XXX,NOD_INDEX) = XFIN	! and set its position
	   NOD_R(NOD_YYY,NOD_INDEX) = YFIN
C
C Set node FSN from link
C
	   NOD_I(NOD_FSN,NOD_INDEX) = FSN_LNK
C
50	   IF (PNT_I(PNT_ZZZ,FIN_PNT).NE.IFF_ABSENT) ! and height
     &	      NOD_R(NOD_ZZZ,NOD_INDEX) = ZFIN
C
	   LNK_I(LNK_ND2,ILNK) = NOD_INDEX	! note node at LNK end
C
C Set up new ARM
C
	   IF (NUM_ARMS.GE.MAX_ARMS) THEN	! check for ARM overflow
	     CALL LSL_PUTMSG(I3D__INTRNLERR,4,'LINKARME_STRUCTURE')
	     GOTO 999
	   ENDIF
C
	   NUM_ARMS = NUM_ARMS+1
	   ARM_I(ARM_LNK,NUM_ARMS) = ILNK
C
C Add arm to head of linked list of arms for this node
	   ARM_I(ARM_NXT,NUM_ARMS) = NOD_I(NOD_ARM,NOD_INDEX)
	   NOD_I(NOD_ARM,NOD_INDEX) = NUM_ARMS
C
60	CONTINUE
C
C ----------------------------------------------------------------------
	LINKNODE_STRUCTURE = .TRUE.		! success
C
999	RETURN
	END
C
