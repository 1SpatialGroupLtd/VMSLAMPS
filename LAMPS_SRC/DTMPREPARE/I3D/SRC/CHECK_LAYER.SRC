	LOGICAL FUNCTION CHECK_LAYER(LAYER_OK,COPY_DATA)
C
***	MODULE	CHECK_LAYER
***	IDENT	20JA89
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created 						ALB 15-Apr-1988
C
C Description
C Gets the layer number from the entry in hand and uses this to check
C layer bit map to find out whether it one of the required layers.  If
C not, the layer is is either skipped or copied depending on state of
C COPY_DATA. 
C
	IMPLICIT NONE
C
C Common blocks
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE 'LSL$CMNI3D:SELECT.CMN'
C
C Arguments
	LOGICAL		LAYER_OK	! .T. if layer is set in bit map
	LOGICAL		COPY_DATA	! .T. if layer is to be copied
C
C Workspace
	INTEGER		LAY_PTR		! element in LAYMAP containing 
					! layer number to test
	INTEGER		LAY_OFFSET	! offset to test LAYER bit
	INTEGER		NO_POINTER	! NO pointer to EO  
C
	INTEGER*2	ISEQ		! feature number
	INTEGER*2	INT_FSN		! Internal sequence number
	INTEGER*2	LAY_NUM		! Layer number for overlay
	INTEGER*2	IECODE		! Entry code
	INTEGER*2	IELEN		! IFF entry length
C 
	LOGICAL		BIT		! TRUE if required layer
	LOGICAL		OK		! return code
C
C Functions
C
	LOGICAL		LIB$EXTZV
C
C **********************************************************************
C
	CHECK_LAYER = .TRUE.		! assume success
C
C **********************************************************************
C
	CALL EIHRI(LAY_NUM,1,1)		! layer number
C and check if this LAYER number is in bit map
C
	LAY_PTR = (LAY_NUM)/32 + 1	! element in LAYMAP
	LAY_OFFSET = MOD(LAY_NUM,32)	! offset in LAYMAP element
C
C Extract bit from LAYER bit map
C
	BIT = LIB$EXTZV(LAY_OFFSET,1,LAYMAP(LAY_PTR))
	IF (.NOT.BIT.AND..NOT.COPY_DATA) THEN	! Skip this layer
	   LAYER_OK = .FALSE.
           CALL IFFNXC('EO',IELEN)
           IF (IELEN.EQ.-1) THEN		! No 'EO' found
	      CHECK_LAYER = .FALSE.
	      GOTO 999
	   ENDIF
	ELSEIF (.NOT.BIT.AND.COPY_DATA) THEN	! Copy this layer
	   LAYER_OK = .FALSE.
C
	   CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	   NO_POINTER = LPOSE			! save position of 'NO'
	   CALL IFFNO(LAY_NUM,0,0)
	   CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
C
C Loop to copy all entries until 'EO' found
C
100	   CALL IFFNXT(IECODE,IELEN)
           IF (IELEN.EQ.-1) THEN		! No 'EO' found
	      CHECK_LAYER = .FALSE.
	      GOTO 999
	   ENDIF
	   IF (IECODE.EQ.'EO') THEN
	      CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	      CALL IFFUNO(NO_POINTER)		! update 'NO' pointer
	      CALL IFFEO
	      CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
	   ELSEIF (IECODE.EQ.'NF') THEN
	      CALL EIHRI(ISEQ,1,1)		! sequence number
	      CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	      INT_FSN = 0			! set to zero 
	      CALL IFFNF(ISEQ,INT_FSN)
	      CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
	   ELSEIF (IECODE.EQ.'EF') THEN
	      CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	      CALL IFFEF
	      CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
	   ELSE
	      CALL EIHCPY (FILEOUT_LUN)		! Copy entry in hand
	      GOTO 100
	   ENDIF
	ELSE
	   LAYER_OK = .TRUE.
	ENDIF	
C
999	RETURN
	END
