C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-07 16:21:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SET_CMD()
C
***	MODULE	SET_CMD
***	IDENT	07FE89
C
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
C Created 						ALB  28-Apr-1988
C
CMOD	Changed the order in which I3D does things in so that the ONEARM
C	stage is no longer required			ACM 22-Dec-1988
C
C Function to set various parameters to be used during the I3D run
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C Workspace
	INTEGER	CMD		! command number
C
C Define check table
	EXTERNAL 	SET_CMD_TABLE
	INTEGER 	SET_CMD_TABLE
C
C Functions
	INTEGER 	RDCOMM
C
C **********************************************************************
C
	SET_CMD = .FALSE.
	NOMESS = .TRUE.		! suppress error message
C	
	CMD = RDCOMM(SET_CMD_TABLE)
	NOMESS = .FALSE.	! reset command processing messages
	GOTO (	100,		! unrecognised command
     &		120,		! set arrow feature code
     &		140,		! set box feature code
     &		130,		! set clip tolerance
     &		170,		! set average intersections per link
     &		160,		! set layer number
     &          150,		! set max interval
     &		200,		! set node tolerance
     &		240,		! set touch tolerance
     &		100,100,100,	! obsolete command
     &		777	) CMD+1	! set symbol scale factor
C ----------------------------------------------------------------------
C Unrecognised tolerance command 
C
100	CALL WRITEF('%S Specifying command SET',ERROR)
	IF (CMD.GT.0)
     &	   CALL WRITEF('Command not supported in I3D Version 1.1')
	CALL WRITEF('Available SET command qualifiers are')
	CALL WRITEF
	CALL WRITEF('ARROW_FC')
	CALL WRITEF('BOX_FC')
	CALL WRITEF('CLIP_TOLERANCE')
	CALL WRITEF('INTS_PER_LINK')
	CALL WRITEF('LAYER')
	CALL WRITEF('MAX_INTERVAL')
	CALL WRITEF('NODE_TOLERANCE')
	CALL WRITEF('TOUCH_TOLERANCE')
	GOTO 999
C ----------------------------------------------------------------------
C Arrow_fc sub command
C
120	IF (CMDICT.LE.0) THEN		! parameter not supplied
	   CALL WRITEF('%S Specifying command SET ARROW_FC',ERROR)
	   CALL WRITEF('Command requires feature code')
	   GOTO 999
	ELSEIF (INTARG(1).LT.1.OR.INTARG(1).GT.32767) THEN
C Out of range
	   CALL WRITEF('%S Specifying command SET ARROW_FC',ERROR)
	   CALL WRITEF('Value %I0 not in range 1 - 32767',INTARG(1))
	   GOTO 999
	ENDIF
	ARROW_FC = INTARG(1)
	HAD_ARROW_FC = .TRUE.		! set arrow fc (remember)
	GOTO 888
C ----------------------------------------------------------------------
C Box_fc sub command
C
140	IF (CMDICT.EQ.0) THEN		! parameter not supplied
	   CALL WRITEF('%S Specifying command SET BOX_FC',ERROR)
	   CALL WRITEF('Command requires feature code')
	   GOTO 999
	ELSEIF (INTARG(1).LT.1.OR.INTARG(1).GT.32767) THEN
C Out of range
	   CALL WRITEF('%S Specifying command SET BOX_FC',ERROR)
	   CALL WRITEF('Value %I0 not in range 1 - 32767',INTARG(1))
	   GOTO 999
	ENDIF
	BOX_FC = INTARG(1)
	HAD_BOX_FC = .TRUE.			! set box fc (remember)
	GOTO 888
C ----------------------------------------------------------------------
C CLIP_TOLERANCE sub-command
C
130	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'CLIP_TOLERANCE',ERROR)
	   CALL WRITEF('Command requires clip tolerance value')
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'CLIP_TOLERANCE',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &	      REALAR(1))
	   GOTO 999
	ENDIF
	CLIP_TOL = REALAR(1)
	HAD_CLIP_TOL = .TRUE.			! set clip tol
	GOTO 888
C ----------------------------------------------------------------------
C SYMBOL_SCALE sub-command
C
777	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'SYMBOL_SCALE',ERROR)
	   CALL WRITEF('Command requires symbol scale value')
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'SYMBOL_SCALE',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &	      REALAR(1))
	   GOTO 999
	ENDIF
	SYMBOL_SCALE_FACTOR = REALAR(1)
	GOTO 888
C ----------------------------------------------------------------------
C Max_intervals sub-command
C
150	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'MAX_INTERVAL',ERROR)
	   CALL WRITEF('Command requires maximum height interval value')
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'MAX_INTERVAL',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &	      REALAR(1))
	   GOTO 999
	ENDIF
	MAX_INTERVAL = REALAR(1)
	HAD_INTERVAL = .TRUE.			! set max interval
	GOTO 888
C ----------------------------------------------------------------------
C Layer sub command
C
160	IF (CMDICT.EQ.0) THEN			! parameter not supplied
	   CALL WRITEF('%S Specifying command SET LAYER',ERROR)
	   CALL WRITEF('Command requires layer number')
	   GOTO 999
	ELSEIF (INTARG(1).LT.0.OR.INTARG(1).GT.32767) THEN
C Out of range
	   CALL WRITEF('%S Specifying command SET LAYER',ERROR)
	   CALL WRITEF('Parameter %I0 not in range 1 - 32767',INTARG(1))
	   GOTO 999
	ENDIF
C
	LAYER_NUM = INTARG(1)
	HAD_LAYER = .TRUE.			! set layer (remember)
	GOTO 888
C ----------------------------------------------------------------------
C INTS_PER_LINK sub-command
C
170	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET INTS_PER_LINK',ERROR)
	   CALL WRITEF('Command requires REAL factor') 
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET INTS_PER_LINK',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &		REALAR(1))
	   GOTO 999
	ENDIF
	AVG_INTS_PER_LNK = REALAR(1)
	GOTO 888
C ----------------------------------------------------------------------
C NOD_TOLERANCE sub-command
C
200	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'NOD_TOLERANCE',ERROR)
	   CALL WRITEF('Command requires node tolerance value')
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'NOD_TOLERANCE',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &	      REALAR(1))
	   GOTO 999
	ENDIF
	NOD_TOL = REALAR(1)
	HAD_NOD_TOL = .TRUE.			! set node tol
	GOTO 888
C ----------------------------------------------------------------------
C TOUCH_TOLERANCE sub-command
C
240	IF (CMDRCT.EQ.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'TOUCH_TOLERANCE',ERROR)
	   CALL WRITEF('Command requires touch tolerance value')
	   GOTO 999
	ELSEIF (REALAR(1).LE.0.0) THEN	
	   CALL WRITEF('%S Specifying command SET '//
     &	      'TOUCH_TOLERANCE',ERROR)
	   CALL WRITEF('Value %F0.3 is less than or equal to 0.0',
     &	      REALAR(1))
	   GOTO 999
	ENDIF
	TOUCH_TOL = REALAR(1)
	HAD_TOUCH_TOL = .TRUE.			! got touch tol
	GOTO 888
C
C **********************************************************************
888	SET_CMD = .TRUE.			! normal exit	
C
999	RETURN					! abnormal exit
	END
