C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-26 18:40:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FILEIN_CMD()
C
***	MODULE	FILEIN_CMD
***	IDENT	26FE91
C
C	Copyright (C), Laser-Scan Laboratories Ltd., Cambridge, England
C
C Created						ALB 28-Apr-1988
C
C Function to get input file-spec from FILEIN command. If argument is
C missing the user is prompted.  The FILEIN file is then opened for read
C only.  
C
C Function returns .TRUE. if all is well, otherwise .FALSE.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
C
C commons
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE 'LSL$CMNI3D:SELECT.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
C
C Workspace
	BYTE		CH		! a character
	LOGICAL		BLANK		! blank line?
	LOGICAL		OK		! for error returns
	LOGICAL		IERR		! for error returns
	INTEGER		CUR_IFF		! current IFF file number
	INTEGER		LUN		! LUN for input IFF file 
	INTEGER*2	IELEN		! IFF entry length
C
C the following all dummy arguments in call to IFFINQ 
	INTEGER*2	FILE_LEN	! num chars in filename
	INTEGER*4	CREATE_DATE(2)	! creation date of file
	INTEGER*4	REVISE_DATE(2)	! revision date of file
	INTEGER*2	NUM_REV		! number of revisions
C
C functions
	LOGICAL		GETFILNAM 	! get file-spec
	LOGICAL		RDCHS		! read char. skipping spaces
	LOGICAL		TTRSTR		! read from TT:
	LOGICAL		IFFOPEN		! open IFF file
C
C ......................................................................
C
	FILEIN_CMD=.TRUE.		! assume success
C
C ......................................................................
C Check whether max num of input IFF files have already been opened 
C
	IF (NUM_FILEIN.GE.MAX_FILEIN) THEN
	   CALL WRITEF('%S Specifying command FILEIN',ERROR)
	   CALL WRITEF('Maximum of %I0 files already opened.',
     &		MAX_FILEIN)
	   FILEIN_CMD = .FALSE.
	   GOTO 999
	ENDIF
C
C Look for filename, taking appropriate action if none found
C
	BLANK=RDCHS(CH)			! empty line ...
	IF (BLANK.OR.CH.EQ.'!') THEN	! or comment?
C
C Display warning/error for no filename present
C
	   IF (TTIN) THEN
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		' to the FILEIN command',WARNING)
	   ELSE
	      CALL WRITEF('%S You must specify a file-spec argument'//
     &		' to the FILEIN command',ERROR)
	   ENDIF	   
C
C If terminal input, prompt for filename
C
	   IF (TTIN) THEN
	      CALL WRITEF('For example FILEIN SW555.IFF')
	      OK=TTRSTR(,,'Read from river/ridgeline IFF file? ',IERR)
	      IF (OK) THEN
	         CALL BSLN			! reset decode ptr
	      ELSE
	         CALL LSL_PUTMSG(OK)		! problem with input
	         CALL LSL_ADDMSG(IERR)
	         FILEIN_CMD=.FALSE.
	         GOTO 999
	      ENDIF
	      IF (TXTPTR.EQ.0) THEN
	   	 FILEIN_CMD=.FALSE.
		 GOTO 999		! empty line
	      ENDIF
	   ELSE
	      GOTO 999  ! someone got their indirect file wrong !!
	   ENDIF
	ENDIF
C
C ......................................................................
C
C Try interpreting the file-spec
C
	CUR_IFF = NUM_FILEIN + 1
	CALL BSCH				! move back one chr
	OK=  GETFILNAM(	FILEIN_FNAME(CUR_IFF),	! filename
     &			FILEIN_LEN(CUR_IFF),	! filename length
     &			'LSL$IF:IFF.IFF;0',	! default
     &			.TRUE.,			! allow version numbers
     &			%REF('!') )		! termination character
C
C Deal with any error in interpreting file-spec
C
	IF (.NOT.OK) THEN
	   CALL WRITEF('%S Unable to interpret input file-spec',ERROR)
	   CALL LSL_PUTMSG(OK)
	   FILEIN_CMD=.FALSE.
	   GOTO 999
	ENDIF
C
C***********************************************************************
C open IFF file
C
	LUN = FILEIN_LUN			! get LUN for IFF file
	OK = IFFOPEN(LUN,FILEIN_FNAME(CUR_IFF)(:FILEIN_LEN(CUR_IFF)),
     &         ,,1)
	IF (.NOT.OK) THEN
	   CALL WRITEF( '%S Opening input river/ridgeline IFF file %S', 
     &	      ERROR,FILEIN_FNAME(CUR_IFF)(1:FILEIN_LEN(CUR_IFF)))
	   FILEIN_CMD = .FALSE.
	   GOTO 999
	ELSE
	   OPEN_FILEIN = .TRUE.
	   CALL WRITEF('River/ridgeline IFF file %S selected as input',
     &        FILEIN_FNAME(CUR_IFF)(1:FILEIN_LEN(CUR_IFF)))
C
C get local origin of each file	
C
	   CALL IFFSEL(FILEIN_LUN)
	   CALL IFFNXC('MD',IELEN)
	   IF (IELEN.EQ.MD2LEN) THEN		! its a type 2 MD
	      CALL EIHR(MD2ARR,MD2LEN,1)	! read it into MD array
	      IF (.NOT.HAD_FILEIN .AND. .NOT.HAD_TERRAIN) THEN
		 X_ORIGIN = MD2LOC(1)
		 Y_ORIGIN = MD2LOC(2)
	      ELSE
		 IF ((X_ORIGIN-MD2LOC(1).GT.ORIGIN_TOL).OR.
     &		     (Y_ORIGIN-MD2LOC(2).GT.ORIGIN_TOL)) THEN
	   	    CALL WRITEF ('%S With input IFF file %S', 
     &	   	      ERROR,FILEIN_FNAME(CUR_IFF)(1:FILEIN_LEN(CUR_IFF)))
	   	    CALL WRITEF ('Has different local origin '//
     &		      'to the first file opened')
	   	    CALL WRITEF ('Local origin of this file is : '//
     &		      'X = %^D%F0.3 Y = %F0.3 ',MD2LOC(1),MD2LOC(2))
	   	    CALL WRITEF ('Local origin of first file is : '//
     &		      'X = %^D%F0.3 Y = %F0.3 ',X_ORIGIN,Y_ORIGIN)
		 ENDIF
	      ENDIF
	   ELSE			! not type 2 map descriptor
	      CALL WRITEF('%S Specifying command FILEIN',WARNING)
	      CALL WRITEF('River/ridgeline IFF file %S does not contain '//
     &	        'a type 2 MD (Map Descriptor)',
     &          FILEIN_FNAME(CUR_IFF)(1:FILEIN_LEN(CUR_IFF)))
	   ENDIF
C
C get file ID and full filename before closing
C
	   CALL IFFID(FILEIN_FID(1,CUR_IFF))
	   FILE_LEN = FILEIN_LEN(CUR_IFF)
	   CALL IFFINQ(FILEIN_FNAME(CUR_IFF),
     &		FILE_LEN,CREATE_DATE,REVISE_DATE,NUM_REV)
	   FILEIN_LEN(CUR_IFF) = FILE_LEN
	   CALL IFFCLO(FILEIN_LUN)
	   OPEN_FILEIN = .FALSE.	         
	ENDIF
C
C reset bit maps for layer and FSN if first IFF file
C
	IF (.NOT.HAD_FILEIN .AND. .NOT.HAD_TERRAIN) THEN
	   LYSMOD = .FALSE.
	   FSNMOD = .FALSE.
	   CALL VIOCLR(LAYMAP,LAYMAX*4,-1)	! reset whole bit-map ON
	   CALL VIOCLR(FSNMAP,FSNMAX*4,-1)	! reset whole bit-map ON
	   IF (.NOT.HAD_LOOKUP) THEN
	      FCSMOD = .TRUE.
	      CALL VIOCLR(FCMAP,FCMAX*4)	! reset whole bit-mp OFF
	   ENDIF
	ENDIF
	NUM_FILEIN = NUM_FILEIN + 1
	HAD_FILEIN = .TRUE.		! got at least 1 input IFF file
C
999	RETURN
	END
C
