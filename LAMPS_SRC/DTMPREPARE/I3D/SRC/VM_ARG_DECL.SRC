C ------------------- >>> START OF VM_ARG_DECL.INC <<< -----------------
C
C      The I3D module makes use of VM workspace to store attributes
C      from IFF files and calculated internally by the module.  The
C      following diagrams describes the attributes stored for each
C      dynamic (VM) array together with the data type associated with
C      that attribute.  Note: each array is able to store attributes
C      of different data type.  This is achieved by repeatedly passing
C      the same start address of the array and declaring them as
C      separate arrays with different data types within the called
C      routine.  Although, not explicitly equivalenced within routine
C      (illegal) the arrays will due to the method of passing occupy
C      the same memory area.
C
C The nomemclature for these array names is as follows:-
C
C                nnn_t
C
C      where     nnn    is 3 char name describing data to be contained
C                       within array (eg NOD for node data, PNT for
C                       point data)
C
C                _      always after nnn
C      
C                t      is code for data type (ie I:= integer, R:= real
C                       L:= logical)
C
C Attribute subscripts for array named nnn_ will be nnn_aaa, where
C aaa is a 3 character attribute pnemonic.
C
C ........................ NODES .......................................
C
C Node data arrays >>      NOD_I :== NOD_R :== NOD_L
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | R    | X coordinate                                 XXX |
C |   2   | R    | Y coordinate                                 YYY |
C |   3   | R    | Z coordinate (height)                        ZZZ |
C |   4   | I    | Index of head arm in arm list                ARM |
C |   5   | I    | Network component index                      NET
C |   6   | I    | Group index                                  GRP |
C |   7   | L    | Been-here-before?                            BEF |
C |   8   | L    | Another been-here-before?                    VIS |
C *-------*------*--------------------------------------------------*
C
C
C ........................ ARMS ........................................
C
C Arms data arrays >>      ARM_I :== ARM_L
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Link index                                   LNK |
C |   2   | I    | Arm index of next arm in linked list         NXT |
C *-------*------*--------------------------------------------------*
C
C
C ........................ LINKS .......................................
C This work array will contain information about river/ridge features.
C
C Link data arrays >>      LNK_I :== LNK_R :== LNK_L
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Group index                                  GRP |
C |   2   | I    | Start PNT index                              STA |
C |   3   | I    | Fin PNT index                                FIN |
C |   4   | I    | Start node index                             ND1 |
C |   5   | I    | Fin node index                               ND2 |
C |   6   | I    | Direction of flow 1 up -1 down 0 undirected  FLO |
C |   7   | R    | Link length                                  LEN |
C |   4   | R    | Min x of box bounding feature                MNX |
C |   5   | R    | Max x of box bounding feature                MXX |
C |   6   | R    | Min y of box bounding feature                MNY |
C |   7   | R    | Max y of box bounding feature                MXY |
C |   8   | R    | Link height                                  ZZZ |
C |   9   | L    | Been-here-before?                            BEF |
C |  10   | L    | Flow direction guessed or determined?        GES |
C *-------*------*--------------------------------------------------*
C
C
C ........................ NETWORK COMPONENTS ..........................
C This array keeps information about network components.
C
C Network component data array >> NET_I
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Max height node                              IMX |
C |   2   | I    | Min height node                              IMN |
C |   3   | I    | feature group number                         GRP |
C *-------*------*--------------------------------------------------*
C
C
C ........................ NODE STACK ..................................
C This is a scratch array to facilitate network processing.
C
C Stack data array  >>      STN_I :== STN_R
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Node at current level                        NOD |
C |   2   | I    | Arm being processed                          ARM |
C |   3   | R    | Min height along rivers in stack             ZZZ |
C *-------*------*--------------------------------------------------*
C
C
C ........................ LINK STACK ..................................
C This is a scratch array to facilitate network processing.
C
C Stack data array  >>      STL_I :== STL_L
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Link at current level                        LNK |
C |   2   | L    | Flow guessed for this link before?           BEF |
C *-------*------*--------------------------------------------------*
C
C
C ........................ NETWORK UP-PATH .............................
C This work array is used to store a list of link indices to define an
C uphill path through a river network.
C
C PTH data arrays >> PUP_I
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Link index                                   LNK |
C *-------*------*--------------------------------------------------*
C
C
C ........................ NETWORK DOWN-PATH ...........................
C This work array is used to store a list of link indices to define an
C downhill path through a river network.
C
C PTH data arrays >> PDN_I
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Link index                                   LNK |
C *-------*------*--------------------------------------------------*
C
C
C ........................ MINUMUM X ...................................
C This work array is used to sort features on min x.  This is done to
C slightly speed up intersection processing.
C
C MNX data arrays >> MNX_I :== MNX_R 
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | I    | Feature index                                LNK |
C |   2   | R    | Min x of box bounding feature                MNX |
C *-------*------*--------------------------------------------------*
C
C
C ........................ POINTS ......................................
C This work array will contain vector data. Note: coords are not
C integer valued, but it is necessary to use integer assignment and
C comparison in order to handle the case when height values are
C undefined (due to the LSL anomally that the IFF_ABSENT value cannot
C be distinguished from zero unless it is interpreted as an integer!)
C
C PNT data arrays >>  PNT_I :== PNT_R
C
C *-------*------*--------------------------------------------------*
C |Attrib | Type | Brief description                       Pnemonic |
C *-------*------*--------------------------------------------------*
C |   1   | R    | X coordinate of point                        XXX |
C |   2   | R    | Y coordinate of point                        YYY |
C |   3   | R    | Height of point                              ZZZ |
C |   4   | R    | Length of point  leading into this point     LEN |
C |   5   | I    | Pointer to previous PNT in linked list       PRV |
C |   6   | I    | Pointer to next PNT in linked list           NXT |
C *-------*------*--------------------------------------------------*
C
C
C Array dimensions
      INTEGER		MAX_NODS	! max num of nodes 
      INTEGER		MAX_ARMS	! max num of arms
      INTEGER		MAX_LNKS	! max num of links
      INTEGER		MAX_STNS	! max num of node stack levels
      INTEGER		MAX_STLS	! max num of link stack levels
      INTEGER		MAX_PNTS	! max num of points
C
C ............... Node arrays ..........................................
C
      INTEGER		NOD_I(NOD_ATTRIBS,MAX_NODS)
      REAL		NOD_R(NOD_ATTRIBS,MAX_NODS)
      LOGICAL		NOD_L(NOD_ATTRIBS,MAX_NODS)
C
C ............... Arm array ............................................
C
      INTEGER		ARM_I(ARM_ATTRIBS,MAX_ARMS)
      LOGICAL		ARM_L(ARM_ATTRIBS,MAX_ARMS)
C
C ............... Link arrays ..........................................
C
      INTEGER		LNK_I(LNK_ATTRIBS,MAX_LNKS)
      REAL		LNK_R(LNK_ATTRIBS,MAX_LNKS)
      LOGICAL		LNK_L(LNK_ATTRIBS,MAX_LNKS)
C
C ............... Network component array ..............................
C
      INTEGER		NET_I(NET_ATTRIBS,MAX_LNKS)
C
C ............... Network up-path array ................................
C
      INTEGER		PUP_I(PUP_ATTRIBS,MAX_LNKS)
C
C ............... Network down-path array ..............................
C
      INTEGER		PDN_I(PDN_ATTRIBS,MAX_LNKS)
C
C ............... Node stack array .....................................
C
      INTEGER		STN_I(STN_ATTRIBS,MAX_STNS)
      REAL		STN_R(STN_ATTRIBS,MAX_STNS)
C
C ............... Link stack array .....................................
C
      INTEGER		STL_I(STL_ATTRIBS,MAX_STLS)
      LOGICAL		STL_L(STL_ATTRIBS,MAX_STLS)
C
C ............... Min x sort arrays ....................................
C
      INTEGER		MNX_I(MNX_ATTRIBS,MAX_LNKS)      
      REAL		MNX_R(MNX_ATTRIBS,MAX_LNKS)
C
C ............... Point arrays .........................................
C
      INTEGER		PNT_I(PNT_ATTRIBS,MAX_PNTS)
      REAL		PNT_R(PNT_ATTRIBS,MAX_PNTS)
C
C ------------------- >>> END OF VM_ARG_DECL.INC <<< -------------------

