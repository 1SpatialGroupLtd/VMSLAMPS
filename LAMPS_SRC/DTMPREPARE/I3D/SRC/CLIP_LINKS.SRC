C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-21 18:34:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CLIP_LINKS(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &		PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	CLIP_LINKS
***	IDENT	21FE91
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created						ACM 23-Dec-1988
C
C Description
C	Changes river/ridgeline network data so that unheighted free
C	ends which are greater that CLIP_TOL along feature from nearest
C	heighted point are all clipped away, except that no whole
C	links will be deleted.
C
	IMPLICIT NONE
C	
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C Structures
        INCLUDE 'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		IPNT1,IPNT2		! consecutiv PNT indices
	INTEGER		STA_PNT,FIN_PNT		! ftr start and end pts
	INTEGER		ILNK,INOD,IARM,IPNT	! LNK,NOD,ARM,PNT indics
	INTEGER		PRV_ARM,NXT_ARM		! prev and next arms
C
	REAL		LEN
C
	LOGICAL		FREE_END,UNHEIGHTED_FREE_END
	LOGICAL		LINK_VANISHED,SOME_LINK_VANISHED
C
C **********************************************************************
C
	CLIP_LINKS = .FALSE.
C
1	SOME_LINK_VANISHED = .FALSE.
C
	DO 60 ILNK = 1,NUM_LNKS
C
	   STA_PNT = LNK_I(LNK_STA,ILNK)	! start pnt index
	   FIN_PNT = LNK_I(LNK_FIN,ILNK)	! fin pnt index
C
	   IF (PNT_I(PNT_NXT,STA_PNT).EQ.0) GOTO 60
C
	   INOD = LNK_I(LNK_ND1,ILNK)		! node at ftr start
	   IARM = NOD_I(NOD_ARM,INOD)		! head-arm for nod INOD
	   FREE_END = ARM_I(ARM_NXT,IARM).EQ.NIL! one arm?
	   UNHEIGHTED_FREE_END = FREE_END .AND. 
     &			PNT_I(PNT_ZZZ,STA_PNT).EQ.IFF_ABSENT
C
	   LINK_VANISHED = .FALSE.
C
	   IF (UNHEIGHTED_FREE_END) THEN
	      LEN = 0
	      IPNT2 = STA_PNT
C
10	      IPNT1 = IPNT2
	      IPNT2 = PNT_I(PNT_NXT,IPNT1)	! get next PNT index
	      LEN = LEN + PNT_R(PNT_LEN,IPNT2)
	      IF (LEN.GT.CLIP_TOL) GOTO 20
	      IF (PNT_I(PNT_ZZZ,IPNT2).EQ.IFF_ABSENT.AND.
     &	         IPNT2.NE.FIN_PNT) GOTO 10
C
C Heighted pt has been found and dist to nearest heighted pt is less
C than CLIP_TOL, so clip end off 
C
	      STA_PNT = IPNT2
C
C Check for link degenerating to a single point
	      LINK_VANISHED = STA_PNT.EQ.FIN_PNT
C
	      IF (.NOT.LINK_VANISHED) THEN
	        PNT_I(PNT_PRV,STA_PNT) = 0	! null terminate
	        LNK_I(LNK_STA,ILNK) = STA_PNT
	        NOD_R(NOD_XXX,INOD) = PNT_R(PNT_XXX,STA_PNT)
	        NOD_R(NOD_YYY,INOD) = PNT_R(PNT_YYY,STA_PNT)
	        NOD_R(NOD_ZZZ,INOD) = PNT_R(PNT_ZZZ,STA_PNT)
	      ENDIF
	   ENDIF
C
20	   IF (LINK_VANISHED) GOTO 35
C
	   INOD = LNK_I(LNK_ND2,ILNK)		! node at ftr end
	   IARM = NOD_I(NOD_ARM,INOD)		! head-arm for nod INOD
	   FREE_END = ARM_I(ARM_NXT,IARM).EQ.NIL! one arm?
	   UNHEIGHTED_FREE_END = FREE_END .AND. 
     &			PNT_I(PNT_ZZZ,FIN_PNT).EQ.IFF_ABSENT
C
	   IF (UNHEIGHTED_FREE_END) THEN
	      LEN = 0
	      IPNT2 = FIN_PNT
C
30	      IPNT1 = IPNT2
	      IPNT2 = PNT_I(PNT_PRV,IPNT1)	! get prev PNT index
	      LEN = LEN + PNT_R(PNT_LEN,IPNT1)
	      IF (LEN.GT.CLIP_TOL) GOTO 60
	      IF (PNT_I(PNT_ZZZ,IPNT2).EQ.IFF_ABSENT .AND.
     &	         IPNT2.NE.STA_PNT) GOTO 30
C
	      FIN_PNT = IPNT2
C
C Check for link degenerating to a single point
	      LINK_VANISHED = STA_PNT.EQ.FIN_PNT
C
	      IF (.NOT.LINK_VANISHED) THEN
	         PNT_I(PNT_NXT,FIN_PNT) = 0	! null terminate
	         LNK_I(LNK_FIN,ILNK) = FIN_PNT
	         NOD_R(NOD_XXX,INOD) = PNT_R(PNT_XXX,FIN_PNT)
	         NOD_R(NOD_YYY,INOD) = PNT_R(PNT_YYY,FIN_PNT)
	         NOD_R(NOD_ZZZ,INOD) = PNT_R(PNT_ZZZ,FIN_PNT)
	      ENDIF
	   ENDIF
C
35	   IF (.NOT.LINK_VANISHED) GOTO 60
C	   SOME_LINK_VANISHED = .TRUE.
C
C *******************************************************************
CC
CC Delete one-point link by:
CC - deleting link itself
CC - deleting arms at both ends
CC - deleting node at either end if no arms remain
C
CC Delete link itself
C	   LNK_L(LNK_DEL,ILNK) = .TRUE.
CC
CC Delete arm from node at link start end
C	   INOD = LNK_I(LNK_ND1,ILNK)
CC
CC Mark node as potential source or sink
C	   NOD_I(NOD_DEL,INOD) = 2		! .FALSE. but <> 0
CC
C	   IARM = NOD_I(NOD_ARM,INOD)
C	   PRV_ARM = NIL
C40	   IF (ARM_I(ARM_LNK,IARM).NE.ILNK) THEN
C	      PRV_ARM = IARM
C	      IARM = ARM_I(ARM_NXT,IARM)
C	      IF (IARM.EQ.NIL) THEN
C	         CALL LSL_PUTMSG(I3D__INTRNLERR,1,'CLIP_LINKS')
C	         GOTO 999
C	      ENDIF
C	      GOTO 40
C	   ENDIF
C	   NXT_ARM = ARM_I(ARM_NXT,IARM)
C	   IF (PRV_ARM.EQ.NIL) THEN
C	      NOD_I(NOD_ARM,INOD) = NXT_ARM
CC Delete node if now has no arms left
C	      IF (NXT_ARM.EQ.NIL) NOD_L(NOD_DEL,INOD) = .TRUE.
C	   ELSE
C	      ARM_I(ARM_NXT,PRV_ARM) = NXT_ARM
C	   ENDIF
CC
CC Delete arm from link fin end
C	   INOD = LNK_I(LNK_ND2,ILNK)
CC
CC Mark node as potential source or sink
C	   NOD_I(NOD_DEL,INOD) = 2		! .FALSE. but <> 0
CC
C	   IARM = NOD_I(NOD_ARM,INOD)
C	   PRV_ARM = NIL
C50	   IF (ARM_I(ARM_LNK,IARM).NE.ILNK) THEN
C	      PRV_ARM = IARM
C	      IARM = ARM_I(ARM_NXT,IARM)
C	      IF (IARM.EQ.NIL) THEN
C	         CALL LSL_PUTMSG(I3D__INTRNLERR,2,'CLIP_LINKS')
C	         GOTO 999
C	      ENDIF
C	      GOTO 50
C	   ENDIF
C	   NXT_ARM = ARM_I(ARM_NXT,IARM)
C	   IF (PRV_ARM.EQ.NIL) THEN
C	      NOD_I(NOD_ARM,INOD) = NXT_ARM
CC Delete node if now has no arms left
C	      IF (NXT_ARM.EQ.NIL) NOD_L(NOD_DEL,INOD) = .TRUE.
C	   ELSE
C	      ARM_I(ARM_NXT,PRV_ARM) = NXT_ARM
C	   ENDIF
C
C *******************************************************************
C
60	CONTINUE
	IF (SOME_LINK_VANISHED) GOTO 1
C
C Now that all clipping has been done, it is safe to set link lengths
C
	DO 90 ILNK = 1,NUM_LNKS
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 90	! skip deleted links
	   IPNT = LNK_I(LNK_STA,ILNK)
	   LEN = 0
70	   IPNT = PNT_I(PNT_NXT,IPNT)
	   IF (IPNT.EQ.NIL) GOTO 80
	   LEN = LEN+PNT_R(PNT_LEN,IPNT)
	   GOTO 70
80	   LNK_R(LNK_LEN,ILNK) = LEN
90	CONTINUE
C
	CLIP_LINKS = .TRUE.			! successfull completion
C
999	RETURN
	END
C
