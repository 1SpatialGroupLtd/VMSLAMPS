C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-08-26 17:03:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL	FUNCTION CHECK_FLOW(EXPERIMENTING,HOLD_COMPLETE_FLOW,
     &		NO_POSSIBLE_FLOW,FLOW_COMPLETE,
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &		PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	CHECK_FLOW
***	IDENT	26AU93
C
C	Copyright Laser-Scan, Cambridge, England.
C
C	Created						ACM 08-Jan-1989
C
CMOD1288 Add FSN to LITES_MESS				 JB 25-Aug-1993
C
C Description:	Complete flow determined by flow so far
C
C Algorithm
C	Repeat
C	   Set flow of every link which is the only undirected link at
C	   some node so that no unfree node is a source or a sink
C	   until no node has just one undirected link.
C
C	Check for ALL illegal sources or sinks.
C
C	Set node heights using flows and point heights already set.
C
C	Check for ANY river flow cycles or indirect height inflections
C	according to the nodes heights as set above.
C
C	If flow not complete then undirect all flows directed, or leave,
C	depending on whether experimenting and completed flow wanted.
C
C ----------------------------------------------------------------------
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Data in
	LOGICAL		EXPERIMENTING
	LOGICAL		HOLD_COMPLETE_FLOW
	LOGICAL		NO_POSSIBLE_FLOW
C
C Data out
	LOGICAL		FLOW_COMPLETE
C
C Workspace
	INTEGER		INOD,IARM,ILNK,JLNK,KLNK,IPNT,ILEV,IMN
	INTEGER		N_ARMS			! num arms at node
	INTEGER		N_UNDEF			! num undirected links
	INTEGER		N_GUESSED		! num guess-directed lnk
	INTEGER		FLOW			! flow code
	INTEGER		LEVEL			! node stack level
	INTEGER		CUR_NOD			! node on top of stack
	INTEGER		NXT_NOD			! next node to stack
	INTEGER		N_SOURCES,N_SINKS	! source & sink counts
	LOGICAL		HAD_IN			! had flow in to node?
	LOGICAL		HAD_OUT			! had flow out from nod?
	LOGICAL		CAN_PUSH		! can push node stack?
	LOGICAL		NEW_FLOW_FOUND		! any new flows set?
	LOGICAL		INFLECTION		! ht inflection found?
	LOGICAL		OK			! logical function retrn
	REAL		MIN_HT			! min node ht on stak
	REAL		NOD_HT			! max poss ht of node
	INTEGER		FSN
	INTEGER		IMIN_HT,INOD_HT		! int equiv to similar
C
	EQUIVALENCE(	IMIN_HT,MIN_HT)
	EQUIVALENCE(	INOD_HT,NOD_HT)
C
C Functions
	LOGICAL		HEIGHT_RIVER_NODES
C
C ----------------------------------------------------------------------
C TRUE = flow is not illegal (ie. no illegal sources or sinks, or flow
C path cycles or height inflections - though not all river link flows
C need be directed and not all node heights need be set).
C
	CHECK_FLOW = .FALSE.
	FLOW_COMPLETE = .FALSE.
C
C ----------------------------------------------------------------------
	DO 1 ILNK = 1,NUM_LNKS
	   LNK_L(LNK_BEF,ILNK) = .FALSE.	! no link visited yet
1	CONTINUE
C
C ----------------------------------------------------------------------
C Set flow of every link which is the only undirected link at some node
C where all other links are into or out from node, so that no unfree
C node is a source or a sink.
C
10	NEW_FLOW_FOUND = .FALSE.
C
C Find whether conditions exist to determine a link flow
C
	DO 50 INOD = 1,NUM_NODS
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 50	! skip NOD if deleted
	   IF (NOD_I(NOD_GRP,INOD).NE.RIVER) GOTO 50
	   N_ARMS = 1				! count arms at node
	   IARM = NOD_I(NOD_ARM,INOD)
20	   IF (ARM_I(ARM_NXT,IARM).NE.NIL) THEN
	      N_ARMS = N_ARMS+1
	      IARM = ARM_I(ARM_NXT,IARM)
	      GOTO 20
	   ENDIF
	   IF (N_ARMS.LT.2) GOTO 50
	   HAD_IN = .FALSE.
	   HAD_OUT = .FALSE.
	   N_UNDEF = 0
C
	   IARM = NOD_I(NOD_ARM,INOD)
30	   IF (IARM.EQ.NIL) GOTO 40
	   ILNK = ARM_I(ARM_LNK,IARM)
	   FLOW = LNK_I(LNK_FLO,ILNK)
	   IF (FLOW.EQ.UNDIRECTED) THEN
	      N_UNDEF = N_UNDEF+1
	      JLNK = ILNK			! note unset link
	   ELSE IF (LNK_I(LNK_ND1,ILNK).EQ.INOD) THEN
	      IF (FLOW.EQ.UPHILL) HAD_IN = .TRUE.
	      IF (FLOW.EQ.DOWNHILL) HAD_OUT = .TRUE.
	   ELSE
	      IF (FLOW.EQ.DOWNHILL) HAD_IN = .TRUE.
	      IF (FLOW.EQ.UPHILL) HAD_OUT = .TRUE.
	   ENDIF
	   IARM = ARM_I(ARM_NXT,IARM)
	   GOTO 30
C
C If flow is determined, then set it
C
40	   IF (N_UNDEF.EQ.1) THEN
	      IF (HAD_IN.AND..NOT.HAD_OUT) THEN
	         NEW_FLOW_FOUND = .TRUE.
	         IF (LNK_I(LNK_ND1,JLNK).EQ.INOD) THEN
	            LNK_I(LNK_FLO,JLNK) = DOWNHILL
	         ELSE
	            LNK_I(LNK_FLO,JLNK) = UPHILL
	         ENDIF
	         LNK_L(LNK_BEF,JLNK) = .TRUE.
	      ELSE IF (HAD_OUT.AND..NOT.HAD_IN) THEN
	         NEW_FLOW_FOUND = .TRUE.
	         IF (LNK_I(LNK_ND1,JLNK).EQ.INOD) THEN
	            LNK_I(LNK_FLO,JLNK) = UPHILL
	         ELSE
	            LNK_I(LNK_FLO,JLNK) = DOWNHILL
	         ENDIF
	         LNK_L(LNK_BEF,JLNK) = .TRUE.
	      ENDIF
	   ENDIF
50	CONTINUE
C
C Repeat this  process until no new flows can be set
C
	IF (NEW_FLOW_FOUND) GOTO 10
C
C ----------------------------------------------------------------------
C If it has not yet been established that there is no possible (legal
C and complete) flow when using the following extra procedure, then
C apply this procedure. This was added as a refinement in an effort to
C get I3D to guess a flow which is pleasing to the user!
C
C The rule to be applied here is:
C	Repeat
C	   For each  node do
C	      if (one link undirected and
C	          one link directed by GUESS_COMPLETE_FLOW and
C	          all other links are directed by SET_INITIAL_FLOW)
C	      then
C	         direct undirected link to flow though node in same
C	         direction as guess-directed link
C	      end if
C	   end do
C	until no new link direction is set
C
	IF (NO_POSSIBLE_FLOW) GOTO 502
C101	NEW_FLOW_FOUND = .FALSE.
	NEW_FLOW_FOUND = .FALSE.
C
C Find whether conditions exist to determine a link flow
C
	DO 501 INOD = 1,NUM_NODS
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 501	! skip NOD if deleted
	   IF (NOD_I(NOD_GRP,INOD).NE.RIVER) GOTO 501
	   N_ARMS = 1				! count arms at node
	   IARM = NOD_I(NOD_ARM,INOD)
201	   IF (ARM_I(ARM_NXT,IARM).NE.NIL) THEN
	      N_ARMS = N_ARMS+1
	      IARM = ARM_I(ARM_NXT,IARM)
	      GOTO 201
	   ENDIF
	   IF (N_ARMS.LT.3) GOTO 501
	   HAD_IN = .FALSE.
	   HAD_OUT = .FALSE.
	   N_UNDEF = 0
	   N_GUESSED = 0
C
	   IARM = NOD_I(NOD_ARM,INOD)
301	   IF (IARM.EQ.NIL) GOTO 401
	   ILNK = ARM_I(ARM_LNK,IARM)
	   FLOW = LNK_I(LNK_FLO,ILNK)
	   IF (FLOW.EQ.UNDIRECTED) THEN
	      N_UNDEF = N_UNDEF+1
	      JLNK = ILNK			! note unset link
	   ELSEIF (LNK_L(LNK_GES,ILNK)) THEN
	      N_GUESSED = N_GUESSED+1
	      KLNK = ILNK
	   ENDIF
	   IARM = ARM_I(ARM_NXT,IARM)
	   GOTO 301
C
C If flow is determined, then set it
C
401	   IF (N_UNDEF.EQ.1.AND.N_GUESSED.EQ.1) THEN
	      NEW_FLOW_FOUND = .TRUE.
	      LNK_L(LNK_BEF,JLNK) = .TRUE.
	      IF (LNK_I(LNK_ND1,JLNK).EQ.INOD) THEN
	         IF (LNK_I(LNK_ND1,KLNK).EQ.INOD) THEN
	            LNK_I(LNK_FLO,JLNK) = -LNK_I(LNK_FLO,KLNK)
	         ELSE
	            LNK_I(LNK_FLO,JLNK) = LNK_I(LNK_FLO,KLNK)
	         ENDIF
	      ELSE
	         IF (LNK_I(LNK_ND1,KLNK).EQ.INOD) THEN
	            LNK_I(LNK_FLO,JLNK) = LNK_I(LNK_FLO,KLNK)
	         ELSE
	            LNK_I(LNK_FLO,JLNK) = -LNK_I(LNK_FLO,KLNK)
	         ENDIF
	      ENDIF
	   ENDIF
501	CONTINUE
C
C Repeat this  process until no new flows can be set
C
C	IF (NEW_FLOW_FOUND) GOTO 101
	IF (NEW_FLOW_FOUND) GOTO 10
502	CONTINUE
C
C ----------------------------------------------------------------------
C Check for illegal sources or sinks
C
	N_SOURCES = 0
	N_SINKS = 0
	DO 90 INOD = 1,NUM_NODS
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 90	! skip NOD if deleted
	   IF (NOD_I(NOD_GRP,INOD).NE.RIVER) GOTO 90
C
C Count arms. Further checks required only if > 1 arm.
C
	   N_ARMS = 1				! count arms at node
	   IARM = NOD_I(NOD_ARM,INOD)
C
60	   IF (ARM_I(ARM_NXT,IARM).NE.NIL) THEN
	      N_ARMS = N_ARMS+1
	      IARM = ARM_I(ARM_NXT,IARM)
	      GOTO 60
	   ENDIF
C
	   IF (N_ARMS.LT.2) GOTO 90
C
C Check for source (all arms flow out from node) or sink (all flow in)
C
	   HAD_IN  = .FALSE.
	   HAD_OUT = .FALSE.
	   IARM = NOD_I(NOD_ARM,INOD)
C
70	   IF (IARM.EQ.NIL) GOTO 80
C
	   ILNK = ARM_I(ARM_LNK,IARM)
	   FLOW = LNK_I(LNK_FLO,ILNK)
C
	   IF (FLOW.EQ.UNDIRECTED) GOTO 90
C
	   IF (LNK_I(LNK_ND1,ILNK).EQ.INOD) THEN
	      IF (FLOW.EQ.UPHILL) HAD_IN = .TRUE.
	      IF (FLOW.EQ.DOWNHILL) HAD_OUT = .TRUE.
C
	   ELSE
	      IF (FLOW.EQ.DOWNHILL) HAD_IN = .TRUE.
	      IF (FLOW.EQ.UPHILL) HAD_OUT = .TRUE.
	   ENDIF
C
	   IARM = ARM_I(ARM_NXT,IARM)
	   GOTO 70
C
C All arms directed - report any illegal source or sink to LITES2 file
C
80	   IF (.NOT.(HAD_IN .AND. HAD_OUT)) THEN	! source or sink found
	      IF (EXPERIMENTING) GOTO 999		! fail immediately
	      IF (.NOT.NO_POSSIBLE_FLOW) GOTO 999
C
	      IF (HAD_OUT) N_SOURCES = N_SOURCES+1
	      IF (HAD_IN)  N_SINKS   = N_SINKS+1	! write LITES2 cmds
C
	      FSN  = NOD_I(NOD_FSN,INOD)
C
	      IF (HAD_LITES2) CALL LITES_MESS(
     &		'Illegal river source or sink',
     &	         NOD_R(NOD_XXX,INOD),NOD_R(NOD_YYY,INOD),
     &	         LITES_SHOWPOINT,FSN)
	   ENDIF
C
90	CONTINUE
C
	IF (N_SOURCES.GT.0 .OR. N_SINKS.GT.0) THEN
	   IF (N_SOURCES.GT.0)
     &	      CALL LSL_PUTMSG(I3D__ILLEGALSOURCE,N_SOURCES)
C
	   IF (N_SINKS.GT.0) CALL LSL_PUTMSG(I3D__ILLEGALSINK,N_SINKS)
	   GOTO 999
	ENDIF
C
C ----------------------------------------------------------------------
C Set node heights using flows and point heights already set
C
	OK = HEIGHT_RIVER_NODES(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &		PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	IF (.NOT.OK) GOTO 999
C
C ----------------------------------------------------------------------
C Check for ANY river flow cycles or indirect height inflections
C according to the nodes heights as set above
C
C Set all NOD_BEF = .FALSE.
C
	DO 95 INOD = 1,NUM_NODS
	   NOD_L(NOD_BEF,INOD) = .FALSE.
95	CONTINUE
C
C Find next unvisited RIVER node
C
100	LEVEL = 0				! zero stack level
	IMIN_HT = IFF_ABSENT			! no ht yet defined
C
	DO 110 INOD = 1,NUM_NODS
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 110	! skip NOD if deleted
	   IF (NOD_L(NOD_BEF,INOD)) GOTO 110	! skip NOD if visited
	   IF (NOD_I(NOD_GRP,INOD).NE.RIVER) GOTO 110
	   IMIN_HT = NOD_I(NOD_ZZZ,INOD)
	   NXT_NOD = INOD
	   GOTO 155				! put node onto stack
110	CONTINUE
C
	GOTO 170		! all nodes visited - check complete
C
C Find next path downhill from this node
C
120	CUR_NOD = STN_I(STN_NOD,LEVEL)		! node visited prev
	IMIN_HT = STN_I(STN_ZZZ,LEVEL)		! min ht on node stak
	IARM = STN_I(STN_ARM,LEVEL)		! next arm to try
	CAN_PUSH = .FALSE.
	GOTO 130
C
150	IARM = ARM_I(ARM_NXT,IARM)		! next arm from same nod
130	IF (IARM.EQ.NIL) GOTO 160	! no more arms - pop node stack
	ILNK = ARM_I(ARM_LNK,IARM)
	FLOW = LNK_I(LNK_FLO,ILNK)
	IF (FLOW.EQ.UNDIRECTED) GOTO 150	! try next arm
C
	IF (LNK_I(LNK_ND1,ILNK).EQ.CUR_NOD) THEN
	   IF (FLOW.EQ.UPHILL) GOTO 150		! try next arm
	   NXT_NOD = LNK_I(LNK_ND2,ILNK)
C
	ELSE
	   IF (FLOW.EQ.DOWNHILL) GOTO 150	! try next arm
	   NXT_NOD = LNK_I(LNK_ND1,ILNK)
	ENDIF
C
C Check downhill path so far has not formed a cycle
C
	DO 140 ILEV = 1,LEVEL
	   IF (NXT_NOD.EQ.STN_I(STN_NOD,ILEV)) THEN ! river cycle found
	      IF (EXPERIMENTING) GOTO 999	! fail immediately
	      IF (.NOT.NO_POSSIBLE_FLOW) GOTO 999
	      CALL LSL_PUTMSG(I3D__ILLEGALCYCLE)
C
	      FSN = NOD_I(NOD_FSN,NXT_NOD)
C
	      IF (HAD_LITES2) CALL LITES_MESS(
     &		'Illegal cycle through node indicated',
     &	         NOD_R(NOD_XXX,NXT_NOD),NOD_R(NOD_YYY,NXT_NOD),
     &	         LITES_SHOWPOINT,FSN)
	      GOTO 999				! exit immediately
	   ENDIF
140	CONTINUE
C
C Check downhill path so far has height strictly decreasing all the way
C
	INOD_HT = NOD_I(NOD_ZZZ,NXT_NOD)
	IF (INOD_HT.NE.IFF_ABSENT.AND.IMIN_HT.NE.IFF_ABSENT) THEN
C
C Check for inflection (new node min ht >= min node ht on stack)
C
	   INFLECTION = NOD_HT.GT.MIN_HT
	   IF (INFLECTION) THEN
	      IF (EXPERIMENTING) GOTO 999	! fail immediately
	      IF (.NOT.NO_POSSIBLE_FLOW) GOTO 999
	      CALL LSL_PUTMSG(I3D__INDIRECTINFLECT)
C
	      FSN = NOD_I(NOD_FSN,CUR_NOD)
C
	      IF (HAD_LITES2) CALL LITES_MESS(
     &		'Indirect river height inflection at node indicated',
     &	         NOD_R(NOD_XXX,CUR_NOD),NOD_R(NOD_YYY,CUR_NOD),
     &	         LITES_HEIGHTPOINT,FSN)
	      GOTO 999				! exit immediately
	   ENDIF
C	   MIN_HT = MIN(MIN_HT,NOD_HT)
	ENDIF
C
	IF (NOD_L(NOD_BEF,NXT_NOD)) GOTO 150	! node visted before
C
155	CAN_PUSH = .TRUE.	! no height inflection or cycle found
C
160	IF (CAN_PUSH) THEN			! push node stack
	   IF (LEVEL.GT.0) STN_I(STN_ARM,LEVEL) = ARM_I(ARM_NXT,IARM)
	   LEVEL = LEVEL+1			! incr stack level
	   NOD_L(NOD_BEF,NXT_NOD) = .TRUE.	! mark node visited
	   STN_I(STN_NOD,LEVEL) = NXT_NOD	! node visited
C
C Next arm to try leaving on
	   STN_I(STN_ARM,LEVEL) = NOD_I(NOD_ARM,NXT_NOD)
	   STN_I(STN_ZZZ,LEVEL) = IMIN_HT	! min node ht so far
	   GOTO 120
C
	ELSE IF (LEVEL.GT.1) THEN		! pop node stack
	   LEVEL = LEVEL-1			! decr stack level
	   GOTO 120
	ENDIF
C
	GOTO 100		! stack empty - find next unvisited node
C
C ----------------------------------------------------------------------
C Check whether all river links have been directed
C
170	FLOW_COMPLETE = .TRUE.
C
	DO 350 ILNK = 1,NUM_LNKS
	   IF (LNK_I(LNK_GRP,ILNK).NE.RIVER) GOTO 350
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 350
	   IF (LNK_I(LNK_FLO,ILNK).EQ.UNDIRECTED) THEN
	      FLOW_COMPLETE = .FALSE.
	      GOTO 400
	   ENDIF
350	CONTINUE
C
400	CHECK_FLOW = .TRUE.
C
C If experimenting and complete flow not to be flow used, then unset all
C flow directions set 
C
999	IF (EXPERIMENTING .AND.
     &		.NOT.(HOLD_COMPLETE_FLOW.AND.FLOW_COMPLETE)) THEN
	   DO 500 ILNK = 1,NUM_LNKS
	      IF (LNK_L(LNK_BEF,ILNK)) LNK_I(LNK_FLO,ILNK) = UNDIRECTED
500	   CONTINUE
	ENDIF
C
	RETURN
	END
C
