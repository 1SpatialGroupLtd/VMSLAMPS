C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-01 19:25:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FIND_LEGAL_FLOW(
     &		FLOW_UNIQUE,
     &		CHECK_TERMINAL_DIRECTIONS_OK,
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	FIND_LEGAL_FLOW
***	IDENT	01MR91
C
C Copyright Laser Scan Laboratories, Cambridge, England.
C 
C Created						ACM 08-Jan-1989
C
CMOD967	Exit after SET_INITIAL_FLOW on error (eg. INFLECTION) found 
C	rather than proceeding into infinite loop
C							 JB 25-Feb-1991
C Description
C	Attempts to find a complete legal river/ridgeline network flow
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Data out
	LOGICAL		FLOW_UNIQUE
	LOGICAL		CHECK_TERMINAL_DIRECTIONS_OK
C
C Workspace
	LOGICAL		INITIAL_FLOW_LEGAL
	LOGICAL		FLOW_LEGAL
	INTEGER		ILNK
C
C Functions
	LOGICAL		SET_INITIAL_FLOW
	LOGICAL		GUESS_COMPLETE_FLOW
	LOGICAL		CHECK_FLOW
	LOGICAL		CHECK_TERMINAL_DIRECTIONS
C
C ----------------------------------------------------------------------
C TRUE = complete legal flow can be (and therefore is) found (flow is
C complete if all river links are directed and every node is heighted).
C
C
	CHECK_TERMINAL_DIRECTIONS_OK = .TRUE.
C
C Fix flow determined along each separate link. This will be legal only
C if no within-link river height-inflection points are found, but a flow
C will still be estimated for river links containing height inflections
C in any case.
C
	INITIAL_FLOW_LEGAL = SET_INITIAL_FLOW(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
C Trial exit
C
C	IF (.NOT.INITIAL_FLOW_LEGAL) GOTO 999
C
C Complete flow determined by flow so far, according to rules about
C what goes on with flows at junctions, etc., even if river height
C inflections have been found, so that unheighted onearms, illegal
C sources or sinks, and indirect river flow path inflections can also be
C checked for. 
C
	FLOW_LEGAL = CHECK_FLOW(
     &		.FALSE.,		! flow not experimental
     &		.TRUE.,			! hold flow if unique
     &		.FALSE.,		! max flow constraint
     &		FLOW_UNIQUE,		! is flow unique?
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
	IF (FLOW_UNIQUE) GOTO 999
C
	IF (.NOT.FLOW_LEGAL)
     &	   FLOW_LEGAL = CHECK_FLOW(
     &		.FALSE.,		! flow not experimental
     &		.TRUE.,			! hold flow if unique
     &		.TRUE.,			! no max flow constraint
     &		FLOW_UNIQUE,		! is flow unique?
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
	IF (FLOW_UNIQUE .OR. .NOT.FLOW_LEGAL) GOTO 999
C
C Check for undirected terminal river links
C
	CHECK_TERMINAL_DIRECTIONS_OK = CHECK_TERMINAL_DIRECTIONS(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
	IF (.NOT.CHECK_TERMINAL_DIRECTIONS_OK) GOTO 999
C
C Give up before any previous errors create an infinite loop
C
	FIND_LEGAL_FLOW = INITIAL_FLOW_LEGAL .AND. FLOW_LEGAL
	IF (.NOT.FIND_LEGAL_FLOW) GOTO 1000
C
C Mark all links whose flow directions have been set so far
C
	DO 10 ILNK = 1,NUM_LNKS
	   LNK_L(LNK_GES,ILNK) = LNK_I(LNK_FLO,ILNK).EQ.UNDIRECTED
10	CONTINUE
C
C Search for a consistent complete flow, guessing a flow direction
C for undirected river links, until all river links are directed, or
C no complete legal can be found.
C
	FLOW_LEGAL = GUESS_COMPLETE_FLOW(
     &		FLOW_UNIQUE,
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
999	FIND_LEGAL_FLOW = INITIAL_FLOW_LEGAL .AND. FLOW_LEGAL .AND.
     &	                  CHECK_TERMINAL_DIRECTIONS_OK
C
1000	RETURN
	END
C
