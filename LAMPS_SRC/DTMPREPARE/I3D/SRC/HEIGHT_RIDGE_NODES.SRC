	LOGICAL FUNCTION HEIGHT_RIDGE_NODES(
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	HEIGHT_RIDGE_NODES
***	IDENT	13FE89
C
C Copyright Laser Scan Laboratories, Cambridge, England.
C 
C Created						ACM 08-Jan-1989
C
C Description
C	Attempts to set a node height for each ridge node.
C
C Algorithm
C	For each node do
C	   skip to next node if not ridge node
C	   skip to next node if heighted
C	   find any heighted point out along one arm
C	   find any heighted point out along any other arm
C	   height all nodes along the flow path between these two
C	      heighted points using linear interpolation
C	end do
C	If had error(s) then report error and fail
C
C ----------------------------------------------------------------------
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	LOGICAL		FREE_END		! free end/one arm node
	LOGICAL		END_HEIGHTS_CHECKED	! end hts = node hts?
	LOGICAL		OK			! ok?
C
	INTEGER		INET,INOD,IARM,ILNK,IPNT! array indices
	INTEGER		AM1,AM2			! arm indices
	INTEGER		ND1,ND2			! node indices
	INTEGER		FLOW			! flow number
	INTEGER		STA_PNT,FIN_PNT		! end PNT indices
	INTEGER		N_A_LINKS		! num links upstream
	INTEGER		N_B_LINKS		! num links downstream
C
	REAL		A_HT,B_HT		! heights found
	REAL		A_DIST,B_DIST	! path dist to hts found
C
	SAVE END_HEIGHTS_CHECKED
	DATA END_HEIGHTS_CHECKED/.FALSE./
C
C Functions
	LOGICAL		FIND_HEIGHTED_RIDGE_POINT
	LOGICAL		INTERPOLATE_NODE_HEIGHTS
C
C ----------------------------------------------------------------------
C
	HEIGHT_RIDGE_NODES = .FALSE.
C
C ----------------------------------------------------------------------
C
	DO 20 INOD = 1,NUM_NODS
C
CC Skip to next node if node is deleted
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 20
C
C Skip to next node if node is not ridge node
	   IF (NOD_I(NOD_GRP,INOD).NE.RIDGE) GOTO 20
C
C Skip to next node if heighted
	   IF (NOD_I(NOD_ZZZ,INOD).NE.IFF_ABSENT) GOTO 20
C
C Skip if node has less than 2 arms
C
	   AM1 = NOD_I(NOD_ARM,INOD)
	   AM2 = ARM_I(ARM_NXT,AM1)
	   IF (AM2.EQ.NIL) GOTO 20
C
C Find any heighted point out along one arm
C
	   OK = FIND_HEIGHTED_RIDGE_POINT(
     &		UPHILL,INOD,AM1,
     &		A_DIST,A_HT,N_A_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
	   IF (N_A_LINKS.EQ.0) GOTO 20		! no ht defined
C
C Find any heighted point out along another arm
C
	   OK = FIND_HEIGHTED_RIDGE_POINT(
     &		DOWNHILL,INOD,AM2,
     &		B_DIST,B_HT,N_B_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
	   IF (N_B_LINKS.EQ.0) GOTO 20		! no ht defined
C
C Height all nodes along the path between these two heighted points
C
	   OK = INTERPOLATE_NODE_HEIGHTS(
     &		A_DIST,B_DIST,A_HT,B_HT,
     &		N_A_LINKS,N_B_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
C
20	CONTINUE
C
	HEIGHT_RIDGE_NODES = .TRUE.
999	RETURN
	END
