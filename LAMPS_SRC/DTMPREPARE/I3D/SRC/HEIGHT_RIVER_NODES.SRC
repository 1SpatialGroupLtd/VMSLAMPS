C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-15 19:38:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION HEIGHT_RIVER_NODES(
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	HEIGHT_RIVER_NODES
***	IDENT	13FE89
C
C Copyright Laser Scan Laboratories, Cambridge, England.
C 
C Created						ACM 08-Jan-1989
C
C Description
C	Attempts to set a node height for each river node.
C
C Algorithm
C	If first call then
C	   ensure all link ends have height = corresponding node height
C	      
C	For each node do
C	   skip to next node if not river node
C	   skip to next node if heighted
C	   find the lowest heighted point amongst all possible
C	      unheighted paths upstream
C	   find the highest heighted point amongst all possible
C	      unheighted paths downstream
C	   height all nodes along the flow path between these two
C	      heighted points using linear interpolation
C	end do
C	If had error(s) then report error and fail
C
C ----------------------------------------------------------------------
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	LOGICAL		FREE_END		! free end/one arm node
	LOGICAL		END_HEIGHTS_CHECKED	! end hts = node hts?
	LOGICAL		OK			! ok?
C
	INTEGER		INET,INOD,IARM,ILNK,IPNT! array indices
	INTEGER		ND1,ND2			! nodes indices
	INTEGER		FLOW			! flow number
	INTEGER		STA_PNT,FIN_PNT		! end PNT indices
	INTEGER		N_UP_LINKS		! num links upstream
	INTEGER		N_DN_LINKS		! num links downstream
C
	REAL		UP_HT,DN_HT		! heights found
	REAL		UP_DIST,DN_DIST	! path dist to hts found
C
	SAVE END_HEIGHTS_CHECKED
	DATA END_HEIGHTS_CHECKED/.FALSE./
C
C Functions
	LOGICAL		FIND_HEIGHTED_RIVER_POINT
	LOGICAL		INTERPOLATE_NODE_HEIGHTS
C
C ----------------------------------------------------------------------
C
	HEIGHT_RIVER_NODES = .FALSE.
C
	IF (END_HEIGHTS_CHECKED) GOTO 12
C
C ----------------------------------------------------------------------
C Ensure that all link ends have height = corresponding node height
C
	DO 5 ILNK = 1,NUM_LNKS
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 5
C
	   INOD = LNK_I(LNK_ND1,ILNK)
	   IF (NOD_I(NOD_ZZZ,INOD).NE.IFF_ABSENT) THEN
	      IPNT = LNK_I(LNK_STA,ILNK)
	      PNT_R(PNT_ZZZ,IPNT) = NOD_R(NOD_ZZZ,INOD)
	   ENDIF
C
	   INOD = LNK_I(LNK_ND2,ILNK)
	   IF (NOD_I(NOD_ZZZ,INOD).NE.IFF_ABSENT) THEN
	      IPNT = LNK_I(LNK_FIN,ILNK)
	      PNT_R(PNT_ZZZ,IPNT) = NOD_R(NOD_ZZZ,INOD)
	   ENDIF
5	CONTINUE
	END_HEIGHTS_CHECKED = .TRUE.
	GOTO 14
C
C ----------------------------------------------------------------------
C Start by setting all heights previously set by HEIGHT_RIVER_NODES to
C IFF_ABSENT 
C
12	DO 13 INOD = 1,NUM_NODS
	   IF (NOD_L(NOD_VIS,INOD)) NOD_I(NOD_ZZZ,INOD) = IFF_ABSENT
13	CONTINUE
C
C ----------------------------------------------------------------------
C
C Set all NOD_VIS = .FALSE. All nodes visited by
C FIND_HEIGHTED_RIVER_POINT will have NOD_VIS set = .TRUE.. If any such
C node can ever be heighted then it should be heighted after the first
C time it is encountered, so if it is ever encountered again, it can be
C skipped to save time. 
C
14	DO 15 INOD = 1,NUM_NODS
	   NOD_L(NOD_VIS,INOD) = .FALSE.
15	CONTINUE
C
C ----------------------------------------------------------------------
C Try to find a height for each unheighted node
C
	DO 20 INOD = 1,NUM_NODS
C
CC Skip to next node if node is deleted
C	   IF (NOD_L(NOD_DEL,INOD)) GOTO 20
C
C Skip to next node if node is not river node
	   IF (NOD_I(NOD_GRP,INOD).NE.RIVER) GOTO 20
C
C Skip to next node if heighted
	   IF (NOD_I(NOD_ZZZ,INOD).NE.IFF_ABSENT) GOTO 20
C
C Skip to next node if node seen before by FIND_HEIGHTED_RIVER_POINT
C	   IF (NOD_L(NOD_VIS,INOD)) GOTO 20
C
C Find the lowest heighted point amongst all possible unheighted
C paths upstream
C
	   OK = FIND_HEIGHTED_RIVER_POINT(
     &	UPHILL,INOD,
     &	UP_DIST,UP_HT,N_UP_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
	   IF (N_UP_LINKS.EQ.0) GOTO 20		! no up ht defined
C
C Find the heighest heighted point amongst all possible unheighted
C paths downstream
C
	   OK = FIND_HEIGHTED_RIVER_POINT(
     &	DOWNHILL,INOD,
     &	DN_DIST,DN_HT,N_DN_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
	   IF (N_DN_LINKS.EQ.0) GOTO 20		! no down ht defined
C
C Height all nodes along the flow path between these two heighted points
C
	   OK = INTERPOLATE_NODE_HEIGHTS(
     &	UP_DIST,DN_DIST,UP_HT,DN_HT,
     &	N_UP_LINKS,N_DN_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OK) GOTO 999
C
20	CONTINUE
C
	HEIGHT_RIVER_NODES = .TRUE.
999	RETURN
	END

