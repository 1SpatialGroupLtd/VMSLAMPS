	LOGICAL FUNCTION FIND_HEIGHTED_RIDGE_POINT(
     &		FLOW_CODE,ROOT_NODE,ROOT_ARM,
     &		PATH_DIST_FOUND,HEIGHT_FOUND,N_LINKS,
     &	NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &	PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &	MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	FIND_HEIGHTED_RIDGE_POINT
***	IDENT	13FE89
C
C Copyright Laser Scan Laboratories, Cambridge, England.
C 
C Created						ACM 09-Feb-1989
C
C Description
C	Finds heighted point from node ROOT_NODE, starting out along
C	arm ROOT_ARM, without any regard to link flow direction.
C
C	Stores path leading to heighted point found as a list of the
C	indices of the links along this path. 
C
C ----------------------------------------------------------------------
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Data in
	INTEGER		FLOW_CODE	! store path in PUP or PDN?
	INTEGER		ROOT_NODE	! node from which path to start
	INTEGER		ROOT_ARM	! arm along which path to start
C
C Data out
	REAL		PATH_DIST_FOUND	! path distance to ht found
	REAL		HEIGHT_FOUND	! height found
	INTEGER		N_LINKS		! num links in path found
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		INOD,ILNK,IARM,IPNT	! array indices
	INTEGER		STA_PNT,FIN_PNT	! link PNT start/fin indices
	REAL		DIST		! dist along link to heighted pt
	REAL		PATH_DIST	! dist from ROOT_NODE to "     "
C
C ----------------------------------------------------------------------
	FIND_HEIGHTED_RIDGE_POINT = .FALSE.
C
C Initialise
C
	HEIGHT_FOUND = IFF_ABSENT
	N_LINKS = 0
	PATH_DIST = 0
	PATH_DIST_FOUND = 0
	INOD = ROOT_NODE
	ILNK = ARM_I(ARM_LNK,ROOT_ARM)
C
C Check for height defined along current link
C
10	STA_PNT = LNK_I(LNK_STA,ILNK)
	FIN_PNT = LNK_I(LNK_FIN,ILNK)
	DIST = 0
	IF (LNK_I(LNK_ND1,ILNK).EQ.INOD) THEN
	   IPNT = STA_PNT
20	   DIST = DIST+PNT_R(PNT_LEN,IPNT)
	   IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 30
	   HEIGHT_FOUND = PNT_R(PNT_ZZZ,IPNT)
	   GOTO 60
30	   IF (IPNT.NE.FIN_PNT) THEN
	      IPNT = PNT_I(PNT_NXT,IPNT)
	      GOTO 20
	   ENDIF
	   IF (NOD_I(NOD_ZZZ,LNK_I(LNK_ND2,ILNK)).NE.IFF_ABSENT) THEN
	      HEIGHT_FOUND = NOD_R(NOD_ZZZ,LNK_I(LNK_ND2,ILNK))
	      GOTO 60
	   ENDIF
	ELSE
	   IPNT = FIN_PNT
40	   IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 50
	   HEIGHT_FOUND = PNT_R(PNT_ZZZ,IPNT)
	   GOTO 60
50	   DIST = DIST+PNT_R(PNT_LEN,IPNT)
	   IF (IPNT.NE.STA_PNT) THEN
	      IPNT = PNT_I(PNT_PRV,IPNT)
	      GOTO 40
	   ENDIF
	   IF (NOD_I(NOD_ZZZ,LNK_I(LNK_ND1,ILNK)).NE.IFF_ABSENT) THEN
	      HEIGHT_FOUND = NOD_R(NOD_ZZZ,LNK_I(LNK_ND1,ILNK))
	      GOTO 60
	   ENDIF
	ENDIF
C
C Store the path leading to this point as a list of the indices of the
C links along this path
C
60	PATH_DIST_FOUND = PATH_DIST+DIST
C
	N_LINKS = N_LINKS+1
	IF (FLOW_CODE.EQ.UPHILL) THEN
	   PUP_I(PUP_LNK,N_LINKS) = ILNK
	ELSE
	   PDN_I(PDN_LNK,N_LINKS) = ILNK
	ENDIF
C
C If no heighted point found yet then find next link to look along
C
	IF (HEIGHT_FOUND.EQ.IFF_ABSENT) THEN
	   IF (LNK_I(LNK_ND1,ILNK).EQ.INOD) THEN
	      INOD = LNK_I(LNK_ND2,ILNK)
	   ELSE
	      INOD = LNK_I(LNK_ND1,ILNK)
	   ENDIF
	   IARM = NOD_I(NOD_ARM,INOD)
	   IF (ARM_I(ARM_LNK,IARM).EQ.ILNK) THEN
	      IARM = ARM_I(ARM_NXT,IARM)
	      IF (IARM.EQ.NIL) GOTO 999		! unheighted free end
	   ENDIF
	   ILNK = ARM_I(ARM_LNK,IARM)
	   GOTO 10
	ENDIF
C	
	FIND_HEIGHTED_RIDGE_POINT = .TRUE.
999	RETURN
	END
