	LOGICAL FUNCTION ALLOCATE_MEMORY(
     &		MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS,MAX_PNTS)
C
***	MODULE	ALLOCATE_MEMORY
***	IDENT	13FE89
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C
C Modified from ALLOCATE_MEMORY in ILINK module
C
C	Modified by:				ALB	8-Apr 1988
C	Original Creator: 			ACM	  Jan 1986
C
C This routine is designed to allocate virtual memory to the internal
C arrays used in module I3D.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE		'($SSDEF)'
	INCLUDE		'LSL$CMNI3D:I3DMSG.PAR'
C
C Commons
	INCLUDE		'LSL$CMNI3D:CONTROL.CMN'
C
C Data in
	INTEGER		MAX_NODS	! max num of nodes 
	INTEGER		MAX_ARMS	! max num of arms  
	INTEGER		MAX_LNKS	! max num of links 
	INTEGER		MAX_STNS	! max num of node stacks
	INTEGER		MAX_STLS	! max num of link stacks
	INTEGER		MAX_PNTS	! num of input points + max num
C                                       ! of terrain intersection points
C Workspace
	INTEGER*4	N_PAGES		! num pages requested
	INTEGER*4	STORE_SIZE	! workspace size in bytes
	INTEGER*4	RETADR(2)	! ends of store alloc, in bytes
	INTEGER*4	VM_ALLOC	! actual num of bytes allocated
	INTEGER*4	NOD_SIZE	! NOD   array size/bytes
	INTEGER*4	ARM_SIZE	! ARM     "     "   "   "
	INTEGER*4	LNK_SIZE	! LNK     "     "   "   "
	INTEGER*4	NET_SIZE	! NET     "     "   "   "
	INTEGER*4	PUP_SIZE	! PUP     "     "   "   "
	INTEGER*4	PDN_SIZE	! PDN     "     "   "   "
	INTEGER*4	MNX_SIZE	! MNX     "     "   "   "
	INTEGER*4	PNT_SIZE	! PNT     "     "   "   "
	INTEGER*4	STN_SIZE	! Node stack array size/bytes
	INTEGER*4	STL_SIZE	! Link stack array size/bytes
C
	INTEGER*4	RET_CODE	! return code
C
C Functions
	INTEGER*4	SYS$EXPREG
C 
C **********************************************************************
C
	ALLOCATE_MEMORY = .TRUE.	! assume success
C 
C ......................................................................
C
C Set up basic dimensions according to process required
C
C Calculate bytes of memory required for links, arms and nodes
C
	LNK_SIZE =	4 * LNK_ATTRIBS		* MAX_LNKS
	ARM_SIZE =	4 * ARM_ATTRIBS		* MAX_ARMS
	NOD_SIZE =	4 * NOD_ATTRIBS		* MAX_NODS
	STN_SIZE =	4 * STN_ATTRIBS		* MAX_STNS
	STL_SIZE =	4 * STL_ATTRIBS		* MAX_STLS
	MNX_SIZE =	4 * MNX_ATTRIBS		* MAX_LNKS 
	PNT_SIZE =	4 * PNT_ATTRIBS		* MAX_PNTS
	IF (MODE_INTERPOLATE.OR.MODE_FLOW) THEN
	   NET_SIZE =	4 * NET_ATTRIBS		* MAX_LNKS
	   PUP_SIZE =	4 * PUP_ATTRIBS		* MAX_LNKS
	   PDN_SIZE =	4 * PDN_ATTRIBS		* MAX_LNKS
	ELSE
	   NET_SIZE =	4 * NET_ATTRIBS
	   PUP_SIZE =	4 * PUP_ATTRIBS
	   PDN_SIZE =	4 * PDN_ATTRIBS
	ENDIF

C Find total storage requirement in bytes

	STORE_SIZE = 
     &	  NOD_SIZE + ARM_SIZE + LNK_SIZE + NET_SIZE + PUP_SIZE +
     &	  STN_SIZE + STL_SIZE + MNX_SIZE + PNT_SIZE + PDN_SIZE

C Allocate workspace

	N_PAGES = (STORE_SIZE-1)/512+1
	RET_CODE = SYS$EXPREG(%VAL(N_PAGES),RETADR,,)

C Find out if get virtual memory call was successful

	IF (RET_CODE.NE.SS$_NORMAL) THEN
	   IF (RET_CODE.NE.SS$_EXQUOTA) THEN
	      CALL LSL_PUTMSG(RET_CODE)
	      ALLOCATE_MEMORY = .FALSE.		! command failed
	      GOTO 999
	   ELSE
	      VM_ALLOC = RETADR(2) - RETADR(1) + 1
	      IF (VM_ALLOC.LT.STORE_SIZE) THEN	! insuff VM for process
	         CALL LSL_PUTMSG(I3D__SPACELIM,VM_ALLOC,STORE_SIZE)
	         ALLOCATE_MEMORY = .FALSE.	! command failed
		 GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
	
C Set up array start-addreses

	NOD_ADDRESS		= RETADR(1)
	ARM_ADDRESS		= NOD_ADDRESS + NOD_SIZE
	LNK_ADDRESS		= ARM_ADDRESS + ARM_SIZE
	NET_ADDRESS		= LNK_ADDRESS + LNK_SIZE
	PUP_ADDRESS		= NET_ADDRESS + NET_SIZE
	PDN_ADDRESS		= PUP_ADDRESS + PUP_SIZE
	STN_ADDRESS		= PDN_ADDRESS + PDN_SIZE
	STL_ADDRESS		= STN_ADDRESS + STN_SIZE
	MNX_ADDRESS		= STL_ADDRESS + STL_SIZE
	PNT_ADDRESS		= MNX_ADDRESS + MNX_SIZE
C
999	RETURN
	END
