	LOGICAL FUNCTION SET_INITIAL_FLOW(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,PUP_I,
     &		PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	SET_INITIAL_FLOW
***	IDENT	26AU93
C
C	Copyright Laser-Scan, Cambridge, England.
C
C	Created						ACM 08-Jan-1989
C
CMOD1288 Pass FSN to LITES_MESS				 JB 25-Aug-1993
C
C Description: Sets flows determined along each separate river link
C
C Algorithm
C	Set flow into (all) min ht free ends and out from (all) max ht
C	free ends.
C
C	Set flow direction to flow direction of max link length, for
C	each link.
C
C	For each link now directed, check for changes in local flow
C	direction, and indicate any points at which flow changes.
c
C ----------------------------------------------------------------------
C TRUE = flow set is not illegal
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
	INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Workspace
	INTEGER		INET,IARM,ILNK,IPNT	! various array indices
	INTEGER		IMN,IMX,FSN		! min and max ht nods in net
	INTEGER		JMN,JMX,KMN,KMX	
	INTEGER		LOCAL_FLOW,OVERALL_FLOW
	INTEGER		N_UPDOWN_RIVERS,N_UPDOWNS
	INTEGER		STA_PNT,FIN_PNT
	LOGICAL		HAD_HGT1,HAD_HGT2
	LOGICAL		HAD_UPDOWN,WAS_CORRECT_FLOW,TERMINAL
	REAL		UPHILL_LEN,DOWNHILL_LEN
	REAL		HGT1,HGT2
C
C ----------------------------------------------------------------------
C Set flow into min ht free river end(s) and out from max ht free river
C end(s) in each network component.
C
	DO 5 ILNK = 1,NUM_LNKS			! initialise undirected
	   LNK_I(LNK_FLO,ILNK) = UNDIRECTED
5	CONTINUE
C
	DO 60 INET = 1,NUM_NETS
	   IF (NET_I(NET_GRP,INET).NE.RIVER) GOTO 60
	   JMN = 0
	   IMN = NET_I(NET_IMN,INET)		! min height node index
	   IF (IMN.EQ.NIL) GOTO 60		! no node heighted
10	   IARM = NOD_I(NOD_ARM,IMN)		! ARM of min ht node
	   TERMINAL = ARM_I(ARM_NXT,IARM).EQ.NIL
	   IF (TERMINAL) THEN			! terminal node?
20	      ILNK = ARM_I(ARM_LNK,IARM)	! LNK from arm
	      IF (LNK_I(LNK_ND1,ILNK).EQ.IMN) THEN
	         LNK_I(LNK_FLO,ILNK) = UPHILL
	      ELSE
	         LNK_I(LNK_FLO,ILNK) = DOWNHILL
	      END IF
	      IF (ARM_I(ARM_NXT,IARM).NE.NIL) THEN
	         IARM = ARM_I(ARM_NXT,IARM)
	         GOTO 20
	      ENDIF
	   ENDIF
C
C Also set flows for any other terminal nodes in this net sharing the
C same min ht
C
	   IMN = NET_I(NET_IMN,INET)		! min height node index
	   DO 30 KMN = JMN+1,NUM_NODS
	      IF (NOD_I(NOD_ZZZ,KMN).EQ.IFF_ABSENT) GOTO 30
	      IF (NOD_I(NOD_NET,KMN).EQ.INET.AND.
     &	          NOD_I(NOD_ZZZ,KMN).LE.NOD_I(NOD_ZZZ,IMN)) THEN
	         JMN = KMN
	         IMN = KMN
	         GOTO 10
	      ENDIF
30	   CONTINUE
C
	   JMX = 0
	   IMX = NET_I(NET_IMX,INET)		! max height node index
35	   IARM = NOD_I(NOD_ARM,IMX)		! ARM of max ht node
	   TERMINAL = ARM_I(ARM_NXT,IARM).EQ.NIL
	   IF (TERMINAL) THEN			! terminal node
40	      ILNK = ARM_I(ARM_LNK,IARM)	! LNK from arm
	      IF (LNK_I(LNK_ND1,ILNK).EQ.IMX) THEN
	         LNK_I(LNK_FLO,ILNK) = DOWNHILL
	      ELSE
	         LNK_I(LNK_FLO,ILNK) = UPHILL
	      END IF
	      IF (ARM_I(ARM_NXT,IARM).NE.NIL) THEN
	         IARM = ARM_I(ARM_NXT,IARM)
	         GOTO 40
	      ENDIF
	   ENDIF
C
C Also set flows for any other terminal nodes in this net sharing the
C same max ht
	   IMX = NET_I(NET_IMX,INET)		! max height node index
	   DO 50 KMX = JMX+1,NUM_NODS
	      IF (NOD_I(NOD_ZZZ,KMX).EQ.IFF_ABSENT) GOTO 50
	      IF (NOD_I(NOD_NET,KMX).EQ.INET.AND.
     &	          NOD_R(NOD_ZZZ,KMX).GE.NOD_R(NOD_ZZZ,IMX)) THEN
	         JMX = KMX
	         IMX = KMX
	         GOTO 35
	      ENDIF
50	   CONTINUE
C
60	CONTINUE
C
C ----------------------------------------------------------------------
C Set flow direction to flow direction of max link length, for each link
C
	DO 80 ILNK = 1,NUM_LNKS
	   IF (LNK_I(LNK_GRP,ILNK).NE.RIVER) GOTO 80
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 80
	   HAD_HGT1 = .FALSE.
	   HAD_HGT2 = .FALSE.
	   DOWNHILL_LEN = 0
	   UPHILL_LEN = 0
C
	   DO 70 IPNT = LNK_I(LNK_STA,ILNK),LNK_I(LNK_FIN,ILNK)
	      IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 70
C
	      IF (HAD_HGT1) THEN
	         HGT2 = PNT_R(PNT_ZZZ,IPNT)
	   	 HAD_HGT2 = .TRUE.
	         IF (HGT1.GT.HGT2) THEN
	            DOWNHILL_LEN = DOWNHILL_LEN+PNT_R(PNT_LEN,IPNT)
	         ELSE
	            UPHILL_LEN = UPHILL_LEN+PNT_R(PNT_LEN,IPNT)
	         END IF
	      ELSE				! first heighted point
	         HGT1 = PNT_R(PNT_ZZZ,IPNT)
	         HAD_HGT1 = .TRUE.
	      END IF
70	   CONTINUE
C
	   IF (DOWNHILL_LEN.GT.UPHILL_LEN) THEN
	      LNK_I(LNK_FLO,ILNK) = DOWNHILL
	   ELSEIF (UPHILL_LEN.NE.0) THEN
	      LNK_I(LNK_FLO,ILNK) = UPHILL
	   END IF
80	CONTINUE
C
C ----------------------------------------------------------------------
C For each link now directed, check for sections which flow in the
C opposite direction to the overall link flow. Indicate points at the
C end of any such sections.
C
	N_UPDOWN_RIVERS = 0
	N_UPDOWNS = 0
C
	DO 120 ILNK = 1,NUM_LNKS
	   IF (LNK_I(LNK_GRP,ILNK).NE.RIVER) GOTO 120
C	   IF (LNK_L(LNK_DEL,ILNK)) GOTO 120
	   OVERALL_FLOW = LNK_I(LNK_FLO,ILNK)
	   IF (OVERALL_FLOW.EQ.UNDIRECTED) GOTO 120
C
	   HAD_HGT1 = .FALSE.
	   HAD_HGT2 = .FALSE.
	   HAD_UPDOWN = .FALSE.
	   WAS_CORRECT_FLOW = .TRUE.
C
	   STA_PNT = LNK_I(LNK_STA,ILNK)
	   FIN_PNT = LNK_I(LNK_FIN,ILNK)
	   IPNT = STA_PNT
C
90	   IF (PNT_I(PNT_ZZZ,IPNT).EQ.IFF_ABSENT) GOTO 110
C
	   IF (HAD_HGT1) THEN
	      HGT2 = PNT_R(PNT_ZZZ,IPNT)
	      HAD_HGT2 = .TRUE.
	      IF (HGT1.GT.HGT2+COORD_TOL) THEN
	         LOCAL_FLOW = DOWNHILL
C
	      ELSEIF (HGT1.LT.HGT2-COORD_TOL) THEN
	         LOCAL_FLOW = UPHILL
C
	      ELSE
	         LOCAL_FLOW = UNDIRECTED
	      END IF
C
	      IF (LOCAL_FLOW.EQ.UNDIRECTED) GOTO 100
C
	      FSN = LNK_I(LNK_FSN,ILNK)
C
	      IF (LOCAL_FLOW.EQ.OVERALL_FLOW) THEN
	         WAS_CORRECT_FLOW = .TRUE.
C
	      ELSE
	         IF (WAS_CORRECT_FLOW) THEN
	            N_UPDOWNS = N_UPDOWNS+1
	            HAD_UPDOWN = .TRUE.
	            IF (HAD_LITES2) CALL LITES_MESS(
     &	               'River has reverse flow from inflection '//
     &	               'point indicated',
     &	               PNT_R(PNT_XXX,IPNT-1),PNT_R(PNT_YYY,IPNT-1),
     &	               LITES_SHOWPOINT,FSN)
	            WAS_CORRECT_FLOW = .FALSE.
	         ENDIF
	      ENDIF
100	      HGT1 = HGT2
C
	   ELSE					! first heighted point
	      HGT1 = PNT_R(PNT_ZZZ,IPNT)
	      HAD_HGT1 = .TRUE.
	   ENDIF
C
110	   IF (IPNT.NE.FIN_PNT) THEN		! loop for next PNT
	      IPNT = PNT_I(PNT_NXT,IPNT)
	      GOTO 90
	   ENDIF
C
	   IF (HAD_UPDOWN) N_UPDOWN_RIVERS = N_UPDOWN_RIVERS+1
120	CONTINUE
C
C ----------------------------------------------------------------------
C ok?
	SET_INITIAL_FLOW = .TRUE.
C
	IF (N_UPDOWNS.GT.0) THEN
	   CALL LSL_PUTMSG(I3D__INFLECTION,N_UPDOWNS,N_UPDOWN_RIVERS)
	   SET_INITIAL_FLOW = .FALSE.
	ENDIF
C
	RETURN
	END
C
