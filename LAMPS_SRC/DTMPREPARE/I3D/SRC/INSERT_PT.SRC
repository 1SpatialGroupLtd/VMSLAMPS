	LOGICAL FUNCTION INSERT_PT(
     &		IP,PNT_R,PNT_I,X_INT,Y_INT,HT,MAX_PNTS)
C
***	MODULE	INSERT_PT
***	IDENT	15JL92
C	
C Copyright Laser-Scan, Cambridge, England.
C 	
C Created 						ACM 20-Dec-1988
C
CMOD821							JMC 31-Oct-1989
C	  Added 'IMPLICIT NONE'. Declared variables X_NXT,Y_NXT,
C	  INTSECT_NUM
C
CMOD1126						 JB 14-Jul-1992
C	  Fix bug where a length was tested for being within tolerance,
C	  (.LT.), but not for being exactly equal to tolerance, causing a
C	  failure when the vector has been extended in INTSECT by exactly
C	  tolerance in a horizontal or vertical line.
C
	IMPLICIT NONE
C
C description
C	Inserts heighted intersection point into PNT linked list.
C	Will only create a new point when intersection is not within
C	TOUCH_TOL of an existing point, in which case this point is
C	heighted.
C
C Parameters
        INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
        INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
C
C common blocks
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C data in
	INTEGER		IP			! VEC index of start
	INTEGER		MAX_PNTS		! PNT_I dimension
	INTEGER		PNT_I(PNT_ATTRIBS,MAX_PNTS)
	REAL		PNT_R(PNT_ATTRIBS,MAX_PNTS)
	REAL		X_INT,Y_INT		! intersection coords
	REAL		HT			! intersection height
C
C Workspace
	REAL		DX,DY
	REAL		X_STA,Y_STA		! CB vec start coords
	REAL		X_FIN,Y_FIN		! CB vec end coords
	REAL		DIST,DISTNXT
        REAL            X_NXT,Y_NXT
	INTEGER		ICB,ICB_STOP,ICB_PRV,ICB_NXT,I_INS
        INTEGER         INTSECT_NUM
C
C functions
	LOGICAL		BETWEEN
C
C **********************************************************************
C
	INSERT_PT = .FALSE.
C
C set up start and end pt coords
C
	X_STA = PNT_R(PNT_XXX,IP)
	Y_STA = PNT_R(PNT_YYY,IP)
	X_FIN = PNT_R(PNT_XXX,IP+1)
	Y_FIN = PNT_R(PNT_YYY,IP+1)
C
C check intersection is on line segment between start & end pts
C exclusive, and do nothing if intersect is not between start and end
C inclusive 
C
	IF (.NOT. BETWEEN(X_STA,Y_STA,X_INT,Y_INT,
     &			  X_FIN,Y_FIN,TOUCH_TOL)) THEN
	   DX = X_INT-X_STA
	   DY = Y_INT-Y_STA
	   IF ( (DX*DX + DY*DY) .LE. TOUCH_TOL*TOUCH_TOL) THEN	  ! was .LT.
	     I_INS = IP
	     GOTO 40
	   ENDIF
C
	   DX = X_INT-X_FIN
	   DY = Y_INT-Y_FIN
	   IF ( (DX*DX + DY*DY) .LE. TOUCH_TOL*TOUCH_TOL) THEN	  ! was .LT.
	     I_INS = IP+1
	     GOTO 40
	   ENDIF
C
	   CALL LSL_PUTMSG(I3D__INTRNLERR,1,'INSERT_PT')
	   GOTO 999				! int is not on vector
	ENDIF
C
C find dist of intersection from start
C
	DIST = ABS(X_INT-X_STA) + ABS(Y_INT-Y_STA)
C
	ICB = IP
	ICB_STOP = IP+1
	GOTO 20
C
C move along till next pt is further away from start than new pt
C
10	IF (ICB_NXT.EQ.ICB_STOP) THEN
C	   CALL LSL_PUTMSG(I3D__INTRNLERR,2,'INSERT_PT')
	   GOTO 999					! return
	ENDIF
C
	ICB = ICB_NXT
C
20	ICB_NXT = PNT_I(PNT_NXT,ICB)
C
	X_NXT = PNT_R(PNT_XXX,ICB_NXT)
	Y_NXT = PNT_R(PNT_YYY,ICB_NXT)
C
	DISTNXT = ABS(X_NXT-X_STA)+ABS(Y_NXT-Y_STA)
	IF (DISTNXT.LT.DIST-TOUCH_TOL) GOTO 10
C
	IF (DISTNXT.LT.DIST+TOUCH_TOL) THEN
	  I_INS = ICB_NXT
	  GOTO 40
	ELSE
	  ICB_PRV = ICB
	ENDIF
C
C here to insert PT between ICB_PRV and ICB_NXT
C
30	IF (NUM_PNTS.EQ.MAX_PNTS) THEN
	  CALL LSL_PUTMSG(I3D__INTOVERFLOW)
	  GOTO 999
	ENDIF
C
	INTSECT_NUM = INTSECT_NUM+1
	NUM_PNTS = NUM_PNTS+1
C
	PNT_I(PNT_NXT,ICB_PRV)  = NUM_PNTS	! link into VEC list
	PNT_I(PNT_NXT,NUM_PNTS) = ICB_NXT
	PNT_I(PNT_PRV,NUM_PNTS) = ICB_PRV
	PNT_I(PNT_PRV,ICB_NXT)  = NUM_PNTS
C
	PNT_R(PNT_XXX,NUM_PNTS) = X_INT	! set x,y coords
	PNT_R(PNT_YYY,NUM_PNTS) = Y_INT
C
	I_INS = NUM_PNTS
C
40	PNT_R(PNT_ZZZ,I_INS) = HT		! set z coord (height)
C
	INSERT_PT = .TRUE.
C
999	RETURN
	END
C
