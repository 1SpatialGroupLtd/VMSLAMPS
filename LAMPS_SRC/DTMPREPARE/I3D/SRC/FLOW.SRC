C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-26 09:59:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FLOW(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
***	MODULE	FLOW
***	IDENT	26MR92
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created 						ALB 27-Apr-1988
C
CMOD	Changed the order in which I3D does things in so that the ONEARM
C	stage is no longer required			ACM 22-Dec-1988
CMOD	Eliminate WORD_NUM_MNXS,SORT_WORKSPACE not used	CCB 26-Mar-1992
C
C Description
C	This routine is the driver for the processing controlled
C	by the ENABLE MODE FLOW or the ENABLE MODE INTERPOLATE
C	commands. Listed below are the tasks performed by this driver. 
C
C	LOAD_LINKS:
C	Load all required river/ridgeline feature data.
C
C	LINKNODE_STRUCTURE:
C	Set up link-node structure.
C
C	CLIP_LINKS:
C	Clip off unheighted link free_ends which overhang a heighted
C	point by less than CLIP_TOL 
C
C	FIND_NETWORK_COMPONENTS:
C	Identify separate network components.
C
C	CHECK_TERMINAL_HEIGHTS:
C	Check for legal and sufficient heighted source & sink nodes.
C
C	FIND_LEGAL_FLOW:
C	Try to establish a flow on all river links and a height at all
C	RIVER nodes.
C
C	HEIGHT_RIDGE_NODES:
C	Find a height for each ridgeline node.
C
C	OUTPUT_CHECKPLOT:
C	Optionally create a checkplot IFF file to indicate direction of
C	flow by outputting direction symbols > or <.
C
C ----------------------------------------------------------------------
C
	IMPLICIT NONE
C	
C Parameters
        INCLUDE 'LSL$DTMCREATESYS:MESPAR.PAR'
        INCLUDE 'LSL$CMNIFF:IFFMSG.PAR'
        INCLUDE 'LSL$CMNI3D:I3DMSG.PAR'
        INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
C
C Common blocks
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE 'LSL$CMNI3D:SELECT.CMN'
C
C Dynamically assigned array argument declarations
	INCLUDE 'LSL$CMNI3D:VM_ARG_DECL.SRC'
C
C Structures
        INCLUDE 'LSL$CMNIFF:CB.STR'
C
	LOGICAL		LOAD_LINKS_OK
	LOGICAL		LINKNODE_STRUCTURE_OK
	LOGICAL		CLIP_LINKS_OK
	LOGICAL		FIND_NETWORK_COMPONENTS_OK
	LOGICAL		CHECK_TERMINAL_HEIGHTS_OK
	LOGICAL		FIND_LEGAL_FLOW_OK
	LOGICAL		HEIGHT_RIDGE_NODES_OK
	LOGICAL		OUTPUT_CHECKPLOT_OK
	LOGICAL		FLOW_UNIQUE
	LOGICAL		TERMINAL_DIRECTIONS_OK
C
C Functions
	INTEGER		COMPARE		! compare xmin's
	INTEGER		SWAP		! swap xmin array elements
C
	LOGICAL		LOAD_LINKS		! load feature data from IFF
	LOGICAL		LINKNODE_STRUCTURE 	! build link-node strcuture
	LOGICAL		CLIP_LINKS		! clip off unheighted ends
	LOGICAL		FIND_NETWORK_COMPONENTS	! as it says
	LOGICAL		CHECK_TERMINAL_HEIGHTS	! checks term nod hts
	LOGICAL		FIND_LEGAL_FLOW		! try to establish legal flow
	LOGICAL		HEIGHT_RIDGE_NODES	! find ridge node hts
	LOGICAL		OUTPUT_CHECKPLOT 	! output checkplot symbols
C
C Externals
	EXTERNAL	COMPARE
	EXTERNAL	SWAP
C
C **********************************************************************
C
	LOAD_LINKS_OK         = .TRUE.
	LINKNODE_STRUCTURE_OK = .TRUE.
	CLIP_LINKS_OK         = .TRUE.
	FIND_LEGAL_FLOW_OK    = .TRUE.
	HEIGHT_RIDGE_NODES_OK = .TRUE.
	OUTPUT_CHECKPLOT_OK   = .TRUE.
C
C ----------------------------------------------------------------------
C Load river/ridgeline data into internal arrays
C
	DO 10 FILEIN_NUM = 1,NUM_FILEIN
	   IF (HAD_DIAG) CALL WRITEF(
     &	      'Loading feature data for file no. %I0',FILEIN_NUM)
C
	   LOAD_LINKS_OK = LOAD_LINKS(.FALSE.,
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.LOAD_LINKS_OK) GOTO 999		! fatal error
10	CONTINUE
C
C Set up linknode structure
C
	IF (HAD_DIAG) CALL WRITEF('Finding network link-node structure')
C
	LINKNODE_STRUCTURE_OK = LINKNODE_STRUCTURE(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	IF (.NOT.LINKNODE_STRUCTURE_OK) GOTO 999	! fatal error
C
C Clip off unheighted link free_ends which overhang a heighted point by
C less than CLIP_TOL 
C
	IF (HAD_DIAG) CALL WRITEF('Clipping network link-node free ends')
C
	CLIP_LINKS_OK = CLIP_LINKS(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	IF (.NOT.CLIP_LINKS_OK) GOTO 999		! fatal error
C
C Identify separate network components
C
	IF (HAD_DIAG) CALL WRITEF('Finding network components')
C
	FIND_NETWORK_COMPONENTS_OK = FIND_NETWORK_COMPONENTS(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	IF (.NOT.FIND_NETWORK_COMPONENTS_OK) GOTO 999	! fatal error
C
C Check for legal and sufficient heighted terminal nodes
C
	CHECK_TERMINAL_HEIGHTS_OK = CHECK_TERMINAL_HEIGHTS(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
C
C Height all river nodes and direct all river link flows
C
	IF (N_RIVER_NETS.GT.0) THEN
	   IF (HAD_DIAG) CALL WRITEF(
     &	      'Heighting river nodes and directing river network flow')
C
	   FIND_LEGAL_FLOW_OK = FIND_LEGAL_FLOW(
     &		FLOW_UNIQUE,
     &		TERMINAL_DIRECTIONS_OK,
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.TERMINAL_DIRECTIONS_OK) GOTO 20
	ENDIF
C
C Height all ridge nodes
C
	IF (N_RIDGE_NETS.GT.0) THEN
	   IF (HAD_DIAG) CALL WRITEF('Heighting ridge nodes')
C
	   HEIGHT_RIDGE_NODES_OK = HEIGHT_RIDGE_NODES(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	ENDIF
C
	IF (.NOT.(FIND_LEGAL_FLOW_OK.AND.HEIGHT_RIDGE_NODES_OK)) THEN
	   CALL SHOW_DIRFLOWERR(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   GOTO 20
	ENDIF
C
	IF (N_RIVER_NETS.GT.0) THEN
	   IF (FLOW_UNIQUE) THEN		! flow found is unique
	     CALL LSL_PUTMSG(I3D__UNIQUFLOW)
	   ELSE					! flow found is a guess
	     CALL LSL_PUTMSG(I3D__MANYFLOWS)
	   ENDIF
	ENDIF
C
C Create checkplot IFF file.  The file will contain symbols as line
C features at the centre of each link indicating direction of flow
C
20	IF (HAD_CHECKPLOT) THEN
	   IF (HAD_DIAG) CALL WRITEF('Creating overlay check plot')
	   OUTPUT_CHECKPLOT_OK = OUTPUT_CHECKPLOT(
     &		NOD_I,NOD_R,NOD_L,ARM_I,ARM_L,LNK_I,LNK_R,LNK_L,
     &		PUP_I,PDN_I,NET_I,STN_I,STN_R,STL_I,STL_L,MNX_I,
     &		MNX_R,PNT_I,PNT_R,
     &		MAX_PNTS,MAX_NODS,MAX_ARMS,MAX_LNKS,MAX_STNS,MAX_STLS)
	   IF (.NOT.OUTPUT_CHECKPLOT_OK) GOTO 999
	ENDIF
C
999	FLOW = LOAD_LINKS_OK .AND. LINKNODE_STRUCTURE_OK .AND.
     &	       CLIP_LINKS_OK .AND. FIND_NETWORK_COMPONENTS_OK .AND.
     &	       CHECK_TERMINAL_HEIGHTS_OK .AND. FIND_LEGAL_FLOW_OK .AND.
     &	       OUTPUT_CHECKPLOT_OK
C
	RETURN
	END
C
