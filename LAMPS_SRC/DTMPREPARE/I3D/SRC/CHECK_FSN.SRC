C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-31 17:07:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK_FSN(FSN,FSN_OK,COPY_DATA)
C
***	MODULE	CHECK_FSN
***	IDENT	21DE88
C	
C Copyright Laser Scan Laboratories, Cambridge, England.
C 	
C Created 						ALB 15-Apr-1988
C
C The purpose of this routine is to get the FSN from the entry in hand
C and to use this to check FSN bit map to find out whether it is one of
C the required FSN for the process.  If not the ftr is either skipped or
C copied depending on the state of COPY_DATA logical. 
C
	IMPLICIT NONE
C
C common blocks
        INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
	INCLUDE 'LSL$CMNI3D:SELECT.CMN'
C
C arguments
	INTEGER		FSN		! feature number
	LOGICAL		FSN_OK		! TRUE if FSN is in bit map
	LOGICAL		COPY_DATA	! TRUE if FSN is to be copied
C
C Workspace
	INTEGER		FSN_PTR		! element in FSNMAP containing 
					! FSN to test
	INTEGER		FSN_OFFSET	! offset to test FSN bit
	LOGICAL		BIT		! TRUE if bit set for FSN
C
	INTEGER*2	IELEN		! IFF entry length
	INTEGER*2	IECODE		! IFF entry code
	INTEGER*2	INT_FSN		! Internal FSN
        INTEGER*2	ISEQ            ! feature number
C
C functions
	LOGICAL		LIB$EXTZV
C
C **********************************************************************
C
	CHECK_FSN = .TRUE.		! assume success
C
C **********************************************************************
C
	CALL EIHRI(ISEQ,1,1)		! sequence number
C
C and check if this FSN is in bit map
C
	FSN_PTR = (ISEQ)/32 + 1		! element in FSNMAP
	FSN_OFFSET = MOD(ISEQ,32)	! offset in FSNMAP element
C
C extract bit from FSN bit map
C
	BIT = LIB$EXTZV(FSN_OFFSET,1,FSNMAP(FSN_PTR))
	IF (.NOT.BIT.AND..NOT.COPY_DATA) THEN	! skip this FSN
	   FSN_OK = .FALSE.
           CALL IFFNXC('EF',IELEN)
           IF (IELEN.EQ.-1) THEN
	      CHECK_FSN = .FALSE.
	      GOTO 999
	   ENDIF
	ELSEIF (.NOT.BIT.AND.COPY_DATA) THEN	! copy this FSN
	   FSN_OK = .FALSE.
C
	   CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	   INT_FSN = 0				! set to zero 
	   CALL IFFNF(ISEQ,INT_FSN)
	   CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
C
C loop to copy all entries until 'EF' found
C
100	   CALL IFFNXT(IECODE,IELEN)
           IF (IELEN.EQ.-1) THEN		! no 'EF' found
	      CHECK_FSN = .FALSE.
	      GOTO 999
	   ENDIF
	   IF (IECODE.EQ.'EF') THEN
	      CALL IFFSEL(FILEOUT_LUN)		! select output IFF file
	      CALL IFFEF
	      CALL IFFSEL(FILEIN_LUN)		! select input IFF file	
	   ELSE
	      CALL EIHCPY (FILEOUT_LUN)		! copy entry in hand
	      GOTO 100
	   ENDIF
	ELSE
	   FSN = ISEQ				! FSN returned
	   FSN_OK = .TRUE.
	ENDIF	
C
999	RETURN
	END
