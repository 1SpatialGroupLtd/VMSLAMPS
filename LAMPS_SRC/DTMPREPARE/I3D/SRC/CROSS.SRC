C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-11 17:40:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION CROSS(P1,E1,P2,E2,LOOPIN)
C
***	IDENT	02MR88
***	MODULE	CROSS
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C
C	Created   : ACM					6-Aug-1986
C
C Modified from CROSS in module CHKLP		by ALB	1-MAR-1987
C
C Pass LOOPIN array as argument instead via common	<<< ALB 	
C
C	Adapted from CROSS by PGH,AJW,DM
C
C 	Given vectors V1 & V2 starting at P1 & P2 determines whether
C 	they intersect.
C
C	Old version of this subroutine CROSS.OLD found to be not
C	working correctly so alternative subroutine adapted by ACM.
C
C	Check for vectors in box added to original routine.
C
	IMPLICIT NONE
C
C
C local parameters
	REAL*4		TOL			! dist tolerance
	INTEGER*4	X,Y			! coord field indices
C
	PARAMETER(	X = 1, Y = 2)
	PARAMETER(	TOL = 0.0001)
C
C arguments
C
	REAL*4		P1(2),E1(2)		! start/end pts of vec 1
	REAL*4		P2(2),E2(2)		! start/end pts of vec 2
	REAL*4		LOOPIN(2)		! x y intersection point
C
C Workspace
C
	REAL*4		P1E1X,P1E1Y		! vector E1-P1
	REAL*4		P2E2X,P2E2Y		! vector E2-P2
	REAL*4		P1P2X,P1P2Y		! vector P2-P1
	REAL*4		E1E2X,E1E2Y		! vector E2-E1
	REAL*4		DP1,DE1		! dists of P1 and E1 from L2
	REAL*4		DP2,DE2		! dists of P2 and E2 from L1
	REAL*4		DET			! determinant
	REAL*4		DTOL			! dist tolerance
	REAL*4		F
	LOGICAL*1	PARALLEL		! vectors parallel?
	LOGICAL*1	COLINEAR		! vectors colinear?
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	If vectors intersect then function returns true and finds
C	intersection point, else it returns false.
C
C	If vectors intersect but are parallel then the intersection pt
C	used is midpoint of vec 1.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	CROSS = .FALSE.				! assume no intersection
C
C Check for vector box intersection
	IF (MAX(P1(X),E1(X)).LT.MIN(P2(X),E2(X))-TOL) GOTO 20	! return
	IF (MIN(P1(X),E1(X)).GT.MAX(P2(X),E2(X))+TOL) GOTO 20	! return
	IF (MAX(P1(Y),E1(Y)).LT.MIN(P2(Y),E2(Y))-TOL) GOTO 20	! return
	IF (MIN(P1(Y),E1(Y)).GT.MAX(P2(Y),E2(Y))+TOL) GOTO 20	! return
C
C Boxes are within TOL
C
	P1E1X = E1(X)-P1(X)			! vector P1E1
	P1E1Y = E1(Y)-P1(Y)
C
	P2E2X = E2(X)-P2(X)			! vector P2E2
	P2E2Y = E2(Y)-P2(Y)
C
	P1P2X = P2(X)-P1(X)			! vector P1P2
	P1P2Y = P2(Y)-P1(Y)
C
	E1E2X = E2(X)-E1(X)			! vector E1E2
	E1E2Y = E2(Y)-E1(Y)
C
	DET = P2E2X*P1E1Y-P2E2Y*P1E1X
	DTOL = ABS(DET)*TOL			! dist tolerance
C
C If parallel then check for colinearity
	PARALLEL = ABS(DET).LT.TOL
	IF (PARALLEL) THEN			! parallel
	  DP1 = P1P2Y*P2E2X - P1P2X*P2E2Y 	! P1P2.N2
	  COLINEAR = ABS(DP1).LE.DTOL
	  IF (.NOT.COLINEAR) GOTO 20		! return
	  F = 0.5				! use (P1+E1)/2
	  GOTO 10
	END IF
C
	DP1 = P1P2Y*P2E2X - P1P2X*P2E2Y 	! P1P2.N2
	DE1 = E1E2Y*P2E2X - E1E2X*P2E2Y		! E1E2.N2
C
C If vec 1 all one side of line 2 then return
	IF (DP1.GT. DTOL.AND.DE1.GT. DTOL) GOTO 20
	IF (DP1.LT.-DTOL.AND.DE1.LT.-DTOL) GOTO 20
C
	DP2 = P1P2Y*P1E1X - P1P2X*P1E1Y		! P1P2.N1
	DE2 = E1E2Y*P1E1X - E1E2X*P1E1Y		! E1E2.N1
C
C If vec 2 all one side of line 1 then return
	IF (DP2.GT. DTOL.AND.DE2.GT. DTOL) GOTO 20
	IF (DP2.LT.-DTOL.AND.DE2.LT.-DTOL) GOTO 20
C
C Vectors intersect, so calculate intersection point
	F = DP1/DET
10	LOOPIN(X) = P1(X)+F*P1E1X
	LOOPIN(Y) = P1(Y)+F*P1E1Y
C
	CROSS = .TRUE.
C
20	RETURN
	END
