C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-01-16 10:47:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ROTATE_SYMBOL(ROT_ARRAY,ANGLE,UNROT_ARRAY)
C
***	MODULE	ROTATE_SYMBOL
***	IDENT	16JA89
C
C	Copyright Laser Scan Laboratories, Cambridge, England
C
C Created						ALB 28-Apr-1988
C
C Rotates a symbol stored as vectors in UNROT_ARRAY.  Rotated
C coordinates are placed in ROT_ARRAY. 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNI3D:CONSTANTS.PAR'
C
C Commons
	INCLUDE 'LSL$CMNI3D:CONTROL.CMN'
C
C Arguments
	REAL*4		ROT_ARRAY(2,*)	!rotated coordinates
	REAL*4		ANGLE		!angle of rotation
	REAL*4		UNROT_ARRAY(2,*)!unrotated coordinates
C
C Workspace
	INTEGER		I		!loop counter
	INTEGER		J		!array subscript
	REAL*4		DIST		!distance from origin (0,0)
	REAL*4		ANGLE2		!angle of each vertex
C
C **********************************************************************
C
	ROTATE_SYMBOL = .TRUE.		!assume success
C
	DO 100	I = 1,9999
	   J = I
	   IF (UNROT_ARRAY(1,I).LE.UNDEFINE) GOTO 110	!finished
	   IF ((ABS(UNROT_ARRAY(1,I)).LT.COORD_TOL).AND.
     &	       (ABS(UNROT_ARRAY(2,I)).LT.COORD_TOL)) THEN
	      ROT_ARRAY(1,I) = UNROT_ARRAY(1,I)
	      ROT_ARRAY(2,I) = UNROT_ARRAY(2,I)
	      GOTO 100
	   ENDIF
	   ANGLE2 = ATAN2(UNROT_ARRAY(2,I),UNROT_ARRAY(1,I))
	   DIST = SQRT(UNROT_ARRAY(1,I)**2 + UNROT_ARRAY(2,I)**2)
	   ROT_ARRAY(1,I) = DIST * COS(ANGLE + ANGLE2)
	   ROT_ARRAY(2,I) = DIST * SIN(ANGLE + ANGLE2)
100	CONTINUE
C
110	ROT_ARRAY(1,J) = UNROT_ARRAY(1,J)
	ROT_ARRAY(2,J) = UNROT_ARRAY(2,J)
C
	RETURN
	END

