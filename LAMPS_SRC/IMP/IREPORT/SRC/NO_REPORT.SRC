C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-12 15:23:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION NO_REPORT()
C
***	MODULE  NO_REPORT
***	IDENT	12DE86
C	
C	Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C	Author	J M Price Williams from M.S. Reid
C	created 22 OCTOBER 1986
C
CMOD	Horrible tests added to deal with old NO entries
C	without EO pointers...yuk			ATT 12-Dec-1986
CMOD	Test for overflow of LAYSHAD added. Now returns
C	SS$_NORMAL if all OK. Call to EXIT removed!!!!
C	Re-labelled.					TJH 04-Nov-1986
CMOD	output addresses as 8 digits, left padded with
C	0s 						TJI 31-Oct-1986
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'IREPORTMSG.PAR'
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL
C
C Common blocks:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'IREPORT.CMN'
C
C Longword:
	INTEGER*4	I		! loop variable
	INTEGER*4	NOPOS		! NO position
C
C Logical
	LOGICAL		OLD_NO		! Old type NO entry ? no EO ptr
C
C ......................................................................
C
C NO entry
C
	NO_REPORT = %LOC(SS$_NORMAL)		! assume success
	OLD_NO = .FALSE.			! assume modern file
C
	IF (IELEN.LT.4) OLD_NO = .TRUE.		! Old type file ?
C
	CALL EIHRI(NOVER,1,1)
	IF (.NOT.OLD_NO) CALL EIHRL(EOPTR,1,3)	!Address of EO
	HADNF=.FALSE.				!Set NF logical
	IF (NLAY.EQ.MAX_LAY) THEN
	   NO_REPORT=IREPORT__TOOMNYLAY
	   CALL LSL_PUTMSG(NO_REPORT,MAX_LAY)
	   GOTO 30
	ENDIF
	NLAY=NLAY+1
	LAYSHAD(NLAY)=NOVER
	IF (IN_LAYER) THEN
	   MATCHL=.FALSE.
	   DO 10 I=1,NUMILAY
	      IF (NOVER .EQ. ILAYS(I))THEN	!Layer found
	         MATCHL=.TRUE.
	         CALL EXPAND('Layer %^W%N found',NOVER)
	         IF (ADDRESS) THEN
		    IF (OLD_NO) THEN		! Oh dear ...
		      NOPOS = LPOSH		! remember where we are
		      CALL IFFNXC('EO',IELEN)	! find next EO
		      IF (IELEN.EQ.-1) GOTO 25	! error 
		      EOPTR = LPOSH		! remember EOPTR
	              CALL IFFPKE(IECODE,IELEN,NOPOS)	! back to NO
	              IF ((IECODE.NE.'NO').OR.(IELEN.LT.0)) GOTO 25
		    ENDIF
	            CALL APPEND(' at address %^L%P0%X8',LPOSH)
	            CALL APPEND(' and ends at address %^L%P0%X8',EOPTR)
	         ENDIF
	         CALL FLWLIN
	      ENDIF 
10	   CONTINUE
	   IF (.NOT. MATCHL) THEN		!Skip rest of layer
	      IF (OLD_NO) THEN
		CALL IFFNXC('EO',IELEN)
	      ELSE
	        CALL IFFPKE(IECODE,IELEN,EOPTR)
	      ENDIF
	      IF ((IECODE .NE. 'EO').OR.( IELEN .LT. 0)) GOTO 25
	   ENDIF
	ENDIF
C
C  IN_LAYER and LAYER mutually exclusive
C
C  Report on layer
C
	IF (LAYER) THEN
	   IF ( NUMLAY .EQ. 0) THEN		!Report all layers
	      CALL EXPAND('Layer %^W%N found',NOVER)
	      IF (ADDRESS) THEN
		 IF (OLD_NO) THEN		! Oh dear ...
		    NOPOS = LPOSH		! remember where we are
		    CALL IFFNXC('EO',IELEN)	! find next EO
		    IF (IELEN.EQ.-1) GOTO 25	! error 
		    EOPTR = LPOSH		! remember EOPTR
	            CALL IFFPKE(IECODE,IELEN,NOPOS)	! back to NO
	            IF ((IECODE.NE.'NO').OR.(IELEN.LT.0)) GOTO 25
		 ENDIF
	         CALL APPEND(' at address %^L%P0%X8',LPOSH)
	         CALL APPEND(' and ends at address %^L%P0%X8',EOPTR)
	      ENDIF
	      CALL FLWLIN
	   ELSE
	      DO 20 I=1,NUMLAY
	         IF (NOVER.EQ.LAYS(I)) THEN	!Report specified layers
	            CALL EXPAND('Layer %^W%N found',NOVER)
	            IF (ADDRESS) THEN
		       IF (OLD_NO) THEN		! Oh dear ...
		         NOPOS = LPOSH		! remember where we are
		         CALL IFFNXC('EO',IELEN)! find next EO
		         IF (IELEN.EQ.-1) GOTO 25	! error 
		         EOPTR = LPOSH		! remember EOPTR
	                 CALL IFFPKE(IECODE,IELEN,NOPOS) ! back to NO
	                 IF ((IECODE.NE.'NO').OR.(IELEN.LT.0)) GOTO 25
		       ENDIF
	               CALL APPEND(' at address %^L%P0%X8',LPOSH)
	               CALL APPEND(' and ends at address %^L%P0%X8',
     &								EOPTR)
	            ENDIF
	            CALL FLWLIN
	         ENDIF
20	      CONTINUE
	   ENDIF
	ENDIF
C
	GOTO 30
C
C UNEXPEOF Errors come here
25	NO_REPORT=IREPORT__UNEXPEOF
	CALL LSL_PUTMSG(NO_REPORT)
C
30	RETURN
C
	END
