C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-04 11:48:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_COM_LIN(USRSTR,USRLEN)
C
***	MODULE GET_COM_LIN
***	IDENT  04JL88
C	
C	Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
CMOD635 /FRT qualifier no longer incorrectly unsets 
C 	variable ABSENT thus crippling /ABSENT 		TJH 04-Jul-1988
CMOD	Allow /FRT qualifier to specify file containing 
C	ACD definitions for FRT initialisation.		JMB 26-Nov-1987
CMOD	To allow /CB and /REVISION_LEVEL qualifiers	JMB 17-Nov-1987
CMOD	/LITES2 now takes a file argument. LITES2
C	command files now sent to LSL$LITES2CMD:	TJH 10-Jun-1987
CMOD	Explicit device/directory in INCLUDE removed	TJH 24-Mar-1987
CMOD	TS (Text Status) Variable TCS() changed to TSS() due
C	to confusion with TCs				TJH 04-Nov-1986
C	Author	J Price Williams from M.S. Reid
C	created 17-October-86
C
C	Description	 
C
	IMPLICIT NONE
C
C Arguments:
	CHARACTER*1024	USRSTR		! the cmd line to be printed out
	INTEGER		USRLEN		! length of
C
C Command definitions:
	EXTERNAL	IREPORT_CLD
	INTEGER		IREPORT_CLD
C
C W/s
	LOGICAL		NO_FILE		! .T. if no FRT file-spec
C					! (dummy as CLD prevents this)
C
C Parameters:
	INCLUDE '($SSDEF)/NOLIST'
	INCLUDE 'IREPORTMSG.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'IREPORT.CMN'
C
C Functions:
	INTEGER*4	DCL_CML
	INTEGER*4	DCL_STARTUP
	INTEGER*4	DCL_QUAL
	INTEGER*4	DCL_INT
	INTEGER*4	DCL_FILE
	INTEGER*4	TRNALL
C
C Longword:
	INTEGER		I		! loop variable
	INTEGER		FILLEN		! temp variable
C
C Character:
	CHARACTER*39	FILNAM		! temp filename
	
C
C ......................................................................
C
C Initialise flags
C
	ABSENT=.FALSE.
	OUTPUT=.FALSE.
	PRINTER=.FALSE.
	IN_LAYER=.FALSE.
	REVISION_LEVEL=.FALSE.
	WITH_FC=.FALSE.
	ADDRESS=.FALSE.
	AC=.FALSE.
	CP=.FALSE.
	CC=.FALSE.
	FC=.FALSE.
	LAYER=.FALSE.
	NF=.FALSE.
	NS=.FALSE.
	RO=.FALSE.
	ST=.FALSE.
	ZS=.FALSE.
	CB=.FALSE.
	TC=.FALSE.
	TH=.FALSE.
	TX=.FALSE.
	HADCB=.FALSE.	
	HADTCO=.FALSE.
	HADFRT=.FALSE.
	LEVEL=-1
 	LOG=.FALSE.
	LITES2=.FALSE.
	RODAT=0.0
C
C Get command line for our command verb IREPORT. DCL_STARTUP will
C return set to SS$_NORMAL if all is well
C
	GET_COM_LIN=DCL_STARTUP('IREPORT'  !Command Verb
     &	                       ,.FALSE.     !Don't split parameter lists
     &                         ,IREPORT_CLD !CLD module name
     &                         ,.TRUE.)     !Local error reporting
	IF (.NOT. GET_COM_LIN) GOTO 70
C	
C Check for /LOG
C
	GET_COM_LIN=DCL_QUAL('LOG',LOG,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /ABSENT
C
	GET_COM_LIN=DCL_QUAL('ABSENT',ABSENT,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /PRINTER
C
	GET_COM_LIN=DCL_QUAL('PRINTER',PRINTER,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /ADDRESS
C
	GET_COM_LIN=DCL_QUAL('ADDRESS',ADDRESS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /AC
C
	GET_COM_LIN=DCL_QUAL('AC',AC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C We now have an /AC qualifier so see if there are any values
C attached to the qualifier
C
	IF (AC) THEN                !Get the arguments
	   GET_COM_LIN=DCL_INT('AC',.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the args. to local array
	   IF (NUMINT.GE.1) THEN
	      NUM_AC=NUMINT
	      DO 10 I=1,NUM_AC
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALACT
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            ACS(I)=IARRAY(I)
	         ENDIF
10	      CONTINUE
	   ENDIF
	ENDIF
C
C Check for /IN_LAYER
C
	GET_COM_LIN=DCL_QUAL('IN_LAYER',IN_LAYER,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C See if there are any values with /IN_LAYER qualifier
C
	IF (IN_LAYER) THEN               !Get the arguments
	   LAYER=.FALSE.              ! Don't want /LAYER
	   GET_COM_LIN=DCL_INT('IN_LAYER',.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the args. to local array
C
	   IF (NUMINT.GE.1) THEN
	      DO 20 I=1,NUMINT
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALLAY
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            ILAYS(I)=IARRAY(I)
	         ENDIF
20	      CONTINUE
	      NUMILAY=NUMINT
	   ENDIF
	ENDIF
C
C Check for /WITH_FC
C
	GET_COM_LIN=DCL_QUAL('WITH_FC',WITH_FC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C If the qualifier is present check for values
C
	IF (WITH_FC) THEN           !Get the arguments
	   GET_COM_LIN=DCL_INT('WITH_FC',.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the args. to local array
C
	   IF (NUMINT.GE.1) THEN
	      DO 30 I=1,NUMINT
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALFC
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            WFCS(I)=IARRAY(I)
	         ENDIF
30	      CONTINUE
	      NUMWFC=NUMINT
	   ENDIF
	ENDIF
C 
C Check for /CP
C
	GET_COM_LIN=DCL_QUAL('CP',CP,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /CB
C
	GET_COM_LIN=DCL_QUAL('CB',CB,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /CC
C
	GET_COM_LIN=DCL_QUAL('CC',CC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Check for /FC
C
	GET_COM_LIN=DCL_QUAL('FC',FC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
	IF (FC) THEN               !Get the arguments
	   GET_COM_LIN=DCL_INT('FC',.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the args. to local array
	   IF (NUMINT.GE.1) THEN
	      NUM_FC=NUMINT
	      DO 40 I=1,NUM_FC
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALFC
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            FCS(I)=IARRAY(I)
	         ENDIF
40	      CONTINUE
	   ENDIF
	ENDIF
C
C Check for /LAYER
C
	GET_COM_LIN=DCL_QUAL('LAYER',LAYER,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
	IF (LAYER) THEN          !Get the arguments
	   GET_COM_LIN=DCL_INT('LAYER',.TRUE. ) 
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the args. to local array
C
	   IF (NUMINT.GE.1) THEN
	      NUMLAY=NUMINT
	      DO 50 I=1,NUMLAY
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALLAY
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            LAYS(I)=IARRAY(I)
	         ENDIF
50	      CONTINUE
	   ENDIF
	ENDIF
C
C Check for REVISION_LEVEL
C
	GET_COM_LIN=DCL_QUAL('REVISION_LEVEL',REVISION_LEVEL,
     &					LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C If have revision level qualifier, check its value
C
	IF (REVISION_LEVEL) THEN		!Get the argument
	   GET_COM_LIN=DCL_INT('REVISION_LEVEL',.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer args. to local array
	   IF ((IARRAY(1).LT.-1).OR.(IARRAY(1).GT.1)) THEN
	      GET_COM_LIN=IREPORT__INVALREVLEVEL
	      CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
	      GOTO 70
	   ELSE
	      LEVEL = IARRAY(1)
	   ENDIF
	ENDIF
C
C Check for /FRT=file - read in an FRT file
C
	GET_COM_LIN=DCL_QUAL( 'FRT',		! qualifier name
     &				HADFRT,		! flag
     &				LOCAL,		! locally there
     &				LOCNEG,		! true if negated
     &				.TRUE.)		! deal with errors
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Read FRT name if there is one
C
	IF (HADFRT) THEN
	   GET_COM_LIN=DCL_FILE('FRT',		! qual. name
     &				'LSL$FRT:.FRT',	! default file name
     &				NO_FILE,	! absent?
     &				.FALSE.,	! only one file
     &				.TRUE.)		! deal with errors
C
	   IF (.NOT. GET_COM_LIN) GOTO 70
	   FRTLEN = FIL_LEN(1)
	   FRTNAM = FILARY(1)(1:FRTLEN)
	ENDIF
C
C Check for /NF
	GET_COM_LIN=DCL_QUAL('NF',NF,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /NS
	GET_COM_LIN=DCL_QUAL('NS',NS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /RO
	GET_COM_LIN=DCL_QUAL('RO',RO,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /ST
	GET_COM_LIN=DCL_QUAL('ST',ST,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /TC
	GET_COM_LIN=DCL_QUAL('TC',TC,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /TH
	GET_COM_LIN=DCL_QUAL('TH',TH,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C Check for /TX
	GET_COM_LIN=DCL_QUAL('TX',TX,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C
C See if /TS qualifier present
	GET_COM_LIN=DCL_QUAL('TS',TS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C If qualifier is present check for any specific vals
	IF (TS) THEN
	   GET_COM_LIN=DCL_INT('TS',.TRUE.)
	   IF (.NOT.GET_COM_LIN) GOTO 70
	   IF (NUMINT .GE. 1) THEN
	      NUM_TS=NUMINT
	      DO 60 I=1, NUM_TS
		 IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
		    GET_COM_LIN=IREPORT__INVALTS
		    CALL LSL_PUTMSG(GET_COM_LIN,IARRAY(1))
		    GOTO 70
		 ELSE
	            TSS(I)=IARRAY(I)
	         ENDIF
60	      CONTINUE
	   ENDIF
	ENDIF
C
C Check for /ZS
C
	GET_COM_LIN=DCL_QUAL('ZS',ZS,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT. GET_COM_LIN) GOTO 70
C	
C Check for /OUTPUT
C
	GET_COM_LIN=DCL_QUAL('OUTPUT'      !Qualifier name
     &	                 ,OUTPUT  !Returned .T. if qualifier found
     &                    ,LOCAL  ! .T. if qualifier local to parameter
     &	                 ,LOCNEG  ! .T. if qualifier negated locally
     &	                 ,.TRUE.) ! .T. - local error reporting
C
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C If /OUTPUT then get the file-spec
	IF (OUTPUT) THEN
	   GET_COM_LIN=DCL_FILE('OUTPUT'     !qualifier label
     &	              ,'SYS$DISK:IREPORT.LIS;' !default filename
     &	              ,NOFILE		     !.T. if no filename found
     &                ,.FALSE.               !don't expect list of files
     &                ,.TRUE.)               !.T.-to allow error report
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the file-spec to our common  variable
	   IF (NOFILE) THEN
	      OPFIL='SYS$DISK:IREPORT.LIS;'
	      OPLEN=20
	   ELSE
	      OPFIL=FILARY(1)(:FIL_LEN(1))
	      OPLEN=FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Set file-spec for /PRINTER if /OUTPUT was not specified
	IF (PRINTER.AND..NOT.OUTPUT) THEN
	  OPFIL='SYS$DISK:IREPORT.LIS'
	  OPLEN=20
	ENDIF
C
C Set default file-spec if /PRINTER and /OUTPUT was not specified
	IF (.NOT.PRINTER.AND..NOT.OUTPUT) THEN
	  OPFIL='SYS$OUTPUT:IREPORT.LIS;'
	  OPLEN=23
	ENDIF
C
C Get input file-spec
	GET_COM_LIN=DCL_FILE('IN_FILESPEC','LSL$IF:IFF.IFF;'
     &              				,NOFILE,.FALSE.,.TRUE.)
	IF (.NOT.GET_COM_LIN) GOTO 70
C
C Transfer the file-spec to our common variable
	INFIL=FILARY(1)(:FIL_LEN(1))
	INLEN=FIL_LEN(1)
C
C Check for /LITES2
         GET_COM_LIN=DCL_QUAL('LITES2',LITES2,LOCAL,LOCNEG,.TRUE.) 
	 IF (.NOT.GET_COM_LIN) GOTO 70
	 IF (LITES2) THEN
C
C Work out LITES2 default file spec
	   GET_COM_LIN=TRNALL('LSL$LITES2CMD',LIFIL)
	   IF (.NOT.GET_COM_LIN) THEN
	      CALL LSL_PUTMSG(IREPORT__FAILTRLG,'LSL$LITES2CMD')
	      CALL LSL_ADDMSG(GET_COM_LIN)
	      GOTO 70
	   ENDIF
C
C Get input filename from the input file-spec
	   CALL PUTFLN(INFIL(:INLEN))
	   IF (HAD_NAM) THEN
	      FILNAM=STR_NAM
	      FILLEN=LEN_NAM
	   ENDIF
	   CALL PUTFLN(LIFIL)
	   STR_NAM=FILNAM
	   HAD_NAM=.TRUE.
	   LEN_NAM=FILLEN
	   STR_EXT='LCM'
	   HAD_EXT=.TRUE.
	   LEN_EXT=3
	   CALL EXPFLN(LIFIL,LILEN)
	   GET_COM_LIN=DCL_FILE('LITES2',LIFIL(:LILEN),NOFILE,
     &					.FALSE.,.TRUE.)
	   IF (.NOT. GET_COM_LIN) GOTO 70
C
C Transfer the file-spec to our common variable?
	   IF  (.NOT.NOFILE) THEN
	      LIFIL=FILARY(1)(:FIL_LEN(1))
	      LILEN=FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Get whole command line for file headers
	IF (GET_COM_LIN) THEN
	   GET_COM_LIN=DCL_CML(USRSTR,USRLEN,.TRUE.)
	ENDIF
C
70	IF (GET_COM_LIN) GET_COM_LIN=SS$_NORMAL
	RETURN
	END
