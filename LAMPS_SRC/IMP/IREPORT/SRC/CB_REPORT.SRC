C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-24 12:38:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CB_REPORT
C
***	MODULE  CB_REPORT
***	IDENT	02DE86
C	
C	Copyright Laser-scan Laboratories Ltd, Cambridge, England.
C
C	Author	J M Billing
C	created 17 November 1987
C
C	Description:
C	To deal with coordinate block (CB) entries added to IFF
C	structure as part of OSTF+ etc. changes
C
C
	IMPLICIT NONE
C
C	Common blocks
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
	INCLUDE 'IREPORT.CMN'
C
C workspace
C
	LOGICAL ACDFND		! function
	INTEGER I		! for DO loops
	LOGICAL ACD_FAIL	! flag if column headers not found
C
C ......................................................................
C
	HADCB = .TRUE.
	NCB = NCB + 1
C
C output data about individual coordinate block
C
	IF (CB.AND.(.NOT.ABSENT)) THEN
	   CALL EIHRCB_HEAD(CBH)
	   CALL EXPAND('Coordinate Block entry found')
	   CALL APPEND(' in feature with FSN %N (%N)',NFS(1),NFS(2))
	   CALL FLWLIN
	   CALL EXPAND('- graphical type = %N', CBH.GTYPE)
	   CALL FLWLIN
	   CALL EXPAND('- number of points = %N', CBH.NROW)
	   CALL FLWLIN
	   CALL EXPAND('- number of attributes per point = %N',CBH.NCOL)
	   CALL FLWLIN
	   CALL EXPAND('- number of fixed attributes = %N', CBH.NATT)
	   CALL FLWLIN
	   IF (ADDRESS) THEN
	      CALL EXPAND(' at address %^L%P0%X8 ',LPOSH)
	      CALL FLWLIN
	   ENDIF
C
C Output column headers and the first point (row in CBD)
C
	   CALL EIHRCB_DATA(CBD)
	   CALL EXPAND('First point : ')
	   CALL FLWLIN
C
C Find and deal with column header and each entry in first row
	   DO 10 I = 1, CBH.NCOL
C
C Header for each column
	      ACD_FAIL = ACDFND(CBH.COLH(I), .FALSE.)
	      IF (ACD_FAIL) THEN
	         CALL EXPAND ('? (%N) : ',CBH.COLH(I))
	      ELSE
	         CALL EXPAND ('%S (%N) : ',ACD_NAME(:ACD_NAME_LEN), 
     &							CBH.COLH(I))
	      ENDIF
C
C Entry in first row for each column
C First check if entry is absent
	      IF (CBD.I(I).EQ.IFF_ABSENT) THEN
	         IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	            CALL APPEND('""')
	         ELSE
	            CALL APPEND('?')
	         ENDIF
C
C Know entry is there, so find type and output it
	      ELSE
	         IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	            CALL APPEND('"')
	            CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN),CBD.I(I))
	            CALL APPEND('"')
	         ELSE
	            CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN),CBD.I(I))
	         ENDIF
	      ENDIF
	      CALL FLWLIN
10	   CONTINUE
	ENDIF
	RETURN
	END
