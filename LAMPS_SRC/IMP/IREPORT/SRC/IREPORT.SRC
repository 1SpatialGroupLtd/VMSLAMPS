	PROGRAM IREPORT
C	
***	MODULE IREPORT
***	IDENT  26NO87
C	
C Copyright Laser Scan Laboratories Limited, Cambridge, England
C
CMOD	Deal with /FRT qualifier if specified, by doing FRT
C	initialisation with file.			JMB 26-Nov-1987
CMOD	Deal with CB, function CB_REPORT. To allow /REVISION_LEVEL
C	qualifier. All part of OSTF+ development.	JMB 17-Nov-1987
CMOD	AC_REPORT and EF_REPORT made functions,
C	TS_REPORT now used as one! Re-labelled.
C	Gone over to FILEIO				TJH 02-Dec-1986
CMOD	Call to IFFTDY(IFFREP) removed, as new IFFLIB
C	and LSLLIB IFF open routines 			TJH 03-Nov-1986
CMOD	Viciously hacked around to make the original 
C	code as stored in OLD_IREPORT into a modular
C	form as in this version, and also to add the 
C	code to cater for the new TS (text status)
C	IFF entry. IFFREP dropped from several places! 	JMPW 21-Oct-1986
CMOD	IFFREP changed to help distinguish between IFF
C	internal and system errors. LSL_ADDMSG added.	TJH 02-Sep-1986
C
C 	Author: Martin Reid  28-Oct-1985
C	
C	
C A utility which reports on the contents of an IFF file. The file
C is scanned and IFF entries reported depending on the qualifiers
C specified.
C
C Command Syntax
C
C IREPORT file-spec/Qualifiers
C
C Command qualifiers
C
C /ABSENT    /OUTPUT=file-spec   /[NO]PRINTER   /IN_LAYER=int[,...]
C /WITH_FC=int[,...]   /LOG   /LITES2   /ADDRESS   
C /REVISION_LEVEL      /FRT=file-spec
C
C IFF entry qualifiers
C
C /AC[=int[,...]]   /CP   /CC   /FC[=int[,...]]   /LAYER[=int[,...]]
C /NF   /NS   /RO   /ST   /TC   /TH   /TX   /TS   /CB
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL
	INCLUDE 'IREPORTMSG.PAR'
C
C Common blocks
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'HERE:IREPORT.CMN'
C
C Functions
C
	INTEGER*4	GET_COM_LIN	! get and parse comm line
	INTEGER*4	FILEINI		! open or close files
	LOGICAL		NO_REPORT	! deal with NO entry
	LOGICAL		NF_REPORT	! deal with NF entry
	LOGICAL		AC_REPORT	! deal with AC entry	
	LOGICAL		FC_REPORT	! deal with FS entry	
	LOGICAL		EF_REPORT	! deal with EF entry
	LOGICAL		TS_REPORT	! deal with TS entry
	LOGICAL		CB_REPORT	! deal with CB entry
	LOGICAL		WRTCMD		! write cmd line & headr to file
	LOGICAL		FRT_ACDINI	! initialise ACD w/o FRT file
	LOGICAL		FRTINI		! initialise with FRT file
C
C Workspace:
	CHARACTER*1024	USRSTR		! the cmd line to be printed out
	INTEGER		USRLEN		! length of
	LOGICAL*4	OK		!function return code
	LOGICAL		OPEN_FILES	!.t. open files else close files
	LOGICAL		FINISHED	!When true exit prog
	LOGICAL		ACD_FAILED	! .T. if ACD init. fails
C
	DATA CARDP/'NW','SW','SE','NE'/
C
C ......................................................................
C
C Initialisation
	CALL LSL_INIT
C
C Set IFF input revision level to be used throughout IREPORT,
C although this may be altered elsewhere.
C -1 will accept CB, ZS, ST as themselves.
C 0  will convert CB into ZS and ST.
C 1  will convert ZS and ST into CB.
C
	LEVEL = -1
C
C Increase default size of TXTBUF and EXPBUF to allow for 255
C byte AC, CH, TC, and TX strings and long messages
C
	CALL SET_EXPMAX(1024)
C
	ACD_FAILED = .FALSE.
	ABSENT=.FALSE.
	OUTPUT=.FALSE.
	PRINTER=.FALSE.
	IN_LAYER=.FALSE.
	WITH_FC=.FALSE.
	ADDRESS=.FALSE.
	AC=.FALSE.
	CP=.FALSE.
	CC=.FALSE.
	FC=.FALSE.
	LAYER=.FALSE.
	NF=.FALSE.
	NS=.FALSE.
	RO=.FALSE.
	ST=.FALSE.
	ZS=.FALSE.
	TC=.FALSE.
	TH=.FALSE.
	TX=.FALSE.
	CB=.FALSE.
	HADTCO=.FALSE.
 	LOG= .FALSE.
	LITES2= .FALSE.
	RODAT = 0.0
	FINISHED = .FALSE.
	OPEN_FILES = .TRUE.
C
C  Get command line for our command verb IREPORT. DCL_STARTUP will
C  return set to SS$_NORMAL if all is well
C
	OK = GET_COM_LIN(USRSTR,USRLEN)
	IF (.NOT.OK) GOTO 20
C
C Initialise ACD
C
	IF (HADFRT) THEN
	   ACD_FAILED = FRTINI(FRTNAM(:FRTLEN))
	ELSE
	   ACD_FAILED = FRT_ACDINI()
	ENDIF
	IF (ACD_FAILED) GOTO 20
C
C Open input file
C
	OK = FILEINI(OPEN_FILES)
	IF (.NOT.OK) GOTO 20
	OPEN_FILES = .FALSE.
C
C Set input revision level for IFF input
	CALL IFFIRV(LEVEL)
C
C Output file header 
C
	IF (OUTPUT.OR.PRINTER) THEN
	   OK=WRTCMD(USRSTR,USRLEN)
	   IF (.NOT.OK) GOTO 20
	ENDIF
C
C Start processing
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN .EQ.-1 ) THEN 
	   IF (.NOT.FINISHED) CALL LSL_PUTMSG(IREPORT__UNEXPEOF)
	   GOTO 20
	ENDIF  
C
C	Which type of entry do we have ?
C
	IF (IECODE .EQ. 'AC') THEN
	   OK = AC_REPORT()
	   IF (.NOT.OK) GOTO 20
	ELSEIF (IECODE .EQ. 'CB') THEN
	   CALL CB_REPORT
	ELSEIF (IECODE .EQ. 'CP') THEN
	   CALL CP_REPORT
	ELSEIF (IECODE .EQ. 'CC') THEN
	   CALL CC_REPORT
	ELSEIF (IECODE .EQ. 'FS') THEN
	   OK = FC_REPORT()
	   IF (.NOT.OK) GOTO 20
	ELSEIF (IECODE .EQ. 'NO') THEN
	   OK = NO_REPORT()
	   IF (.NOT.OK) GOTO 20
	ELSEIF (IECODE .EQ. 'NF') THEN
	   OK = NF_REPORT()
	   IF (.NOT.OK) GOTO 20
	ELSEIF (IECODE .EQ. 'NS') THEN
	   CALL NS_REPORT
	ELSEIF (IECODE .EQ. 'RO') THEN
	   CALL RO_REPORT
	ELSEIF (IECODE .EQ. 'ST') THEN
	   CALL ST_REPORT
	ELSEIF (IECODE .EQ. 'ZS') THEN
	   CALL ZS_REPORT
	ELSEIF (IECODE .EQ. 'TC') THEN
	   CALL TC_REPORT
	ELSEIF (IECODE .EQ. 'TH') THEN
	   CALL TH_REPORT
	ELSEIF (IECODE .EQ. 'TX') THEN
	   CALL TX_REPORT
	ELSEIF (IECODE .EQ. 'EF') THEN
	   OK=EF_REPORT()
	   IF (.NOT.OK) GOTO 20
	ELSEIF (IECODE .EQ. 'EJ') THEN
	   CALL EJ_REPORT
	   FINISHED = .TRUE.			!set this to get out
	ELSEIF (IECODE .EQ. 'EO') THEN
	   CALL EO_REPORT
	ELSEIF (IECODE .EQ. 'TS') THEN
	   OK=TS_REPORT()
	   IF (.NOT.OK) GOTO 20
	ENDIF
	GOTO 10
C
C Close files
C
20	IF (.NOT.OPEN_FILES) THEN
	   OK = FILEINI(OPEN_FILES)
	ENDIF
	IF (ACD_FAILED) OK = ACD_FAILED
	IF (OK) OK = %LOC(SS$_NORMAL)
	CALL LSL_EXIT(OK)
	END
