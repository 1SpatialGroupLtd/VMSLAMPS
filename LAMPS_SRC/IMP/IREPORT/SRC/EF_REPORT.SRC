C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-18 12:29:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EF_REPORT()
C
***	MODULE  EF_REPORT
***	IDENT	17NO*&
C	
C	Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C	Author	J M Price Williams from M.S. Reid
C	created 20 October 1986
C
CMOD	Now allows CB entries (report on absence)	JMB 17-Nov-1987
C
CMOD	Now a function (returns SS$_NORMAL if all is OK).
C	/TS made to work with /ABSENT. FRL'ed. Overflow
C	check added for NOFC(). Redundant CONTINUEs
C	removed						TJH 04-Nov-1986
C
C
C Description:
C	To deal with the EF (end feature) IFF code. This 
C	includes the output of any information about the 
C	feature now it has been examined.
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'HERE:IREPORTMSG.PAR'
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL
C
C Common blocks:
C
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'IREPORT.CMN'
C
C
C Longword:
	INTEGER		I,J		! loop variables
C
C ......................................................................
C
	EF_REPORT=%LOC(SS$_NORMAL)	! assume the best.
C
	IF (((HADST) .AND. (ST)).AND.(.NOT. ABSENT)) THEN 
	   IF (NPTS .EQ. 1) GOTO 10
	   CALL EXPAND('Feature with FSN %N (%N), feature code %^W%N,',
     &	                   NFS(1),NFS(2),          FCODE)
	   CALL APPEND(' has %^W%N ST%m containing %N point%m',
     &	            		NST,		   NPTS)
	   CALL FLWLIN
	   CALL EXPAND('First point = (%F0.3, %F0.3), ', 
     &	            			FIRST(1),FIRST(2))
	   CALL APPEND('Last point = (%F0.3, %F0.3)',
     &	           			LAST(1),LAST(2))
	   CALL FLWLIN
	   GOTO 90
C
10	   CALL EXPAND('Feature with FSN %N (%N), feature code %^W%N,',
     &	            	  NFS(1),NFS(2),	   FCODE)
	   CALL APPEND(' has a string with only one point')
	   CALL FLWLIN
	   CALL EXPAND('Point = (%F0.3, %F0.3)',
     &	           	        FIRST(1),FIRST(2))
	   CALL FLWLIN
	   GOTO 90
	ENDIF
C
C report on ZSs here
C
	IF (((HADZS) .AND. (ZS)).AND.(.NOT. ABSENT)) THEN 
	   IF (NPTS .EQ. 1) GOTO 20
	   CALL EXPAND('Feature with FSN %N (%N), feature code %^W%N,',
     &	            	NFS(1),NFS(2),          FCODE)
	   CALL APPEND(' has %^W%N ZS%m containing %N point%m',
     &	          	     NZS,		  NPTS)
	   CALL FLWLIN
	   CALL EXPAND('First point = (%F0.3, %F0.3, %F0.3), ', 
     &	                       		FIRST(1),FIRST(2),FIRST(3))
	   CALL APPEND('Last point = (%F0.3, %F0.3, %F0.3)',
     &	           			LAST(1),LAST(2),LAST(3))
	   CALL FLWLIN
	   GOTO 90
C
20	   CALL EXPAND('Feature with FSN %N (%N), feature code %^W%N,',
     &	            NFS(1),NFS(2), FCODE)
	   CALL APPEND(' has a ZS entry with only one point')
	   CALL FLWLIN
	   CALL FLWRTF('Point = (%F0.3, %F0.3, %F0.3)',
     &	                	FIRST(1),FIRST(2),FIRST(3))
	   GOTO 90
	ENDIF
C
C ......................................................................
C Now report on absence of entries at feature level
C ......................................................................
C
	IF (ABSENT) THEN
C
C Absence of FC entries
C
	   IF (FC) THEN
	      IF (NUM_FC .EQ. 0) THEN		!Report on all FCs
	         IF (.NOT. HADFC) THEN
	            CALL EXPAND('Feature with FSN %N (%N)'
     &						,NFS(1),NFS(2))
	            CALL FLWAPP(' has no FS entry')
	            IF (LITES2) THEN
     	 	       CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
		    ENDIF
	         ENDIF
	      ELSE			  	!Report on specified FCs
	         NUMNOFC=0
	         MATCHF=.TRUE.
	         DO 30 I=1,NUM_FC	
	            IF (FCODE .NE. FCS(I)) THEN
		       IF (NUMNOFC.EQ.MAX_FC) THEN
		          EF_REPORT=IREPORT__TOOMNYFC
			  CALL LSL_PUTMSG(EF_REPORT,MAX_FC)
			  GOTO 90
		       ENDIF
		       NUMNOFC=NUMNOFC+1
		       NOFC(NUMNOFC)=FCS(I)
	               MATCHF=.FALSE.
		    ENDIF
30	         CONTINUE 
		 IF (.NOT. MATCHF) THEN
		   IF (NUMNOFC .EQ. 1) THEN
		      CALL EXPAND('Feature with FSN %N (%N) has no'
     &						,NFS(1),NFS(2))
	              CALL FLWAPP(' feature code %^W%N ',NOFC(1))
	              IF (LITES2) THEN
     	 	         CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	              ENDIF
	           ELSE
		      CALL EXPAND('Feature with FSN %N (%N) has no'
     &						,NFS(1),NFS(2))
	              CALL APPEND(' feature code ')
		      DO 40 I=1,(NUMNOFC-1)
		        CALL APPEND ('%^W%N,',NOFC(I))
40		      CONTINUE
	              CALL FLWAPP(' or %^W%N',NOFC(NUMNOFC))
 	              IF (LITES2) THEN
     	 	         CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	              ENDIF
		   ENDIF
	         ENDIF        
	      ENDIF
	   ENDIF
C
C Absence AC entries
C
	   IF (AC) THEN
	      IF (NUM_AC .EQ. 0) THEN		! Report on all ACs
	         IF (.NOT. HADAC) THEN
	            CALL EXPAND('Feature with FSN %N (%N), '
     &						,NFS(1),NFS(2))
		    CALL APPEND('feature code %^W%N, ',FCODE)
		    CALL APPEND('has no AC entry')
		    CALL FLWLIN
	            IF (LITES2) THEN
     	 	       CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
		    ENDIF
		 ENDIF
	      ELSE				!Report on specified ACs
	         DO 60 I=1,NUM_AC
	            MATCHAC=.FALSE.
		    DO 50 J=1,NUMACH
	               IF (ACS(I) .EQ. ACSHAD(J)) THEN
			  MATCHAC=.TRUE.
		       ENDIF
50	 	    CONTINUE
		    IF	(.NOT. MATCHAC) THEN
		      CALL EXPAND('Feature with FSN %N (%N), '
     &						,NFS(1),NFS(2))
		      CALL APPEND('feature code %^W%N, ',FCODE)
		      CALL APPEND('has no type %^W%N AC',ACS(I))
		      CALL FLWLIN
	              IF (LITES2) THEN
     	 	         CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
		      ENDIF
	            ENDIF
60	         CONTINUE
	      ENDIF
	   ENDIF
C
C Absence of CB entries
C
	   IF ((CB).AND.(.NOT.HADCB)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no CB entry')
	      CALL FLWLIN
	   ENDIF
C
C Absence TS entries
C
	   IF (TS) THEN
	      IF (NUM_TS .EQ. 0) THEN		! Report on all TSs
	         IF (.NOT. HADTS) THEN
	            CALL EXPAND('Feature with FSN %N (%N), '
     &						,NFS(1),NFS(2))
		    CALL APPEND('feature code %^W%N, ',FCODE)
		    CALL APPEND('has no TS entry')
		    CALL FLWLIN
	            IF (LITES2) THEN
     	 	       CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
		    ENDIF
		 ENDIF
	      ELSE				!Report on specified TSs
	         DO 80 I=1,NUM_TS
	            MATCHTS=.FALSE.
		    DO 70 J=1,NUMTSH
	               IF (TSS(I) .EQ. TSSHAD(J)) THEN
			  MATCHTS=.TRUE.
		       ENDIF
70	 	    CONTINUE
		    IF	(.NOT. MATCHTS) THEN
		      CALL EXPAND('Feature with FSN %N (%N), '
     &						,NFS(1),NFS(2))
		      CALL APPEND('feature code %^W%N, ',FCODE)
		      CALL APPEND('has no TS entry with TCC value %^W%N',TSS(I))
		      CALL FLWLIN
	              IF (LITES2) THEN
     	 	         CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
		      ENDIF
	            ENDIF
80	         CONTINUE
	      ENDIF
	   ENDIF
C
C Absence of RO entries
	   IF ((RO) .AND. (.NOT. HADRO)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no RO entry')
	      CALL FLWLIN
	      IF (LITES2) THEN
     	 	 CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	      ENDIF
	   ENDIF
C
C Absence of ST entries
	   IF ((ST) .AND. (.NOT. HADST)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no ST entry')
	      CALL FLWLIN
	   ENDIF
C
C Absence of ZS entries
	   IF ((ZS) .AND. (.NOT. HADZS)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no ZS entry')
	      CALL FLWLIN
	   ENDIF
C
C Absence of TC entries (in features)
	   IF (((TC) .AND. (.NOT. HADTC)) .AND. (.NOT. HADTCO)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no TC entry')
	      CALL FLWLIN
	      IF (LITES2) THEN
     	 	 CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	      ENDIF
	   ENDIF
C
C Absence of TH entries
	   IF ((TH) .AND. (.NOT. HADTH)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no TH entry')
	      CALL FLWLIN
	      IF (LITES2) THEN
     	 	CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	      ENDIF
	   ENDIF
C
C Absence of TX entries
	   IF ((TX) .AND. (.NOT. HADTX)) THEN
	      CALL EXPAND('Feature with FSN %N (%N), ',NFS(1),NFS(2))
	      CALL APPEND('feature code %^W%N, ',FCODE)
	      CALL APPEND('has no TX entry')
	      CALL FLWLIN
	      IF (LITES2) THEN
     	 	  CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	      ENDIF
	   ENDIF
	ENDIF
	TCTEST=.FALSE.
	HADTCO=.FALSE.
C
90	RETURN
C
	END
