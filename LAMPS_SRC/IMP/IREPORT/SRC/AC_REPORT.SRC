C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-04-07 14:27:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION AC_REPORT()
C
***	MODULE AC_REPORT
***	IDENT  07AP88
C	
C	Copyright Laser-scan laboratories Ltd, Cambridge, England.
C
C	Author	J Price Williams from M.S. Reid
C	created 20-OCT-86
C
C Description:	 The module processes the  IFF "AC" entry
C
CMOD	To ensure second word of AC is printed as a longword
C                                                       DRC 07-Apr-1988
CMOD	Now uses FRT library to determine meaning of AC entries
C	and their data types.				JMB 26-Nov-1987
CMOD	Made a logical function, test for ACSHAD array 
C	overflow introduced. Overlong statements
C	continued					TJH 04-Nov-1986
CMOD	Output hex addresses as 8 digits, left padded
C	with space					TJI 31-Oct-1986
C
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'HERE:IREPORTMSG.PAR'
	INTEGER	 SS$_NORMAL
	EXTERNAL SS$_NORMAL
C
C Common blocks:
C
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'IREPORT.CMN'
C
C Longword:
	INTEGER		I		! loop variable
	LOGICAL		ACDFND		! fn. to find ACDs
C
C ......................................................................
C
	AC_REPORT=%LOC(SS$_NORMAL)	! assume success
C
	CALL EIHRI(NAC,1,1)		!get the entry
	HADAC=.TRUE.			!set switch
	HADTXT=.FALSE.
	CALL EIHRL(LDATUM,1,2)		!always a long word
	IF (IELEN .GT. 3)  THEN		!Found some text so
	    HADTXT=.TRUE.		!set the text switch
	    CALL VIOCLR(IDATA,256,0)	!setting last byte to null!
	    CALL EIHR(IDATA,IELEN-3,4)	!and read into a byte array
	ENDIF
C
C Report on AC entry
C
	IF (AC) THEN			!if /AC switch has been set
	   IF (NUM_AC .EQ. 0) THEN	!Report on all ACs
	     IF (.NOT. ABSENT) THEN	!no /ABSENT has been set
	       CALL ACDFND(NAC,.FALSE.)	!find ACD
	       CALL EXPAND('AC found  :  %S (%N),   value :  '
     &		   	,ACD_NAME(:ACD_NAME_LEN)  ,NAC)
	       CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN), LDATUM)
	       CALL APPEND('  in feature with FSN %N (%N)',
     &						NFS(1),NFS(2))
	       IF (ADDRESS) THEN
	          CALL APPEND('  at address %^L%P0%X8',LPOSH)
	       ENDIF
	       CALL FLWLIN
C
C Output to LITES2 command file?
C
	       IF (LITES2) THEN
	         CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	       ENDIF
	       IF (HADTXT) THEN
	         CALL FLWRTF('With text : "%AZ255"',IDATA)
	       ENDIF    
	     ENDIF
	   ELSE					!Report on specified ACs
	     DO 10 I=1,NUM_AC
	       IF (NAC .EQ. ACS(I)) THEN
	         IF (NUMACH.EQ.MAX_AC) THEN
		    AC_REPORT=IREPORT__TOOMNYAC
		    CALL LSL_PUTMSG(AC_REPORT,MAX_AC)
	            GOTO 20
		 ENDIF
	         NUMACH=NUMACH+1
	         ACSHAD(NUMACH)=NAC		!Record ACs encountered
	         IF (.NOT. ABSENT ) THEN
	            CALL ACDFND(NAC,.FALSE.)	!Find ACD
	            CALL EXPAND('AC found  :  %S (%N),   value :  '
     &		    		,ACD_NAME(:ACD_NAME_LEN)  ,NAC)
	            CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN), LDATUM)
	            CALL APPEND('  in feature with FSN %N (%N)',
     &	                                              NFS(1),NFS(2))
	            IF (ADDRESS) THEN
	              CALL APPEND('  at address %^L%P0%X8',LPOSH)
	            ENDIF
		   CALL FLWLIN
C
C Output to LITES2 command file?
C
	           IF (LITES2) THEN
                     CALL LITES2M(XYBUF(1),XYBUF(2),EXPDSC,EXPLEN)
	           ENDIF
	           IF (HADTXT) THEN
	             CALL FLWRTF('With text : "%AZ255"',IDATA)
	           ENDIF       
	         ENDIF
	       ENDIF
10	     CONTINUE
	  ENDIF
	ENDIF
C
C Clear IDATA
C
	CALL VIOCLR(IDATA,256,0)
C
C
20	RETURN
C
	END
