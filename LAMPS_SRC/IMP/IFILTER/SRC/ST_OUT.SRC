C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-03 14:35:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION ST_OUT(ALL_POINTS,TOTAL,IENDS)
C
***     IDENT   03NO87
***     MODULE  ST_OUT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	To save address of ST currently being written, and number of
C	pts. in ST for setting up JB entry later.
C					 	DRC	03-Nov-1987
CMOD	Last edited				 DM	03-Dec-1986
C	Created 				RJH	31-Oct-1986
C
C	IMP IFILTER Program - Check range and write ST entry
C
C Description
C
C	Assumes the input file is currently selected and that there are
C	not more than 200 points to output
C
        IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNCOORD:XYIND/		! coordinate indices
***	PARAMETER/LSL$CMNIFILT:LUN/		! logical unit numbers
***	PARAMETER/LSL$CMNIFILT:IFILTMSG/	! message definitions
C
C Arguments
C
	INTEGER*2	TOTAL			! number of points
	REAL*4		ALL_POINTS(2,TOTAL)	! the points to output
	INTEGER*2	IENDS			! pen up/pen down flag
C
C Common Blocks
C
***	COMMON/LSL$CMNIFILT:JUNCTIONS/	! junctions details
***	COMMON/LSL$CMNIFILT:RANGE/	! range details
***	COMMON/LSL$CMNIFF:IFFHAN/	! current position in IFF file
C
C Local variables
C
	INTEGER*4	FIRST		! index of first point to check
	INTEGER*4	I		! counter
	LOGICAL		ERROR		! IFF error ?
C
C Initialisation
C
	FIRST = 1
C
C Initialise the range using the first point
C
	IF (.NOT. HADRAN) THEN
	   RANGE(LO,X) = ALL_POINTS(X,FIRST)
	   RANGE(HI,X) = ALL_POINTS(X,FIRST)
	   RANGE(LO,Y) = ALL_POINTS(Y,FIRST)
	   RANGE(HI,Y) = ALL_POINTS(Y,FIRST)
	   HADRAN = .TRUE.
	   FIRST = 2
	ENDIF
C
C Now go through the rest and reset any of the range values requiring 
C to be changed
C
	DO 100 I=FIRST,TOTAL
	   IF (RANGE(LO,X) .GT. ALL_POINTS(X,I))
     &				RANGE(LO,X) = ALL_POINTS(X,I)
	   IF (RANGE(HI,X) .LT. ALL_POINTS(X,I))
     &				RANGE(HI,X) = ALL_POINTS(X,I)
	   IF (RANGE(LO,Y) .GT. ALL_POINTS(Y,I))
     &				RANGE(LO,Y) = ALL_POINTS(Y,I)
	   IF (RANGE(HI,Y) .LT. ALL_POINTS(Y,I))
     &				RANGE(HI,Y) = ALL_POINTS(Y,I)
100	CONTINUE
C
C Select output file
C
	CALL IFFSEL(OUT_LUN)
C
C Output the ST entry
C
C For use with junctions, remember the postion of the ST
C in the output file and the number of points in the written.
C
	STPOS2=LPOSE
	LSTPTS=TOTAL
C
	CALL IFFST(ALL_POINTS,TOTAL,IENDS)
C
C Check for errors
C
	ERROR = ((IERCD .NE. 0) .OR. (IERNM .NE. 1))
C
C Output a message if there was an error
C
	IF (ERROR) CALL LSL_PUTMSG(IFILT__ERRWRTOUT)
C
C Reselect the input file
C
	CALL IFFSEL(IN_LUN)
C
C Assign function value
C
	ST_OUT = (.NOT. ERROR)
C
C Return
C
	RETURN
        END
