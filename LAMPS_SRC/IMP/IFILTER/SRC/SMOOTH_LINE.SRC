C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-03-01 10:56:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION SMOOTH_LINE(LOOP)
C
***     IDENT	01MR95
***     MODULE  SMOOTH_LINE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C MOD	.LOOP. argument to BEZIER_INTERPOLATION 
C	changed to LOOP 				IMcL 04-Apr-1989
C MOD	LOOP set to false in call to BEZIER_INTERPOLATE if
C	the input file has a junction structure		DRC 23-Nov-1988
C MOD	Call to BEZIER interpolation routines added	DRC 03-Sep-1987
C MOD	Routine now checks for single point STs and	ST  28-Feb-1995
C	copies over to output array. Also calls
C       SHUFFLE_POINTS for closed features. Mod 1472.
C
C	Created 				RJH	27-Oct-1986
C
C	IMP IFILTER Program - Carry out interpolation on the line
C
C Description
C
C
        IMPLICIT NONE
C
C Included Parameter Files
C
	INCLUDE	'($STSDEF)/NOLIST'
C
C Arguments
C
	LOGICAL		LOOP		! looped ?
C
	INTEGER		ERROR		! error value associated with
C					! Bezier functions
C Common Blocks
C
***	COMMON/LSL$CMNIFILT:CONTROL/	! control variables
***	COMMON/LSL$CMNIFILT:LINES/	! input and output line strings
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
***	COMMON/LSL$CMNIFILT:TOLERANCES/ ! tolerances for Bezier etc.
***	PARAMETER/LSL$CMNIFILT:IFILTMSG/! IFILTER messages
***	COMMON/LSL$CMNIFILT:JUNCTIONS/
C
C External Subroutines
C
	INTEGER*4	AKIMA		! Akima curve interpolation 
	EXTERNAL	AKIMA
	INTEGER*4	MCONAL		! McConalogue curve interp.
	EXTERNAL	MCONAL
	INTEGER*4	LINEAR		! linear interpolation
	EXTERNAL	LINEAR
C
C *****	Maybe here we should take account of loops - if looped start at 
C *****	3rd point in buffer, then after interpolation transfer 1st ? 
C *****	points to start of buffer 
C
C If we have one point in the ST (eg an invisible move after a hole as
C created by IPOLYGON) then copy it straight to the output buffer
C
	IF (HAD_MC.OR.HAD_AKI.OR.HAD_LIN.OR.HAD_BEZ) THEN
	   IF (NUM_IN.EQ.1) THEN
	      NUM_OUT = 1
	      LINE_OUT(1,1) = LINE_IN(1,1)
	      LINE_OUT(2,1) = LINE_IN(2,1)
	      SMOOTH_LINE = .TRUE.
	      GOTO 999
	   ENDIF
	ENDIF
C
C Do the interpolation
C
	IF (HAD_MC) THEN
	   CALL INTRPL(NUM_IN,LINE_IN,.TRUE.,.TRUE.,LOOP,.FALSE.,MCONAL)
	   IF (LOOP) CALL SHUFFLE_POINTS()
	ELSE IF (HAD_AKI) THEN
	   CALL INTRPL(NUM_IN,LINE_IN,.TRUE.,.TRUE.,LOOP,.TRUE.,AKIMA)
	   IF (LOOP) CALL SHUFFLE_POINTS()
	ELSE IF (HAD_LIN) THEN
	   CALL INTRPL(NUM_IN,LINE_IN,.TRUE.,.TRUE.,LOOP,.FALSE.,LINEAR)
	   IF (LOOP) CALL SHUFFLE_POINTS()
	ELSE IF (HAD_BEZ) THEN
	   IF(JUNCTIONS)THEN
	     CALL BEZIER_INTERPOLATION 
     &                 (NUM_IN,LINE_IN,NUM_OUT,LINE_OUT,.FALSE.,
     &                  AVERAGE,BEZIER_TOL,.TRUE.,ERROR)
	   ELSE
	     CALL BEZIER_INTERPOLATION 
     &                 (NUM_IN,LINE_IN,NUM_OUT,LINE_OUT,LOOP,
     &                  AVERAGE,BEZIER_TOL,.TRUE.,ERROR)
	   ENDIF
	   IF(ERROR.NE.0)THEN
             IF(ERROR.EQ.1)THEN
               LSL_STATUS=IFILT__OUTBUFFULL
	     ELSE
	       LSL_STATUS=IFILT__ERRBEZIER
	     ENDIF
	   ENDIF
	ENDIF
C
C Assign function value
C
	SMOOTH_LINE = LSL_STATUS .OR.
     &		((LSL_STATUS .AND. STS$M_SEVERITY) .EQ. STS$K_WARNING)
C
C Return
C
999	RETURN
C
        END
