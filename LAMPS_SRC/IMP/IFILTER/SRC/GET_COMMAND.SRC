C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-04 13:25:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_COMMAND
C
***	IDENT	22OC87
***	MODULE	GET_COMMAND
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD    /BEZIER decoding added                  DRC     03-Sep-1987
CMOD	Last edited				 DM	05-Dec-1986
C	Created					RJH	08-Oct-1986
C
C	IMP IFILTER Program - Get and decode command line
C
C Description
C
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNIFILT:IFILTMSG/	! message definitions
C
C Local Parameters
C
	INTEGER*4	MAX_WORD	! largest number for a word
	PARAMETER	(MAX_WORD = 32767)
C
C Common Blocks
C
***	COMMON/LSL$CMNIFILT:CONTROL/	! control variables
***	COMMON/LSL$CMNIFILT:TOLERANCES/	! smoothing tolerances
***	COMMON/LSL$CMNLSL:CLD/		! DCL command decoding
***	COMMON/LSL$CMNLSL:FILENAME/	! LSLLIB filename expansion
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
	INTEGER*4	DCL_REAL	! read reals
	INTEGER*4	EXPFLN		! expand filename
C
C Local variables
C
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	WHINGE		! set-local error reporting
	LOGICAL*4	GOT_FC		! got /FC qualifier ?
	LOGICAL*4	GOT_LAY		! got /LAYER qualifier ?
	LOGICAL*4	GOT_DP		! got /DP qualifier ?
	LOGICAL*4	GOT_MAX_SEP	! got MAX_SEPARATION keyword ?
	LOGICAL*4	GOT_LAT		! got LATERAL keyword ?
	LOGICAL*4	GOT_RES		! got RESOLUTION keyword ?
	LOGICAL*4	GOT_SEP		! got SEPARATION keyword ?
	LOGICAL*4	GOT_AC		! got CHORD keyword ?
	LOGICAL*4	GOT_ANG		! got DEVIATION keyword ?
C
C Command Language Definitions
C
	EXTERNAL	IFILTER_CLD
C
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Initialise all control flags, etc.
C
        HAD_AKI = .FALSE.
       	HAD_BUN = .FALSE.
       	HAD_LIN = .FALSE.
       	HAD_LOG = .FALSE.
       	HAD_MC  = .FALSE.
	HAD_BEZ = .FALSE.
       	USE_DP = .TRUE.
	FILTER_FIRST = .FALSE.
	NUM_LAY = 0
	NUM_FC = 0
C
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('IFILTER'	! command verb
     &      ,.FALSE.			! don't split parameter lists
     &      ,IFILTER_CLD		! CLD module name
     &      ,WHINGE)			! set -local error reporting
        IF(.NOT.OK) GOTO 999
C
C Get input file-name 
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter label
     &		,IN_TEM			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IN_FILE = FILARY(1)(1:FIL_LEN(1))
	IN_LEN = FIL_LEN(1)
C
C Set up the default output filename - the input filename is already in 
C the FILENAME common block, as a result of calling DCL_FILE
C
	HAD_VER = .FALSE.
	OK = EXPFLN(OUT_FILE,OUT_LEN)
	IF (.NOT. OK) CALL LSL_PUTMSG(OK)	! just a warning
C
C Get output file-name if it is there
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter label
     &		,OUT_FILE(1:OUT_LEN)	! default is input filename
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	IF (.NOT. ABSENT) THEN
	   OUT_FILE = FILARY(1)(1:FIL_LEN(1))
	   OUT_LEN = FIL_LEN(1)
	ENDIF
C
C /AKIMA qualifier
C
	OK=DCL_QUAL('AKIMA'		! qual. name
     &        		,HAD_AKI	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Check if the separation is present
C
	IF (HAD_AKI) THEN
	   CURVE_SEP = 0.0			! default
	   OK=DCL_QUAL('AKIMA.SEPARATION'	! keyword name
     &        		,GOT_SEP	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the separation if present
C
	   IF (GOT_SEP) THEN
	      OK=DCL_REAL('AKIMA.SEPARATION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_SEP = RARRAY(1)
	      IF (CURVE_SEP .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'AKIMA','SEPARATION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check if the arc to chord distance is present
C
	   CURVE_AC = 0.0		! default
	   OK=DCL_QUAL('AKIMA.CHORD'	! keyword name
     &        		,GOT_AC		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the arc to chord distance if present
C
	   IF (GOT_AC) THEN
	      OK=DCL_REAL('AKIMA.CHORD'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_AC = RARRAY(1)
	      IF (CURVE_AC .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'AKIMA','CHORD')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check if the angular deviation is present
C
	   CURVE_ANG = 0.0		! default
	   OK=DCL_QUAL('AKIMA.DEVIATION'! keyword name
     &        		,GOT_ANG	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the angular deviation if present
C
	   IF (GOT_ANG) THEN
	      OK=DCL_REAL('AKIMA.DEVIATION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_ANG = RARRAY(1)
	      IF (CURVE_ANG .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'AKIMA','DEVIATION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /BEZIER qualifier
C
	OK=DCL_QUAL('BEZIER'		! qual. name
     &        		,HAD_BEZ	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the chord tolerance
C
	IF (HAD_BEZ) THEN
	   BEZIER_CHORD = 0.05		! default
	   OK=DCL_REAL('BEZIER.CHORD'	! keyword name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	   IF(NUMREA.EQ.1)BEZIER_CHORD = RARRAY(1)
C
C Get the hug tolerance
C
	   BEZIER_HUG=1.0		! default value
	   OK=DCL_REAL('BEZIER.HUG'	! keyword name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	   IF(NUMREA.EQ.1)BEZIER_HUG = RARRAY(1)
C
	   IF(BEZIER_HUG.LT.0.0.OR.BEZIER_HUG.GT.1.0)THEN
	     CALL LSL_PUTMSG(IFILT__INVHUG)
	     OK = LSL_STATUS
	     GOTO 999
	   ENDIF
C 
C 	/FILTER_FIRST qualifier
C
	   AVERAGE=.FALSE.		! default
	   OK=DCL_QUAL('BEZIER.AVERAGE'	! qual. name
     &        		,AVERAGE	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	  IF(.NOT.OK) GOTO 999
	ENDIF
C
C /BUNCH qualifier
C
	OK=DCL_QUAL('BUNCH'		! qual. name
     &        		,HAD_BUN	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the minimum separation
C
	IF (HAD_BUN) THEN
	   OK=DCL_REAL('BUNCH.MIN_SEP'	! keyword name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	   FILT_MIN = RARRAY(1)
C
C Get the lateral tolerance
C
	   OK=DCL_REAL('BUNCH.LATERAL'	! keyword name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
	   FILT_LAT = RARRAY(1)
C
C Check if the maximum separation is present
C
	   FILT_MAX = 0.0		! default
	   OK=DCL_QUAL('BUNCH.MAX_SEP'	! keyword name
     &        		,GOT_MAX_SEP	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the maximum separation if present
C
	   IF (GOT_MAX_SEP) THEN
	      OK=DCL_REAL('BUNCH.MAX_SEP'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      FILT_MAX = RARRAY(1)
	      IF (FILT_MAX .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'BUNCH','MAX_SEP')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check if the resolution is present
C
	   FILT_RES = 0.0			! default
	   OK=DCL_QUAL('BUNCH.RESOLUTION'	! keyword name
     &        		,GOT_RES	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the resolution if present
C
	   IF (GOT_RES) THEN
	      OK=DCL_REAL('BUNCH.RESOLUTION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      FILT_RES = RARRAY(1)
	      IF (FILT_RES .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'BUNCH','RESOLUTION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check they are sensible
C
	   IF (FILT_MIN .LT. FILT_LAT) THEN
	      CALL LSL_PUTMSG(IFILT__INVMINLAT)
	      OK = LSL_STATUS
	      GO TO 999
	   ELSE IF (GOT_MAX_SEP) THEN
	      IF (FILT_MAX .LT. FILT_MIN) THEN
	         CALL LSL_PUTMSG(IFILT__INVMAXMIN)
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /DP qualifier
C
	OK=DCL_QUAL('DP'		! qual. name
     &        		,GOT_DP		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set the DP filter control flag
C
	USE_DP = GOT_DP .AND. (.NOT. HAD_BUN)
C
C Check if the lateral tolerance is present
C
	IF (USE_DP) THEN
	   FILT_LAT = 0.0		! default
	   OK=DCL_QUAL('DP.LATERAL'	! keyword name
     &        		,GOT_LAT	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the lateral tolerance if present
C
	   IF (GOT_LAT) THEN
	      OK=DCL_REAL('DP.LATERAL'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      FILT_LAT = RARRAY(1)
	      IF (FILT_LAT .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,'DP','LATERAL')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /FC qualifier
C
	OK=DCL_QUAL('FC'		! qual. name
     &        		,GOT_FC		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the feature codes
C
	IF (GOT_FC) THEN
	   OK=DCL_INT('FC'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	   IF (NUMINT .GT. MAX_FC) THEN	! got too many
	      CALL LSL_PUTMSG(IFILT__TOOMANYFC,NUMINT,MAX_FC)
	      OK = LSL_STATUS
	      GO TO 999
	   ELSE
	      NUM_FC = NUMINT
	      DO 100 I=1,NUM_FC
	         FC_TAB(I) = IARRAY(I)
	         IF ((FC_TAB(I) .LT. 0) .OR. 
     &				(FC_TAB(I) .GT. MAX_WORD)) THEN
	            CALL LSL_PUTMSG(IFILT__ILEGFC,FC_TAB(I))
	            OK = LSL_STATUS
	            GO TO 999
	         ENDIF
100	      CONTINUE
	   ENDIF
	ENDIF
C
C /FILTER_FIRST qualifier
C
	OK=DCL_QUAL('FILTER_FIRST'	! qual. name
     &        		,FILTER_FIRST	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /LAYER qualifier
C
	OK=DCL_QUAL('LAYER'		! qual. name
     &        		,GOT_LAY	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the layers
C
	IF (GOT_LAY) THEN
	   OK=DCL_INT('LAYER'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	   IF (NUMINT .GT. MAX_LAY) THEN	! got too many
	      CALL LSL_PUTMSG(IFILT__TOOMANYLAY,NUMINT,MAX_LAY)
	      OK = LSL_STATUS
	      GO TO 999
	   ELSE
	      NUM_LAY = NUMINT
	      DO 200 I=1,NUM_LAY
	         LAY_TAB(I) = IARRAY(I)
	         IF ((LAY_TAB(I) .LT. 0) .OR. 
     &				(LAY_TAB(I) .GT. MAX_WORD)) THEN
	            CALL LSL_PUTMSG(IFILT__ILEGLAY,LAY_TAB(I))
	            OK = LSL_STATUS
	            GO TO 999
	         ENDIF
200	      CONTINUE
	   ENDIF
	ENDIF
C
C /LINEAR qualifier
C
	OK=DCL_QUAL('LINEAR'		! qual. name
     &        		,HAD_LIN	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Check if the separation is present
C
	IF (HAD_LIN) THEN
	   LINE_SEP = 0.0			! default
	   OK=DCL_QUAL('LINEAR.SEPARATION'	! keyword name
     &        		,GOT_SEP	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the separation if present
C
	   IF (GOT_SEP) THEN
	      OK=DCL_REAL('LINEAR.SEPARATION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      LINE_SEP = RARRAY(1)
	      IF (LINE_SEP .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,
     &					'LINEAR','SEPARATION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C /LOG qualifier
C
	OK=DCL_QUAL('LOG'		! qual. name
     &        		,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /MCCONALOGUE qualifier
C
	OK=DCL_QUAL('MCCONALOGUE'		! qual. name
     &        		,HAD_MC		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Check if the separation is present
C
	IF (HAD_MC) THEN
	   CURVE_SEP = 0.0			! default
	   OK=DCL_QUAL('MCCONALOGUE.SEPARATION'	! keyword name
     &        		,GOT_SEP	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the separation if present
C
	   IF (GOT_SEP) THEN
	      OK=DCL_REAL('MCCONALOGUE.SEPARATION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_SEP = RARRAY(1)
	      IF (CURVE_SEP .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,
     &					'MCCONALOGUE','SEPARATION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check if the arc to chord distance is present
C
	   CURVE_AC = 0.0			! default
	   OK=DCL_QUAL('MCCONALOGUE.CHORD'	! keyword name
     &        		,GOT_AC		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the arc to chord distance if present
C
	   IF (GOT_AC) THEN
	      OK=DCL_REAL('MCCONALOGUE.CHORD'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_AC = RARRAY(1)
	      IF (CURVE_AC .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,
     &					'MCCONALOGUE','CHORD')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
C
C Check if the angular deviation is present
C
	   CURVE_ANG = 0.0			! default
	   OK=DCL_QUAL('MCCONALOGUE.DEVIATION'	! keyword name
     &        		,GOT_ANG	! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the angular deviation if present
C
	   IF (GOT_ANG) THEN
	      OK=DCL_REAL('MCCONALOGUE.DEVIATION'	! keyword name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
	      CURVE_ANG = RARRAY(1)
	      IF (CURVE_ANG .LE. 0) THEN
	         CALL LSL_PUTMSG(IFILT__REQPOSVAL,
     &					'MCCONALOGUE','DEVIATION')
	         OK = LSL_STATUS
	         GO TO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C Assign function value
C
999	GET_COMMAND = OK
C
C Return
C
	RETURN
	END
