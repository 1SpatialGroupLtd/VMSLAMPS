C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-03 12:21:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C FEATUR.CMN - common file to hold the contents of the current feature
C	       from both files - thus all variables are twinned, with
C	       an index of (...,2)
C
C see also CBCMN.CMN, which is used to hold details for comparing
C CB entries between the two files
C
C ......................................................................
C
	INTEGER		TEXTMAX		! max length of a text
	PARAMETER	(TEXTMAX=255)
C
	INTEGER		MAX_ACS		! max number of AC entries
	PARAMETER	(MAX_ACS=100)
C
	INTEGER		MAX_TSS		! max number of TS entries
	PARAMETER	(MAX_TSS=100)
C
C ......................................................................
C The following variables are used to store data about the current
C feature, in both files.
C
 	INTEGER*2	FSTATE(4,2)
C
C FSTATE holds the FS words for the features in the 2 files
C
	INTEGER*2	ACPTR(2)
	INTEGER*2	ACTYPE(MAX_ACS,2)
	INTEGER*4	ACCODE(MAX_ACS,2)
	REAL		ACREAL(MAX_ACS,2)
	EQUIVALENCE	(ACCODE,ACREAL)
	BYTE		ACTEXT(TEXTMAX+1,100,2)
	INTEGER*2	ACTXP(MAX_ACS,2)
C
C ACPTR   records how many ACs are in this feature
C ACTYPE  holds the type of each AC
C ACCODE  holds the code of each AC
C ACREAL  is equivalenced onto ACCODE, and allows the code to be
C	  seen as a real number
C ACTXP   is the number of characters (if any) in each AC's text
C ACTEXT  holds the text of each AC   (if any)
C	  NOTE that the text array is actually one character longer
C	  than necessary, so that we can always append a terminating
C	  null character
C
	INTEGER		TSPOSN(MAX_TSS,2)
	INTEGER		TSCNT(2)
	INTEGER		CURRTS
	INTEGER		TSHDR
C
C TSPOSN  holds the address of each TS entry in the feature
C TSCNT	  says how many there are
C CURRTS  says which text component we are in now (0 if we aren't)
C TSHDR	  is set to CURRTS if we have output a header for this
C	  text component
C
	INTEGER*2	THICK(2)
	REAL		ROTN(2)
C
C THICK   holds the TH entry (or thickness) - actually normally used
C	  for a text height these days
C ROTN    holds the rotation in radians
C
	BYTE		TEXT(TEXTMAX+1,2)
	INTEGER*2	TXLEN(2)
C
C TEXT    holds the text for the feature
C	  - note that space is allowed at the end for adding a
C	    terminating null
C TXLEN   is the text length in words - ie how many character pairs
C	  there are
C
	INTEGER*2	CODE(2)
C
C CODE    holds the top 2 bits of the feature status -
C         		0 => line, 1 => symbol, 2 => text
C
C ......................................................................
C
	INTEGER		 HAD_SIZ	! the length of the HADxx
	PARAMETER	(HAD_SIZ=2*7)	! arrays, in total
C
	LOGICAL*1	HADFS(2)
	LOGICAL*1	HADTH(2)
	LOGICAL*1	HADRO(2)
	LOGICAL*1	HADTX(2)
	LOGICAL*1	HADCB(2)
	LOGICAL*1	HADAC(2)
	LOGICAL*1	HADTS(2)
C
	LOGICAL*1	HAD(HAD_SIZ)
 	EQUIVALENCE	(HAD(1), HADFS(1)), (HAD(3), HADTH(1))
	EQUIVALENCE	(HAD(5), HADRO(1)), (HAD(7), HADTX(1))
	EQUIVALENCE	(HAD(9), HADCB(1)), (HAD(11),HADAC(1))
	EQUIVALENCE	(HAD(13),HADTS(1))
C
C HADxx  is true if the appropriate field is present/set
C HAD    is used for clearing all the HADxx fields at once
C
	LOGICAL*1	NEWFSN
	LOGICAL*1	HADFHD
C
C NEWFSN  is true if we have a 'new' feature, for which no output has
C         been produced (ie feature header line not output yet)
C HADFHD  is true if we have output the file header line (used to head
C	  a report of point differences)
C
	LOGICAL*1	GEOM_DIFF
	LOGICAL*1	ATTR_DIFF
	LOGICAL*1	OTHR_DIFF
C
C GEOM_DIFF is true if the 2 features differ geometrically (ie X,Y or Z)
C ATTR_DIFF is true if the 2 features differ in their attributes
C	    (ie, either in ACs or in CB attributes that are not X,Y or Z)
C OTHR_DIFF is true if the 2 features differ in any other way
C
	LOGICAL*1	FAIL_FS		! FS entry
	LOGICAL*1	FAIL_ACS	! AC entries
	LOGICAL*1	FAIL_CB_XYZ	! CB X,Y,Z values
	LOGICAL*1	FAIL_CB_ATT	! CB other values
	LOGICAL*1	FAIL_CB_NUM	! CB point count
	LOGICAL*1	FAIL_CB_COL	! CB number of columns
	LOGICAL*1	FAIL_TH		! TH entry
	LOGICAL*1	FAIL_RO		! RO entry
	LOGICAL*1	FAIL_TX		! TX entry
	LOGICAL*1	FAIL_TS		! TS entry
	LOGICAL*1	FAIL_COMP	! number of composite texts
	LOGICAL*1	UNMATCHED	! not matched at all
C
C FAIL_xx is set true if that entry or component of the feature does
C	  not match
C
C UNMATCHED is true if the feature is considered unmatched - because
C	    there are no points matched within the lookahead window
C
	COMMON /FEATUR/	FSTATE,
     &			ACPTR, ACTYPE, ACCODE, ACTEXT, ACTXP,
     &			TSPOSN, TSCNT, CURRTS, TSHDR,
     &			THICK, ROTN,
     &			TEXT, TXLEN,
     &			CODE,
     &			HAD,
     &			NEWFSN, HADFHD,
     &			GEOM_DIFF, ATTR_DIFF, OTHR_DIFF,
     &			FAIL_FS, FAIL_ACS,
     &			FAIL_CB_XYZ, FAIL_CB_ATT,
     &			FAIL_CB_NUM, FAIL_CB_COL,
     &			FAIL_TH, FAIL_RO, FAIL_TX, FAIL_TS, FAIL_COMP,
     &			UNMATCHED
C
