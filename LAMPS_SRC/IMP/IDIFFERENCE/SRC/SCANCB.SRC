	LOGICAL FUNCTION SCANCB(FSN)
C
***	IDENT	14DE87
***	MODULE	SCANCB
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 9 December 1987
C
C Performs the following
C
C	1) moves to the first CB for each feature
C	2) scans the CBs for the feature
C	3) works out which rows are to be compared,
C	   and reports on any which are not in both files
C	4) calculates tolerances to be used for comapring
C	   real values
C
C It returns TRUE if there is nothing to be compared
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
	INCLUDE	'HERE:IDIFFMSG.PAR'
C
***	COMMON/HERE:FILES/
***	COMMON/HERE:PARAM/
***	COMMON/HERE:FEATUR/
***	COMMON/HERE:CBCMN/
***	COMMON/LSL$CMNFRT:FRTACD/
C
C arguments
C
	INTEGER		FSN
C
C functions
C
	LOGICAL		IFS_CB_SCAN
C
	EXTERNAL	CF		! comparison routine for sorting
	EXTERNAL	SWAP		! swap routine for sorting
C
C workspace
C
	INTEGER		FILE		! which file we are looking at
	INTEGER		I,J		! short variable names
	LOGICAL		OK		! function return
	INTEGER*2	IECODE,IELEN
C
	INTEGER		NUM_CBS(2)
	INTEGER		NUM_COLS(2)
	INTEGER		CB_COLS(IFF_MAXCBCOL,2)
	LOGICAL		CB_SIMPLE(2)
C
C NUM_CBS	is the number of CBs in this feature
C NUM_COLS	is the number of columns used in this feature
C CB_COLS	is the header codes for the columns in this feature
C CB_SIMPLE	is true if the CBs in the feature are simple - ie only
C		contain X,Y and/or Z attributes
C
C **********************************************************************
C find the first CB for each feature and then scan the CB entries
C to determine what columns there are in the feature, etc
C
	DO 2000 FILE = 1,2
C
C	 select the relevant file, and position to the first CB
C
	   CALL IFFSEL(LUN(FILE))
	   CALL IFFPKE( IECODE, IELEN, LASTCB(FILE) )
	   IF ( IELEN .EQ. -1 .OR.
     &		IECODE.NE.'CB' ) CALL LOST(FILE,'SCANCB')
C
C	 scan the CB entries to determine CB data for the whole feature
C
	   OK = IFS_CB_SCAN( NUM_COLS(FILE),
     &			     CB_COLS(1,FILE),
     &			     NUM_CBS(FILE),
     &			     TOTAL_ROWS(FILE),
     &			     CB_SIMPLE(FILE)
     &			   )
C
	   IF ( .NOT.OK ) THEN
	      CALL LSL_PUTMSG( IDIFF__SCANCB, FSN, FILE )
	      CALL LSL_PUTMSG( OK )
	   ENDIF
C
2000	CONTINUE
C
C so we now have information for each feature - we must work out
C what we will be comparing. The first thing to do is to work out
C which columns are common to the two features - we can only compare
C columns that are in both.
C
C We will sort the CB_COLS arrays, so that they are at least
C in the same order
C
	DO 3000 FILE = 1,2
	   CALL SHELL_SORT( CB_COLS(1,FILE), NUM_COLS(FILE), CF, SWAP )
3000	CONTINUE
C
C and now look through them
C
	CALL SCANCOLS( FSN, NUM_COLS, CB_COLS )
C
C and work out the details we need for each column that is to be
C compared
C
	DO 6000 I = 1,NCOLS		! check each column
C
C	 look the column up in the ACD tables
C	 - this immediately gives us the datatype
C
	   CALL ACDFND( COLUMNS(I), .FALSE. )
	   DATATYPE(I) = ACD_DATA_TYPE
C
C	 if it is a real quantity, we need to work out a tolerance
C	 for it (we set the tolerance to 0.0 if it isn't real)
C
	   IF ( DATATYPE(I).EQ.ACD_DATATYPE_R ) THEN
	      IF ( ACD_INTERVAL.EQ.0.0 ) THEN
		 TOLERANCE(I) = DEFAULT_TOLERANCE
	      ELSE
		 TOLERANCE(I) = ACD_INTERVAL * TOLERANCE_FACTOR
	      ENDIF
	   ELSE
	      TOLERANCE(I) = 0.0
	   ENDIF
C
6000	CONTINUE
C
	RETURN
	END
