C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-11 15:00:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COMPMD
C
***	IDENT	11DE86
***	MODULE	COMPMD
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author J Price Williams, 19 September 1986
C Modified to fit current IDIFFERENCE by TJ Ibbs, 9 December 1986
C
C To read and compare two MD's
C
C Returns TRUE if they are different
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:IDIFFMSG/	! error message numbers
C
***	COMMON/LSL$CMNIFF:MAPDES/	! type 1 map descriptor
***	COMMON/LSL$CMNIFF:MD2DES/	! type 2 map descriptor
***	COMMON/LSL$CMNIFF:MD2NAM/	! and descriptor of type 2 MD
***	COMMON/LSL$CMNIFF:IFFHAN/	! for LPOSH
C
***	COMMON/HERE:FILES/
***	COMMON/HERE:PARAM/
C
C functions
C
	LOGICAL		COMPMD1,COMPMD2
C
C workspace
C
	LOGICAL		ALREADY		! true if already done header
	INTEGER*2	IELEN		! length of MD read
C
	INTEGER		FILE		! Which file
	INTEGER		I		! DO loop counter
	LOGICAL		HAD_MD(2)
C
C map descriptor storage - type 1
C
	REAL		SWCNR(4,2)		! SW and extent
	INTEGER*2	GRID_TYP(2)		! grid type
	REAL		GRID_ORI(4,2)		! grid origin & extent
	INTEGER*2	AUXG_TYP(2)		! aux. grid type
	REAL		AUXG_ORI(4,2)		! aux. grid origin & extent
	REAL		SCALE1(2)		! short scale
C
C map descriptor storage - type 2
C
	INTEGER		SPHER(2)		! spheroid
	REAL*8		LOC_X(2),LOC_Y(2)	! local origin coords
C
C and used for both, we have
C
	INTEGER		LENGTH(2)		! length of entry
	INTEGER		TYPE(2)			! MD type (0,1,2,etc)
	INTEGER		PROJN(2)       		! projection
	INTEGER		UNITS(2)		! units
	REAL*8		SCALE(2)		! scale of map
C
C *********************************************************************
C assume that they match
C
	COMPMD = .FALSE.
C
	ALREADY = .FALSE.
C
C Loop round twice to obtain all info for each MD before comparing
C
	DO 8000 FILE = 1, 2
C
C	 Reset the IFF files to the begining so that one can search
C	 for the map descriptor entry.
C
	   CALL IFFSEL(LUN(FILE))
	   CALL IFFRWD
	   CALL IFFNXC('MD',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      HAD_MD(FILE) = .FALSE.
	      IF (FULL) THEN
		 CALL PREHDR(' ',ALREADY)
		 CALL FLWRTF('MD (Map Descriptor)' //
     &			     ' entry missing in file %N',FILE)
	      ENDIF
	      GOTO 8000
	   ELSE
	      HAD_MD(FILE) = .TRUE.
	   ENDIF
C
C	 if we are /OS, then we don't compare the MD entries
C	 (although we do check that they exist)
C
	   IF (OS) GOTO 8000
C
C	 but otherwise we must read them in
C
C	   Store the length for later comparison
C
	   LENGTH(FILE) = IELEN
C
C	 - read it in to both types of MD array
C	   (being sure not to try to read too much)
C
	   IELEN = MIN(IELEN,MDLEN)
	   IELEN = MIN(IELEN,MD2LEN)
C
	   CALL EIHRI( MDARR,  IELEN, 1 )	! type 1
	   CALL EIHRI( MD2ARR, IELEN, 1 )	! type 2
C
C 	   and read the map descriptor contents into ourselves
C
 	   TYPE(FILE)   = MATV2		! remember the type
C
	   IF ( MATV2.EQ.0 .OR. MATV2.EQ.1 ) THEN	! version 1
C
	      IF (LENGTH(FILE).NE.MDLEN) THEN
		 CALL PREHDR(' ',ALREADY)
		 CALL FLWRTF(
     &		'**COMPMD** Type 1 MD in file %N has invalid length',
     &					      FILE )
	         GOTO 8000
	      ENDIF
	      DO 100 I = 1,4
		 SWCNR(I,FILE) = EMLE(I)	! SW corner & extent
100	      CONTINUE
	      GRID_TYP(FILE) = MGT		! grid type
	      DO 200 I = 1,4
		 GRID_ORI(I,FILE) = EMGO(I)	! grid origin & extent
200	      CONTINUE
	      PROJN(FILE) = MMP			! projection
	      UNITS(FILE) = MSCLD		! type of units
	      SCALE1(FILE) = EMSC		! scale
	      AUXG_TYP(FILE) = MAGT		! aux grid
	      DO 300 I = 1,4
		 AUXG_ORI(I,FILE) = EMAGO(I)	! aux grid origin & extent
300	      CONTINUE
C
 	   ELSEIF ( MATV2.EQ.2 ) THEN	   	! version 2
C
	      IF (LENGTH(FILE).NE.MD2LEN) THEN
		 CALL PREHDR(' ',ALREADY)
		 CALL FLWRTF(
     &		'**COMPMD** Type 2 MD in file %N has invalid length',
     &					      FILE )
	         GOTO 8000
	      ENDIF
	      LOC_X(FILE) = MD2LOC(1)		! local origin
	      LOC_Y(FILE) = MD2LOC(2)		!       of the sheet
	      SCALE(FILE) = MD2SCL		! scale
	      PROJN(FILE) = MD2PRJ		! projection
	      SPHER(FILE) = MD2SPH		! spheroid
	      UNITS(FILE) = MD2UNT		! units
C
	   ENDIF
C
8000	CONTINUE
C
C if there weren't two MDs, we can't compare
C
	IF ( .NOT.HAD_MD(1) .AND. .NOT.HAD_MD(2) ) GOTO 9999
	IF ( .NOT.HAD_MD(1) .OR.  .NOT.HAD_MD(2) ) THEN
	   COMPMD = .TRUE.
	   GOTO 9999
	ENDIF
C                                
C again, if we are /OS, we don't want to do any comparison
C
	IF (OS) GOTO 9999
C
C now, ensure that we get a blank line again...
C
	ALREADY = .FALSE.
C
C compare all the values to check that the two MDs are the same
C - first, are they the same type?
C
	IF ( TYPE(1).NE.TYPE(2) ) THEN
	   IF (FULL) THEN
	      CALL PREHDR('Map descriptor',ALREADY)
	      DO 500 I = 1,2
	         CALL EXPAND('File %N has a type %N MD entry',I,TYPE(I))
	         IF ( TYPE(I).EQ.0 ) THEN
	            CALL FLWAPP(' (type 1 - geographicals)')
	         ELSEIF ( TYPE(I).EQ.1 ) THEN
	            CALL FLWAPP(' (type 1 - grid coordinates)')
	         ELSEIF ( TYPE(I).EQ.2 ) THEN
	            CALL FLWAPP(' (type 2)')
	         ELSEIF ( TYPE(I).EQ.-1 ) THEN
	            CALL FLWAPP(' (unset)')
	         ELSE
	            CALL FLWAPP(' (not a valid map descriptor)')
	         ENDIF
500	      CONTINUE
	   ENDIF
	   COMPMD = .TRUE.
	   GOTO 9999
	ENDIF
C	
	IF (LENGTH(1).NE.LENGTH(2)) THEN
	   IF (FULL) THEN
	      CALL PREHDR('Map descriptor',ALREADY)
	      CALL FLWRTF('File 1 MD length is %I3',LENGTH(1))
	      CALL FLWRTF('File 2 MD length is %I3',LENGTH(2))
	   ENDIF
	   COMPMD = .TRUE.
	   GOTO 9999
	ENDIF
C
C now check the actual details of the map descriptor contents
C
	IF ( TYPE(1).EQ.0 .OR. TYPE(1).EQ.1 ) THEN
 	   COMPMD = COMPMD1( TYPE,SWCNR,GRID_TYP,GRID_ORI,
     &	      		     PROJN,UNITS,SCALE1,
     &			     AUXG_TYP,AUXG_ORI )
	   GOTO 9999
	ELSEIF ( TYPE(1).EQ.2 ) THEN
 	   COMPMD = COMPMD2( LOC_X,LOC_Y,SCALE,PROJN,SPHER,UNITS )
	   GOTO 9999
	ENDIF
C
9999	RETURN
	END
