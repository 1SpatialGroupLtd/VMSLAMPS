C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-01-26 14:37:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_2ND_FILE
C
***	IDENT 26JA87
***	MODULE GET_2ND_FILE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Author Tony J Ibbs, 8 December 1986
C Stolen from an original idea by Tom Timms
C
C This function looks for the rpevious version of the first input
C file to IDIFFERENCE
C
C It returns TRUE if it fails, FALSE if it succeeds
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! message values
***	PARAMETER/HERE:IDIFFMSG/	! message values
C
***	COMMON/LSL$CMNLSL:FILENAME/     ! the parts of a filename
***	COMMON/HERE:FILES/		! our filenames
C
C Functions
C
	LOGICAL		EXPFLN		! to expand new filename
	LOGICAL		PUTFLN		! put filename in common
	INTEGER		EXPAND		! expand text into a buffer
C
C Workspace
C
	LOGICAL		OK		! function return
	INTEGER		VERSION		! version number
C
C *********************************************************************
C assume the worst
C
	GET_2ND_FILE = .TRUE.
C
C expand the filename that we WERE given into /FILENAME/
C
	OK = PUTFLN( FIRST_FILE(:FIRST_LEN) )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( IDIFF__2NDNAME, FIRST_FILE(:FIRST_LEN) )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
C
C if the user specified a filename of the form LSL$IF:BLOGGIN.IFF;
C then HAD_VER will be TRUE, but LEN_VER will be zero, as the user
C has explicitly specified an absent version number!
C
C thus if there is a version number in /FILENAME/, we read it into
C VERSION, but otherwise assume that they meant ";0" - ie the most
C recent version of the file
C
	IF ( LEN_VER.NE.0 ) THEN
	   READ(STR_VER(1:LEN_VER),*) VERSION
	ELSE
	   VERSION = 0
	ENDIF
C
C we want to look at the file with the next version number down
C
	VERSION = VERSION-1
C
C so construct a new filename with that version number
C
	LEN_VER = EXPAND('%WS%^W%N',STR_VER,VERSION)
C
C and finally put the new filename where it should be
C
	OK = EXPFLN( SECOND_FILE, SECOND_LEN )
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( IDIFF__2NDNAME, SECOND_FILE(:SECOND_LEN) )
	   CALL LSL_ADDMSG( OK )
	   GOTO 9999
	ENDIF
C
C success
C
	GET_2ND_FILE = .FALSE.
C
9999	RETURN
   	END
