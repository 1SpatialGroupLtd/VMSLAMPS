C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-18 11:13:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GETNXT( ROW, FILE )
C
***	IDENT	18DE87
***	MODULE	GETNXT
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 18 May 1982
C
C to get the next row from the current feature in file number FILE
C returns TRUE if there isn't one to be had
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNIFF:CB.STR'
C
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/HERE:FILES/
***	COMMON/HERE:CBCMN/
***	COMMON/HERE:CMPIFF/
***	COMMON/HERE:PARAM/
C
C passed
C
	RECORD	/IFF_CBITEM/	ROW(IFF_MAXCBCOL)
	INTEGER			FILE
C
C workspace
C
	CHARACTER*255	STRING		! output line for debugging
	INTEGER*2	STRLEN		! its length
	INTEGER*2	IECODE
	INTEGER*2	IELEN
	INTEGER*4	TEMP		! to hold posn temporarily
C
C
	GETNXT = .TRUE.			! optimistic as ever
C
	CALL IFFSEL(LUN(FILE))
C
	IF (OFFSET(FILE).EQ.NROWS(FILE)) THEN
C
C	  we have reached the end of this CB, so we need to read
C	  in the next one. However, we must be able to backtrack
C	  to our current CB if needs be (for instance if we discover
C	  that array(,3,2) matches, but have read a new CB to get
C	  array(,5,2) and higher)
C
	   IF (ARM.GT.2) CALL FLWRTF(
     &				'.GETNXT - finished CB for file %N',
     &								 FILE)
	   TEMP = LPOSH			! remember where we are
10	   CALL IFFNXT(IECODE, IELEN)
	   IF (IELEN.EQ.-1) THEN	! end of file !!
C					! posn back to where we were
	      CALL IFFPKE( IECODE, IELEN, TEMP )
	      IF (IELEN.EQ.-1.OR.IECODE.NE.'CB') CALL LOST(FILE,'GETNXT')
	   ENDIF
C
	   IF (ARM.GT.2) CALL FLWRTF(
     &		 		'.       - next thing is %A2',IECODE)
C
	   IF (IECODE.EQ.'VO') GOTO 10	! ignore VOid
	   IF (IECODE.EQ.'JP') GOTO 10	! ignore Junction Pointer
	   IF (IECODE.NE.'CB') THEN
C
C	  the next thing was not a CB - unread it & give up
C
	      CALL IFFPKE( IECODE, IELEN, TEMP )
	      IF (IELEN.EQ.-1.OR.IECODE.NE.'CB') CALL LOST(FILE,'GETNXT')
	      GOTO 9999
C
	   ELSE
C
C	   we have another CB to read in - do so
C
	      LASTCB(FILE) = TEMP	! remember where we were
C
	      CALL READCB(FILE,.FALSE.)
C
C	   the new CB has now been read in - we haven't used it yet
C
	      OFFSET(FILE) = 0
	   ENDIF
	ELSE
C
C    we are not dealing with a first point in a CB, so
C
	   ISINVS(FILE) = .FALSE.		! not invis up to it
	ENDIF
C
C so if we reach here, then we definitely have a next point to read
C
	OFFSET(FILE) = OFFSET(FILE) + 1		! offset in CB
	PTR(FILE)    = PTR(FILE) + 1		! offset in feature
C
C read the appropriate row
C
	CALL IFS_CB_READ( CBHEADER(FILE), CBDATA(FILE),
     &			  ROW, NCOLS, COLUMNS,
     &			  OFFSET(FILE), OFFSET(FILE) )
C
	IF (ARM.GT.3) THEN
	   CALL FLWRTF('.GETNXT - file %N (off %N, ptr %N) has:',
     &			FILE,OFFSET(FILE),PTR(FILE) )
	   CALL IFF_FORMAT_ROW( STRING, STRLEN,
     &				ROW, NCOLS, COLUMNS )
	   CALL FLWSTR( STRING(:STRLEN) )
	ENDIF
C
	GETNXT = .FALSE.			! success
C
9999	RETURN
	END
