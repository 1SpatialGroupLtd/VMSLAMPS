C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-05 16:02:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE COMPAR( FSN )
C
***	IDENT	05JA88
***	MODULE	COMPAR
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 18 May 1982
C
C this routine manages the comparison of the feature details which
C were read in with GETEF
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/HERE:CBCMN/		! for HAD_SAME
***	COMMON/HERE:FEATUR/		! feature details
***	COMMON/HERE:COUNT/		! for DIFF_xx, etc
C
C passed
C
	INTEGER		FSN	! which feature we are looking at
C
C workspace
C
	INTEGER		TEMP	! minimum number of TSs
	INTEGER		I	! for a DO loop
	INTEGER		FILE	! ditto - which file
C
C *********************************************************************
C  NOTE that in a normal feature we will always have an FS and CBs
C	and in a composite feature, we will always have an FS, and
C	each component will have CBs
C
C make a note that we have output nothing for this feature, as yet
C
	NEWFSN = .TRUE.
	HADFHD = .FALSE.
C
C and that we assume (perhaps optimistically) that the two features
C will match nicely
C
	FAIL_FS     = .FALSE.	! FS entry
	FAIL_ACS    = .FALSE.	! AC entries
	FAIL_CB_XYZ = .FALSE.	! CB X,Y,Z data
	FAIL_CB_ATT = .FALSE.	! CB other data
	FAIL_CB_NUM = .FALSE.	! CB number of points
	FAIL_CB_COL = .FALSE.	! CB number of columns
	FAIL_TH     = .FALSE.	! TH entry
	FAIL_RO     = .FALSE.	! RO entry
	FAIL_TX     = .FALSE.	! TX entry
	FAIL_TS     = .FALSE.	! TS entry
	FAIL_COMP   = .FALSE.	! number of text components
C
	UNMATCHED = .FALSE.
C
	GEOM_DIFF   = .FALSE.	! for comparing geometry (X,Y,Z only)
	ATTR_DIFF   = .FALSE.	! for comparing attributes
	OTHR_DIFF   = .FALSE.	! for comparing non-graphic (FC etc)
C
C no current text component (and TS) yet, nor have we output a header
C for such
C
	CURRTS = 0
	TSHDR  = 0
C
C *********************************************************************
C first we come to the FS field:
C
	CALL COMPFS(FSN)		! the comparison is performed
C
C next comes the AC field (complexities to please us)
C
	CALL COMPAC(FSN)
C
C and compare the rest of the feature (if there is any)
C - this does not include anything after a TS
C
	CALL COMPREST(FSN)		! handles its own flags
C
C *********************************************************************
C if we have components in this feature, then we must process them
C one by one
C
	IF ( .NOT.HADTS(1) .AND. .NOT.HADTS(2) ) GOTO 5000
C
C so we have some components
C
	IF ( TSCNT(1).NE.TSCNT(2) ) THEN
	   CALL FSNHDR(FSN)
	   CALL EXPAND('Feature has %N component%m in file 1,',
     &				    TSCNT(1) )
	   CALL FLWAPP(' but %N in file 2',TSCNT(2))
	   FAIL_COMP = .TRUE.		! failed on number of components
 	   TEMP      = MIN(TSCNT(1),TSCNT(2))
	   IF (TEMP.GT.0) THEN
	      TSCNT(1) = TEMP
	      TSCNT(2) = TEMP		! only compare some
	      CALL FLWRTF('    comparing %N component%m',TEMP)
	   ELSE
	      GOTO 5000			! nothing to compare
	   ENDIF
	ENDIF
C
C so we are working through the components one by one
C - for each component, we must unset the HADxx flags - ie pretend that
C   we are at the start of a new feature...
C
	DO 4000 CURRTS = 1,TSCNT(1)
C
	   CALL VIOCLR( HAD(1), HAD_SIZ )	! clear the flags
	   DO 2000 FILE = 1,2
	      CALL SCANSUB(FILE,FSN,CURRTS)	! get the next TS...
2000	   CONTINUE
C
	   CALL COMPTS(FSN)			! compare the TS itself
	   CALL COMPREST(FSN)			! compare the rest
C
4000	CONTINUE
C
C *********************************************************************
C and work out what that has told us about this feature
C - firstly, separate out whether this was a graphical (geometrical),
C   attribute or other form of difference
C
5000	GEOM_DIFF = FAIL_CB_XYZ.OR.FAIL_CB_NUM
	ATTR_DIFF = FAIL_CB_ATT.OR.FAIL_CB_COL.OR.FAIL_ACS
	OTHR_DIFF = FAIL_FS.OR.FAIL_TH.OR.FAIL_RO.OR.FAIL_TX.OR.FAIL_TS
C
C - now work out our statistics
C
C Firstly, is this feature UNMATCHED, different or the same?
C (note our rather strange distinction between unmatched and different)
C
	IF ( UNMATCHED .OR. .NOT.HAD_SAME ) THEN
	   DIFF_UNMATCHED = DIFF_UNMATCHED +1
	ELSEIF ( GEOM_DIFF .OR. ATTR_DIFF .OR. OTHR_DIFF ) THEN
	   NFDIFF = NFDIFF +1
	ELSE
	   NFSAME = NFSAME +1
	ENDIF
C
C Secondly, if there was an actual difference in values, count it
C
	IF ( GEOM_DIFF .OR. ATTR_DIFF .OR. OTHR_DIFF ) THEN
	   IF (FAIL_FS)     DIFF_FS     = DIFF_FS     +1
	   IF (FAIL_ACS)    DIFF_ACS    = DIFF_ACS    +1
	   IF (FAIL_CB_XYZ) DIFF_CB_XYZ = DIFF_CB_XYZ +1
	   IF (FAIL_CB_ATT) DIFF_CB_ATT = DIFF_CB_ATT +1
	   IF (FAIL_CB_NUM) DIFF_CB_NUM = DIFF_CB_NUM +1
	   IF (FAIL_CB_COL) DIFF_CB_COL = DIFF_CB_COL +1
	   IF (FAIL_TH)     DIFF_TH     = DIFF_TH     +1
	   IF (FAIL_RO)     DIFF_RO     = DIFF_RO     +1
	   IF (FAIL_TX)     DIFF_TX     = DIFF_TX     +1
	   IF (FAIL_COMP)   DIFF_COMP   = DIFF_COMP   +1
	ENDIF
C
	RETURN
	END
