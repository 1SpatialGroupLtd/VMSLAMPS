C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-11 15:05:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COMPNS
C
***	IDENT	11DE86
***	MODULE	COMPNS
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 9 December 1986
C
C to compare NS entries - if we find any difference, then we
C print both lots out, and return TRUE
C
	IMPLICIT NONE
C
C
***	COMMON/HERE:FILES/
***	COMMON/HERE:FEATUR/	! for TEXT
***	COMMON/HERE:PARAM/	! for FULL
C
C workspace
C
	INTEGER*2	IELEN		! length of NS read
	INTEGER		FILE		! Which file
	INTEGER		I 		! DO loop counter
	INTEGER		NCHS(2)		! number of characters
	LOGICAL		HAD_NS(2)
	LOGICAL		ALREADY
C
C *********************************************************************
C assume that they match
C
	COMPNS = .FALSE.
C
	ALREADY = .FALSE.
C
C Loop round twice to obtain for each NS before comparing
C
	DO 8000 FILE = 1, 2
C
C	 Reset the IFF files to the begining so that one can search
C	 for the new section entry - assume that we find one before
C	 the start of the map data!
C
	   CALL IFFSEL(LUN(FILE))
	   CALL IFFRWD
	   CALL IFFNXC('NS',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      HAD_NS(FILE) = .FALSE.
	      IF (FULL) THEN
		 CALL PREHDR(' ',ALREADY)
		 CALL FLWRTF('NS (New Section)' //
     &			     ' entry missing in file %N',FILE)
	      ENDIF
	      GOTO 8000
	   ELSE
	      HAD_NS(FILE) = .TRUE.
	   ENDIF
C
C	 if we are /OS, then we don't compare the NS entries
C	 (although we do check that they exist)
C
	   IF (OS) GOTO 8000
C
C	 but otherwise we must read them in
C
	   CALL EIHRI( TEXT(1,FILE), IELEN, 1 )
C
C	 and work out the number of characters
C	 - remove a trailing null if necessary
C
	   NCHS(FILE) = 2*IELEN
	   IF ( TEXT(NCHS(FILE),FILE).EQ.0 )
     &					 NCHS(FILE) = NCHS(FILE)-1
C
8000	CONTINUE
C
C if one was missing, then that's it
C
	IF ( .NOT.HAD_NS(1) .AND. .NOT.HAD_NS(2) ) GOTO 9999
	IF ( .NOT.HAD_NS(1) .OR.  .NOT.HAD_NS(2) ) THEN
	   COMPNS = .TRUE.
	   GOTO 9999
	ENDIF
C
C again, if we are /OS, we don't want to do any comparison
C
	IF (OS) GOTO 9999
C
C compare the lengths
C
	IF ( NCHS(1).NE.NCHS(2) ) GOTO 9000	! different in length
C
C and now compare the strings themselves
C
	DO 8500 I = 1,NCHS(1)
	   IF ( TEXT(I,1).NE.TEXT(I,2) ) GOTO 9000	! different
8500	CONTINUE
	GOTO 9999					! the same
C
C so the two NS entries are not the same
C
9000	COMPNS = .TRUE.
	IF (FULL) THEN
	   CALL PREHDR(' ',ALREADY)
	   DO 9500 FILE = 1,2
	      TEXT(NCHS(FILE)+1,FILE) = 0
	      CALL FLWRTF('NS (New Section) entry in file %N',FILE)
	      CALL FLWRTF('%A255',TEXT(1,FILE))
9500	   CONTINUE
	ENDIF
C
9999	RETURN
	END
