C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-03 13:21:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GETEF(FILE,FSN)
C
***	IDENT	03JN88
***	MODULE	GETEF
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 18 May 1982
C
C to get to the EF of a feature, on the way reading in everything in it
C returns TRUE if got the EF and had a feature with (minimum) FS and ST
C else FALSE
C
C NOTE that much of this code is also used in SCANSUB
C      - if you edit this routine, check whether you should
C	 edit that one
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/HERE:CMPIFF/		! file details
***	COMMON/HERE:FEATUR/		! feature details
***	COMMON/HERE:CBCMN/		! CB details
***	COMMON/HERE:PARAM/		! for ARM
***	COMMON/LSL$CMNIFF:IFFHAN/	! IFF handling
C
C passed
C
	INTEGER		FILE		! which file we're using
	INTEGER		FSN		! feature serial number
C
C call
C
	LOGICAL		SCANTS
C
C workspace
C
	INTEGER*2	IELEN		! length
	INTEGER*2	IECODE		! 'NF','CB', etc
	INTEGER*2	IENDS		! bit coding
	INTEGER		IPTR
C
	GETEF = .FALSE.
	IF (ARM.GT.0) CALL FLWRTF('.GETEF - reading in feature %^L%N',
     &								FSN)
C
C so let's work our way through the feature
C
100	CALL IFFNXT(IECODE, IELEN)	! get next thing
	IF (IELEN.EQ.-1) THEN
	   CALL FLWRTF(
     &		'**GETEF** Unexpected end of feature %^L%N in file %N',
     &							FSN,      FILE)
	   GOTO 9999
	ENDIF
C
	IF (IECODE.EQ.'FS') GOTO 200
	IF (IECODE.EQ.'TH') GOTO 300
	IF (IECODE.EQ.'RO') GOTO 400
	IF (IECODE.EQ.'TX') GOTO 500
	IF (IECODE.EQ.'CB') GOTO 600
	IF (IECODE.EQ.'AC') GOTO 700
	IF (IECODE.EQ.'EF') GOTO 800
	IF (IECODE.EQ.'TS') GOTO 900
	IF (IECODE.EQ.'VO') GOTO 100		! ignore VOid
	IF (IECODE.EQ.'JP') GOTO 100		! ignore Junction Pointers
	IF (IECODE.EQ.'ST' .OR.
     &	    IECODE.EQ.'ZS') GOTO 650		! shouldn't be found
	CALL FLWRTF(
     &		'**GETEF** Unrecognised code %A2 in feature %^L%N, file %N',
     &				IECODE,		FSN,	FILE )
	GOTO 100
C
C and the things we found:
C
C FS - feature status
C
200	CALL EIHR( FSTATE(1,FILE), 4, 1 )
	HADFS(FILE) = .TRUE.
	GOTO 100
C
C TH - thickness (etc)
C
300	CALL EIHR( THICK(FILE), 1, 1 )
	HADTH(FILE) = .TRUE.
	GOTO 100
C
C RO - rotation
C
400	CALL EIHRR( ROTN(FILE), 1, 1 )
	HADRO(FILE) = .TRUE.
	GOTO 100
C
C TX - text string
C
500	CALL EIHR( TEXT(1,FILE), IELEN, 1 )
	TXLEN(FILE) = IELEN*2
	HADTX(FILE) = .TRUE.
	GOTO 100
C
C CB entry - rows of point and associated data
C	     (see also SCANSUB, which does much the same things)
C
600	IF (HADCB(FILE)) GOTO 100		! ignore all but the first
C
	LASTCB(FILE) = LPOSH			! remember where it is
	HADCB(FILE) = .TRUE.			! and note we had a CB
	GOTO 100
C
C ST or ZS - should never be seen now that CBs are being used
C
650	CALL FLWRTF(
     &		'**GETEF** Entry read as %A2 - should be seen as a CB',
     &					 IECODE)
	CALL FATAL(.TRUE.)
	GOTO 9999		! in fact, FATAL should never return
C
C AC - ancillary code
C
700	IF ( ACPTR(FILE).GE.MAX_ACS ) THEN
	   CALL FLWRTF('**GETEF** more than %N AC entries' //
     &		       ' in feature %N in file %N',
     &			MAX_ACS, FSN, FILE )
	   GOTO 100
	ENDIF
C
	ACPTR(FILE) = ACPTR(FILE) + 1	! next AC for this feature
	IPTR = ACPTR(FILE)
	CALL EIHR( ACTYPE(IPTR, FILE), 1, 1 )	! get its type
	CALL EIHR( ACCODE(IPTR, FILE), 2, 2 )	! and its code
C
C and is there any more data (presumably text) to check...
C
	IF (IELEN.GT.3) THEN
C
C	 read the text into the relevant part of ACTEXT
C
	   CALL EIHR( ACTEXT(1, IPTR, FILE), IELEN-3, 4 )
C
C	 deduce the length of the text
C	 - if the text is actually an odd number of characters long,
C	   then the IFF file would have contained a text padded up to
C	   an even number of characters with a null. In this case, we
C	   uncount the null, as it is not part of the text.
C	 - if the text is an even number of characters long, then the
C	   IFF file will not contain a null at the end, and we must add
C	   one (note that the text fields in ACTEXT are declared one
C	   character longer than necessary so that this is always possible)
C
	   ACTXP(IPTR, FILE) = (IELEN-3)*2
	   IF (ACTEXT(ACTXP(IPTR,FILE),IPTR,FILE).EQ.0) THEN
	      ACTXP(IPTR,FILE) = ACTXP(IPTR,FILE)-1
	   ELSE
	      ACTEXT(ACTXP(IPTR,FILE)+1,IPTR,FILE) = 0
	   ENDIF
	ELSE
	   ACTXP(IPTR, FILE) = 0		! regardless, set text ptr
	ENDIF
	HADAC(FILE) = .TRUE.
	GOTO 100
C
C EF - end of feature
C	for success, we must have had an FS, and either
C	a CB or a TS entry
C
800	IF (HADFS(FILE).AND. (HADCB(FILE).OR.HADTS(FILE))) THEN
	   GETEF = .TRUE.
	ENDIF
	GOTO 9999
C
C TS - start of first text component
C    - we just scan the rest of the feature for TS entries
C
900	IF ( SCANTS( FILE,FSN ) ) THEN
	   GOTO 800			! treat as end of feature
	ELSE
	   GOTO 9999			! failed
	ENDIF
C
9999	RETURN
	END
