	SUBROUTINE SCANCOLS( FSN, NUM_COLS, CB_COLS )
C
***	IDENT	05JA88
***	MODULE	SCANCOLS
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 9 December 1987
C
C Works out which columns are in both files, and which are not
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/HERE:FILES/
***	COMMON/HERE:PARAM/
***	COMMON/HERE:FEATUR/
***	COMMON/HERE:CBCMN/
***	COMMON/LSL$CMNFRT:FRTACD/
C
C arguments
C
	INTEGER		FSN
	INTEGER		NUM_COLS(2)
	INTEGER		CB_COLS(IFF_MAXCBCOL,2)
C
C workspace
C
	INTEGER		FILE		! which file we are looking at
	INTEGER		I,J		! short variable names
	INTEGER		K		! DO loop
	LOGICAL		OK		! function return
C
	INTEGER		EXTRA(IFF_MAXCBCOL,2)	! extra columns
	INTEGER		EP(2)			! pointer into EXTRA
C
C **********************************************************************
C look through the columns from the CBs in both files
C - note that since there cannot be more than IFF_MAXCBCOL columns
C   in either file, we don't need to check that NCOLS doesn't get
C   to be more than IFF_MAXCBCOL
C
	I     = 1		! start with first column in file 1
	J     = 1		! start with first column in file 2
	NCOLS = 0		! no columns in common yet
	EP(1) = 0		! no extra columns in file 1
	EP(2) = 0		! no extra columns in file 2
C
4000	IF ( CB_COLS(I,1).EQ.CB_COLS(J,2) ) THEN
C
C	 the column is present in both files - remember it
C
	   NCOLS = NCOLS+1
	   COLUMNS(NCOLS) = CB_COLS(I,1)
	   I = I+1
	   J = J+1
C
	ELSE
C
C	 otherwise, it is only present in one file
C	 - record it as being an extra column in that file
C
	   IF ( CB_COLS(I,1).LT.CB_COLS(J,2) ) THEN
	      EP(1) = EP(1)+1
	      EXTRA(EP(1),1) = CB_COLS(I,1)
	      I = I+1
	   ELSE
	      EP(2) = EP(2)+1
	      EXTRA(EP(2),2) = CB_COLS(J,2)
	      J = J+1
	   ENDIF
	ENDIF
C
C - if we have run out of columns in one file, add the remaining
C   columns from the other file to our extra list
C - otherwise, loop back for another pair of columns to inspect
C
	IF ( I.GT.NUM_COLS(1) ) THEN	! run out of file 1 columns
	   DO 5100 K = J,NUM_COLS(2)
	      EP(2) = EP(2)+1
	      EXTRA(EP(2),2) = CB_COLS(K,2)
5100	   CONTINUE
	ELSEIF ( J.GT.NUM_COLS(2) ) THEN
	   DO 5200 K = J,NUM_COLS(1)
	      EP(1) = EP(1)+1
	      EXTRA(EP(1),1) = CB_COLS(K,1)
5200	   CONTINUE
	ELSE
	   GOTO 4000		! compare next pair of columns
 	ENDIF
C
C so we reach here having placed the columns to be compared into
C the COLUMNS array, and those columns that are only in one file
C into the EXTRA array
C
C - report on the columns that are only in one file
C
C   (Note that we output ACD_NAME and EXTRA(I,n), rather than using
C    ACD_CODE. This is because ACDFND sets ACD_CODE to -1 if it can't
C    find the relevant ACD)
C
	IF ( EP(1).GT.0 .OR. EP(2).GT.0 ) THEN
	   FAIL_CB_COL = .TRUE.
	   CALL FSNHDR(FSN)
	   CALL FLWSTR('CB entries - some columns will not be compared')
	   DO 5300 I = 1,EP(1)
	      CALL ACDFND(EXTRA(I,1),.FALSE.)
	      CALL FLWRTF('Column %S (%I5) is only present in file 1',
     &				  ACD_NAME, EXTRA(I,1) )
5300	   CONTINUE
	   DO 5400 I = 1,EP(2)
	      CALL ACDFND(EXTRA(I,2),.FALSE.)
	      CALL FLWRTF('Column %S (%I5) is only present in file 2',
     &				  ACD_NAME, EXTRA(I,2) )
5400	   CONTINUE
	ENDIF
C
	RETURN
	END
