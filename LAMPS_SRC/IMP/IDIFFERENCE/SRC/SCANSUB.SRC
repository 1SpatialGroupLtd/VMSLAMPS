C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-18 11:13:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SCANSUB(FILE,FSN,WHICH)
C
***	IDENT	18DE87
***	MODULE	SCANSUB
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 18 May 1982
C
C to scan the current text component
C - reads in the relevant TS entry, and then reads through the
C   rest of the component
C returns TRUE if we end sensibly, FALSE if we should abandon this
C sub-feature
C
C
C NOTE that much of this code is also used in GETEF
C      - if you edit this routine, check whether you should
C	 edit that one
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/HERE:CMPIFF/
***	COMMON/HERE:FILES/		! file details
***	COMMON/HERE:FEATUR/		! feature details
***	COMMON/HERE:CBCMN/		! CB details
***	COMMON/HERE:PARAM/		! for ARM
***	COMMON/LSL$CMNIFF:IFFHAN/	! IFF handling
C
C passed
C
	INTEGER		FILE		! which file we're using
	INTEGER		FSN		! feature serial number
	INTEGER		WHICH		! number of this TS
C
C workspace
C
	INTEGER*2	IELEN		! length
	INTEGER*2	IECODE		! 'TS', etc
	INTEGER*2	IENDS		! bit coding
	INTEGER		IPTR
C
C
	IF (ARM.GT.0) CALL FLWRTF(
     &		'.SCANSUB - reading in component %N',WHICH)
C
C position to the TS entry
C
	CALL IFFSEL( LUN(FILE) )
	CALL IFFPKE( IECODE, IELEN, TSPOSN(WHICH,FILE) )
	IF ( IECODE.NE.'TS' .OR. IELEN.EQ.-1 )
     &					CALL LOST(FILE,'SCANSUB')
C
C we read the TS entry into our FS array
C
	CALL EIHR( FSTATE(1,FILE), 4, 1 )
C
C and reset the HAD flag !
C
	HADTS(FILE) = .TRUE.
C
C so let's work our way through the rest of the component
C
100	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) THEN
	   CALL FLWRTF('**SCANSUB** Unexpected end-of-file' //
     &		       ' in feature %N in file %N',FSN,FILE)
	   GOTO 9999
	ENDIF
C
	IF (IECODE.EQ.'TH') GOTO 300
	IF (IECODE.EQ.'RO') GOTO 400
	IF (IECODE.EQ.'TX') GOTO 500
	IF (IECODE.EQ.'CB') GOTO 600
	IF (IECODE.EQ.'EF') GOTO 900		! end at an EF
	IF (IECODE.EQ.'TS') GOTO 900		! or at a TS
	IF (IECODE.EQ.'VO') GOTO 100		! ignore any VOid
	IF (IECODE.EQ.'JP') GOTO 100		! ignore Junction Pointers
	IF (IECODE.EQ.'ST' .OR.
     &	    IECODE.EQ.'ZS') GOTO 650		! shouldn't be found
C
	CALL FLWRTF(
     &	'**SCANSUB** Unknown code %A2 in feature %^L%N, file %N',
     &				IECODE,		FSN,	FILE )
	GOTO 100
C
C and the things we found - these are direct copies of GETEF
C
C TH - thickness (etc)
C
300	CALL EIHR( THICK(FILE), 1, 1 )
	HADTH(FILE) = .TRUE.
	GOTO 100
C
C RO - rotation
C
400	CALL EIHRR( ROTN(FILE), 1, 1 )
	HADRO(FILE) = .TRUE.
	GOTO 100
C
C TX - text string
C
500	CALL EIHR( TEXT(1,FILE), IELEN, 1 )
	TXLEN(FILE) = IELEN*2
	HADTX(FILE) = .TRUE.
	GOTO 100
C
C CB entry - points and their attributes
C	     (see also GETEF, which does much the same things)
C
600	IF (HADCB(FILE)) GOTO 100		! ignore more CBs
C
	LASTCB(FILE) = LPOSH			! remember where it is
	HADCB(FILE) = .TRUE.		! and note we had it
	GOTO 100
C
C ST or ZS - should never be seen now that CBs are being used
C
650	CALL FLWRTF(
     &		'**SCANSUB** Entry read as %A2 - should be seen as a CB',
     &					 IECODE)
	CALL FATAL(.TRUE.)
	GOTO 9999		! in fact, FATAL should never return
C
C EF - end of feature
C TS - start of next text component
C
C	we must have an CB for a sensible component
C
900	IF ( .NOT.HADCB(FILE) ) THEN
	   CALL EXPAND('**SCANSUB** No CB entry in component')
	   CALL FLWAPP(' %N of feature %N in file %N',
     &			 WHICH,        FSN,       FILE )
	ENDIF
C
9999	RETURN
	END
