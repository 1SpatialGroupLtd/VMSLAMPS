	LOGICAL FUNCTION SCANTS(FILE,FSN)
C
***	IDENT	04DE87
***	MODULE	SCANTS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C Author TJ Ibbs, 10 December 1986
C
C to scan a feature for TS entries
C - assumes that we are already 'sitting on' a TS entry
C
C returns TRUE if we find an EF safely
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
C
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/HERE:CMPIFF/
***	COMMON/HERE:FEATUR/
C
C argument
C
	INTEGER		FILE		! which file we are in
	INTEGER		FSN		! which feature we are in
C
C workspace
C
	INTEGER*2	IELEN
	INTEGER*2	IECODE
C
C *********************************************************************
C assume the best
C
	SCANTS = .TRUE.
C
C record the first TS entry's position
C
	HADTS(FILE) = .TRUE.			! we had a TS
	TSCNT(FILE) = 1				! it's the first one
	TSPOSN( TSCNT(FILE), FILE ) = LPOSH	! position of this entry
C
C and now scan the entry
C - if we find a TS entry, log it
C - if we find an EF entry, then we have finished
C - end-of-file is treated similarly (to be consistent with GETEF, etc)
C
100	CALL IFFNXT( IECODE, IELEN )
C
	IF ( IELEN.EQ.-1 ) THEN
	   SCANTS = .FALSE.
	   CALL FLWRTF(
     &		'**SCANTS** Unexpected end-of-file scanning' //
     &		' feature %N in file %N', FSN, FILE )
	   GOTO 9000		! just finish
	ENDIF
	IF ( IECODE.EQ.'EF' ) GOTO 9000
	IF ( IECODE.NE.'TS' ) GOTO 100
C
C so we have another TS
C - do we have room for it?
C
	IF ( TSCNT(FILE).GE.MAX_TSS ) THEN
	   CALL FLWRTF('**SCANTS** more than %N TS entries' //
     &		       ' in feature %N in file %N',MAX_TSS,FSN,FILE)
	   GOTO 9000
	ENDIF
C
	TSCNT(FILE) = TSCNT(FILE)+1		! count it
	TSPOSN( TSCNT(FILE), FILE ) = LPOSH	! remember it
	GOTO 100
C
9000	RETURN
	END
