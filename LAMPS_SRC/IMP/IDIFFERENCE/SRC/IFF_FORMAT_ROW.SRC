
	LOGICAL FUNCTION IFF_FORMAT_ROW(STRING,STRLEN,ROW,NCOLS,COLS)
C
***	IDENT	14DE94
***	MODULE	IFF_FORMAT_ROW
C
C Copyright Laser-Scan Ltd., Cambridge, England
C Author TJ Ibbs, 8 December 1987
C
CMOD1446 Format IFF_ABSENT to be output as '?', rather than as a
C	 'real' 0.0, or other rubbish for int/char.
C	 For clarity, and for translationto the AXP	JB 09-Dec-1994
C
C This routine is called to put the description of an CB row
C into STRING in a nicely structured form.
C
C It outputs each column in a field of 15 characters, right justified.
C This means that STRLEN will always be a multiple of 15.
C
C It returns TRUE if the row was all fitted into STRING, and FALSE if
C any fields did not fit - in this case, partial fields are NOT output.
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'
C
C Arguments
	CHARACTER*(*)	STRING			! out - resultant string
	INTEGER*2	STRLEN			! out - length of data in STRING
C
	RECORD	/IFF_CBITEM/ROW(IFF_MAXCBATT)	! in - CB row
C
	INTEGER		NCOLS			! in - number of columns
	INTEGER		COLS(NCOLS)		! in - column headers
C
C Functions
	LOGICAL		ACDFND
	INTEGER*2	EXPAND
C
C Workspace
	INTEGER		I			! for a DO loop
	LOGICAL		NOT_KNOWN		! true if type can't be found
	CHARACTER*15	CODESTR			! representation of the column
	INTEGER*2	CODELEN			! and its length
	CHARACTER*15	RJUST			! right justified version
	INTEGER		MAXLEN			! length of STRING
C
	CHARACTER*1	ABS_FLAG		! for IFF_ABSENT
	REAL		REAL_EQUIV
	INTEGER		INT_EQUIV
	CHARACTER*4	CHAR_EQUIV
C
	EQUIVALENCE	(REAL_EQUIV,INT_EQUIV,CHAR_EQUIV)
C
C **********************************************************************
C note that we haven't added anything to STRING yet
C
	STRLEN = 0
C
C set it to spaces throughout
C
	STRING   = ' '
	ABS_FLAG = '?'
C
C and work out its length
C
	MAXLEN = LEN(STRING)
C
C we loop around for a value for each column of the row
C
	DO 2000 I = 1,NCOLS
C
C	 ensure that the /FRTACD/ common is set up
C	 - NB don't report any errors
C
	   NOT_KNOWN = ACDFND(COLS(I), .FALSE.)
C
C	 we must work out the code, using the format in /FRTACD/
C	 - note that if the code is characters, we surround it with quotes
C
C Deal with the characters
	   IF (ACD_DATA_TYPE .EQ. ACD_DATATYPE_C) THEN
C
	      CHAR_EQUIV = ROW(I).C
C
C Deal with IFF_ABSENT
	      IF (INT_EQUIV.EQ.IFF_ABSENT) THEN
		 CODELEN = EXPAND('%WS% %S1% ', CODESTR, ABS_FLAG)
C
	      ELSE
		 CODELEN = EXPAND('%WS% "'//ACD_FORMAT(:ACD_FORMAT_LEN)//'"',
     &				CODESTR, ROW(I) )
	      ENDIF
C
C Now do the real numbers
	   ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_R) THEN
	      REAL_EQUIV = ROW(I).R
C
C Deal with IFF_ABSENT
	      IF (INT_EQUIV.EQ.IFF_ABSENT) THEN
		 CODELEN = EXPAND('%WS% %S1% ', CODESTR, ABS_FLAG)
C
C Real number
	      ELSE
		 CODELEN = EXPAND('%WS% '//ACD_FORMAT(:ACD_FORMAT_LEN),
     &						CODESTR, ROW(I) )
	      ENDIF
C
C Now do the integers
	   ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_I) THEN
C
	      INT_EQUIV = ROW(I).I
C
C Deal with IFF_ABSENT
	      IF (INT_EQUIV.EQ.IFF_ABSENT) THEN
		 CODELEN = EXPAND('%WS% %S1% ', CODESTR, ABS_FLAG)
C
	      ELSE
		 CODELEN = EXPAND('%WS% '//ACD_FORMAT(:ACD_FORMAT_LEN),
     &						CODESTR, ROW(I) )
	      ENDIF
	   ENDIF
C
C	 and right justify it in the field
C
	   CALL RIGHT_JUSTIFY( CODESTR(:CODELEN), RJUST )
C
C	 and add it to the output string
C
	   IF (STRLEN+15 .GT. MAXLEN) THEN
	      IFF_FORMAT_ROW = .FALSE.		! failed
	      GOTO 9000				! no room - give up
C
	   ELSE
	      STRING(STRLEN+1:STRLEN+15) = RJUST
	      STRLEN = STRLEN +15
	   ENDIF
C
2000	CONTINUE
C
C and that's all we do
C
	IFF_FORMAT_ROW = .TRUE.		! success
C
9000	RETURN
	END
c
