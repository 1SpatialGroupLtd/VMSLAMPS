C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-11 11:40:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE READIN(FILE)
C
***	IDENT	11DE87
***	MODULE	READIN
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C read in the relevant data from the file given
C
	IMPLICIT NONE
C
	INTEGER		FILE		! number of file to read from
C
	INCLUDE	'LSL$CMNIFF:CB.STR'	! needed by FEATUR
C
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/HERE:FILES/
***	COMMON/HERE:CMPIFF/
***	COMMON/HERE:OVRLAY/
***	COMMON/HERE:FEATUR/
***	COMMON/HERE:PARAM/
***	COMMON/HERE:COUNT/
C
	INTEGER*2	IELEN
	INTEGER*2	IECODE
	INTEGER*4	TEMP
	CHARACTER*60	FILNAM
	INTEGER		LEN
	INTEGER		N
C
C set up for this file
C
	CALL IFFSEL( LUN(FILE) )
C
C read all NO-EO sections of file for current overlay number LAYER -
C these should have been set up by GETNOV, so that arrays LO_LAY & HI_LAY
C give pointers into index array LAYIND, and from there to actual overlay
C numbers in LAYNUM (for checking, if required) and addresses in NOPOSN
C
	DO 100 N = LO_LAY(FILE), HI_LAY(FILE)
C
C	 position to the next NO entry
C
	   CALL IFFPKE( IECODE, IELEN, NOPOSN(FILE,LAYIND(FILE, N)) )
	   IF (IELEN.EQ.-1.OR.IECODE.NE.'NO') CALL LOST(FILE,'READIN')
C
C	 now start reading things from this file
C
20	   CALL IFFNXT( IECODE, IELEN )		! next entry
	   IF (IELEN.EQ.-1) GOTO 999
	   IF (IECODE.EQ.'NF') GOTO 60		! new feature
	   IF (IECODE.EQ.'EO') GOTO 100		! end of overlay
	   GOTO 20				! something else
C
C	 NF - add this feature to our list
C
60	   TEMP = LPOSH			! remember where we are
	   NFNUM = 0			! clear in case bits >15 set
	   CALL EIHR(NFNUM,1,1)		! read the FSN (as unsigned)
	   NFNUM = IAND(NFNUM,65535)	! convert to unsigned longword
C
	   IF (NFNUM.EQ.0) THEN		! ignore empty NF 0
C
	      CALL IFFNXT(IECODE,IELEN)
	      IF (IELEN.EQ.-1) GOTO 999
	      IF (IECODE.NE.'EF') THEN
	         CALL EXPAND('**READIN**' //
     &	      	 ' Non-empty feature with FSN 0 in file %N',FILE )
	         CALL FLWAPP(' - feature ignored')
	         CALL IFFNXC('EF',IELEN)
	         IF (IELEN.EQ.-1) GOTO 999
	      ENDIF
C 
	   ELSEIF (NFNUM.GT.NFBIG) THEN
C
	      CALL FLWRTF('**READIN**' //
     &	      'found FSN %^L%N in file %N - bigger than %N !',
     &		         NFNUM,	       FILE,		NFBIG )
	      CALL FATAL(.TRUE.)
C 
	   ELSEIF (NFNUM.LT.0) THEN
C
	      CALL FLWRTF('**READIN**' //
     &	      'found FSN %^L%N in file %N - less than zero !',
     &		         NFNUM,	       FILE )
	      CALL FATAL(.TRUE.)
C
	   ELSE
C
	      IF (NFPOSN(NFNUM,FILE).NE.0) THEN
		 NFDUPL(FILE) = NFDUPL(FILE)+1		! count it
		 IF (FULL) THEN
	            CALL EXPAND('FSN %^L%N duplicated in file %N',
     &					NFNUM,		      FILE )
	            CALL FLWAPP(' - first occurrence ignored')
		 ENDIF
	      ENDIF
C
C	 copy the NEW position regardless of whether we had one already
C
	      NFPOSN(NFNUM,FILE) = TEMP		! remember the posn
	      IF (NFNUM.GT.MAXNF(FILE)) MAXNF(FILE) = NFNUM
	      IF (NFNUM.LT.MINNF(FILE)) MINNF(FILE) = NFNUM
C
	   ENDIF
	   GOTO 20		! get the next thing
C
C	 report end-of-file error
C
999	   CALL FLWRTF('**READIN** Unexpected end-of-file in file %N',
     &								FILE )
	   CALL FLWRTF('    scanning layer %N which starts at %P0%X8',
     &			LAYER, NOPOSN(FILE,LAYIND(FILE, N)) )
	   CALL FLWSTR('    attempting to continue')
C
100	CONTINUE
C
	RETURN
	END
