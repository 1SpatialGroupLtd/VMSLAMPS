C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-09 19:51:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GETNOV(FIRST)
C
***	IDENT	09DE86
***	MODULE	GETNOV
C
C	Author: S Hancock
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C get number of different overlay numbers in both maps
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:IDIFFMSG/
C
***	COMMON/HERE:OVRLAY/
C
C argument
C
	LOGICAL		FIRST
C
C workspace
C
	INTEGER		MAXOV		! largest overlay number
	INTEGER		PT1,PT2		! pointers
	INTEGER		SAV1,SAV2	! saved values of ptrs
	INTEGER		TEMP1,TEMP2	! probably overlay numbers
C
C FIRST true - just find how many overlays altogether
C
	IF (FIRST) THEN
C
	   PT1=0
	   PT2=0
	   DIFNOS=0		! no different NOs yet
	   MAXOV =-1		! no maximum NO yet
C
100	   PT1=PT1+1
	   PT2=PT2+1
	   TEMP1=-1
	   TEMP2=-1
	   IF (PT1.LE.CNTNOS(1)) TEMP1=LAYNUM(1,LAYIND(1,PT1))
	   IF (PT2.LE.CNTNOS(2)) TEMP2=LAYNUM(2,LAYIND(2,PT2))
C
C	 if we have finished going through the arrays, then
C	 set things ready for subsequent calls
C
	   IF (TEMP1.LT.0.AND.TEMP2.LT.0) THEN
	      PT1=0
	      PT2=0
	      GOTO 900
	   ENDIF
C
	   IF (TEMP1.GE.0.AND.(TEMP1.LE.TEMP2.OR.TEMP2.LT.0)) THEN
	      PT2=PT2-1		! backtrack on array 2
	      IF (TEMP1.GT.MAXOV) THEN
	         MAXOV=TEMP1
	         DIFNOS=DIFNOS+1
	      ENDIF
	   ELSE
	      PT1=PT1-1		! backtrack on array 1
	      IF (TEMP2.GT.MAXOV) THEN
	         MAXOV=TEMP2
	         DIFNOS=DIFNOS+1
	      ENDIF
	   ENDIF
	   GOTO 100
C
	ELSE
C
C FIRST false - get number of next overlay, & find which files it's in
C
200	   LAYER_PRESENT(1)=.FALSE.
	   SAV1=PT1
	   TEMP1=-1
	   PT1=PT1+1
	   IF (PT1.LE.CNTNOS(1)) THEN
	      TEMP1=LAYNUM(1,LAYIND(1,PT1))
	   ELSE
	      GOTO 220
	   ENDIF
C
210	   PT1=PT1+1
	   IF (PT1.GT.CNTNOS(1).OR.
     &	       LAYNUM(1,LAYIND(1,PT1)).NE.TEMP1) THEN
	      PT1=PT1-1
	   ELSE
	      GOTO 210
	   ENDIF
C
220	   LAYER_PRESENT(2)=.FALSE.
	   SAV2=PT2
	   TEMP2=-1
	   PT2=PT2+1
	   IF (PT2.LE.CNTNOS(2)) THEN
	      TEMP2=LAYNUM(2,LAYIND(2,PT2))
	   ELSE
	      GOTO 240
	   ENDIF
C
230	   PT2=PT2+1
	   IF (PT2.GT.CNTNOS(2).OR.
     &	       LAYNUM(2,LAYIND(2,PT2)).NE.TEMP2) THEN
	      PT2=PT2-1
	   ELSE
	      GOTO 230
	   ENDIF
C
C arrays exhausted - this shouldn't happen if DIFNOS was found correctly
C
240	   IF (TEMP1.LT.0.AND.TEMP2.LT.0) THEN
	      CALL LSL_PUTMSG( IDIFF__GETNOV, DIFNOS )
	      CALL FATAL( .TRUE. )
	   ENDIF
C
	   IF (TEMP1.EQ.TEMP2) THEN
	      LAYER=TEMP1
	      LAYER_PRESENT(1)=.TRUE.
	      LAYER_PRESENT(2)=.TRUE.
	      LO_LAY(1)=SAV1+1
	      HI_LAY(1)=PT1
	      LO_LAY(2)=SAV2+1
	      HI_LAY(2)=PT2
	   ELSEIF (TEMP1.GE.0.AND.
     &		  (TEMP1.LE.TEMP2.OR.TEMP2.LT.0))THEN
	      LAYER=TEMP1
	      LAYER_PRESENT(1)=.TRUE.
	      LO_LAY(1)=SAV1+1
	      HI_LAY(1)=PT1
	      PT2=SAV2			! reset pointer in unused array
	   ELSE
	      LAYER=TEMP2
	      LAYER_PRESENT(2)=.TRUE.
	      LO_LAY(2)=SAV2+1
	      HI_LAY(2)=PT2
	      PT1=SAV1			! reset pointer in unused array
	   ENDIF
C
	ENDIF
C
900	RETURN
	END
