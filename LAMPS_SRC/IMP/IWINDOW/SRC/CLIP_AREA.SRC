C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-25 13:03:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	LOGICAL FUNCTION CLIP_AREA(THIS_FSN,THIS_ISN,IECODE,IELEN,
     &	                           SUPPRESS,IGNORE_EF)
C
***	IDENT	25NO94
***	MODULE	CLIP_AREA
C
C	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Created					RJH	01-Jun-1988
C
CMOD892 Create window area feature if window completely enclosed by
C	area feature polygon			 JB	06-Jun-1990
C
CMOD1370 Use real*8 for XY array, and rename it to R8XY,
C	 to match PNTPOL arguments		 JB	25-Nov-1994
C
C	IMP IWINDOW Program - Clip the current area feature
C
C Description
C
C	This routine reads in all the points, clips the area,
C	and outputs the points if the feature was 
C	partially or completely within the bounds. It also does some 
C	other cruddy bits (like dealing with deleted features) which 
C	would not be necessary if that monster routine CLIP_MAP was 
C	properly structured (thus avoiding the repetition of code and 
C	pain in my brain trying to understand it).
C
C	Invisible line segments are preserved only where they are not 
C	clipped.
C
C	Returns true if it succeeds
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNIWIN:IWINMSG/	! message definitions
***	PARAMETER/LSL$CMNIWIN:MAX/	! maximum things
C
	INCLUDE		'($SSDEF)/NOLIST'
C
C Arguments in
	INTEGER		THIS_FSN	! feature serial number 
	INTEGER		THIS_ISN	! internal sequence number
	INTEGER*2	IECODE		! IFF entry code
	INTEGER*2	IELEN		! IFF entry length
	LOGICAL		SUPPRESS	! suppress clipping for feature
C
C Arguments out
	LOGICAL		IGNORE_EF	! ignore EF entry ?
C
C Common Blocks
***	COMMON/LSL$CMNIWIN:CLIP/	! contains boundaries
***	COMMON/LSL$CMNIWIN:COPY/	! transfer for output
***	COMMON/LSL$CMNIWIN:PARAMS/	! control parameters
***	COMMON/LSL$CMNIWIN:POLYGON/	! current polygon
C
C Functions called
	LOGICAL		READ_POINTS	! read in points
	LOGICAL		STOUT
	LOGICAL		ADDPTS
C
C Local Variables
	INTEGER*4	OUT_IND(MAXPOLY)	! indices for orig. pts
	REAL*4		OUT_XY(2,MAXPOLY)	! points on boundary
	INTEGER*4	OUT_PTS			! number of points
	LOGICAL		FINISHED		! no more features ?
	LOGICAL		NO_OVERLAP		! no intersection?
	LOGICAL		NEW_FEATURE		! start new feature in file ?
C
	INTEGER*4	LO_PT
	INTEGER*4	HI_PT
	INTEGER*2	THIS_FLAG
	INTEGER		EDGE_ATT(MAXATT)	! edge point attributes
	INTEGER		EDGE_ATTC(MAXATT)	! edge point attribute codes
C
	REAL		EDGE_Z			! interpolated Z
	INTEGER		EDGE_Z_L		! interpolated Z as integer
	EQUIVALENCE	(EDGE_Z,EDGE_Z_L)
C
	INTEGER		PTS_READ		! no. of points just read
	INTEGER		I,J			! counters
	REAL*4		OUR_CORNERS(2,5)	! clipping polygon corners
	REAL*8		R8XY(2)			! for PNTPOL
	INTEGER		SAV_POS,SAV_CNR 	! for PNTPOL
C
C Assume we will not succeed
C
	CLIP_AREA = SS$_NORMAL
C
	IGNORE_EF  = .FALSE.
	NO_OVERLAP = .FALSE.
C
C Get the points
C
	POLY_PTS = 0
C
100	IF (.NOT. READ_POINTS(POLY_XY(X,POLY_PTS+1),POLY_Z(POLY_PTS+1),
     &	   POLY_ATT(1,POLY_PTS+1),POLY_ATTC(1,POLY_PTS+1),
     &	   POLY_NATT(POLY_PTS+1),PTS_READ,THIS_FSN,THIS_ISN)) GOTO 999
C
C Expand out the column headers
C
	DO 120 J=2,PTS_READ
	   POLY_NATT(POLY_PTS+J) = POLY_NATT(POLY_PTS+1)
	   DO 110 I=1,POLY_NATT(POLY_PTS+J)
	      POLY_ATTC(I,POLY_PTS+J) = POLY_ATTC(1,POLY_PTS+1)
110	   CONTINUE
120	CONTINUE
C
C and the flags
C
	POLY_FLAGS(POLY_PTS+1) = IENDS
	DO 130 J=2,PTS_READ
	   POLY_FLAGS(POLY_PTS+J) = PENDWN
130	CONTINUE
C
C Increment our total
C
	POLY_PTS = POLY_PTS + PTS_READ
C
C Now look for the next IFF entry
C
	CALL IFFNXT(IECODE,IELEN)		! get next entry
	IF (IELEN.EQ.-1) GOTO 900		! unended feature
C
C If it's another CB, check we have room for more points
C
	IF (IECODE.EQ.'CB') THEN
	   IF (POLY_PTS .GT. (MAXPOLY-MAXST)) THEN
	      CALL LSL_PUTMSG(IWIN__TOOBIGFEAT,POLY_PTS,THIS_FSN,
     &							THIS_ISN)
	      GOTO 999
C
C If so, go back and repeat
C
	   ELSE
	      GOTO 100
	   ENDIF
	ENDIF
C
C Check we actually have an area to clip
C
	IF (POLY_PTS.LT.3) THEN
	   CALL LSL_PUTMSG(IWIN__NOTANAREA,THIS_FSN,THIS_ISN,POLY_PTS)
	   GOTO 999
	ENDIF
C
C Close the area if necessary
C
	IF ((POLY_XY(1,1) .NE. POLY_XY(1,POLY_PTS)) .OR.
     &	    (POLY_XY(2,1) .NE. POLY_XY(2,POLY_PTS))) THEN
	   POLY_PTS = POLY_PTS + 1
	   POLY_XY(1,POLY_PTS) = POLY_XY(1,1)
	   POLY_XY(2,POLY_PTS) = POLY_XY(2,1)
	   POLY_Z(POLY_PTS)    = POLY_Z(1)
	   DO 10 I=1,POLY_NATT(1)
	      POLY_ATT(I,POLY_PTS)  = POLY_ATT(I,1)
	      POLY_ATTC(I,POLY_PTS) = POLY_ATTC(I,1)
10	   CONTINUE
	   POLY_NATT(POLY_PTS) = POLY_NATT(1)
	   POLY_FLAGS(POLY_PTS) = PENDWN
	ENDIF
C
C Initialise the output buffer
C
	CURRNT = 0		! nothing written to outbuffer yet
	OUTBUF(X,0) = 0.0	! get rid of the last point for safety
	OUTBUF(Y,0) = 0.0
	TENDS  = PENUP		! start feature with pen up
C
C Initialise the output attribute codes
C
	OUTNATT = POLY_NATT(1)
	DO 210 I=1,OUTNATT
	   OUTATTC(I) = POLY_ATTC(I,1)
210	CONTINUE
C
C Set a limit on the number of points to output
C
	STLIM = MAXST
C
C Initialise attributes for edge points and indicate not starting new 
C feature
C
	EDGE_Z_L = IFF_ABSENT
	CALL INIATT(EDGE_ATT,MAXATT)
	CALL INIATT(EDGE_ATTC,MAXATT)
	NEW_FEATURE = .FALSE.
C
C If this feature is suppressed from clipping, just fix up the points 
C to output
C
	IF (SUPPRESS) THEN
	   OUT_PTS     = 2
	   OUT_IND(1)  = 1
	   OUT_XY(1,1) = 0.0
	   OUT_XY(2,1) = 0.0
	   OUT_IND(2) = -POLY_PTS
	   OUT_XY(1,2) = 0.0
	   OUT_XY(2,2) = 0.0
	   FINISHED = .FALSE.
C
C Otherwise we start clipping - first set up the clipping window if we 
C have not yet done so
C
	ELSE
C
C Set up clipping window if not already done
C
	   IF (.NOT. DONE_AREA) THEN
	      OUR_CORNERS(1,1) = CLIPLO(W)
	      OUR_CORNERS(2,1) = CLIPLO(S)
	      OUR_CORNERS(1,2) = CLIPLO(W)
	      OUR_CORNERS(2,2) = CLIPHI(N)
	      OUR_CORNERS(1,3) = CLIPHI(E)
	      OUR_CORNERS(2,3) = CLIPHI(N)
	      OUR_CORNERS(1,4) = CLIPHI(E)
	      OUR_CORNERS(2,4) = CLIPLO(S)
	      OUR_CORNERS(1,5) = OUR_CORNERS(1,1)
	      OUR_CORNERS(2,5) = OUR_CORNERS(2,1)
	      CALL SET_CORNERS(OUR_CORNERS,5)
	      DONE_AREA = .TRUE.
	   ENDIF
C
C Now start off this feature
C
	   CALL START_AREA
C
C Hand over all our points in one go
C
	   CALL FIND_INTER(POLY_XY,POLY_PTS)
C
C Get the first lot of points back
C
	   CALL GET_FEATURE(MAXPOLY,OUT_IND,OUT_XY,OUT_PTS,
     &					FINISHED,NO_OVERLAP)
C
C Check if window totally inside polygon, and if so, set up output 
C indices to create a feature from the window with edge point attributes
C
C NO_OVERLAP is true if there was no intesection between polygon and 
C window, and a polygon point was not inside the window (ie. all polygon
C points inside the window). If totally inside, OUT_IND will signal this
C
	   IF (NO_OVERLAP) THEN
C
C Must check that any window point is inside the polygon
C
	      R8XY(1) = OUR_CORNERS(1,1)
	      R8XY(2) = OUR_CORNERS(2,1)
C
C FIND_INTER will have already coped with any points lying on a window
C edge or vertex, and suitably shifted any that did
C
	      CALL PNTPOL(R8XY,POLY_XY,POLY_PTS,SAV_POS,SAV_CNR)
C
	      IF (SAV_POS.EQ.1) THEN
	         OUT_PTS = 5
	         DO 211 I = 1,OUT_PTS
		    OUT_IND(I) = 0
		    OUT_XY(1,I) = OUR_CORNERS(1,I)
		    OUT_XY(2,I) = OUR_CORNERS(2,I)
211	         CONTINUE
C
	      ELSE
		 GOTO 400
	      ENDIF
	   ENDIF
C
	   IF (.NOT.FINISHED) THEN
	      CLIPPD = (  OUT_PTS.NE.2 .OR. OUT_IND(1).NE.1 .OR.
     &			 (OUT_IND(2).NE.-POLY_PTS) .OR. NO_OVERLAP)
C
	   ENDIF
	ENDIF
C
C Check if we are finished
C
300	IF (FINISHED) GOTO 400
C
C Go through each lot of points returned in turn
C
	DO 310 I=1,OUT_PTS
	   J = OUT_IND(I)
	   IF (I .EQ. 1) THEN
	      THIS_FLAG = PENUP
	   ELSE
	      NEW_FEATURE = .FALSE.
	      THIS_FLAG = PENDWN
	   ENDIF
C
C Single original point
C
	   IF (J .GT. 0) THEN
	      CLIP_AREA = ADDPTS(POLY_XY(1,J),POLY_Z(J),POLY_ATT(1,J),
     &	                  POLY_ATTC(1,J),POLY_NATT(J),1,THIS_FLAG,
     &	                  NEW_FEATURE)
	      IF (.NOT.CLIP_AREA) GOTO 999
C
C Range of original points
C
	   ELSEIF (J .LT. 0) THEN
	      LO_PT = OUT_IND(I-1) + 1
	      HI_PT = -J
	      CLIP_AREA = ADDPTS(POLY_XY(1,LO_PT),POLY_Z(LO_PT),
     &	                  POLY_ATT(1,LO_PT),POLY_ATTC(1,LO_PT),
     &	                  POLY_NATT(LO_PT),HI_PT-LO_PT+1,
     &	                  POLY_FLAGS(LO_PT),NEW_FEATURE)
	      IF (.NOT.CLIP_AREA) GOTO 999
C
C New point on edge
C
	   ELSE 	! J=0
	      CLIP_AREA = ADDPTS(OUT_XY(1,I),EDGE_Z,EDGE_ATT,EDGE_ATTC,0,1,
     &	                  THIS_FLAG,NEW_FEATURE)
	      IF (.NOT.CLIP_AREA) GOTO 999
	   ENDIF
310	CONTINUE
C
C If the feature was suppressed from clipping, we have now finished
C
	IF (SUPPRESS .OR. NO_OVERLAP) THEN
	   FINISHED = .TRUE.
	   GOTO 400
C
C Get another feature
C
	ELSE
	   CALL GET_FEATURE(MAXPOLY,OUT_IND,OUT_XY,OUT_PTS,
     &					FINISHED,NO_OVERLAP)
	   NEW_FEATURE = (.NOT. FINISHED)
	ENDIF
C
C Go back for test
C
	GOTO 300
C
C Now flush out the remaining points
C
400	IF (CURRNT .GT. 0) THEN
	   CLIP_AREA = STOUT()
	   IF (.NOT.CLIP_AREA) GOTO 999
C
C If nothing has been output for this feature, say so and delete it
C
	ELSEIF (.NOT. DONOUT) THEN
	   IF (HADLOG) THEN
	      CALL FLWRTF('Feature %N (%N) deleted',THIS_FSN,THIS_ISN)
	   ENDIF
	   DELNF = DELNF+1		! another feature deleted
	   NONF  = .TRUE.		! no longer in a feature
	   HADST = .FALSE.		! no longer had an ST
	   HADTC = .FALSE.		! no more TC/CHs in this ft
	   IF (IECODE .NE. 'EF') THEN		! not at the EF
	      CALL IFFNXC('EF',IELEN)		! so find it
	      IF (IELEN .EQ. -1) GOTO 900	! unexpected end of file
	   ENDIF
	   IGNORE_EF = .TRUE.		! ignore the EF on return
	ENDIF
C
C We have succeeded
C
	GOTO 1000
C
C Unexpected end of input file
C
900	CALL LSL_PUTMSG(IWIN__UNEXPEOI)
	CALL LSL_ADDMSG(IWIN__FEATINCOMP,THIS_FSN,THIS_ISN)
C
C Assign function value
C
999	CLIP_AREA = SS$_ABORT
C
C Return
1000	RETURN
	END
C
