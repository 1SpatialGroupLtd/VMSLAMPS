C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-06 18:15:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY
C
***	IDENT	06JN90
***	MODULE	OBEY
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD892 Translate logical name LSL$EMPTY_LITES2_GUIDANCE to signal
C	whether to create (if /LITES2) an empty LCM file if there were 
C	no reentrant features (LSL$EMPTY_LITES2_GUIDANCE = 1)
C						 JB	06-Jun-1990
C
CMOD	/RESET_CP qualifier added               DRC     23-Jun-1988
C
CMOD    Introduce /ABSOLUTE qualifier		RWR	10-Jun-1988
C       (implies R*8 values for NBOUND, SBOUND etc)
C
C	Created					RJH	16-May-1986
C
C	IMP IWINDOW Program - Get and decode command line
C
C Description
C
C
	IMPLICIT NONE
C
C Local Parameters
C
	CHARACTER*60	DEFIN		! default input IFF filename
	PARAMETER	(DEFIN  = 'LSL$IF:IFF.IFF;0')
	CHARACTER*60	DEFOUT		! default output IFF filename
	PARAMETER	(DEFOUT = 'LSL$IF:IFF.IFF')
	CHARACTER*60	DEFFRT		! default FRT filename
	PARAMETER	(DEFFRT = 'LSL$FRT:FRT.FRT')
	CHARACTER*60	DEFLCM		! default LITES2 filename
	PARAMETER	(DEFLCM = 'LSL$LITES2CMD:.LCM')
	CHARACTER*60	DEFLOG		! default log filename
	PARAMETER	(DEFLOG = 'SYS$DISK:IWINDOW.LIS')
C
	INTEGER*4	MAXWORD		! largest number for a word
	PARAMETER	(MAXWORD = 32767)
C
C Included Parameter Files
C
	INCLUDE '($STSDEF)/NOLIST'
C
***	PARAMETER/LSL$CMNIWIN:IWINMSG/	! message definitions
***	PARAMETER/LSL$CMNIWIN:MAX/	! maximum things
C
C Common Blocks
C
***	COMMON/LSL$CMNIWIN:PARAMS/	! control parameters
***	COMMON/LSL$CMNLSL:CLD/		! DCL command decoding
***	COMMON/LSL$CMNLSL:FILENAME/	! LSLLIB filename expansion
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
        INTEGER*4       DCL_STARTUP	! looks for command line
	INTEGER*4	DCL_FILE	! reads & parses file title
	INTEGER*4	DCL_QUAL	! looks for specified qualifier
	INTEGER*4	DCL_INT		! read integers
	INTEGER*4	DCL_DBL		! read real*8
	INTEGER*4	DCL_REAL	! read reals
	INTEGER*4	PARFILN		! parse filename
	INTEGER*4	EXPFLN		! expand filename
	INTEGER*4	TRNALL		! translate logical name
C
C Local variables
C
	INTEGER*4	OK		! error return
	INTEGER*4	I		! counter
	LOGICAL*4	ABSENT		! set if file param. not found
	LOGICAL*4	LOCAL		! set if qual. is local
	LOGICAL*4	LOCNEG		! set if qual. locally negated
        LOGICAL*4	WHINGE		! set-local error reporting
	LOGICAL*4	GOTFC		! got FC_IGNORE qualifier ?
	LOGICAL*4	GOTLAY		! got LAYER_IGNORE qualifier ?
	CHARACTER*(C_NAM_SIZ)	DEFNAM	! default LITES2 file name part 
	CHARACTER*1	TRANS		! logical name translation
C
C Command Language Definitions
C
	EXTERNAL	IWINDOW_CLD
C
C Initialisation for command line decoding
C
	WHINGE = .TRUE.			! report errors locally
C
C Unset all control flags
C
	OSMODE   = .FALSE.
	HADLOG   = .FALSE.
	RETAIN   = .FALSE.
	RESET_CP = .FALSE.
	BY_LAYER = .FALSE.
	DEBUG    = .FALSE.
	HADC     = .FALSE.
	HADMH    = .FALSE.
	VOID     = .FALSE.
	CLPGRD   = .FALSE.
	HADT     = .FALSE.
	ORIGIN   = .FALSE.
C *****	HADBRK   = .FALSE.
	HADN     = .FALSE.
	HADS     = .FALSE.
	HADE     = .FALSE.
	HADW     = .FALSE.
	HADOFF   = .FALSE.
	HADFRT   = .FALSE.
C
	HADLCM      = .FALSE.
	KEEP_LCM    = .FALSE.
	HAD_LCM_OUT = .FALSE.
C
	HADOUT   = .FALSE.
	HADAREA  = .FALSE.
	HADABS   = .FALSE.
	GOTFC    = .FALSE.
	GOTLAY   = .FALSE.
	NUMFC    = 0
	NUMLAY   = 0
	AREA_FC  = 0
	AREA_LAY = 0
C
C Get command line. DCL_STARTUP will return SS$NORMAL if all well.
C
	OK=DCL_STARTUP('IWINDOW'	! command verb
     &      ,.FALSE.			! don't split parameter lists
     &      ,IWINDOW_CLD		! CLD module name
     &      ,WHINGE)			! set -local error reporting
        IF(.NOT.OK) GOTO 999
C
C Get input file-name 
C
	OK=DCL_FILE('IN_FILESPEC'	! parameter label
     &		,DEFIN			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Transfer file-spec 
C
	IFFIN = FILARY(1)(1:FIL_LEN(1))
	INLEN = FIL_LEN(1)
C
C Set up the default output filename
C
	HAD_VER = .FALSE.
	OK = EXPFLN(IFFOUT,OUTLEN)
	IF (.NOT. OK) CALL LSL_PUTMSG(OK)
C
C Get output file-name if it is there
C
	OK=DCL_FILE('OUT_FILESPEC'	! parameter label
     &		,IFFOUT(1:OUTLEN)	! default is input filename
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	IF (.NOT. ABSENT) THEN
	   IFFOUT = FILARY(1)(1:FIL_LEN(1))
	   OUTLEN = FIL_LEN(1)
	ENDIF
C
C Save the name part of the output filename
C
	DEFNAM = STR_NAM(1:LEN_NAM)
C
C /LITES2 qualifier
C
	OK=DCL_QUAL('LITES2'		! qual. name
     &        		,HADLCM		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C If we have the qualifier, first parse the output name part against the
C template to get the default.
C
	IF (HADLCM) THEN
	   OK = PARFILN(LCMFIL,LCMLEN,DEFNAM,DEFLCM,.FALSE.)
	   IF (.NOT. OK) THEN
	      CALL LSL_PUTMSG(OK)
	      IF ((OK .AND. STS$M_SEVERITY) .NE. STS$K_WARNING) 
     &	         GO TO 999
	   ENDIF
C
C Now get the actual filename if given
C
	   OK=DCL_FILE('LITES2'		! qualifier
     &		,LCMFIL(1:LCMLEN)	! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Set file-spec 
C
	   IF (.NOT. ABSENT) THEN
	      LCMFIL = FILARY(1)(1:FIL_LEN(1))
	      LCMLEN = FIL_LEN(1)
	   ENDIF
	ENDIF
C
C Translate logical name LSL$EMPTY_LITES2_GUIDANCE to signify
C whether an empty LCM file should be deleted (0), or kept (1)
C
	IF (HADLCM) THEN
C
	   OK = TRNALL('LSL$EMPTY_LITES2_GUIDANCE',TRANS)
C
	   IF (.NOT.OK) THEN
	      CALL LSL_PUTMSG(IWIN__FAILTRANSLOG,
     &			   	'LSL$EMPTY_LITES2_GUIDANCE')
	      CALL LSL_ADDMSG(OK)
	      GOTO 999
	   ENDIF
C
	   IF (TRANS.EQ.'1') THEN
	      KEEP_LCM = .TRUE.
	   ELSEIF (TRANS.EQ.'0') THEN
	      KEEP_LCM = .FALSE.
	   ELSE
	      CALL LSL_PUTMSG(IWIN__ERRLOGNAME,
     &				'LSL$EMPTY_LITES2_GUIDANCE', TRANS)
	      OK = IWIN__ERRLOGNAME
	      GOTO 999
	   ENDIF
C
	ENDIF
C
C /FRT qualifier
C
	OK=DCL_QUAL('FRT'		! qual. name
     &        		,HADFRT		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Now get the filename
C
	IF (HADFRT) THEN
	   OK=DCL_FILE('FRT'		! qualifier
     &		,DEFFRT			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   FRTFIL=FILARY(1)(1:FIL_LEN(1))
	   FRTLEN=FIL_LEN(1)
	ENDIF
C
C /OUTPUT qualifier
C
	OK=DCL_QUAL('OUTPUT'		! qual. name
     &        		,HADOUT		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Now get the filename
C
	IF (HADOUT) THEN
	   OK=DCL_FILE('OUTPUT'		! qualifier
     &		,DEFLOG			! default file-name
     &		,ABSENT			! set if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   LOGFIL=FILARY(1)(1:FIL_LEN(1))
	   LOGLEN=FIL_LEN(1)
C
C or set the default as SYS$OUTPUT
C
	ELSE
	   LOGFIL = 'SYS$OUTPUT'
	   LOGLEN = 10
	ENDIF
C
C /OS qualifier
C
	OK=DCL_QUAL('OS'		! qual. name
     &        		,OSMODE		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /LOG qualifier
C
	OK=DCL_QUAL('LOG'		! qual. name
     &        		,HADLOG		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /RETAIN_FSN qualifier
C
	OK=DCL_QUAL('RETAIN_FSN'	! qual. name
     &        		,RETAIN		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /RESET_CP qualifier
C
	OK=DCL_QUAL('RESET_CP'		! qual. name
     &        		,RESET_CP	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /FSN_BY_LAYER qualifier
C
	OK=DCL_QUAL('FSN_BY_LAYER'	! qual. name
     &        		,BY_LAYER	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /DEBUG qualifier
C
	OK=DCL_QUAL('DEBUG'		! qual. name
     &        		,DEBUG		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /CONTROL_POINTS qualifier
C
	OK=DCL_QUAL('CONTROL_POINTS'	! qual. name
     &        		,HADC		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /MAP_HEADER qualifier
C
	OK=DCL_QUAL('MAP_HEADER'	! qual. name
     &        		,HADMH		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /VOID qualifier
C
	OK=DCL_QUAL('VOID'		! qual. name
     &        		,VOID		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /CLIP_GRID qualifier
C
	OK=DCL_QUAL('CLIP_GRID'		! qual. name
     &        		,CLPGRD		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /KEEP_TEXT qualifier
C
	OK=DCL_QUAL('KEEP_TEXT'		! qual. name
     &        		,HADT		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /ORIGIN qualifier
C
	OK=DCL_QUAL('ORIGIN'		! qual. name
     &        		,ORIGIN		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C /BREAK qualifier
C
C *****	OK=DCL_QUAL('BREAK'		! qual. name
C     &        		,HADBRK		! returned .T. if qual. found
C     &			,LOCAL		! set if qual local to parameter
C     &			,LOCNEG		! set if qual. negated locally
C     &			,WHINGE)	! set-local error reporting
C *****	IF(.NOT.OK) GOTO 999
C
C /FC_IGNORE qualifier
C
	OK=DCL_QUAL('FC_IGNORE'		! qual. name
     &        		,GOTFC		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the feature codes
C
	IF (GOTFC) THEN
	   OK=DCL_INT('FC_IGNORE'	! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	   IF (NUMINT .GT. MAXFC) THEN	! got too many
	      CALL LSL_PUTMSG(IWIN__TOOMANYFC,NUMINT,'FC_IGNORE',MAXFC)
	      OK = LSL_STATUS
	      GO TO 999
	   ELSE
	      NUMFC = NUMINT
	      DO 100 I=1,NUMFC
	         IF ((IARRAY(I) .LT. 0) .OR. 
     &				(IARRAY(I) .GT. MAXWORD)) THEN
	            CALL LSL_PUTMSG(IWIN__ILLEGFC,IARRAY(I),'FC_IGNORE')
	            OK = LSL_STATUS
	            GO TO 999
	         ENDIF
	         FCTAB(I) = IARRAY(I)
100	      CONTINUE
	   ENDIF
	ENDIF
C
C /LAYER_IGNORE qualifier
C
	OK=DCL_QUAL('LAYER_IGNORE'	! qual. name
     &        		,GOTLAY		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the layers
C
	IF (GOTLAY) THEN
	   OK=DCL_INT('LAYER_IGNORE'	! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	   IF (NUMINT .GT. MAXLAY) THEN	! got too many
	      CALL LSL_PUTMSG(IWIN__TOOMANYLAY,
     &				NUMINT,'LAYER_IGNORE',MAXLAY)
	      OK = LSL_STATUS
	      GO TO 999
	   ELSE
	      NUMLAY = NUMINT
	      DO 200 I=1,NUMLAY
	         IF ((IARRAY(I) .LT. 0) .OR. 
     &				(IARRAY(I) .GT. MAXWORD)) THEN
	            CALL LSL_PUTMSG(IWIN__ILLEGLAY,
     &					IARRAY(I),'LAYER_IGNORE')
	            OK = LSL_STATUS
	            GO TO 999
	         ENDIF
	         LAYTAB(I) = IARRAY(I)
200	      CONTINUE
	   ENDIF
	ENDIF
C
C /AREA qualifier
C
	OK=DCL_QUAL('AREA'		! qual. name
     &        		,HADAREA	! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Reset the flags for safety
C
	IF (HADAREA) THEN
	   GOTFC  = .FALSE.
	   GOTLAY = .FALSE.
C
C Check for FC keyword
C
	   OK=DCL_QUAL('AREA.FC'	! keyword name
     &        		,GOTFC		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the feature codes
C
	   IF (GOTFC) THEN
	      OK=DCL_INT('AREA.FC'	! qual. name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	      IF (NUMINT .GT. MAXFC) THEN	   ! got too many
	         CALL LSL_PUTMSG(IWIN__TOOMANYFC,NUMINT,'AREA',MAXFC)
	         OK = LSL_STATUS
	         GO TO 999
	      ELSE
	         AREA_FC = NUMINT
	         DO 300 I=1,AREA_FC
	            IF ((IARRAY(I) .LT. 0) .OR. 
     &				(IARRAY(I) .GT. MAXWORD)) THEN
	               CALL LSL_PUTMSG(IWIN__ILLEGFC,IARRAY(I),'AREA')
	               OK = LSL_STATUS
	               GO TO 999
	            ENDIF
	            AREA_FCTAB(I) = IARRAY(I)
300	         CONTINUE
	      ENDIF
	   ENDIF
C
C Check for LAYER keyword
C
	   OK=DCL_QUAL('AREA.LAYER'	! keyword name
     &        		,GOTLAY		! returned .T. if keyword found
     &			,LOCAL		! set if local to parameter
     &			,LOCNEG		! set if negated locally
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C Get the layers
C
	   IF (GOTLAY) THEN
	      OK=DCL_INT('AREA.LAYER'	! qual. name
     &			,WHINGE)	! set-local error reporting
	      IF(.NOT.OK) GOTO 999
C
C and transfer them
C
	      IF (NUMINT .GT. MAXLAY) THEN	! got too many
	         CALL LSL_PUTMSG(IWIN__TOOMANYLAY,NUMINT,'AREA',MAXLAY)
	         OK = LSL_STATUS
	         GO TO 999
	      ELSE
	         AREA_LAY = NUMINT
	         DO 400 I=1,AREA_LAY
	            IF ((IARRAY(I) .LT. 0) .OR. 
     &				(IARRAY(I) .GT. MAXWORD)) THEN
	               CALL LSL_PUTMSG(IWIN__ILLEGLAY,IARRAY(I),'AREA')
	               OK = LSL_STATUS
	               GO TO 999
	            ENDIF
	            AREA_LAYTAB(I) = IARRAY(I)
400	         CONTINUE
	      ENDIF
	   ENDIF
	ENDIF
C
C /NORTH qualifier
C
	OK=DCL_QUAL('NORTH'		! qual. name
     &        		,HADN		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the northern bound
C
	IF (HADN) THEN
	   OK=DCL_DBL('NORTH'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   NBOUND = DBLRAY(1)
	ENDIF
C
C /SOUTH qualifier
C
	OK=DCL_QUAL('SOUTH'		! qual. name
     &        		,HADS		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the southern bound
C
	IF (HADS) THEN
	   OK=DCL_DBL('SOUTH'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   SBOUND = DBLRAY(1)
	ENDIF
C
C /EAST qualifier
C
	OK=DCL_QUAL('EAST'		! qual. name
     &        		,HADE		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the eastern bound
C
	IF (HADE) THEN
	   OK=DCL_DBL('EAST'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   EBOUND = DBLRAY(1)
	ENDIF
C
C /WEST qualifier
C
	OK=DCL_QUAL('WEST'		! qual. name
     &        		,HADW		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the western bound
C
	IF (HADW) THEN
	   OK=DCL_DBL('WEST'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   WBOUND = DBLRAY(1)
	ENDIF
C
C /OFFSET qualifier
C
	OK=DCL_QUAL('OFFSET'		! qual. name
     &        		,HADOFF		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Get the boundary offset
C
	IF (HADOFF) THEN
	   OK=DCL_REAL('OFFSET'		! qual. name
     &			,WHINGE)	! set-local error reporting
	   IF(.NOT.OK) GOTO 999
C
C and transfer it
C
	   OFFSET = RARRAY(1)
	ENDIF
C
C /ABSOLUTE qualifier
C
	OK=DCL_QUAL('ABSOLUTE'		! qual. name
     &        		,HADABS		! returned .T. if qual. found
     &			,LOCAL		! set if qual local to parameter
     &			,LOCNEG		! set if qual. negated locally
     &			,WHINGE)	! set-local error reporting
	IF(.NOT.OK) GOTO 999
C
C Set up the defaults for OS mode 
C    - text is retained if clipping is not to a specified boundary and 
C      a void is not being clipped
C    - clipping is to the bounds specified by the map header by default
C
	IF (OSMODE) THEN
	   IF (.NOT. (HADT .OR. HADN .OR. HADS .OR. HADE .OR. HADW .OR. 
     &	      VOID)) HADT = .TRUE.
	   IF (.NOT. (HADMH .OR. HADC)) HADMH = .TRUE.
	ENDIF
C
C Assign function value
C
999	OBEY = (.NOT. OK)
C
C Return
C
	RETURN
	END
C
