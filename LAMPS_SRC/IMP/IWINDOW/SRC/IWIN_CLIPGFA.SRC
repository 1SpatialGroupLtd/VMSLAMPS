C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-05-29 14:58:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION IWIN_CLIPGFA (NC,XC,YC,
     &					 INNPOL,INPOLX,INPOLY)
C
***	MODULE	IWIN_CLIPGFA
***	IDENT	29MY90
C
C	Copyright (C) Laser-Scan Laboratories Ltd.,
C	Cambridge, England
C
C	Created					RWR	 4-Oct-1988
C	Pinched from FRTLIB CLIPGFA and modified 
C	for Visualisation VISALIB		JB	 Feb 1990
C	Pinched from VISALIB and modified 
C	for IWINDOW				JB	 May 1990
C
C Subroutine to clip a poly-line/area to a polygon.
C
C The polygon (POLX,Y) must be closed - ie first point = last point
C
	IMPLICIT NONE
C
C Arguments:
C
	INTEGER		NC		! number of points
	REAL		XC(NC)		! x coords
	REAL		YC(NC)		! y coords
	INTEGER		INNPOL		! number of points in polygon
	REAL		INPOLX(INNPOL)	! points in polygon
	REAL		INPOLY(INNPOL)	! points in polygon
C
C ----------------------------------------------------------------------
C
	INCLUDE 	'HERE:IWINMSG.PAR'
	INCLUDE		'($SSDEF)/NOLIST'
C
C Functions
	INTEGER*4	IWIN_CLIPAREA
C
C Local workspace:
C
	INTEGER		WSPACE
	INTEGER		I
	REAL		AREA
	LOGICAL		SAME
	LOGICAL		CLOSED
	REAL		MINX,MAXX,MINY,MAXY
	REAL		FILLCLIP_AREA
C
	REAL		POLX(8193)	! points in polygon
	REAL		POLY(8193)	! points in polygon
	INTEGER 	NPOL
C
C use FFABUF as workspace to pass to CLIPAREA. POLX,Y is already in PTS,
C CLIP so make PTS WXY, as CLIPAREA just copies PTS into WXY;
C the bottom half is used for PTRS, while the top half is split
C into 2 single dimension arrays for the output buffers
C
	INTEGER		TEMP1,TEMP2
C
	INTEGER		FFAMAX		  ! max no of points in area
	PARAMETER 	(FFAMAX = 8193)	  ! (closed)
	INTEGER		FFASCT		  ! max no of intersections
	PARAMETER 	(FFASCT = 100)
C
	REAL		PTS(2,FFAMAX)
	REAL		WORK_SPACE(4*FFAMAX)
	REAL		INTSCT(4,FFASCT)  ! store for sides intersected
	INTEGER		SIDPTR(FFAMAX)
C
C ----------------------------------------------------------------------
C Assume success
	IWIN_CLIPGFA = SS$_NORMAL
C
C Initialise all variables that would have been done in the rest of 
C  FRTLIB
C
	WSPACE = FFAMAX
C
	TEMP1 = WSPACE*2	! size of WXY workspace passed to CLIPGFA
	TEMP2 = TEMP1/3		! size of output arrays passed to CLIPGFA
C
	IF (NC.LT.3) GOTO 999	! not an area
C
	IF ( INPOLX(1).NE.INPOLX(INNPOL) .OR.
     &	     INPOLY(1).NE.INPOLY(INNPOL) ) THEN		! not closed
C
	   IF (INNPOL.LT.3) GOTO 999   ! not an area
C
	   CLOSED = .FALSE.
C
	   DO 4 I = 1,INNPOL
	      POLX(I) = INPOLX(I)
	      POLY(I) = INPOLY(I)
4	   CONTINUE
C
	   NPOL = INNPOL+1
C
	   POLX(NPOL) = POLX(1)
	   POLY(NPOL) = POLY(1)
C
	   DO 6 I=1,NPOL
	      PTS(1,I) = POLX(I)
	      PTS(2,I) = POLY(I)
6	   CONTINUE
C
	ELSE			     ! already closed
C
	   IF (INNPOL.LT.4) GOTO 999   ! not a closed area
C
	   CLOSED = .TRUE.
C
	   DO 7 I=1,INNPOL
	      PTS(1,I) = INPOLX(I)
	      PTS(2,I) = INPOLY(I)
7	   CONTINUE
	ENDIF
C
C calculate areas of two polygons, to see if they go the same way
C
	FILLCLIP_AREA = 0.0
C
	DO 10 I=1,INNPOL-1
	   FILLCLIP_AREA = FILLCLIP_AREA +
     &			INPOLX(I)*INPOLY(I+1) - INPOLX(I+1)*INPOLY(I)
10      CONTINUE
C
	IF (.NOT.CLOSED) THEN	    		! not closed
	   FILLCLIP_AREA = FILLCLIP_AREA + 
     &		INPOLX(INNPOL)*INPOLY(1) - INPOLX(1)*INPOLY(INNPOL)
	ENDIF
C
    	FILLCLIP_AREA = FILLCLIP_AREA/2
C
C get area and limits of this fill area
C
C	MINX = XC(NC)
C	MINY = YC(NC)
C	MAXX = MINX
C	MAXY = MINY
C
	AREA = 0.0
C
	DO 20 I = 1,NC-1
C
C	   MINX = MIN(MINX,XC(I))
C	   MAXX = MAX(MAXX,XC(I))
C	   MINY = MIN(MINY,YC(I))
C	   MAXY = MAX(MAXY,YC(I))
C
	   AREA = AREA + XC(I)*YC(I+1) - XC(I+1)*YC(I)
20	CONTINUE
C
	IF (XC(1).NE.XC(NC).OR.YC(1).NE.YC(NC)) THEN	    ! not closed
	      AREA = AREA + XC(NC)*YC(1) - XC(1)*YC(NC)
	ENDIF
C
	AREA = AREA/2
C
C areas are digitised same way if their areas have the same sign
C
	SAME = AREA*FILLCLIP_AREA .GT. 0.0
C
C supply parts of FFABUF as working space
C
	IF (CLOSED) THEN
C
	   IWIN_CLIPGFA = IWIN_CLIPAREA(
     &			    NC,XC,YC,
     &			    INNPOL,INPOLX,INPOLY,
     &			    SAME,
     &			    WSPACE,PTS,
     &	                    SIDPTR,WORK_SPACE,2*FFASCT,INTSCT,
     &	                    FFAMAX,WORK_SPACE(TEMP1+1),
     &	                    WORK_SPACE(TEMP1+TEMP2+1),
     &	                    WORK_SPACE(TEMP1+2*TEMP2+1))
C
	ELSE
	   IWIN_CLIPGFA = IWIN_CLIPAREA(
     &			    NC,XC,YC,
     &			    NPOL,POLX,POLY,
     &			    SAME,
     &			    WSPACE,PTS,
     &	                    SIDPTR,WORK_SPACE,2*FFASCT,INTSCT,
     &	                    FFAMAX,WORK_SPACE(TEMP1+1),
     &	                    WORK_SPACE(TEMP1+TEMP2+1),
     &	                    WORK_SPACE(TEMP1+2*TEMP2+1))
	ENDIF
C
C ----------------------------------------------------------------------
999	RETURN
	END
C
