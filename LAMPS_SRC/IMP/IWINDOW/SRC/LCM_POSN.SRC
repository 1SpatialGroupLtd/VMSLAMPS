C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-05 16:20:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION LCM_POSN(POINT,FIRST_ONE)
C
***	IDENT	05JN90
***	MODULE	LCM_POSN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	30-Mar-1988
C
C	IMP IWINDOW Program - Write entry to LITES2 guidance file
C	LCM file only created if there was an entry to put in it
C
C Description
C
C	Opens LITES2 guidance file if necessary, and writes the 
C	appropriate commands for the given position to it
C
	IMPLICIT NONE
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNIWIN:LUN/	! unit numbers
***	PARAMETER/LSL$CMNIWIN:MAX/	! maximum things
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! LSLLIB message definitions
C
C Arguments
C
	REAL*4		POINT(2)	! the point to position to
	LOGICAL		FIRST_ONE	! is it the first one ?
C
C Common Blocks
C
***	COMMON/LSL$CMNIWIN:CLIP/	! contains boundaries
***	COMMON/LSL$CMNIWIN:PARAMS/	! control parameters
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
C
C Functions called
C
	INTEGER*4	LCM_OPEN	! open LCM file and write header
C
C Local Variables
C
	INTEGER*4	ERRCOD		! LSLLIB error code
C
C If this is the first time, get the output range and open the file
C
	IF (FIRST_ONE) THEN
	   ERRCOD = LCM_OPEN(LCMLUN,LCMFIL(1:LCMLEN),RANGE_OUT,HADLOG)
C
C Otherwise, just select it for writing
C
	ELSE
	   CALL FLWSEL(LCMLUN)
	   ERRCOD = LSL__NORMAL
	ENDIF
C
C Make it output a blank line followed by a comment
C
	IF (ERRCOD) THEN
	   CALL FLWRTF('%%MESSAGE')
	   CALL FLWRTF('%%MESSAGE "Reentrant feature"')
C
C Position the cursor on the feature and redraw a window around it
C if necessary. Then do a RESPOND so they can FIND the feature if they 
C wish. Finally ABANDON to make sure they haven't left a feature in 
C hand.
C
	   CALL FLWRTF('%%POSITION %E8 %E8',POINT(1),POINT(2))
	   CALL FLWRTF('%%TEST $CURSINWIN')
	   CALL FLWRTF('%%ELSE %%ZOOM 1')
	   CALL FLWRTF('%%RESPOND')
	   CALL FLWRTF('%%ABANDON')
C
C Signal had some output
C
	   HAD_LCM_OUT = .TRUE.
	ENDIF
C
C Reselect the log file (the default)
C
	CALL FLWSEL(LOGLUN)
C
C Assign function value
C
	LCM_POSN = ERRCOD
C
C Return
C
	RETURN
	END
C
