C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-21 17:06:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION GET_BOUNDS(FINISHED)
C
***	IDENT	03OC90
***	MODULE	GET_BOUNDS
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C	Created					RJH	23-May-1986
C	Mod to standardise error returns	JB	15-Feb-1990
CMOD907 Add origin offset to CLIPBOUNDS message if /ABS specified
C						JB	17-Jul-1990
C
C	IMP IWINDOW Program - Get the clipping bounds
C
C Description
C
C	This routine is based on the bits which work out the bounds in
C	the old ICLIP and OSCLIP main programs.
C
	IMPLICIT NONE
C
C arguments
C
	LOGICAL		FINISHED
C
C Included Parameter Files
C
***	PARAMETER/LSL$CMNIWIN:IWINMSG/	! message definitions
***	PARAMETER/LSL$CMNIWIN:LUN/	! unit numbers
***	PARAMETER/LSL$CMNIWIN:MAX/	! maximum things
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/	! LSLLIB message definitions
C
	INCLUDE		'($SSDEF)/NOLIST'
C
C Common Blocks
C
***	COMMON/LSL$CMNIWIN:CLIP/	! clipping boundaries
***	COMMON/LSL$CMNIWIN:COPY/	! transfer for output
***	COMMON/LSL$CMNIWIN:PARAMS/	! control parameters
***	COMMON/LSL$CMNLSL:STATUS/	! LSLLIB status flag
***	COMMON/LSL$CMNIFF:MD2DES/	! for reading map descriptor
C
C include files to cope with new OS map header
C
	INCLUDE 'LSL$CMNIFF:MHOSGB.CMN'		! New OS map header
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! New map header variables
	INCLUDE 'LSL$CMNOSMH:OSMH_NEW.PAR'	! Header field definitions
C
C functions
C
	LOGICAL		OSMH_NEW_INI		! Read translation table
C
C Functions called
C
	INTEGER*4	FLWLIN		! writes a line to file
	LOGICAL		MCEMH
	LOGICAL		OSMH
C
C Local Variables
C
	REAL		CPARR(2,4)	! corner point map data
	INTEGER*4	ERRCOD		! LSLLIB error code
	INTEGER*4	RETCOD		! system error code
	INTEGER*4	I		! loop variable
	INTEGER*2	IELEN		! length of entry in hand
	INTEGER*2	CUSTNO		! customer no. from map header
	LOGICAL*1	MHDATA(2)	! 1st 2 bytes of map header
	LOGICAL		OUT_BOUNDS	! output clipbounds message?
C
C ----------------------------------------------------------------
C Assume we will succeed
C
	GET_BOUNDS = SS$_NORMAL
C
C Assume processing to do
C
	FINISHED = .FALSE.
	OUT_BOUNDS = .FALSE.
C
C we already have an open IFF input file - first rewind for safety 
C
	CALL IFFRWD
C
C and get the range
C
	CALL IFFNXC('RA',IELEN)		! get range
	IF (IELEN.EQ.-1) GOTO 320	! can't find RA entry
	CALL EIHRR(RANGE,4,1)		! read RAnge into RANGE
C
	IF (DEBUG) CALL WRITEF('.RA entry read')
C
C initialise the clipping rectangle before reading the map header
C
	CLIPLO(W) = 0.0			! bottom left hand corner
	CLIPLO(S) = 0.0
	CLIPHI(N) = 0.0			! top right hand corner
	CLIPHI(E) = 0.0
C
	HAD_OSMH = .FALSE.
	HAD_MCEMH = .FALSE.
C
C now get the customer number from the map header
C
	CALL IFFNXC('MH',IELEN)		! get map header
	IF (IELEN.EQ.-1) GOTO 200	! can't find MH entry
	CALL EIHRI(MHDATA,1,1)		! read the first word
	CUSTNO = MHDATA(2)		! and transfer the customer no.
	MH_TYPE = MHDATA(2)		! set global map header type
C
	IF (CUSTNO.EQ.1) THEN
	   HAD_MCEMH = .TRUE.
	ELSEIF (CUSTNO.EQ.2) THEN			! OS header type 2
	   HAD_OSMH = .TRUE.
	ELSEIF (CUSTNO.GE.3) THEN			! New header type 3 or 4
	   HAD_OSMH = .TRUE.
	   IF ( .NOT.OSMH_NEW_INI() ) GOTO 900
	ENDIF
C
C check for an OS map
C
	IF (OSMODE) THEN		! OS mode requires an OS map
	   IF (CUSTNO .LT. 2) GO TO 210	
	ELSE				! an OS map not in OS mode
	   IF (CUSTNO.GE.2 .AND. CUSTNO .LE.4) THEN
	      CALL LSL_PUTMSG(IWIN__OSMH)
	      CALL LSL_ADDMSG(IWIN__NOTOSMODE)
	   ENDIF
	ENDIF
C
C if the map header is to be used for the clipping bounds, read it in
C
	IF (HADMH) THEN
	   IF (CUSTNO .EQ. 1) THEN
	      GET_BOUNDS = MCEMH(IELEN)		! MCE map header
	      IF (.NOT. GET_BOUNDS) GOTO 900
	   ELSEIF (CUSTNO .GE. 2) THEN
	      GET_BOUNDS = OSMH(IELEN)		! OS map header
	      IF (.NOT. GET_BOUNDS) GOTO 900
	   ELSE
	      GO TO 230			! unset map header
	   ENDIF
C
C alternatively, if the control points are to be used read them in
C
	ELSE IF (HADC) THEN
	   CALL IFFNXC('CP',IELEN)	! get the control points
	   IF (IELEN.EQ.-1) GOTO 240	! can't find CP entry
C
	   IF (DEBUG) CALL WRITEF('.CP entry read')
C
	   DO 10 I=1,4			! read them in
	      CALL EIHRR(CPARR(1,I),2,(I-1)*8+5)
10	   CONTINUE
C
C now check whether the CP entry is rectangular or not
C
	   IF (((CPARR(2,1)).NE.(CPARR(2,4))).OR.	! N
     &         ((CPARR(2,2)).NE.(CPARR(2,3))).OR.	! S
     &         ((CPARR(1,3)).NE.(CPARR(1,4))).OR.	! E
     &         ((CPARR(1,1)).NE.(CPARR(1,2)))) GOTO 250	! W
C
C and check whether the CP entry is sensible or not
C
	   IF ((CPARR(2,1).LE.CPARR(2,3)).OR.
     &	       (CPARR(1,3).LE.CPARR(1,1))) THEN
     	      CALL LSL_PUTMSG(IWIN__ILLEGLCP)
	      GOTO 900
	   ENDIF
C
C set up the clipping bounds
C
	   CLIPHI(N) = CPARR(2,1)
	   CLIPHI(E) = CPARR(1,3)
	   CLIPLO(S) = CPARR(2,3)
	   CLIPLO(W) = CPARR(1,1)
	ELSE
	   IF ((RANGE(MINIM,X) .GE. RANGE(MAXIM,X)) .OR. 
     &	       (RANGE(MINIM,Y) .GE. RANGE(MAXIM,Y))) THEN
	      GOTO 310
	   ELSE
	      CLIPHI(N) = RANGE(MAXIM,Y)
	      CLIPHI(E) = RANGE(MAXIM,X)
	      CLIPLO(S) = RANGE(MINIM,Y)
	      CLIPLO(W) = RANGE(MINIM,X)
	   ENDIF
	ENDIF
C
C if /ABSOLUTE (we cannot have read CP, so read MD)
C
	MD2LOC(1) = 0.0
	MD2LOC(2) = 0.0
C
	IF (HADABS) THEN
	   CALL IFFNXC('MD',IELEN)		! get map descriptor
	   IF (IELEN.GT.0) THEN
	      IF (IELEN.NE.MD2LEN) THEN
		 CALL LSL_PUTMSG(IWIN__DEFAULTMDORG)
	         CALL LSL_ADDMSG(IWIN__NOV2MD)
C read it
	      ELSE
	         CALL EIHRI(MD2ARR,IELEN,1)
C
C must be version 2
	         IF (MATV2.NE.2.) THEN
	   	    CALL LSL_PUTMSG(IWIN__DEFAULTMDORG)
	            CALL LSL_PUTMSG(IWIN__NOV2MD)
	         ELSE
	            IF (HADS) SBOUND = SBOUND - MD2LOC(2)
	            IF (HADW) WBOUND = WBOUND - MD2LOC(1)
	            IF (HADN) NBOUND = NBOUND - MD2LOC(2)
	            IF (HADE) EBOUND = EBOUND - MD2LOC(1)
	         ENDIF
	      ENDIF
	   ELSE
	      CALL LSL_PUTMSG(IWIN__DEFAULTMDORG)
	      CALL LSL_ADDMSG(IWIN__NOMD)
	   ENDIF
	ENDIF
C
C
C now we at least have a default rectangle, so check the bounds given 
C are generally in range - being out of range is something we warn 
C about, but will allow
C
	IF (HADW.AND.(WBOUND.LT.CLIPLO(W).OR.WBOUND.GT.CLIPHI(E))) THEN
	   IF (.NOT.OUT_BOUNDS) THEN
C
	      IF (HADABS) THEN
		 CALL LSL_PUTMSG(IWIN__CLIPBOUNDS, WBOUND+MD2LOC(1), 
     &	            EBOUND+MD2LOC(1), SBOUND+MD2LOC(2), NBOUND+MD2LOC(2))
	      ELSE
		 CALL LSL_PUTMSG(
     &			IWIN__CLIPBOUNDS, WBOUND, EBOUND, SBOUND, NBOUND)
	      ENDIF
C
	      OUT_BOUNDS = .TRUE.
	   ENDIF
C
	   IF (HADABS) THEN
	      CALL LSL_ADDMSG(IWIN__BADWBOUND, CLIPLO(W)+MD2LOC(1),
     &					       CLIPHI(E)+MD2LOC(1) )
	   ELSE
	      CALL LSL_ADDMSG(IWIN__BADWBOUND, CLIPLO(W), CLIPHI(E))
	   ENDIF
	ENDIF
C
	IF (HADE.AND.(EBOUND.LT.CLIPLO(W).OR.EBOUND.GT.CLIPHI(E))) THEN
	   IF (.NOT.OUT_BOUNDS) THEN
C
	      IF (HADABS) THEN
		 CALL LSL_PUTMSG(IWIN__CLIPBOUNDS, WBOUND+MD2LOC(1), 
     &	            EBOUND+MD2LOC(1), SBOUND+MD2LOC(2), NBOUND+MD2LOC(2))
	      ELSE
		 CALL LSL_PUTMSG(
     &			IWIN__CLIPBOUNDS, WBOUND, EBOUND, SBOUND, NBOUND)
	      ENDIF
C
	      OUT_BOUNDS = .TRUE.
	   ENDIF
C
	   IF (HADABS) THEN
	      CALL LSL_ADDMSG(IWIN__BADEBOUND, CLIPLO(W)+MD2LOC(1),
     &					       CLIPHI(E)+MD2LOC(1) )
	   ELSE
	      CALL LSL_ADDMSG(IWIN__BADEBOUND, CLIPLO(W), CLIPHI(E))
	   ENDIF
	ENDIF
C
	IF (HADS.AND.(SBOUND.LT.CLIPLO(S).OR.SBOUND.GT.CLIPHI(N))) THEN
	   IF (.NOT.OUT_BOUNDS) THEN
C
	      IF (HADABS) THEN
		 CALL LSL_PUTMSG(IWIN__CLIPBOUNDS, WBOUND+MD2LOC(1), 
     &	            EBOUND+MD2LOC(1), SBOUND+MD2LOC(2), NBOUND+MD2LOC(2))
	      ELSE
		 CALL LSL_PUTMSG(
     &			IWIN__CLIPBOUNDS, WBOUND, EBOUND, SBOUND, NBOUND)
	      ENDIF
C
	      OUT_BOUNDS = .TRUE.
	   ENDIF
C
	   IF (HADABS) THEN
	      CALL LSL_ADDMSG(IWIN__BADSBOUND, CLIPLO(S)+MD2LOC(2),
     &					       CLIPHI(N)+MD2LOC(2) )
	   ELSE
	      CALL LSL_ADDMSG(IWIN__BADSBOUND, CLIPLO(S), CLIPHI(N))
	   ENDIF
	ENDIF
C
	IF (HADN .AND. (NBOUND.LT.CLIPLO(S).OR.NBOUND.GT.CLIPHI(N))) THEN
	   IF (.NOT.OUT_BOUNDS) THEN
C
	      IF (HADABS) THEN
		 CALL LSL_PUTMSG(IWIN__CLIPBOUNDS, WBOUND+MD2LOC(1), 
     &	            EBOUND+MD2LOC(1), SBOUND+MD2LOC(2), NBOUND+MD2LOC(2))
	      ELSE
		 CALL LSL_PUTMSG(
     &			IWIN__CLIPBOUNDS, WBOUND, EBOUND, SBOUND, NBOUND)
	      ENDIF
C
	      OUT_BOUNDS = .TRUE.
	   ENDIF
C
	   IF (HADABS) THEN
	      CALL LSL_ADDMSG(IWIN__BADNBOUND, CLIPLO(S)+MD2LOC(2),
     &					       CLIPHI(N)+MD2LOC(2) )
	   ELSE
	      CALL LSL_ADDMSG(IWIN__BADNBOUND, CLIPLO(S), CLIPHI(N))
	   ENDIF
	ENDIF
C
C if had /OFFSET, we now modify the bounds with it
C
	IF (HADOFF) THEN
	   CLIPLO(W) = CLIPLO(W) - OFFSET   ! bottom left hand corner
	   CLIPLO(S) = CLIPLO(S) - OFFSET  
	   CLIPHI(N) = CLIPHI(N) + OFFSET   ! top right hand corner
	   CLIPHI(E) = CLIPHI(E) + OFFSET
	ENDIF
C
C now transfer any (or all) explicit bounds to the clipping rectangle
C
	IF (HADS) CLIPLO(S) = SBOUND
	IF (HADW) CLIPLO(W) = WBOUND
	IF (HADN) CLIPHI(N) = NBOUND
	IF (HADE) CLIPHI(E) = EBOUND
C
C set new origin if required
C
	IF(ORIGIN)THEN
	   XORIG = CLIPLO(W)
	   YORIG = CLIPLO(S)
	ELSE
	   XORIG = 0.0
	   YORIG = 0.0
	ENDIF
C
C and finally check they're not upside-down / back to front
C
	IF (CLIPLO(W).GT.CLIPHI(E)) GOTO 260
	IF (CLIPLO(S).GT.CLIPHI(N)) GOTO 270
C
C or the same
C
	IF (CLIPLO(W).EQ.CLIPHI(E).OR.
     &	    CLIPLO(S).EQ.CLIPHI(N)) GOTO 280
C
C
C now log various things - first OS mode
C
	IF (HADLOG) THEN
	   IF (OSMODE) CALL FLWRTF('Running in OS mode')
C
C boundary information
C
	   IF (.NOT.HADABS) THEN
	      CALL FLWRTF('Bounds N =%F8.3, S =%F8.3, E =%F8.3, '
     &	            //'W =%F8.3',
     &	         CLIPHI(N), CLIPLO(S), CLIPHI(E), CLIPLO(W) )
	   ELSE
	      CALL FLWRTF('IFF Bounds      N =%F8.3, S =%F8.3,'
     &	            //' E =%F8.3, W =%F8.3',
     &	         CLIPHI(N), CLIPLO(S), CLIPHI(E), CLIPLO(W) )
	      CALL FLWRTF('Absolute Bounds N =%^D%F8.3, S =%F8.3,'
     &	            //' E =%F8.3, W =%F8.3',
     &	         CLIPHI(N) + MD2LOC(2), CLIPLO(S) + MD2LOC(2),
     &	         CLIPHI(E) + MD2LOC(1), CLIPLO(W) + MD2LOC(1))
	   ENDIF
C
C feature code clipping suppression
C
	   CALL EXPAND
	   IF (NUMFC.GT.0) THEN
	      CALL APPEND
     &	         ('Clipping suppressed for feature codes : %^W%N',
     &	         FCTAB(1))
	      DO 20 I=2,NUMFC
		 CALL APPEND(',%^W%N',FCTAB(I))
20	      CONTINUE
	   ELSE
	      CALL APPEND
     &		('Clipping not suppressed for any feature codes')
	   ENDIF
	   ERRCOD = FLWLIN(,,RETCOD)
	   IF (.NOT. ERRCOD) GO TO 300
C
C Layer clipping suppression
C
	   CALL EXPAND
	   IF (NUMLAY.GT.0) THEN
	      CALL APPEND('Clipping suppressed for layers : %^W%N',
     &	      LAYTAB(1))
	      DO 30 I=2,NUMLAY
		 CALL APPEND(',%^W%N',LAYTAB(I))
30	      CONTINUE
	      ERRCOD = FLWLIN(,,RETCOD)
	   ELSE
	      CALL APPEND('Clipping not suppressed for any layers')
	      ERRCOD = FLWLIN(,,RETCOD)
	   ENDIF
	   IF (.NOT. ERRCOD) GO TO 300
C
C area clipping
C
	   IF (HADAREA) THEN
	      CALL EXPAND('Area clipping ')
	      IF (AREA_FC.GT.0) THEN
	         CALL APPEND('for feature codes : %^W%N',AREA_FCTAB(1))
	         DO 40 I=2,AREA_FC
		    CALL APPEND(',%^W%N',AREA_FCTAB(I))
40	         CONTINUE
	      ELSEIF (AREA_LAY.GT.0) THEN
	         CALL APPEND('for layers : %^W%N',AREA_LAYTAB(1))
	         DO 50 I=2,AREA_LAY
		    CALL APPEND(',%^W%N',AREA_LAYTAB(I))
50	         CONTINUE
	      ELSEIF (HADFRT) THEN
	         CALL APPEND('as defined by the FRT')
	      ENDIF
	      ERRCOD = FLWLIN(,,RETCOD)
	      IF (.NOT. ERRCOD) GO TO 300
	   ENDIF
C
C keep text, clip grid
C
	   IF (OSMODE) THEN
	      IF (HADT) THEN
	         CALL FLWRTF('Not clipping texts')
	      ELSE
	         CALL FLWRTF('Clipping texts')
	      ENDIF
	      IF (CLPGRD) THEN
	         CALL FLWRTF('Clipping grids')
	      ELSE
	         CALL FLWRTF('Not clipping grids')
	      ENDIF
	   ENDIF
C
C void
C
	   IF (VOID) CALL FLWRTF('Clipping to void')
C
C preserve reentrant features
C
C *****	   IF (.NOT. HADBRK) CALL FLWRTF
C *****     &	      ('Reentrant features to be preserved')
C
C retain feature serial numbers
C
	   IF (RETAIN) THEN 
	      CALL FLWRTF
     &	         ('Split features to retain feature serial number')
	   ELSEIF (BY_LAYER) THEN
	      CALL EXPAND('Reentrant features to have ')
	      CALL FLWAPP('next feature serial number in layer')
	   ENDIF
C
C LITES2 guidance file
C
	   IF (HADLCM) THEN
	      CALL FLWRTF
     &	         ('LITES2 guidance file to point to reentrant features')
	   ENDIF
C
C origin
C
	   IF (ORIGIN) CALL FLWRTF('Origin reset to (%F0.2,%F0.2)',
     &							XORIG,YORIG)
C
C and a blank line
C
	   CALL FLWRTF(' ')
	ENDIF
C
C OK, that's all right, so let's carry on
C
C so let us see how the range of the map compares to this -
C check if all of the map lies inside the rectangle defined
C (ie is it already effectively clipped)
C (but if ORIGIN given, still process map)
C
	IF ((.NOT.ORIGIN).AND.
     &	    RANGE(MINIM,X).GE.CLIPLO(W).AND.
     &	    RANGE(MAXIM,X).LE.CLIPHI(E).AND.
     &	    RANGE(MINIM,Y).GE.CLIPLO(S).AND.
     &	    RANGE(MAXIM,Y).LE.CLIPHI(N)) THEN
C
	   CALL LSL_PUTMSG(IWIN__MAPINBDY)
	   IF (HADOUT) CALL FLWRTF('No output file produced')
C
	   CALL IFFCLO(INLUN)
	   FINISHED = .TRUE.	! signal finished processing
C
	ENDIF
C
C successful exit
C
	GO TO 999
C
C ------------------------------------------------------------
C error messages, etc
C
200	CALL LSL_PUTMSG(IWIN__NOMH)
	GOTO 900
C
210	CALL LSL_PUTMSG(IWIN__WRONGCUST)
	GOTO 900
C
230	CALL LSL_PUTMSG(IWIN__UNSETMH)
	GOTO 900
C
240	CALL LSL_PUTMSG(IWIN__NOCP)
	GOTO 900
C
250	CALL LSL_PUTMSG(IWIN__BADCP)
	GOTO 900
C
260	CALL LSL_PUTMSG(IWIN__WRONGBDY)
	CALL LSL_ADDMSG(IWIN__EGTW)
	GOTO 900
C
270	CALL LSL_PUTMSG(IWIN__WRONGBDY)
	CALL LSL_ADDMSG(IWIN__NGTS)
	GOTO 900
C
280	CALL LSL_PUTMSG(IWIN__EQUALBDY)
	GOTO 900
C
C
300	CALL LSL_PUTMSG(IWIN__ERRWRTLOG)
	CALL LSL_ADDMSG(ERRCOD)
	IF (ERRCOD .EQ. LSL__SYSWRITE) CALL LSL_ADDMSG(RETCOD)
	GOTO 900
C
310	CALL LSL_PUTMSG(IWIN__BADRA)
	GOTO 900
C
320	CALL LSL_PUTMSG(IWIN__NORA)
C
C Close the input IFF file
C
900	CALL IFFCLO(INLUN)
C
C Assign function value
C
	GET_BOUNDS = SS$_ABORT
	FINISHED = .TRUE.
C
C ------------------------------------------------------------
C Return
C
999	RETURN
	END
C
