C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-05-07 17:22:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CALC_INTER(SEG_XY,WHICH_CNR,INT_XY,SEG_PROP)
C
***	IDENT	07MY91
***	MODULE	CALC_INTER
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	23-Jun-1988
C
C	Polygon Clipping - Calculate intersections of segment with 
C	                   bounding polygon
C
C Description
C
C	WHICH_CNR should be the corner to start at
C
	IMPLICIT NONE
C
C Arguments
C
	REAL*8		SEG_XY(2,2)	! line segment
	INTEGER*4	WHICH_CNR	! 1st corner of polygon side
	REAL*4		INT_XY		! intersection point
	REAL*4		SEG_PROP	! fractional dist along segment
C
C Common Blocks
C
	INCLUDE 'HERE:INTERSECT.CMN'	! linked list of intersections
C
C Functions called
C
	LOGICAL		INTSCT		! calculate intersection
C
C Local Variables
C
	LOGICAL		ON_SEG		! intersection pt. on segment ?
	LOGICAL		ON_BDY		! intersection pt. on boundary ?
	INTEGER		BDY_IND		! the same as an integer
	EQUIVALENCE	(ON_BDY,BDY_IND)
	LOGICAL		NONE		! no intersection ?
C
C First check that the corner number is legal
C
	IF (WHICH_CNR .LT. 0) GOTO 200
C 
C Now initialise corner number and flag
C
	WHICH_CNR = WHICH_CNR - 1
	NONE = .TRUE.
C
C Deal with each side in turn, attempting to intersect it with the 
C given segment. Give up when we have got an intersection, or we have
C exhausted all of the boundary segments
C
100	IF (.NOT. NONE .OR. (WHICH_CNR .GE. (CNR_PTS-1))) GOTO 200
	WHICH_CNR = WHICH_CNR + 1
	NONE = INTSCT(SEG_XY,CNR_XY(1,WHICH_CNR),INT_XY,ON_SEG,ON_BDY,
     &	              SEG_PROP)
C
C Valid intersections must be on the ends of or inside the line 
C segment, or on the second end or inside the current polygon side, so 
C throw away those which don't satisfy these conditions
C
	IF (.NOT. NONE) THEN
	   NONE = (.NOT. (ON_SEG .AND. ON_BDY))
	   IF (.NOT. NONE) NONE = (BDY_IND .EQ. 1)
	ENDIF
	GOTO 100
C
C Assign function value
C
200	CALC_INTER = (.NOT. NONE)
C
C Return
C
	RETURN
	END
