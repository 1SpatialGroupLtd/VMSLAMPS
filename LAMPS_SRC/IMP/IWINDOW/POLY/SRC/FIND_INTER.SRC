C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-05-07 18:53:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FIND_INTER(AREA_XY,AREA_PTS)
C
***	IDENT	07MY91
***	MODULE	FIND_INTER
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	21-Jun-1988
C
CMOD892 Deal with polygon points lying on window edges or vertices,
C	which PNTPOL cannot cope with, and creates spurious features
C						JB	06-Jun-1990
C
C	Polygon Clipping - Find intersections along bounding polygon
C
C Description
C
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	AREA_PTS		! number of points
	REAL*4		AREA_XY(2,AREA_PTS)	! points in area
C
C Common Blocks
C
	INCLUDE 'HERE:INTERSECT.CMN'	! linked list of intersections
	INCLUDE 'HERE:INTERFACE.CMN'	! interface for routines
C
C Functions called
C
	LOGICAL		CALC_INTER	! calculate intersection
	REAL*4		CALC_ANGLE	! calculate angle with bdy.
C
C Included file for local variables
C
	INCLUDE 'HERE:CURR_LINK.INC'	! current link
C
C Local Variables
C
	INTEGER*4	START		! start point
	INTEGER*4	CURR_POSN	! positon of current point
	INTEGER*4	CURR_CNR	! corner before current point
	INTEGER*4	INT_CNR		! corner before intersection
	REAL*4		INT_PROP	! its proportion along line
	REAL*4		INT_XY(2)	! coordinates of intersection
	REAL*4		XY(2)
	INTEGER*4	INT2_CNR	! corner before 2nd intersection
	REAL*4		INT2_PROP	! its proportion along line
	REAL*4		INT2_XY(2)	! and coordinates
	INTEGER*4	THIS_PTR	! pointer to next link
	INTEGER*4	I		! counter
	LOGICAL		GOT_INT		! got intersection ?
C
	LOGICAL		CLOSED		! polygon closed?
C 
C ******************************************************************
C Check if polygon is closed
C
	IF ( (AREA_XY(1,1).EQ.AREA_XY(1,AREA_PTS)) .AND.
     &	     (AREA_XY(2,1).EQ.AREA_XY(2,AREA_PTS)) ) THEN
	   CLOSED = .TRUE. 
	ELSE
	   CLOSED = .FALSE.
	ENDIF
C
C If we've been here before for this feature, just set the start point
C
	IF (HAD_SAV) THEN
	   START = 1
C
C Otherwise, determine if the first point is in the clipping polygon, 
C save the point and other things about it, and initialise things
C
	ELSE
	   SAV_XY(1) = AREA_XY(1,1)
	   SAV_XY(2) = AREA_XY(2,1)
C
10	   CALL PNTPOL(SAV_XY,CNR_XY,CNR_PTS,SAV_POSN,SAV_CNR)
C
C If the point lies on a vertex or edge, PNTPOL cannot cope, so move the
C point  by a small amount
C
	   IF (SAV_POSN.EQ.0) THEN
C
	      SAV_XY(1) = AREA_XY(1,1) + LIMIT
	      SAV_XY(2) = AREA_XY(2,1) + 0.5*LIMIT
C
	      AREA_XY(1,1) = SAV_XY(1)
	      AREA_XY(2,1) = SAV_XY(2)
C
	      CALL PNTPOL(SAV_XY,CNR_XY,CNR_PTS,SAV_POSN,SAV_CNR)
C
	      IF (SAV_POSN.EQ.0) THEN
C
	         SAV_XY(1) = AREA_XY(1,1) + 0.5*LIMIT
	         SAV_XY(2) = AREA_XY(2,1) - LIMIT
C
	         AREA_XY(1,1) = SAV_XY(1)
	         AREA_XY(2,1) = SAV_XY(2)
		 GOTO 10
	      ENDIF
C
	   ENDIF
C
	   CALL CALC_AREA(SAV_XY(1),SAV_XY(2),1)
C
	   HAD_SAV = .TRUE.
	   BEEN_IN = .FALSE.
	   LAST_PT = 0
	   LAST_LINK = 0
	   START = 2
	ENDIF
C
C For each subsequent point, first determine where it is in relation to 
C the clipping polygon
C
	DO 100 I=START,AREA_PTS
C
	   IF (CLOSED .AND. (I.EQ.AREA_PTS)) THEN
	      AREA_XY(1,AREA_PTS) = AREA_XY(1,1) 
	      AREA_XY(2,AREA_PTS) = AREA_XY(2,1) 
	      CURR_XY(1) = AREA_XY(1,I)
	      CURR_XY(2) = AREA_XY(2,I)
	      CALL PNTPOL(CURR_XY,CNR_XY,CNR_PTS,CURR_POSN,CURR_CNR)
	      GOTO 99
	   ENDIF
C
	   CURR_XY(1) = AREA_XY(1,I)
	   CURR_XY(2) = AREA_XY(2,I)
C
11	   CALL PNTPOL(CURR_XY,CNR_XY,CNR_PTS,CURR_POSN,CURR_CNR)
C
	   IF (CURR_POSN.EQ.0) THEN
C
	      CURR_XY(1) = AREA_XY(1,I) + LIMIT
	      CURR_XY(2) = AREA_XY(2,I) + 0.5*LIMIT
C
	      AREA_XY(1,I) = CURR_XY(1)
	      AREA_XY(2,I) = CURR_XY(2)
C
	      CALL PNTPOL(CURR_XY,CNR_XY,CNR_PTS,CURR_POSN,CURR_CNR)
C
	      IF (CURR_POSN.EQ.0) THEN
C
	         CURR_XY(1) = AREA_XY(1,I) + 0.5*LIMIT
	         CURR_XY(2) = AREA_XY(2,I) - LIMIT
C
		 AREA_XY(1,I) = CURR_XY(1)
	         AREA_XY(2,I) = CURR_XY(2)
		 GOTO 11
	      ENDIF
C
	   ENDIF
C
99	   CONTINUE
C
	   CALL CALC_AREA(CURR_XY(1),CURR_XY(2),LAST_PT+I)
C
C If each point is either inside or on the polygon boundary, the 
C segment is all visible.
C
	   IF ((SAV_POSN .GT. 0) .OR. (CURR_POSN .GT. 0)) THEN
	      BEEN_IN = .TRUE.
C
C If one of the points is on the boundary, it has to be added to the 
C linked list. Otherwise, we don't need to do anything more.
C
C ***** Note that we only deal with a rectangle at present *****
C Segments whose ends are inside are therefore all inside.
C
	      IF ((SAV_POSN .GE. 0) .AND. (CURR_POSN .GE. 0)) THEN
	         IF (SAV_POSN .EQ. 0) THEN
	            LINK_NUM  = LAST_LINK + 1
	            LAST_LINK = LINK_NUM
	            IN        = .TRUE.
	            DONE      = .FALSE.
	            NEXT_PT   = LAST_PT + I - 1
	            PREV_PT   = NEXT_PT
	            THIS_X    = SAV_XY(1)
	            THIS_Y    = SAV_XY(2)
	            THIS_ANGLE = CALC_ANGLE(CURR_SEG,SAV_CNR,IN)
		    XY(1) = SAV_XY(1)
		    XY(2) = SAV_XY(2)
C
	            CALL FIND_PTR(SAV_CNR,XY,THIS_ANGLE,
     &	                          THIS_DIST,THIS_PTR)
	            CALL ADD_INTER(CURR_LINK,THIS_PTR)
	         ELSEIF (CURR_POSN .EQ. 0) THEN
	            LINK_NUM  = LAST_LINK + 1
	            LAST_LINK = LINK_NUM
	            IN        = .FALSE.
	            DONE      = .FALSE.
	            NEXT_PT   = LAST_PT + I
	            PREV_PT   = NEXT_PT
	            THIS_X    = CURR_XY(1)
	            THIS_Y    = CURR_XY(2)
	            THIS_ANGLE = CALC_ANGLE(CURR_SEG,CURR_CNR,IN)
		    XY(1) = CURR_XY(1)
		    XY(2) = CURR_XY(2)
C
	            CALL FIND_PTR(CURR_CNR,XY,THIS_ANGLE,
     &	                          THIS_DIST,THIS_PTR)
	            CALL ADD_INTER(CURR_LINK,THIS_PTR)
	         ENDIF
C
C Here, the points are on either side of the polygon boundary (i.e. one 
C is invisible, the other visible), so calculate the intersection
C
	      ELSE
	         INT_CNR = 1
	         IF (CALC_INTER(CURR_SEG,INT_CNR,CURR_LINK(X),
     &	                        INT_PROP)) THEN
C
C Now add the intersection to the linked list. Note invisible => visible
C means we are going in, visible => invisible means we are going out
C
	            LINK_NUM  = LAST_LINK + 1
	            LAST_LINK = LINK_NUM
	            IN        = (CURR_POSN .GT. 0)
	            DONE      = .FALSE.
	            NEXT_PT   = LAST_PT + I
	            PREV_PT   = NEXT_PT - 1
	            THIS_ANGLE = CALC_ANGLE(CURR_SEG,INT_CNR,IN)
	            CALL FIND_PTR(INT_CNR,CURR_LINK(X),THIS_ANGLE,
     &	                          THIS_DIST,THIS_PTR)
	            CALL ADD_INTER(CURR_LINK,THIS_PTR)
	         ENDIF
	      ENDIF
C
C The current segment is invisible if each point is either outside or 
C on the polygon boundary, so we wouldn't normally do anything. 
C However, the segment may cross the boundaries, so we must deal with 
C these special cases. First, each point outside the boundary.
C
	   ELSEIF ((SAV_POSN .LT. 0) .AND. (CURR_POSN .LT. 0)) THEN
C
C Try calculating two intersections. If we get them, the segment must 
C cross the window
C
	      INT_CNR = 1
	      IF (CALC_INTER(CURR_SEG,INT_CNR,INT_XY,INT_PROP)) THEN
	         INT2_CNR = INT_CNR + 1
	         IF (CALC_INTER(CURR_SEG,INT2_CNR,INT2_XY,INT2_PROP))
     &	                                                          THEN
	            BEEN_IN = .TRUE.
	            LAST_LINK = LAST_LINK + 2
C
C Set up the first one
C
	            IN = (INT_PROP .LT. INT2_PROP)
	            IF (IN) THEN
	               LINK_NUM  = LAST_LINK - 1
	            ELSE
	               LINK_NUM  = LAST_LINK
	            ENDIF
	            DONE      = .FALSE.
	            NEXT_PT   = LAST_PT + I
	            PREV_PT   = NEXT_PT - 1
	            THIS_X    = INT_XY(1)
	            THIS_Y    = INT_XY(2)
	            THIS_ANGLE = CALC_ANGLE(CURR_SEG,INT_CNR,IN)
	            CALL FIND_PTR(INT_CNR,INT_XY,THIS_ANGLE,
     &	                          THIS_DIST,THIS_PTR)
	            CALL ADD_INTER(CURR_LINK,THIS_PTR)
C
C and the next - some fields are the same, so don't bother setting again
C
	            IN = (.NOT. IN)
	            IF (IN) THEN
	               LINK_NUM  = LAST_LINK - 1
	            ELSE
	               LINK_NUM  = LAST_LINK
	            ENDIF
	            THIS_X    = INT2_XY(1)
	            THIS_Y    = INT2_XY(2)
	            THIS_ANGLE = CALC_ANGLE(CURR_SEG,INT2_CNR,IN)
	            CALL FIND_PTR(INT2_CNR,INT2_XY,THIS_ANGLE,
     &	                          THIS_DIST,THIS_PTR)
	            CALL ADD_INTER(CURR_LINK,THIS_PTR)
	         ENDIF
	      ENDIF
C
C Here, the saved point is on the boundary, i.e edge => outside
C
	   ELSEIF (SAV_POSN .EQ. 0) THEN
C
C First go from the next corner up to the last, and look for an 
C intersection
C
	      INT_CNR = MOD(SAV_CNR,NUM_CORNER)+1
	      GOT_INT = CALC_INTER(CURR_SEG,INT_CNR,INT_XY,INT_PROP)
C
C If we didn't find one, and we didn't start at the first corner, start 
C there now and look for an intersection
C
	      IF (.NOT. GOT_INT .AND. (SAV_CNR .LT. NUM_CORNER)) THEN
	         INT_CNR = 1
	         GOT_INT = CALC_INTER(CURR_SEG,INT_CNR,INT_XY,INT_PROP)
	      ENDIF
C
C If we got one and it isn't the point on the edge, set the edge point
C and the intersection up in the linked list - first the edge point
C
	      IF (GOT_INT .AND. (SAV_CNR .NE. INT_CNR)) THEN
	         BEEN_IN = .TRUE.
	         LINK_NUM  = LAST_LINK + 1
	         LAST_LINK = LINK_NUM
	         IN        = .TRUE.
	         DONE      = .FALSE.
	         NEXT_PT   = LAST_PT + I - 1
	         PREV_PT   = NEXT_PT
	         THIS_X    = SAV_XY(1)
	         THIS_Y    = SAV_XY(2)
	         THIS_ANGLE = CALC_ANGLE(CURR_SEG,SAV_CNR,IN)
		 XY(1) = SAV_XY(1)
		 XY(2) = SAV_XY(2)
C
	         CALL FIND_PTR(SAV_CNR,XY,THIS_ANGLE,
     &	                       THIS_DIST,THIS_PTR)
	         CALL ADD_INTER(CURR_LINK,THIS_PTR)
C
C and the intersection
C
	         LINK_NUM  = LAST_LINK + 1
	         LAST_LINK = LINK_NUM
	         IN        = .FALSE.
	         DONE      = .FALSE.
	         NEXT_PT   = LAST_PT + I
	         PREV_PT   = NEXT_PT - 1
	         THIS_X    = INT_XY(1)
	         THIS_Y    = INT_XY(2)
	         THIS_ANGLE = CALC_ANGLE(CURR_SEG,INT_CNR,IN)
	         CALL FIND_PTR(INT_CNR,INT_XY,THIS_ANGLE,
     &	                       THIS_DIST,THIS_PTR)
	         CALL ADD_INTER(CURR_LINK,THIS_PTR)
	      ENDIF
C
C Here, the current point is on the boundary, i.e outside => edge
C
	   ELSEIF (CURR_POSN .EQ. 0) THEN
C
C First go from the next corner up to the last, and look for an 
C intersection
C
	      INT_CNR = MOD(CURR_CNR,NUM_CORNER)+1
	      GOT_INT = CALC_INTER(CURR_SEG,INT_CNR,INT_XY,INT_PROP)
C
C If we didn't find one, and we didn't start at the first corner, start 
C there now and look for an intersection
C
	      IF (.NOT. GOT_INT .AND. (CURR_CNR .LT. NUM_CORNER)) THEN
	         INT_CNR = 1
	         GOT_INT = CALC_INTER(CURR_SEG,INT_CNR,INT_XY,INT_PROP)
	      ENDIF
C
C If we got one and it isn't the point on the edge, set the intersection
C and the edge point up in the linked list - first the intersection
C
	      IF (GOT_INT .AND. (CURR_CNR .NE. INT_CNR)) THEN
	         BEEN_IN = .TRUE.
	         LINK_NUM  = LAST_LINK + 1
	         LAST_LINK = LINK_NUM
	         IN        = .TRUE.
	         DONE      = .FALSE.
	         NEXT_PT   = LAST_PT + I
	         PREV_PT   = NEXT_PT - 1
	         THIS_X    = INT_XY(1)
	         THIS_Y    = INT_XY(2)
	         THIS_ANGLE = CALC_ANGLE(CURR_SEG,INT_CNR,IN)
	         CALL FIND_PTR(INT_CNR,INT_XY,THIS_ANGLE,
     &	                       THIS_DIST,THIS_PTR)
	         CALL ADD_INTER(CURR_LINK,THIS_PTR)
C
C and the edge point
C
	         LINK_NUM  = LAST_LINK + 1
	         LAST_LINK = LINK_NUM
	         IN        = .FALSE.
	         DONE      = .FALSE.
	         NEXT_PT   = LAST_PT + I
	         PREV_PT   = NEXT_PT
	         THIS_X    = CURR_XY(1)
	         THIS_Y    = CURR_XY(2)
	         THIS_ANGLE = CALC_ANGLE(CURR_SEG,CURR_CNR,IN)
		 XY(1) = CURR_XY(1)
		 XY(2) = CURR_XY(2)
C
	         CALL FIND_PTR(CURR_CNR,CURR_XY,THIS_ANGLE,
     &	                       THIS_DIST,THIS_PTR)
	         CALL ADD_INTER(CURR_LINK,THIS_PTR)
	      ENDIF
	   ENDIF
C
C Save things for the next point
C
	   SAV_XY(1) = CURR_XY(1)
	   SAV_XY(2) = CURR_XY(2)
	   SAV_POSN = CURR_POSN
	   SAV_CNR  = CURR_CNR
100	CONTINUE
C
C Keep a note of the last point number
C
	LAST_PT = LAST_PT + AREA_PTS
C
C Return
C
	RETURN
	END
