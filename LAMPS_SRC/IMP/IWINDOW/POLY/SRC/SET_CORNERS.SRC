C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-05 16:09:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SET_CORNERS(ALL_CORNERS,HOW_MANY)
C
***	IDENT	05JN90
***	MODULE	SET_CORNERS
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	17-Jun-1988
C
CMOD892	Calculate a limit by which to alter polygon coordinates
C	if they lie on a window edge/vertex for PNTPOL
C						JB	06-Jun-1990
C
C	Polygon Clipping - Add corners of clipping polygon to circular 
C	                   linked list
C
C Description
C
C	This assumes that the clipping polygon is closed, i.e. first 
C	point is the same as the last point
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	HOW_MANY		! number of corners
	REAL*4		ALL_CORNERS(2,HOW_MANY)	! corner points
C
C Common Blocks
C
	INCLUDE 'HERE:AREA_CALC.CMN'	! area calculation
	INCLUDE 'HERE:INTERSECT.CMN'	! linked list of intersections
C
C Included file for local variables
C
	INCLUDE 'HERE:CURR_LINK.INC'	! current link
C
C Local Variables
C
	REAL*4		PREV_X		! previous X coordinate
	REAL*4		PREV_Y		! previous Y coordinate
	REAL*4		MAX_X,MIN_X
	REAL*4		MAX_Y,MIN_Y
	INTEGER*4	I
C
C Initialise some things
C Calculate a small amount by which to move polygon points if they lie
C on a window edge or vertex
C
	MIN_X = ALL_CORNERS(1,1)
	MAX_X = ALL_CORNERS(1,1)
	MIN_Y = ALL_CORNERS(2,1)
	MAX_Y = ALL_CORNERS(2,1)
C
	DO 5 I = 2,HOW_MANY
	   MIN_X = MIN(MIN_X,ALL_CORNERS(1,I))
	   MAX_X = MAX(MAX_X,ALL_CORNERS(1,I))
	   MIN_Y = MIN(MIN_Y,ALL_CORNERS(2,I))
	   MAX_Y = MAX(MAX_Y,ALL_CORNERS(2,I))
5	CONTINUE
C
	LIMIT = MAX( (MAX_X-MIN_X), (MAX_Y-MIN_Y) )
	LIMIT = LIMIT*1E-6
C
	NUM_INTER  = 0			! make sure the list is empty
	NUM_CORNER = HOW_MANY - 1	! no. of corners in the list
C
C Set the fields which are the same for every corner
C
	LINK_NUM = 0
	IN = .FALSE.
	DONE = .FALSE.
	PREV_PT = 0
	NEXT_PT = 0
C
C Initialise coordinates of previous corner
C
	PREV_X = ALL_CORNERS(1,NUM_CORNER)
	PREV_Y = ALL_CORNERS(2,NUM_CORNER)
C
C Free another link
C
100	NUM_INTER = NUM_INTER + 1
C
C Set the various fields
C
	IF (NUM_INTER .EQ. 1) THEN
	   PREV_PTR = NUM_CORNER
	ELSE
	   PREV_PTR = NUM_INTER - 1
	ENDIF
	IF (NUM_INTER .EQ. NUM_CORNER) THEN
	   NEXT_PTR = 1
	ELSE
	   NEXT_PTR = NUM_INTER + 1
	ENDIF
	THIS_X = ALL_CORNERS(1,NUM_INTER)
	THIS_Y = ALL_CORNERS(2,NUM_INTER)
	THIS_DIST = SQRT((THIS_X-PREV_X)**2 + (THIS_Y-PREV_Y)**2)
	THIS_ANGLE = 90.0		! ***** assumes rectangle
C
C Now put the link into the list
C
	CALL PUT_LINK(CURR_LINK,NUM_INTER)
C
C Save the corner point
C
	CNR_XY(1,NUM_INTER) = THIS_X
	CNR_XY(2,NUM_INTER) = THIS_Y
C
C Reset previous coordinates
C
	PREV_X = THIS_X
	PREV_Y = THIS_Y
C
C Do a bit of the area calculation
C
	CALL CALC_AREA(THIS_X,THIS_Y,NUM_INTER)
C
C Go back for the next corner
C
	IF (NUM_INTER .LT. NUM_CORNER) GOTO 100
C
C Save the closing point and set the number of corners
C
	CNR_XY(1,HOW_MANY) = ALL_CORNERS(1,HOW_MANY)
	CNR_XY(2,HOW_MANY) = ALL_CORNERS(2,HOW_MANY)
	CNR_PTS = HOW_MANY
C
C Finish off the area calculation and find the sense of the boundary
C
	THIS_X = ALL_CORNERS(1,HOW_MANY)
	THIS_Y = ALL_CORNERS(2,HOW_MANY)
	CALL CALC_AREA(THIS_X,THIS_Y,HOW_MANY)
	CALL CALC_AREA(THIS_X,THIS_Y,HOW_MANY)
	CLOCKWISE = (CUM_AREA .LT. 0.0)
C
C Return
C
	RETURN
	END
