C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-05 16:02:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GET_FEATURE(FEAT_MAX,FEAT_IND,FEAT_XY,FEAT_PTS,
     &	                       NO_MORE,NO_OVERLAP)
C
***	IDENT	05JN90
***	MODULE	GET_FEATURE
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					RJH	23-Jun-1988
C
CMOD892 Signal to calling routine that there were no intersections
C	between window and polygon when window is completely enclosed
C	by the polygon (window area feature to be created), or polygon 
C	is completely outside window (feature to be deleted).
C	(Case where polygon completely inside window (feature copied 
C	entire) is dealt with here)  		 JB	06-Jun-1990
C
C	Polygon Clipping - Get a clipped feature
C
C Description
C
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	FEAT_MAX		! max. number of points
	INTEGER*4	FEAT_IND(FEAT_MAX)	! indices for orig. pts
	REAL*4		FEAT_XY(2,FEAT_MAX)	! points on boundary
	INTEGER*4	FEAT_PTS		! number of points
	LOGICAL		NO_MORE			! no more features ?
	LOGICAL		NO_OVERLAP		! no intersection ?
C
C Common Blocks
C
	INCLUDE 'HERE:AREA_CALC.CMN'	! area calculation
	INCLUDE 'HERE:INTERSECT.CMN'	! linked list of intersections
	INCLUDE 'HERE:INTERFACE.CMN'	! interface for routines
C
C Included file for local variables
C
	INCLUDE 'HERE:CURR_LINK.INC'	! current link
C
C Local Variables
C
	INTEGER*4	TEMP_PTR	! pointer to next link
	INTEGER*4	NEXT_LINK	! no. of next link
	INTEGER*4	I		! counter
C
C Initialise things
C
	NO_OVERLAP = .FALSE.
	FEAT_PTS = 0
C 
C If we've already been here before for this (original) feature, see if 
C we've finished yet
C
	IF (START_RET) THEN
	   NO_MORE = (FEAT_PTR .EQ. 1)
C
C Otherwise complete the area calculation to establish which way we go 
C round the list, and start at the first link
C
	ELSE
	   CALL CALC_AREA(0.0,0.0,LAST_PT)
	   GO_FORWARDS = (.NOT. (CLOCKWISE .XOR. (CUM_AREA .LT. 0.0)))
	   FEAT_PTR = 1
	   NO_MORE = .FALSE.
	   START_RET = .TRUE.
	ENDIF
C
C If the original feature has not crossd the clipping polygon, we have 
C a special case
C
	IF (NUM_INTER .EQ. NUM_CORNER) THEN
C
C If the feature was completely inside, return it all
C
	   IF (BEEN_IN) THEN
	      FEAT_PTS = FEAT_PTS + 1
	      FEAT_IND(FEAT_PTS)  = 1
	      FEAT_XY(1,FEAT_PTS) = 0.0
	      FEAT_XY(2,FEAT_PTS) = 0.0
	      FEAT_PTS = FEAT_PTS + 1
	      FEAT_IND(FEAT_PTS)  = -LAST_PT
	      FEAT_XY(1,FEAT_PTS) = 0.0
	      FEAT_XY(2,FEAT_PTS) = 0.0
C
C Otherwise, we don't have anything to return
C
C ***** Note we also need to cater for clipping polygon completely *****
C ***** enclosed by feature                                        *****
C Signal, and deal with at a higher level
C
	   ELSE
	      NO_OVERLAP = .TRUE.
	      NO_MORE = .FALSE.		!.TRUE.
	   ENDIF
C
C If there are no more features to return, don't do anything
C
	ELSEIF (.NOT. NO_MORE) THEN
C
C Find the start of the next feature to be returned, by going forward 
C along the linked list and finding the next available IN transition
C When we get back to the point in the list where we started, we are 
C finished
C
100	   CALL GET_LINK(CURR_LINK,FEAT_PTR)
	   TEMP_PTR = FEAT_PTR
	   FEAT_PTR = NEXT_PTR
	   IF ((.NOT. IN .OR. DONE) .AND. (FEAT_PTR .NE. 1)) GOTO 100
C
C If we have the start of a new feature, commence output
C
	   IF (IN .AND. .NOT. DONE) THEN
C
C Output the start point and the next of the original points - note 
C that we cannot be on a corner here
C
200	      FEAT_PTS = FEAT_PTS + 1
	      IF (PREV_PT .NE. NEXT_PT) THEN	! ordinary intersection
	         FEAT_IND(FEAT_PTS)  = 0
	         FEAT_XY(1,FEAT_PTS) = THIS_X
	         FEAT_XY(2,FEAT_PTS) = THIS_Y
	         FEAT_PTS = FEAT_PTS + 1
	      ENDIF
	      FEAT_IND(FEAT_PTS)  = NEXT_PT
	      FEAT_XY(1,FEAT_PTS) = 0.0
	      FEAT_XY(2,FEAT_PTS) = 0.0
C
C Mark the current link as done
C
	      DONE =.TRUE.
	      CALL PUT_LINK(CURR_LINK,TEMP_PTR)
C
C Set the number of the next link to look for
C
	      IF (LINK_NUM .EQ. LAST_LINK) THEN
	         NEXT_LINK = 1
	      ELSE
	         NEXT_LINK = LINK_NUM + 1
	      ENDIF
C
C Look for the next link - we are now inside the clipping polygon, so 
C the next link must be an OUT transition. It doesn't matter which way 
C we travel along the list to find this link
C
210	      TEMP_PTR = NEXT_PTR
	      CALL GET_LINK(CURR_LINK,TEMP_PTR)
	      IF (LINK_NUM .NE. NEXT_LINK) GOTO 210
C
C Check if we have gone from the last to the first link
C
	      IF (NEXT_LINK .EQ. 1) THEN
	         IF (FEAT_IND(FEAT_PTS) .LT. LAST_PT) THEN
	            FEAT_PTS = FEAT_PTS + 1
	            FEAT_IND(FEAT_PTS)  = -LAST_PT
	            FEAT_XY(1,FEAT_PTS) = 0.0
	            FEAT_XY(2,FEAT_PTS) = 0.0
	         ENDIF
	         FEAT_PTS = FEAT_PTS + 1
	         FEAT_IND(FEAT_PTS)  = 1
	         FEAT_XY(1,FEAT_PTS) = 0.0
	         FEAT_XY(2,FEAT_PTS) = 0.0
	      ENDIF
C
C Output the last of the original points for this section of the new 
C feature (this could be a point on the edge)
C
	      IF (PREV_PT .GT. FEAT_IND(FEAT_PTS)) THEN
	         FEAT_PTS = FEAT_PTS + 1
	         FEAT_IND(FEAT_PTS) = -PREV_PT
	         FEAT_XY(1,FEAT_PTS) = 0.0
	         FEAT_XY(2,FEAT_PTS) = 0.0
	      ENDIF
C
C and the intersection if there is one
C
	      IF (PREV_PT .NE. NEXT_PT) THEN
	         IF (FEAT_IND(FEAT_PTS) .NE. NEXT_PT) THEN
	            FEAT_PTS = FEAT_PTS + 1
	         ENDIF
	         FEAT_IND(FEAT_PTS)  = 0
	         FEAT_XY(1,FEAT_PTS) = THIS_X
	         FEAT_XY(2,FEAT_PTS) = THIS_Y
	      ENDIF
C
C Mark the current link as done
C
220	      DONE =.TRUE.
	      CALL PUT_LINK(CURR_LINK,TEMP_PTR)
C
C Now look for the next IN transition - we are now going along the edge 
C of the clipping polygon in the direction we establised earlier, so we 
C set the pointer to the next link according to our direction
C
	      IF (GO_FORWARDS) THEN
	         TEMP_PTR = NEXT_PTR
	      ELSE
	         TEMP_PTR = PREV_PTR
	      ENDIF
C
C Get the next link 
C
	      CALL GET_LINK(CURR_LINK,TEMP_PTR)
C
C Any intermediate points are output as we go - these could be corners, 
C or points from the original feature lying on the edge. After output, 
C go back and repeat
C
	      IF (.NOT. IN) THEN
	         FEAT_PTS = FEAT_PTS + 1
	         FEAT_IND(FEAT_PTS)  = NEXT_PT
	         IF (FEAT_IND(FEAT_PTS) .EQ. 0) THEN	! a corner
	            FEAT_XY(1,FEAT_PTS) = THIS_X
	            FEAT_XY(2,FEAT_PTS) = THIS_Y
	         ELSE
	            FEAT_XY(1,FEAT_PTS) = 0.0
	            FEAT_XY(2,FEAT_PTS) = 0.0
	         ENDIF
	         GOTO 220
	      ENDIF
C
C If this isn't the link we started on, the feature isn't yet finished, 
C so go back for more
C
	      IF (.NOT. DONE) GOTO 200
C
C Finish off the feature by adding the closing point
C
	      FEAT_PTS = FEAT_PTS + 1
	      IF (PREV_PT .NE. NEXT_PT) THEN	! ordinary intersection
	         FEAT_IND(FEAT_PTS)  = 0
	         FEAT_XY(1,FEAT_PTS) = THIS_X
	         FEAT_XY(2,FEAT_PTS) = THIS_Y
	      ELSE
	         FEAT_IND(FEAT_PTS)  = NEXT_PT
	         FEAT_XY(1,FEAT_PTS) = 0.0
	         FEAT_XY(2,FEAT_PTS) = 0.0
	      ENDIF
C
C If we didn't find the start of another feature, we have finished
C
	   ELSE
	      NO_MORE = .TRUE.
	   ENDIF
	ENDIF
C
C Return
C
	RETURN
	END
