C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-15 14:42:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GETCMD()
C
***	MODULE GETCMD
***	IDENT 15OC86
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : A.T. Timms
C	Created : 29 September 1986
C
C Command decoding function for IMP utility ISELAC. Based on IPATCH 
C PROCESS.SRC as IPATCH is the only other command driven IMP utility.
C
C It returns FALSE if a fatal error has occurred, and TRUE otherwise
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNISELAC:ATTRIB.CMN'	! for HADGO,DOEXIT etc..
	INCLUDE 'LSL$CMNISELAC:IFFOK.CMN' 	! IFF error stuff
C
C parameter files
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB error codes
C
C functions
C LSLLIB functions
	LOGICAL		RDCHS		! read a (significant) char
	INTEGER		RDCOMM		! read a command
C
C local functions
	LOGICAL		READ_PROMPT	! read line with prompt
	LOGICAL		SELDEC		! process command
C
C workspace
        BYTE		ICH
C
C....................................................................
C assume the worst
	GETCMD = .FALSE.
C
C....................................................................
C we start by prompting the user for a command...
C (note that ^Z will be treated as EXIT)
1000	IF ( .NOT. READ_PROMPT( 'ISELAC> ', 'EXIT' ) ) GOTO 9999
C
C....................................................................
C Start at the beginning of the line returned, and read the first
C character from it. If there is nothing on the line (or only spaces
C or tabs), then ignore it and prompt again
	CALL BSLN
	IF ( RDCHS(ICH) ) GOTO 1000
C
C....................................................................
C Check whether the first character is of significance, or whether
C it may be assumed to be the start of an ordinary command.
C
C we recognise the single character command:
C
C		!	- comment - ignore this line
C
	IF ( ICH.EQ.'!' ) GOTO 1000
C
C....................................................................
C Otherwise, this should be an ordinary command.
C
C Call SELDEC to process the command. It returns TRUE if we are
C to EXIT because of an error.
 	OK = SELDEC() 
	IF (.NOT.OK) GOTO 9999			! error
	IF (DOEXIT.OR.HADGO) GOTO 9000		! normal exit or go !
C....................................................................
C get another command
	GOTO 1000
C
C....................................................................
C successful exit arrives here
9000	GETCMD = .TRUE.			! all went well
C
C....................................................................
C errors join us here
9999	RETURN
	END
