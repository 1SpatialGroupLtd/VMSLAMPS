C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-04-14 11:47:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
       LOGICAL FUNCTION ACSKRD(SKLFIL)
C
***    MODULE  ACSKRD
***    IDENT   10AP87
C
C	Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C	Author: A T Timms	(from ACSKRD in DAMP SELAC)
C	Modified: DRC 10AP87  ot read a range value associated with
C	an AC.
C
C	Function to read AC skeleton file 
C
C I am assuming it works. There is no time to re-write it.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSL_STATUS ..
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'	! TXTBUF etc
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'	! for ON_SPACE
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	! for LSL__EOF 
	INCLUDE 'LSL$CMNISELAC:ISELACMSG.PAR'	! ISELAC errors
	INCLUDE 'LSL$CMNISELAC:ACSKEL.CMN'
	INCLUDE '($SSDEF)'
C
C Workspace
	CHARACTER*80	SKLFIL			! skeleton file name
C
	INTEGER*4       SUCCESS			! success of not ??	
	INTEGER*4	IERR			! for error return	
	INTEGER*2	LIN			! input line no
	INTEGER*2	STRLEN
	INTEGER*2	TMPLEN			! Temp variables
	INTEGER*4	TMP_NAME		!  "      "
	INTEGER*4	DESCR(2)		! temporary string
        INTEGER*4	UNIT
	INTEGER*4	CHARS
	INTEGER*4	IND
	INTEGER*4	NCMD
	INTEGER*4	FMTPTR
	INTEGER*4	NSK
	INTEGER*4	NFLD
	BYTE            ICH
	BYTE            SPACE			! to find end of line
	LOGICAL		HADID
	LOGICAL		IS_INT
	INTEGER*4	I
	INTEGER*4	J
	INTEGER*2	SKLLEN			! length skeleton flname
	INTEGER*2	DPTR
	INTEGER*2	DPTR1
	INTEGER*4	ITEMP
	REAL		RTEMP
C
	EQUIVALENCE	(STRLEN,DESCR(1))
C
C functions 
	INTEGER*4	FLROPN 	
	INTEGER*4       FLRSEL
	INTEGER*4       FLRLIN
	INTEGER*4	FLRCLO
	INTEGER*4       RDCHS
	INTEGER*4       READSTR
	INTEGER*4       RDINT
	INTEGER*4       RDCOMM
	INTEGER*4       RDLONG
	INTEGER*4       RDREAL	
	INTEGER*4	VIOCLR
	INTEGER*4	BSLN
C
	INTEGER		ACCMD_CMD_TABLE
	EXTERNAL	ACCMD_CMD_TABLE
C
	PARAMETER	(SPACE = ' ')
C
C
C....................................................................
	ACSKRD   = .TRUE.		! assume success
	NO_ACSK  = .TRUE.		! We havn't a Skeleton file yet
C
C....................................................................
C Open skeleton file
	UNIT=1
C
C Find length (first non-blank character of SKLFIL
	DO 5 I = 80,1,-1
	  IF (SKLFIL(I:I).NE.' ') GOTO 8
5	CONTINUE
C
8	SKLLEN = I
	IERR = 0
C
	SUCCESS = FLROPN(UNIT,SKLFIL,IERR)
C
	IF (SUCCESS) THEN			! did it open ok?
	  ACSKRD = ISELAC__OPNSKL		! Yes
	  CALL LSL_PUTMSG(ACSKRD,SKLFIL(1:SKLLEN))
	ELSE					! No, error !! 
	  ACSKRD = ISELAC__ERROPSKL		! tell user
	  CALL LSL_PUTMSG(ACSKRD,SKLFIL(1:SKLLEN))
	  CALL LSL_ADDMSG(SUCCESS)		! give any 2ndary error
	  IF (IERR.NE.0) THEN
	    CALL LSL_ADDMSG(IERR)		! give any system error
	  ENDIF
	  ACSKRD = .TRUE.
	  GOTO 3000				! error but don't exit
	ENDIF
C
	SUCCESS = VIOCLR(SK_NAME,480)
	SUCCESS = VIOCLR(SK_LPRMPT,480)
	SUCCESS = VIOCLR(SK_FMT,1600)
	SUCCESS = VIOCLR(SK_ABBR,1600)
	SUCCESS = VIOCLR(SK_FPRMPT,10400)
	SUCCESS = VIOCLR(SK_FDID,9600)
C
	LIN = 0
	NSK = 0
C
C....................................................................
C read line
10	LIN = LIN+1
	SUCCESS = FLRLIN()
	IF (.NOT.SUCCESS) THEN
	  IF (SUCCESS.EQ.LSL__EOF) THEN
	    NO_ACSK = .FALSE.			! we have skel file ok
	    GOTO 990				! end of file
	  ELSE
	    ACSKRD  = ISELAC__ERRRDSK		! error in read
	    CALL LSL_PUTMSG(ACSKRD)
	    ACSKRD = .TRUE.		! set function return ok though
	    GOTO 2000
	  ENDIF
	ENDIF
C
C....................................................................
C Decode
	CALL BSLN
	IF(RDCHS(ICH)) GOTO 10
	IF(ICH.EQ.'%') GOTO 300      		! field record
	IF(ICH.GE.'0'.AND.ICH.LE.'9') GOTO 200	! numeric - AC type
	IF(ICH.GE.'A'.AND.ICH.LE.'Z') GOTO 100	! alpha - new SK_id
	IF(ICH.GE.'a'.AND.ICH.LE.'z') GOTO 100	! alpha - new SK_id
	IF(ICH.EQ.'!')		      GOTO 10	! comment
	GOTO 910				! unrecognised line
C
C....................................................................
C new SK
100	NSK=NSK+1
	HAD_TEXT(NSK) = .FALSE.		! assume we havn't had TEXT 
	DS_FMT(2,NSK)= %LOC(SK_FMT(1,NSK))
	IF(NSK.GT.1) THEN
	  SK_NFDS(NSK-1)=NFLD
	  DS_FMT(1,NSK-1)= FMTPTR-1
	END IF
	NFLD=0
	SK_FMT(1,NSK)= '%'
	SK_FMT(2,NSK)= 'W'
	SK_FMT(3,NSK)= '%'
	SK_FMT(4,NSK)= ' '
	FMTPTR=5
	CALL BSLN
	DS_NAME(2,NSK)= %LOC(SK_NAME(1,NSK))
	DS_NAME(1,NSK)= 24
C
C Read name using space or tab as terminator.
	STRLEN = READSTR(DS_NAME(1,NSK),SPACE,ON_SPACE)
C
	IF(STRLEN.LE.0)GOTO 920     		! error/nothing on line
	DS_NAME(1,NSK)=STRLEN
C
C Set default range values for this AC
	SK_ACLOIVAL(NSK)=-2147483648
	SK_ACHIIVAL(NSK)= 2147483520
        GOTO 10                   		! return for next entry
C
C....................................................................
C AC type/LCODE record
200	CALL BSCH
	IF (NSK.EQ.0) GOTO 930			! no AC names yet !!
	IF(RDINT(SK_ACTYP(NSK))) GOTO 930
C
C....................................................................
C AC type found - look for other fields
	IND=64					! 8*width (=8)
	SK_LCIVAL(NSK)=0			! default value
210	IF(RDCHS(ICH)) THEN
	  SK_ACIND(NSK)= IND			! end of line
	  GOTO 10
	ELSE IF(ICH.EQ.'!') THEN
	  SK_ACIND(NSK)= IND			! comment
	  GOTO 10
	ELSE IF(ICH.EQ.'[') THEN		
	  IF(HAD_INT(NSK)) THEN			! integer field
	      IF(RDLONG(SK_ACLOIVAL(NSK))) GOTO 960
	  ELSE
	      IF(RDREAL(SK_ACLORVAL(NSK))) GOTO 960
	  END IF
	  IF(RDCHS(ICH)) GOTO 962		! premature end of line
	  IF(ICH.EQ.']') THEN
	     IF(HAD_INT(NSK))THEN
	      SK_ACHIIVAL(NSK)=SK_ACLOIVAL(NSK)
	      GOTO 330
	     ELSE
	      SK_ACHIRVAL(NSK)=SK_ACLORVAL(NSK)
	      GOTO 330
	     ENDIF
	  ELSE IF(ICH.NE.':'.AND.ICH.NE.',') THEN!range
	      CALL BSCH
	  END IF
	  IF(HAD_INT(NSK)) THEN			! integer field
	      IF(RDLONG(SK_ACHIIVAL(NSK))) GOTO 960
	  ELSE
	      IF(RDREAL(SK_ACHIRVAL(NSK))) GOTO 960
	  END IF
	  IF(RDCHS(ICH)) GOTO 962	!unexpected end of line
	  IF(ICH.NE.']') GOTO 962	!no terminating square bracket
	ELSE IF(ICH.EQ.'''')THEN		
	  DS_LPRMPT(2,NSK)= %LOC(SK_LPRMPT(1,NSK)) ! read LCODE prompt
	  DS_LPRMPT(1,NSK)= 24
	  STRLEN= READSTR(DS_LPRMPT(1,NSK),'''',,,IERR)
	  IF (STRLEN.GT.24) GOTO 932		! prompt too long
	  IF (IERR.NE.LSL__STRCHAR) GOTO 950	! prompt not closed
	  DS_LPRMPT(1,NSK)= STRLEN
	ELSE					! read LCODE type etc
	  CALL BSCH
	  NCMD= RDCOMM(ACCMD_CMD_TABLE)
	  IF(NCMD.EQ.1) THEN			! INTEGER	   
	    HAD_INT(NSK)=.TRUE.
	    IF(.NOT.ARGMSG) THEN		! fixed value given
	      IND=IND+2
	      SK_LCIVAL(NSK)= INTARG(1)
	    END IF
	  ELSE IF(NCMD.EQ.2) THEN		! REAL
	    HAD_REAL(NSK)=.TRUE.
	    IND = IND+1
	    SK_LCRVAL(NSK)= 0.0			! default real value
	    IF(.NOT.ARGMSG) THEN		! fixed value given
		 IND=IND+2
		 SK_LCRVAL(NSK)= REALAR(1)
	    END IF
	  ELSE IF(NCMD.EQ.4) THEN		! TEXT
	    IND = IND+4
	    HAD_TEXT(NSK) = .TRUE.
	  ELSE IF(NCMD.NE.3) THEN		! invalid command
	    GOTO 935
	  END IF
	END IF
	GOTO 210
C
C....................................................................
C field record
300	NFLD=NFLD+1
	IND=0
	IF(RDCHS(ICH)) GOTO 940			! premature end of line
	IF(ICH.EQ.'!') GOTO 940			! premature comment
	IF(ICH.EQ.'I'.OR.ICH.EQ.'i')THEN	
	  IS_INT=.TRUE.
	ELSE IF(ICH.EQ.'F'.OR.ICH.EQ.'f')THEN	
	  IND=IND+1				! indicate REAL format
	  IS_INT=.FALSE.
	ELSE 
	  GOTO 942				! invalid format type
	END IF
	CALL DCPSAV(DPTR)
C
C....................................................................
C read past (and check) numeric part of format
	IF(IS_INT)THEN
	  IF(RDLONG(ITEMP)) GOTO 942
	  IND=IND+8*ITEMP			! field width
	ELSE
	  IF(RDREAL(RTEMP)) GOTO 942
	  IND=IND+8*INT(RTEMP)			! field width
	END IF
C
C....................................................................
C transfer next word (eg 'typ')
	DESCR(2)= %LOC(SK_FMT(FMTPTR,NSK))
	STRLEN= 81-FMTPTR
	STRLEN= READSTR(DESCR,SPACE,ON_SPACE)
	IF(STRLEN.LE.0) GOTO 943
	J=0
	DO 305 I=FMTPTR,FMTPTR+STRLEN-1		! copy word into SK_ABBR
	  IF(SK_FMT(I,NSK).EQ.' ') GOTO 305
	  J=J+1
	  IF(J.GT.4) GOTO 305
	  SK_ABBR(J,NFLD,NSK)= SK_FMT(I,NSK)
305	CONTINUE
	FMTPTR= FMTPTR+STRLEN
C
C....................................................................
C transfer format
	SK_FMT(FMTPTR,NSK)= '%'
	SK_FMT(FMTPTR+1,NSK)= ICH
	FMTPTR=FMTPTR+2
C
C....................................................................
C return to and transfer numeric part of format
	CALL DCPSAV(DPTR1)			! first remember return 
	CALL DCPSET(DPTR)
	DESCR(2)= %LOC(SK_FMT(FMTPTR,NSK))
	STRLEN= 81-FMTPTR
	STRLEN= READSTR(DESCR,SPACE,ON_SPACE)
	FMTPTR= FMTPTR+STRLEN
	CALL DCPSET(DPTR1)			! reset position
C
C....................................................................
C insert space
	SK_FMT(FMTPTR,NSK)= ' '
	FMTPTR=FMTPTR+1
C
C....................................................................
C look for next bit (prompt, range, identifier)
	HADID = .FALSE.
	IF(IS_INT) THEN				! preset to 0
	  SK_FDIVAL(NFLD,NSK)= 0
	ELSE					! preset to 0.0
	  SK_FDRVAL(NFLD,NSK)= 0.0
	END IF
320	IF(RDCHS(ICH)) THEN
	  IF(.NOT.HADID) GOTO 944		! must have identifier
	  SK_FDIND(NFLD,NSK)=IND
	  GOTO 10
	END IF
	IF(ICH.EQ.'!') THEN			! comment_as end of line
	  IF(.NOT.HADID) GOTO 944		! must have identifier
	  SK_FDIND(NFLD,NSK)=IND
	  GOTO 10
	END IF
	IF(ICH.EQ.'<') THEN
	  HADID= .TRUE.
	  DS_FDID(2,NFLD,NSK)= %LOC(SK_FDID(1,NFLD,NSK))
	  DS_FDID(1,NFLD,NSK)= 24
	  STRLEN=READSTR(DS_FDID(1,NFLD,NSK),'>',,,IERR)
	  IF (STRLEN.GT.24) GOTO 946		! id too long
	  IF (IERR.NE.LSL__STRCHAR) GOTO 947	! id not closed
	  DS_FDID(1,NFLD,NSK)= STRLEN
	ELSE IF(ICH.EQ.'''') THEN		! prompt
	  DS_FPRMPT(2,NFLD,NSK)= %LOC(SK_FPRMPT(1,NFLD,NSK))
	  DS_FPRMPT(1,NFLD,NSK)= 24
	  STRLEN=READSTR(DS_FPRMPT(1,NFLD,NSK),'''',,,IERR)
	  IF (STRLEN.GT.24) GOTO 932		! prompt too long
	  IF (IERR.NE.LSL__STRCHAR) GOTO 950	! prompt not closed
	  DS_FPRMPT(1,NFLD,NSK)= STRLEN
	ELSE IF(ICH.EQ.'[') THEN		
	  IND=IND+4				! range present
	  IF(IS_INT) THEN			! integer field
	      IF(RDLONG(SK_LOIVAL(NFLD,NSK))) GOTO 960
	  ELSE
	      IF(RDREAL(SK_LORVAL(NFLD,NSK))) GOTO 960
	  END IF
	  IF(RDCHS(ICH)) GOTO 962		! premature end of line
	  IF(ICH.EQ.']') THEN
	      SK_HIIVAL(NFLD,NSK)=SK_LOIVAL(NFLD,NSK)
	      GOTO 330
	  ELSE IF(ICH.NE.':'.AND.ICH.NE.',') THEN
	      CALL BSCH
	  END IF
	  IF(IS_INT) THEN			! integer field
	      IF(RDLONG(SK_HIIVAL(NFLD,NSK))) GOTO 960
	  ELSE
	      IF(RDREAL(SK_HIRVAL(NFLD,NSK))) GOTO 960
	  END IF
	  IF(RDCHS(ICH)) GOTO 962
	  IF(ICH.NE.']') GOTO 962
C
C....................................................................
C preset values to lower bound if range present
330	  SK_FDIVAL(NFLD,NSK)= SK_LOIVAL(NFLD,NSK)
C
C....................................................................
C indicate single value if bounds equal
	  IF(SK_LOIVAL(NFLD,NSK).EQ.SK_HIIVAL(NFLD,NSK))IND=IND+2
	END IF
	GOTO 320
C
C....................................................................
C
C **************	ERRORS		****************
C
C....................................................................
C
910	ACSKRD  = ISELAC__UNRECLIN
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
920	ACSKRD = ISELAC__ERRRDACNAM
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
930	ACSKRD = ISELAC__INVACTYP
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
932	ACSKRD = ISELAC__PRMTOOLNG
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
935	ACSKRD = ISELAC__INVALKYWD
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
940	ACSKRD = ISELAC__INCOMPFLD
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
942	ACSKRD = ISELAC__INVALFRMT
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
943	ACSKRD = ISELAC__INVALTXT
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
944	ACSKRD = ISELAC__IDNTABS
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
946	ACSKRD = ISELAC__IDNTOOLNG
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
947	ACSKRD = ISELAC__IDNTNTCLO
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
950	ACSKRD = ISELAC__PRMTNTCLO
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
960	ACSKRD = ISELAC__INVALRNG
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
962	ACSKRD = ISELAC__RNGNTCLO
	CALL LSL_PUTMSG(ACSKRD,LIN)
	CALL TTWLIN(TXTBUF,TXTPTR)
	GOTO 2000
C
C....................................................................
990     SK_NFDS(NSK)=NFLD
	DS_FMT(1,NSK)= FMTPTR-1
	SK_NSKS=NSK
C
C....................................................................
2000	SUCCESS = FLRCLO(UNIT)
C
3000	IF (ACSKRD) ACSKRD = SS$_NORMAL 	! set function return ok
	RETURN
	END
