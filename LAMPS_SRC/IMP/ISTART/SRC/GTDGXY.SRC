C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-08 17:22:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE GTDGXY(LINE,BUTTON,XY,ABAPNT,ABORT)
C
***	IDENT	28NO86
***	MODULE	GTDGXY
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Ripped off from LITES2 for ISTART	TJH	27-Nov-1986
C	Created					RWR	22-Nov-1984
C
C	Subroutine to read X and Y coordinates from the digitising
C	table.  The table must have already have been opened.
C
C
C
	IMPLICIT NONE
C
C
C Parameters:
	INCLUDE '($SSDEF)'		! system paramaters
	INCLUDE 'LSL$CMNISTART:ISTARTMSG.PAR'
C
C Common:
	INCLUDE 'LSL$CMNISTART:TABLE.CMN'
	INCLUDE 'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
C
C
C Arguments
	INTEGER*4	LINE		! digitiser area that was
					! pressed
					! = 3 for digitiser
	INTEGER*4	BUTTON		! button that was pressed
	REAL		XY(2)		! table coordinates
	LOGICAL		ABAPNT		! .TRUE. if button pressed is
					! second highest defined
	LOGICAL		ABORT		! .TRUE. if button pressed
					! was highest defined
C
C Functions called
	LOGICAL		STRDTB
	LOGICAL		DIGTRN
	LOGICAL		GTYPAC
	INTEGER*4	TRNBUT
	LOGICAL		HAD_ERROR,READ_ERROR
	LOGICAL		WAIT_PUCK,READ_PUCK
C
C Local Variables
	INTEGER*4	I		! counter
	INTEGER*2	DTBOSB(4)	! return status, direct table
	INTEGER*4	BUFFLEN
	PARAMETER	(BUFFLEN=40)
	BYTE		BUFF(BUFFLEN)	! buffer for direct table reads
	INTEGER*4	COUNT		! no of chars in typeahead buff
	BYTE		BYTE1		! first byte
	INTEGER*4	MASK
	INTEGER*4	BLEN		! I*4 value of buffer length
C
C additional variables for using table monitor
	LOGICAL		DTBUP		! to remember if there is a
					! read to direct table up
	INTEGER*2	TABBUT		! button number as word
	INTEGER*4	IERR		! return code
	BYTE		BU		! puck button number returned
					! by table montor
	INTEGER*4	IX,IY		! coordinates returned by
					! table monitor
C
C ......................................................................
C
	ABAPNT = .FALSE.
	ABORT  = .FALSE.
C
C Read table ... until we get a good result
C
C Direct table read
10	IF (DTRON) THEN
	   IF (GTYPAC(DTBCHN,COUNT,BYTE1)) THEN	! check type ahead buff
	      IF (COUNT.GT.MXTYPC) THEN
	         CALL LSL_PUTMSG(ISTART__NOMOREBUTS,COUNT/15)
	      ENDIF
	   ENDIF
	   DTBUP=STRDTB(DTBFLG,DTBCHN,DTBOSB,BUFFLEN,BUFF)
	ENDIF
C
C
C build event flag mask, and wait for something to happen
	IF (DTRON) THEN
	  MASK = 0				! clear to start with
	  IF (DTBUP) CALL EFWM(MASK,DTBFLG)	! add direct table read
	  CALL SYS$WFLOR( ,%VAL(MASK) )
	  IF (DTBUP.AND.DTBOSB(1).NE.0) GOTO 100
	ENDIF
C
C check for input from table monitor
	IF (RMON) THEN
	  IF (.NOT.WAIT_PUCK(IERR)) THEN
	    IF (.NOT.READ_PUCK(BU,IX,IY,IERR)) THEN
	       LINE=DIGLIN
	       BUTTON=BU
	       XY(1)=IX
	       XY(2)=IY
	       GOTO 600
	     ELSEIF (HAD_ERROR(IERR)) THEN ! error reading
	       IF (.NOT.READ_ERROR(TXTBUF,TXTPTR,I,IERR)) THEN
	          CALL LSL_PUTMSG(ISTART__TABREAD)
	          TXTBUF(TXTPTR+1)=0
	          CALL LSL_ADDMSG(ISTART__TABREP,TXTBUF)
	        ENDIF
	        GOTO 10				! try again
	      ENDIF
	   ELSE
	     CALL LSL_PUTMSG(ISTART__TABREAD)
	     IF (HAD_ERROR(IERR)) THEN
	       CALL READ_ERROR(TXTBUF,TXTPTR,I,IERR)
	       TXTBUF(TXTPTR+1)=0
	       CALL LSL_ADDMSG(ISTART__TABREP,TXTBUF)
	       GOTO 10
	     ENDIF
	   ENDIF
	ENDIF
C
C or what else can it be?
C
	CALL LSL_PUTMSG(ISTART__NOINPUT)
	GOTO 10
C
C check direct table
C
100	DTBUP=.FALSE.
	IF (.NOT.DTBOSB(1)) THEN		! error
	   CALL LSL_PUTMSG(DTBOSB(1))
	   GOTO 10
	ENDIF
C
C translate result of read
C
	BLEN=DTBOSB(2)			! I*2 -> I*4
	IF (BLEN.LE.0) GOTO 10
	IF (DIGTRN(BUFF,BLEN,BUTTON,IX,IY,USEFUN,%VAL(FUNADR))) THEN
	   LINE=DIGLIN
	   XY(1)=IX
	   XY(2)=IY
	ELSE
	   BUFF(BLEN+1)=0
	   CALL LSL_PUTMSG(ISTART__TABERRREAD,BUFF)   ! error in string
	   GOTO 10
	ENDIF
C
C here we have got coordinates from table
600	BUTTON=TRNBUT(BUTTON)		! normalise button number
C
C set ABAPNT and ABORT flags
	IF (BUTTON.NE.-1) THEN
	  IF (BUTTON.EQ.NOBUTT) ABORT=.TRUE.
	  IF (BUTTON.EQ.(NOBUTT-1)) ABAPNT=.TRUE.
	ENDIF
C
C we may have just messed up the outstanding table reads 
C
999	RETURN
	END
