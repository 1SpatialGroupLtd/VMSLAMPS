C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-10-18 16:26:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM ISTART
C
***	MODULE	ISTART
***	IDENT	18OC90
C
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Don't call REGISTER if HAD_OS			RJH  18-Aug-1987
C	Author						TJH  30-Sep-1986
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE		'LSL$CMNISTART:PARAMS.PAR'
C
C Common:
	INCLUDE		'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE		'LSL$CMNISTART:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C
C Functions: (in order of call)
	LOGICAL		CMDLIN		! gets/does parse on cmd line
	LOGICAL		GEN_INTRO	! gives general introduction
	LOGICAL		GET_SCALE	! gets map scale 
	LOGICAL		GET_CPS		! gets control point values
	LOGICAL		GET_ORIGIN	! gets origin offset
	LOGICAL		CP_CHECK	! checks CPs for Laseraid use
	LOGICAL		IFF_HEADER	! create IFF header
C
C ......................................................................
C
C Initialise things.
C
	CALL LSL_INIT(.TRUE.)	! start collecting timing statistics
C
C Ensure that we will delete the output file in all but the case of a 
C successful run
C
	DELETE=.TRUE.
C
C Get, parse and decode command line. All results returned via
C /COMMAND/ common block. All error message output is done within
C CMDLIN().
C
	LSL_STATUS=CMDLIN()
	IF (LSL_STATUS) THEN
C
C Give general introduction  - reminds user to use SI
C
	   IF (LEARNER) THEN
	     LSL_STATUS=GEN_INTRO()
	   ENDIF
	   IF (LSL_STATUS) THEN
C
C
C Get the map scale for the IFF MD (Map Descriptor) and possibly the
C customer specific MH (Map Header) entries.
C
	     LSL_STATUS=GET_SCALE()
	     IF (LSL_STATUS) THEN
C
C Get the CP (Control Point) values for the IFF CP entry. Depending upon
C option qualifiers specified on the command line GET_CPS will either
C prompt for input from the terminal (via function TT_INPUT) or from a
C digitising table (via function MUART_CPS or TABMON_CPS)
C
	        LSL_STATUS=GET_CPS()
	        IF (LSL_STATUS) THEN
C
C Get the origin offset. Depending upon option qualifiers specified on 
C the command line GET_ORIGIN will either prompt for input from the
C terminal, derive the origin automatically from the CP values, or if
C using a digitising table, explicitly set the origin offset
C to (0.0, 0.0).
C
	           LSL_STATUS=GET_ORIGIN()
	           IF (LSL_STATUS) THEN
C
C Test that the CPs are valid for Laseraid digitising setup. Don't
C bother if OS mode was selected as the CP values are then set up
C by ISTART not the user!
C
		      IF (CHECK.AND.(.NOT.HAD_OS)) THEN
		        LSL_STATUS=CP_CHECK()
		      ENDIF
	              IF (LSL_STATUS) THEN
	
C
C Having got all the data needed for the output IFF file we can write
C the data out to it.
C
	                LSL_STATUS = IFF_HEADER()
	                IF (LSL_STATUS) THEN
C
C Generate registration mark features in layer 0 of the output IFF file
C to represent the position of the control points. These registration
C marks will either be ticks (/TICKS) or crosses (default)
C
		           IF (.NOT.(LASER.OR.HAD_OS)) THEN
			     CALL REGISTER
			   ENDIF
C
C And if the Ordnance Survey option (/OS) was selected, generate a grid
C and write it to the output IFF file layer 0.
C
	                   CALL OSGRID
C
C Finally generate the first user data layer in the output IFF file.
C This will be layer 1 by default or the layer number explicitly given
C by the user using /LAYER. IFFFIN then closes the layer, the map and
C writes an EJ 
		           CALL IFFFIN
C
C If the /LOG qualifier was specified write out the CP values used
			   IF (HAD_LOG) THEN
			     CALL CP_PRINT
		           ENDIF
	                ENDIF
	              ENDIF
	            ENDIF
	         ENDIF
	      ENDIF
	   ENDIF
	ENDIF
C
C Close the output file (if open)
	IF (OUTFLO) THEN
	  IF (DELETE) THEN		    ! if IFF file broken ...
	     CALL IFFCDL(OUTLUN)	    ! close & delete 
	  ELSE
	     CALL IFFCLO(OUTLUN,LSL_STATUS) ! just close
	  ENDIF
	ENDIF
C
C Now exit using LSL_STATUS to set $STATUS as we go
C
	CALL LSL_EXIT
	END
