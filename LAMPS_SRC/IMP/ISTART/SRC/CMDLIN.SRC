	LOGICAL*4 FUNCTION CMDLIN()
C
***	MODULE	CMDLIN
***	IDENT	03OC90
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	/MH_TYPE included to specify the map header type
C	which may be 2, 3 or 4. The default being 2	ST   03-Sep-1990
CMOD	/NOTICKS and /NOSYMBOLS explicitly tested for,
C	invalid button repeat count, layer and FC number
C	messages now set R0!				TJH  01-Mar-1988
C	Author						TJH  20-Oct-1986
C
C
C Get, parse and decode command line. All results returned via
C /COMMAND/ common block. All error message output is done within
C CMDLIN().
C
C
C ......................................................................
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 	'LSL$CMNISTART:PARAMS.PAR'
	INCLUDE 	'LSL$CMNISTART:ISTARTMSG.PAR'
	INCLUDE 	'($SSDEF)/NOLIST'
	INCLUDE 	'($STSDEF)/NOLIST'
	INTEGER*4 	CLI$_ABSENT, CLI$_PRESENT, CLI$_DEFAULTED,
     &			CLI$_NEGATED, CLI$_LOCNEG, CLI$_LOCPRES
	EXTERNAL 	CLI$_ABSENT, CLI$_PRESENT, CLI$_DEFAULTED,
     &			CLI$_NEGATED, CLI$_LOCNEG, CLI$_LOCPRES
C
C condition handler
	EXTERNAL	CMD_ERRET
C
C Common block to control error reporting in condition handler
	LOGICAL		ERR_REPORT
	COMMON /CMD_REPORT/ ERR_REPORT	
C
C Common:
	INCLUDE		'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE		'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE		'LSL$CMNISTART:FILE.CMN'
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
C
C
C Command Language Definitions
	EXTERNAL        ISTART_CLD
C W/S
	LOGICAL		ABSENT		! is file-spec absent?
	LOGICAL		HAD_BUT		! /BUTTONS qualifier present?
	LOGICAL		HAD_COF		! /UNITS qualifier present?
	LOGICAL		LOCAL      	! is qualifier local?
	LOGICAL		LOCNEG     	! qualifier locally negated?
	LOGICAL		NEGSYMB		! /NOSYMBOLS qualifier present?
	LOGICAL		NEGTICK		! /NOTICKS qualifier present?
C
C Functions called
	INTEGER		DCL_FILE	! reads and parses file title 
C					  from DCL command line
	INTEGER		DCL_INT		! gets qualifier args. (integer)
	INTEGER		DCL_QUAL	! looks for specified qualifier
	INTEGER		DCL_REAL	! gets qualifier args. (real)
	INTEGER    	DCL_STARTUP	! gets parsed command line
	INTEGER		OPEN_IFF	! attempts to open IFF file
	INTEGER		CLI$PRESENT	! element present on cmd line?
C
C ......................................................................
C
C
C Get command line for verb ISTART. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	CMDLIN=DCL_STARTUP('ISTART',.FALSE.,ISTART_CLD,.TRUE.)
C
C Check for /LOG
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Get ...
	IF (CMDLIN) THEN
	  CMDLIN=DCL_FILE( 'P1','LSL$IF:IFF.IFF',ABSENT,.FALSE.,.TRUE.)
	  IF (CMDLIN) THEN
	    CALL EXPFLN(P1_FIL,P1_LEN)
C
C ... and open the output IFF file, as this is most likely to fail we
C will do this first
C
	    CMDLIN=OPEN_IFF()
	  ENDIF				! got file-spec ok?
	ENDIF				! DCL_STARUP ok?
C
C ......................................................................
C
C Check for remaining qualifiers, we could have:
C			/CHECK
C			/FC=int
C			/LAYER=int
C			/LEARNER
C			/LASERAID
C			/MUART_TABLE
C			/MCE
C			/OS
C			/MH_TYPE=int
C			/TABLE
C			/TICKS
C			/USER_ORIGIN
C
C Qualifiers  for digitising table mode:
C			/BUTTONS=(NUMBER=integer,BASE=integer)
C			/CENTRE
C			/COUNTS
C			/ADDRESSABILITY=real
C			/REPEAT=int
C			/[NO]ROTATION
C			/THOU
C ......................................................................
C
C
C Check for /CHECK
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('CHECK',CHECK,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /FC=int
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('FC',HAD_FC,LOCAL,LOCNEG,.TRUE.)
	  IF (CMDLIN) THEN
C
C Get its argument
	    IF (HAD_FC) THEN
	      CMDLIN=DCL_INT('FC',.TRUE.)
C
C And transfer it to a ISTART variable
	      IF (CMDLIN) THEN
		IF (IARRAY(1).LT.0.OR.IARRAY(1).GT.32767) THEN
	           CMDLIN=ISTART__INVALFC
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        ELSE
	           USERFC=IARRAY(1)	  
	        ENDIF
	      ENDIF
	    ENDIF
	  ENDIF
	ENDIF
C
	IF (CMDLIN) THEN
C
C Check for /LAYER=int
	  LAYER=1			! set default
	  CMDLIN=DCL_QUAL('LAYER',HAD_LAY,LOCAL,LOCNEG,.TRUE.)
	  IF (CMDLIN) THEN
C
C Get its argument
	    IF (HAD_LAY) THEN
	      CMDLIN=DCL_INT('LAYER',.TRUE.)
C
C And transfer it to a ISTART variable
	      IF (CMDLIN) THEN
		IF (IARRAY(1).LT.1.OR.IARRAY(1).GT.32767) THEN
	           CMDLIN=ISTART__INVALLAY
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        ELSE
	           LAYER=IARRAY(1)	  
	        ENDIF
	      ENDIF	      
	    ENDIF
	  ENDIF
	ENDIF
C
C Check for /BUTTONS=(NUMBER=integer,BASE=integer)
C
	IF (CMDLIN) THEN
	  NOBUTT=16			! set defaults - no. buttons
	  LOWB=1			! & base button number
	  CMDLIN=DCL_QUAL('BUTTONS',HAD_BUT,LOCAL,LOCNEG,.TRUE.)
	  IF (CMDLIN) THEN
C
C Get its arguments
	    IF (HAD_BUT) THEN
	      CMDLIN=DCL_INT('BUTTONS.NUMBER',.TRUE.)
C
C And transfer it to a ISTART variable
	      IF (CMDLIN) THEN
	        IF (IARRAY(1).GE.3) THEN
	           NOBUTT=IARRAY(1)	  
	        ELSE
	           CMDLIN=ISTART__INVBNUM
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        ENDIF
		IF (CMDLIN) THEN
	           CMDLIN=DCL_INT('BUTTONS.BASE',.TRUE.)
C
C And transfer it to a ISTART variable
	           IF (CMDLIN) THEN
	             LOWB=IARRAY(1)	  
	           ENDIF
	        ENDIF
	      ENDIF
	    ENDIF
	  ENDIF
	ENDIF
C
C
C Check for /ADDRESSABILITY=int
	IF (CMDLIN) THEN
	  MMCOEF=0.02			! set default
	  CMDLIN=DCL_QUAL('ADDRESSABILITY',HAD_COF,LOCAL,LOCNEG,.TRUE.)
	  IF (CMDLIN) THEN
C
C Get its argument
	    IF (HAD_COF) THEN
	      CMDLIN=DCL_REAL('ADDRESSABILITY',.TRUE.)
C
C And transfer it to a ISTART variable
	      IF (CMDLIN) THEN
	        MMCOEF=RARRAY(1)	  
	      ENDIF	      
	    ENDIF
	  ENDIF
	ENDIF
C
	IF (CMDLIN) THEN
C
C Check for /LASERAID
	  CMDLIN=DCL_QUAL('LASERAID',LASER,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /LEARNER
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('LEARNER',LEARNER,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /MUART_TABLE
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('MUART_TABLE',HAD_MUART,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /MCE
	IF (CMDLIN) THEN
	  CMDLIN=
     &		DCL_QUAL('MCE',HAD_MCE,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /OS
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('OS',HAD_OS,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /MH_TYPE=int
	IF (CMDLIN) THEN
	  MH_TYPE=2			! set default
	  CMDLIN=DCL_QUAL('MH_TYPE',HAD_MH,LOCAL,LOCNEG,.TRUE.)
C
C Get its argument
	    IF (HAD_MH) THEN
	      CMDLIN=DCL_INT('MH_TYPE',.TRUE.)
C
C And transfer it to a ISTART variable. ONLY TYPE 2, 3 or 4 allowed
		IF (IARRAY(1).LT.2.OR.IARRAY(1).GT.4) THEN
	           CMDLIN=ISTART__INVALMH
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        ELSE
	           MH_TYPE=IARRAY(1)
	        ENDIF
	    ENDIF	      
	ENDIF
C
C Check for /TABLE
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('TABLE',HAD_TABMON,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C As we want to find out whether /NOSYMBOLS and /NOTICKS were explicitly
C set (rather than just allowed to default) we must use CLI$PRESENT
C explicitly as DCL_QUAL loses the negated context for us!
C
C Check for /SYMBOLS
	IF (CMDLIN) THEN
	  SYMBOLS=.FALSE.
	  NEGSYMB=.FALSE.
C
C Establish condition handler
	  CALL LIB$ESTABLISH( CMD_ERRET )
	  ERR_REPORT=.TRUE.		! make condition handler whinge
	  CMDLIN=CLI$PRESENT('SYMBOLS')
	  IF (CMDLIN.EQ.%LOC(CLI$_PRESENT)
     &			.OR.CMDLIN.EQ.%LOC(CLI$_LOCPRES)) THEN
	       SYMBOLS=.TRUE.
	       CMDLIN=SS$_NORMAL
	  ELSEIF(CMDLIN.EQ.%LOC(CLI$_NEGATED)
     &		.OR.CMDLIN.EQ.%LOC(CLI$_LOCNEG)) THEN
	       NEGSYMB=.TRUE.
	       CMDLIN=SS$_NORMAL
	  ELSEIF (CMDLIN.EQ.%LOC(CLI$_ABSENT)
     &		.OR.CMDLIN.EQ.%LOC(CLI$_DEFAULTED)) THEN
	       CMDLIN=SS$_NORMAL
	  ELSE
     	     IF (IBITS(CMDLIN,0,3).NE.STS$K_WARNING) THEN
	        CALL LIB$SIGNAL (%VAL(CMDLIN))! signal the error
	     ELSE
	        CMDLIN=SS$_NORMAL
	     ENDIF
	  ENDIF
	ENDIF
C
C Check for /TICKS
	IF (CMDLIN) THEN
	  TICKS=.FALSE.
	  NEGTICK=.FALSE.
	  CMDLIN=CLI$PRESENT('TICKS')
	  IF (CMDLIN.EQ.%LOC(CLI$_PRESENT)
     &			.OR.CMDLIN.EQ.%LOC(CLI$_LOCPRES)) THEN
	       TICKS=.TRUE.
	       CMDLIN=SS$_NORMAL
	  ELSEIF(CMDLIN.EQ.%LOC(CLI$_NEGATED)
     &		.OR.CMDLIN.EQ.%LOC(CLI$_LOCNEG)) THEN
	       NEGTICK=.TRUE.
	       CMDLIN=SS$_NORMAL
	  ELSEIF (CMDLIN.EQ.%LOC(CLI$_ABSENT)
     &		.OR.CMDLIN.EQ.%LOC(CLI$_DEFAULTED)) THEN
	       CMDLIN=SS$_NORMAL
	  ELSE
     	      IF (IBITS(CMDLIN,0,3).NE.STS$K_WARNING) THEN
	        CALL LIB$SIGNAL (%VAL(CMDLIN))! signal the error
	      ELSE
	        CMDLIN=SS$_NORMAL
	      ENDIF
	  ENDIF
	ENDIF
C
C Revert to normal error processing
	CALL LIB$REVERT
C
C If no actual selections, turn ticks on by default
	IF (.NOT.TICKS.AND..NOT.SYMBOLS) THEN
	   TICKS=.TRUE.		
	ENDIF
C
C Does user want no registration marks in layer 1 at all? I.E. has he
C explicitly turned both options off?
	IF (NEGTICK) THEN
	   TICKS=.FALSE.
	ENDIF
	IF (NEGSYMB) THEN
	   SYMBOLS=.FALSE.
	ENDIF
C
C Check for /USER_ORIGIN
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('USER_ORIGIN',USER_ORIG,LOCAL,LOCNEG,
     &						      .TRUE.)
	ENDIF
C
C Check for /CENTRE
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('CENTRE',CENTRE,LOCAL,LOCNEG,.TRUE.)	
	ENDIF
C
C Check for /COUNTS
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('COUNTS',COUNTS,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /REPEAT=int
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('REPEAT',HAD_REP,LOCAL,LOCNEG,.TRUE.)
	  IF (CMDLIN) THEN
C
C Get its argument
	    REPEAT=3		! set default
	    IF (HAD_REP) THEN
	      CMDLIN=DCL_INT('REPEAT',.TRUE.)
C
C And transfer it to an ISTART variable
	      IF (CMDLIN) THEN
	        IF (REPEAT.LE.0) THEN
		   CMDLIN=ISTART__INVALREP
	           CALL LSL_PUTMSG(CMDLIN,IARRAY(1))
	        ELSE
	           REPEAT=IARRAY(1)
	        ENDIF
	      ENDIF
	    ENDIF
	  ENDIF
	ENDIF
C
C Check for /ROTATION
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('ROTATION',HAD_ROT,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
C Check for /THOU
	IF (CMDLIN) THEN
	  CMDLIN=DCL_QUAL('THOU',THOU,LOCAL,LOCNEG,.TRUE.)
	ENDIF
C
       IF (CMDLIN) CMDLIN=SS$_NORMAL
C
       RETURN
       END
