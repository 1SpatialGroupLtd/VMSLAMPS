C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-01 10:09:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4  FUNCTION GET_ORIGIN()
C
***	MODULE	GET_ORIGIN
***	IDENT	01DE86
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
C	Created						TJH 29-Sep-1986
C
C Function to set origin offset:
C
C	1) from the user's keyboard, (/USER_ORIGIN and/or /OS),
C	2) automatically from typed CP values (default),
C	3) to (0.0, 0.0) if CPs from a table option.
C
C Function returns one of 3 possible values:
C
C	SS$_NORMAL		- all is well
C	LSL__EOF		- end of file detected	
C	ISTART__CMD		- error reading command
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNISTART:ISTARTMSG.PAR'
	INTEGER*4 SS$_NORMAL
	EXTERNAL  SS$_NORMAL		! normal successful completion
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE 'LSL$CMNISTART:IFF_ENT.CMN'
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C Integer:
	INTEGER		BADNUM		! function return, .T. if err.
	INTEGER		I,J		! loop variables
	INTEGER		IERR		! error code
C
C Functions:
	INTEGER		TTRLIN		! LSLLIB read line from TT:
	INTEGER		RDDBLE		! LSLLIB read real*8 number
C
C ......................................................................
C
	GET_ORIGIN=%LOC(SS$_NORMAL)
C
C If CPs were got from a table option (/MUART_TABLE or /TABLE) then 
C the origin offset will by default be set to (0.0,0.0) as the data
C will be in millimetres(default), table counts(/COUNTS) or thousanths
C of an inch (/THOU). The data will always be reduced such that the 
C SW corner will be (0.0,0.0) (unless /CENTRE is specified).
C
	OFFSET(1)=0.0D0
	OFFSET(2)=0.0D0
C
C ......................................................................
C
	IF (USER_ORIG.OR.HAD_OS) THEN
C
C If user has asked for hand-holding give him some
C
	  IF (LEARNER) THEN
	    CALL ORIGIN_HLP
	  ENDIF
C
C Prompt user for map origin:
10	  CALL WRITEF(' ')
	  GET_ORIGIN=TTRLIN(,,,
     &		'Specify origin offset, (X then Y) : ',IERR)
	  IF (GET_ORIGIN) THEN
	    IF (TXTPTR.EQ.0) GOTO 10
	    CALL BSLN
C
C
C We expect two numbers, X then Y ordinate offset ...
C
	    DO 20 I=1,2
	      BADNUM=RDDBLE(OFFSET(I))
C
C Could we read a number?
	      IF (BADNUM) THEN
C
C Report error if it occurred while reading the first number
C
		IF (I.EQ.1) THEN
	          GET_ORIGIN=ISTART__CMD
	          CALL LSL_PUTMSG(GET_ORIGIN)
	          CALL LSL_ADDMSG(ERRNUM)
C
C If however it occurred while reading the second number ...
C
	        ELSE
C
C ... because the second number wasn't there at all,
C
	          IF (ERRNUM.EQ.LSL__UNEXPEOL) THEN
15	  	    GET_ORIGIN=TTRLIN(,,,'Specify Y offset : ',IERR)
	            IF (GET_ORIGIN) THEN
	              IF (TXTPTR.EQ.0) GOTO 15
	              CALL BSLN
C
C Attempt to read the number
C
	              BADNUM=RDDBLE(OFFSET(2))
C
C Did it read OK this time?
C
	              IF (BADNUM) THEN
	                GET_ORIGIN=ISTART__CMD
	                CALL LSL_PUTMSG(GET_ORIGIN)
	                CALL LSL_ADDMSG(ERRNUM)
		        GOTO 15			! prompt again
		      ENDIF
C
C Error getting the command line for the second number prompt.
C Unexpected end of file (probably caused by user typing ^Z) falls 
C through
C
		    ELSE
		      IF (GET_ORIGIN.EQ.LSL__SYSERR) THEN
	                 CALL LSL_PUTMSG(ISTART__CMD)
	                 CALL LSL_ADDMSG(GET_ORIGIN)
	                 GET_ORIGIN=ISTART__CMD
	                 IF (IERR.NE.%LOC(SS$_NORMAL))
     &						CALL LSL_ADDMSG(IERR)
		         ENDIF
		    ENDIF
		  ELSE
	            GET_ORIGIN=ISTART__CMD
	            CALL LSL_PUTMSG(GET_ORIGIN)
	            CALL LSL_ADDMSG(ERRNUM)
		  ENDIF
	        ENDIF
	      ENDIF
20	    CONTINUE
	    IF (.NOT.GET_ORIGIN) GOTO 10
C
C Copy through the user specified CPs
C
	    IF (.NOT.HAD_OS) THEN
	      DO 40 I=1,4
	        DO 30 J=3,4
	          IF (.NOT.(HAD_MUART.OR.HAD_TABMON)) THEN
		    CPARRY(J,I)=SNGL(RAW_CPS(J-2,I))
		  ENDIF
	          CPARRY(J-2,I)=CPARRY(J,I)
30	        CONTINUE
40	      CONTINUE
	    ENDIF
	  ELSE
	    IF (GET_ORIGIN.EQ.LSL__SYSERR) THEN
	      CALL LSL_PUTMSG(ISTART__CMD)
	      CALL LSL_ADDMSG(GET_ORIGIN)
	      GET_ORIGIN=ISTART__CMD
	      CALL LSL_ADDMSG(IERR)
	    ENDIF	  
	  ENDIF
C
	ELSEIF (.NOT.(HAD_MUART.OR.HAD_TABMON)) THEN
C
C The user typed the CP coordinate values, (therefore not /OS!) but has
C not specified /USER_ORIGIN. Determine and then remove an origin offset
C to make the SW corner (0.0, 0.0)
C
	  OFFSET(1)=RAW_CPS(1,2)
	  OFFSET(2)=RAW_CPS(2,2)
	  DO 60 I=1,4
	    DO 50 J=3,4
	      CPARRY(J,I)=SNGL(RAW_CPS(J-2,I)-OFFSET(J-2))
	      CPARRY(J-2,I)=CPARRY(J,I)
50	    CONTINUE
60	  CONTINUE
	ENDIF
C
C Set function return
C
	IF (GET_ORIGIN) GET_ORIGIN=%LOC(SS$_NORMAL) ! normal completion
C
	RETURN
	END
