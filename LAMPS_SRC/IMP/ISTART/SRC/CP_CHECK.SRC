 	INTEGER*4 FUNCTION CP_CHECK()
C
***	MODULE	CP_CHECK
***	IDENT	13OC86
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Created from DM's Laseraid CPTEST	 	TJH	13-Oct-1986
C
C
C Function to check values supplied for CP entry via a table option or
C explicitly from TT: CP values are held in /IFF_ENT/CPARRY
C
C
C Checks done are:
C
C 1) that the corner points are cyclic (i.e. aren't crossed),
C 2) ensures that the values form a sensible set
C
C Function returns are:
C
C	SS$_NORMAL 	-   all is well
C	ISTART_CPNONCYC	-   control points are non-cyclic
C	ISTART_CPNOTVIA	-   control points are not viable for Laseraid
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE		'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE		'LSL$CMNISTART:ISTARTMSG.PAR'
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
C
C Longword:
	INTEGER	  I,J
C
C Real:
	REAL	  XORIG,YORIG,X13,Y13	! point 1, vector from 1 to 3
C
C Real*8:
	REAL*8	  A(4,4),DUMMY		! temporary matrices for SOLVE
	REAL*8	  CRIT			! criterion for rejection of fit
	REAL*8	  XT,YT,X2T,XYT,Y2T	! 'true' X,Y,X**2,X*Y,Y**2
C
C Common:
	INCLUDE		'LSL$CMNISTART:IFF_ENT.CMN'
C
C Functions
C
	INTEGER		PRINTCP		! to print CPs on TT:
C
C...................................................................
C
C Ensure that we return with SS$_NORMAL if all was well
C
	CP_CHECK=%LOC(SS$_NORMAL)
C
C First of all, check that the corner points are cyclic.
C
C Check that the triangles formed by points (1)-(2)-(3) and 
C (1)-(3)-(4) have the same sense (i.e. clockwise or anticlockwise).
	XORIG=CPARRY(1,1)		! refer everything to point 1
	YORIG=CPARRY(2,1)
	X13=CPARRY(1,3) - XORIG
	Y13=CPARRY(2,3) - YORIG
C
C Evaluate the cross products V12 x V13 and V13 x V14.
C check that they have the same sign.
	IF (((CPARRY(1,2)-XORIG)*Y13 - (CPARRY(2,2)-YORIG)*X13)*
     &	    (X13*(CPARRY(2,4)-YORIG) - Y13*(CPARRY(1,4)-XORIG)).LE.0.0)
     &	   CP_CHECK=ISTART__CPNONCYC
C
	IF (.NOT.CP_CHECK) GOTO 40		! return
C
C Now check that the map space values form a viable set.
C
C
C Zero the coefficient matrix.
	DO 20 J=1,4
	   DO 10 I=1,4
	      A(I,J)=0.0D0
10	   CONTINUE
20	CONTINUE
C
C Set up the coefficient matrix A.
	DO 30 I=1,4
	   XT=CPARRY(3,I) - XORIG		! 'true' values
	   YT=CPARRY(4,I) - YORIG
	   X2T=XT*XT				! for efficiency
	   XYT=XT*YT
	   Y2T=YT*YT
C
	   A(2,1)=A(2,1) + XT
	   A(3,1)=A(3,1) + YT
	   A(4,1)=A(4,1) + XYT
	   A(2,2)=A(2,2) + X2T
	   A(4,2)=A(4,2) + X2T*YT
	   A(3,3)=A(3,3) + Y2T
	   A(4,3)=A(4,3) + XT*Y2T
	   A(4,4)=A(4,4) + X2T*Y2T
30	CONTINUE
C
C Finish setting up A.
	A(1,1)=4.0D0
	A(1,2)=A(2,1)
	A(3,2)=A(4,1)
	A(1,3)=A(3,1)
	A(2,3)=A(4,1)
	A(1,4)=A(4,1)
	A(2,4)=A(4,2)
	A(3,4)=A(4,3)
C
C Now call SOLVE to force a triangular decomposition of A.
	CALL SOLVE(A,DUMMY,4,0,0,4,1)
C
C Analyse the eigenvalues of A (now triangular).
C Examine the first and last eigenvalues; if the fit is good these
C will have 'similar' magnitudes (one day I may get round to proving
C this, until then take my word for it !!)
	CRIT=1.0D6			! rather arbitrary, this !
C
	IF (DABS(A(1,1)/A(4,4)).GT.CRIT) CP_CHECK=ISTART__CPNOTVIA
C
40	IF (.NOT.CP_CHECK) THEN
	   CALL WRITEF
	   CALL LSL_PUTMSG(CP_CHECK)
	   CALL CP_PRINT
	ENDIF
	RETURN
	END
