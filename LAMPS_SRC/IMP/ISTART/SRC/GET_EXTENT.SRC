C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-01 09:07:56.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION GET_EXTENT
C
***	MODULE	GET_EXTENT
***	IDENT	01DE86
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author						TJH 07-Sep-1986
C
C Function to read the map extent (which may differ in X and Y axes)
C from the terminal.
C
C Function returns one of 3 possible values:
C
C	SS$_NORMAL		- all is well
C	LSL__EOF		- end of file detected	
C	ISTART__CMD		- error reading command
C
	IMPLICIT NONE
C
C Parameters:
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNISTART:ISTARTMSG.PAR'
	INTEGER*4 SS$_NORMAL
	EXTERNAL  SS$_NORMAL		! normal successful completion
C
C Common:
	INCLUDE 'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE 'LSL$CMNISTART:IFF_ENT.CMN'
	INCLUDE 'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C Longword:
	INTEGER		BADNUM		! function return, .T. if err.
	INTEGER		I		! loop variable
	INTEGER		IERR		! for error return
C
C
C Function:
	INTEGER		RDLONG
	INTEGER		TTRLIN
C
C ......................................................................
C
C Prompt user for map extent: (which can vary between X and Y)
C
10	CALL WRITEF
	GET_EXTENT=TTRLIN(,,,
     &	'Specify map extent, (X-extent [Y-extent]) : ',IERR)
	IF (GET_EXTENT) THEN
	   IF (TXTPTR.EQ.0) GOTO 10
	   CALL BSLN
	   DO 20 I=1,2
	     BADNUM=RDLONG(MAPEXT(I))
C
	     IF (BADNUM) THEN
C
C If only one number on command line assume X and Y extents equal
C
	       IF (ERRNUM.EQ.LSL__UNEXPEOL.AND.I.EQ.2) THEN
		  CALL LSL_PUTMSG(ISTART__EQLEXT)
		  MAPEXT(2)=MAPEXT(1)
	       ELSE
	          GET_EXTENT=ISTART__CMD
	          CALL LSL_PUTMSG(ISTART__CMD)
	          CALL LSL_ADDMSG(ERRNUM)
	          CALL LSL_ADDMSG(LSL_EXCP)
	       ENDIF
	     ENDIF
	     IF (.NOT.GET_EXTENT) GOTO 10
20	   CONTINUE
C
C Test that a sensible map extent was specified. Get an alternative
C  one if not!
C
	   DO 25 I=1,2
	     IF (MAPEXT(I).LT.10) THEN
		 CALL LSL_PUTMSG(ISTART__INVEXT)
		 CALL LSL_ADDMSG(ISTART__MINEXT)
	         GOTO 10
	      ENDIF
25	   CONTINUE
C
	ELSE
C
	   IF (GET_EXTENT.EQ.LSL__SYSERR) THEN
	     CALL LSL_PUTMSG(ISTART__CMD)
	     CALL LSL_ADDMSG(GET_EXTENT)
	     GET_EXTENT=ISTART__CMD
	     CALL LSL_ADDMSG(IERR)
	   ENDIF	  
	ENDIF
C
C Ensure that any form of success results in a return of SS$_NORMAL
C
	IF (GET_EXTENT) GET_EXTENT=%LOC(SS$_NORMAL)
C
	RETURN
	END
