C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-03-02 09:55:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION TABMON_CPS
C
***	MODULE	TABMON_CPS
***	IDENT	02MR88
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
CMOD	GTDGXY now used as subroutine, not function!	TJH 02-Mar-1988
CMOD	Direct table reading added			TJH 27-Nov-1986
CMOD	CPCLOSE function added				TJH 24-Nov-1986
C	Author						TJH 19-Sep-1986
C
C TABMON_CPS prompts for 4 control points which define a map and reads
C their digitised position from a Laser-Scan TABLE_MONITOR driven Altek 
C table. The results are returned via /IFF_ENT/ CPARRY.
C
C Any button may be used to digitise a point except:
C
C	o  Button NOBUTT (number of buttons supplied via /BUTTONS) 
C	   which means abandon whole session.
C
C	o  Button (NOBUTT-1) which means abandon current point.
C
C
C By default:
C
C	/BUTTONS=(NUMBER:NOBUTT) = 16  (buttons 0 through 15).
C	/BUTTONS=(BASE:LOWB)     = 1   (add to all button press id's)
C
C Function returns set to SS$_NORMAL if all is well, ISTART__ABA
C if the session was abandoned, or a TABLIB/system error if the
C unthinkable happens.
C
	IMPLICIT NONE
C
C Parameters:
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNISTART:ISTARTMSG.PAR'
C
	INTEGER*4 X,Y			! coordinate array indices
	PARAMETER (X=3)
	PARAMETER (Y=4)
C
	INTEGER*4 SS$_NORMAL
	EXTERNAL  SS$_NORMAL		! normal successful completion
C
C Common:
C
	INCLUDE	'LSL$CMNISTART:COMMAND.CMN'
	INCLUDE	'LSL$CMNISTART:IFF_ENT.CMN'
	INCLUDE	'LSL$CMNISTART:TABLE.CMN'
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'
C
C Integer*2:
	INTEGER*4 BUTTON	! button pressed
C
C Integer*4:
	INTEGER	  CORNER	! the corner we are on
	INTEGER   I,J,LOOP	! temp. vars.
	INTEGER	  IERR		! for table monitor error returns
	INTEGER   LINE		! digitiser area ID
	DATA	  LINE/3/
C
C Real*4:
	REAL	  SUMX,SUMY	! sums of coords. for mean centre calc.
	REAL      TABXY(2)	! table (X,Y) position
	REAL	  TABX,TABY	! for compatibility with LITES2 stuff
	EQUIVALENCE (TABX,TABXY(1)),(TABY,TABXY(2))
	REAL	  TOL		! tolerance for CPCLOSE
C
C Logical:
	LOGICAL   ABAPNT	! abandon point?
	LOGICAL   ABORT		! abandon everything?
	LOGICAL	  ON		! initialise/shut down table
C
C Function:
	LOGICAL	  CPCLOSE	! control points too close?
	LOGICAL	  TABINIT	! to init. table (monitor or direct)
	LOGICAL	  TAB_INTRO	! /LEARNER introduction
	LOGICAL	  TOOFAR	! for proximity test
C
C ......................................................................
C
	TABMON_CPS=%LOC(SS$_NORMAL)	! ever hopeful
	ON=.TRUE.			! initialise table
C
C ......................................................................
C
C
C Calc. tolerance for CPCLOSE. This is dependent upon the conversion
C coefficient between table counts and mm. Minimum size of CPs is 20 mm.
C
	TOL=20.0/MMCOEF			! min. 2 cm separation
C
C Output text if user has asked for additional hand-holding
C
	IF (LEARNER) THEN
	   TABMON_CPS=TAB_INTRO()
	ENDIF
C
	IF (TABMON_CPS) THEN
C
C Initialise the table monitor (or if fails) direct table reads
C
	  TABMON_CPS=TABINIT(ON)
	  IF (TABMON_CPS) THEN
C
	    CORNER=0			! initialise corner counter
C
C
C ......................................................................
C
C Main digitising loop starts here.
C
10	    CORNER=CORNER+1
	    IF (CORNER.LT.5) THEN
	      LOOP=0
	      SUMX=0.0
	      SUMY=0.0
20 	      LOOP=LOOP+1
C
C Give appropriate button press prompt for the user
C
	      CALL PRESS_HLP(LOOP,CORNER)
C
C Set up a read from the table 
C
30	      CALL GTDGXY(LINE,BUTTON,TABXY,ABAPNT,ABORT)
C
C Check which cursor button was used
C
	      CALL WRITEF('%A',7)
C
	      IF (BUTTON.EQ.-1) THEN
		CALL WRITEF
	        CALL LSL_PUTMSG(ISTART__INVBUT)
	        CALL WRITEF('%A%A%A',7,7,7)
	        IF (LEARNER) THEN
	          CALL BUTTONS_HLP
	        ENDIF
	        GOTO 30
	      ENDIF
C
C Abandon point option selected?
C
	      IF (ABAPNT) THEN
	        IF (LOOP.NE.1) THEN
		  CALL WRITEF
	          CALL LSL_PUTMSG(ISTART__PNTABA)
	          CALL WRITEF('%A',7)
	        ENDIF
	        IF (LEARNER) THEN
	          CALL ABANDON_HLP(CORNER)
	        ENDIF
	        CORNER=CORNER-1
	        GOTO 10
	      ENDIF
C
C
C Abandon whole session?
C
	      IF (ABORT) THEN
	        TABMON_CPS=ISTART__ABA
		CALL WRITEF
	        CALL LSL_PUTMSG(TABMON_CPS)
	        CALL WRITEF('%A',7)
	        GOTO 50
	      ENDIF
C
C ......................................................................
C
C Test that the current co-ordinates are not too far from the mean 
C location. If yes then reject the point as the operator has probably 
C gone to another control point by mistake
C
	      IF (LOOP.EQ.1) THEN
	        IF (CPCLOSE(CPARRY,CORNER,TABX,TABY,TOL)) THEN
	          CALL WRITEF('%A%A%A',7,7,7)
	          LOOP=LOOP-1	! discount the bad current button press
	        ELSE
	          SUMX=SUMX+TABX
	          SUMY=SUMY+TABY
	        ENDIF
	      ELSE
	        IF (TOOFAR(SUMX,SUMY,TABX,TABY,LOOP,MMCOEF))THEN
	          CALL WRITEF('%A%A%A',7,7,7)
	          LOOP=LOOP-1	! discount the bad current button press
	        ELSE
	          SUMX=SUMX+TABX
	          SUMY=SUMY+TABY
	        ENDIF
	      ENDIF
C
C Have we had all the repeat measurements for this point yet?
C
	      IF (LOOP.NE.REPEAT) THEN
	        GOTO 20
	      ELSE
	        CPARRY(X,CORNER)=SUMX/REPEAT
	        CPARRY(Y,CORNER)=SUMY/REPEAT
	      ENDIF
	      GOTO 10
	    ENDIF		! CORNER less than 5
C
C ......................................................................
C
C Shut down the table again
C
50	    ON=.FALSE.
	    IERR=TABINIT(ON)
	    IF (.NOT.IERR) THEN
	       IF (TABMON_CPS) THEN
		  TABMON_CPS=IERR
	       ENDIF
	       CALL LSL_PUTMSG(IERR)
	    ENDIF
	  ENDIF			! table initialised OK
	ENDIF			! TAB_INTRO help OK

C
C Ensure that we return with SS$_NORMAL if all was well
C
60	IF (TABMON_CPS) TABMON_CPS=%LOC(SS$_NORMAL)
	RETURN
	END
