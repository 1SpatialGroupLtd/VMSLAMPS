C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-05-15 17:27:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM ITOTEXT
C
***     MODULE  ITOTEXT
***     IDENT   15MY95
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
CMOD1491 Add /QUOTED_TEXT to specify the use of quotes around text
C	 Set .TRUE. by default				  JB 15-May-1995
C
CMOD1387 /ABSOLUTE added				  JB 22-Jul-1994
C
CMOD	/CUSTOMER now does what it says it should	IMcL  5-Jul-1988
CMOD	Call to IFFIRV depending on /REVISION_LEVEL	MWSR    Nov-1987
CMOD	/BRIEF message now says IFROMTEXT not TEXT2I!	 TJH 11-Nov-1986
CMOD	IFF text now up to 255 characters		 TJH 11-Nov-1986
CMOD	IFF file opened using IFFOPEN			 TJH 05-Nov-1986
CMOD	Superfluous call to IFFERM removed		 TJH 23-Oct-1986
CMOD	Better file open error handling. LSL_EXIT	
C	added. Name changed to ITOTEXT!			 TJH 01-Oct-1986
CMOD	New DCL command decoding. Also /ADDRESS and
C	/BRIEF command qualifiers added.		MWSR 14-Feb-1986
CMOD	Reference to EXPFLT in comment removed
C	and subsequently replaced!			 ACM 15-Mar-1985
CMOD	Added WHERE for output, call to FLWSPL		 RJH 15-May-1984
C
C	Created						 RJH 20-Feb-1984
C
C Description
C
C This program reads an IFF file and produces a text file containing
C all the information in the original IFF file.
C
C The object code of the main program should be linked with the
C object code of the following modules and libraries :-
C
C	I2TCOM,I2TENT,I2TMHT,I2TLIN,I2TLI8,
C	WRTANG,WRTDAT,EXPFLT,APPFLT,I2TCMD,
C	LSL$LIBRARY:LSLLIB/LIB,
C	LSL$LIBRARY:IFFLIB/LIB,
C
C    The mnemonic ITOTEXT can be set up in a LOGIN file as follows :-
C
C		ITOTEXT =="$<device>:<directory>ITOTEXT"
C
C    The program can then be run by typing
C
C		ITOTEXT [ <command line> ]
C
C the command line being optional. If not given, the program will prompt
C for it. Various options for output are available, and these, together
C with the syntax required for the command line, are documented in the
C function I2TCOM.
C
	IMPLICIT NONE
C
C Parameters:
	INTEGER	 SS$_NORMAL
	EXTERNAL SS$_NORMAL		! normal successful completion
C
	INCLUDE 'LSL$CMNITOTEXT:ITOTEXTMSG.PAR'
C
C Common blocks:
	INCLUDE 'LSL$CMNITOTEXT:I2TCOM.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C Functions called:
	INTEGER*4	I2TENT		! writes IFF entry to file
	INTEGER*4	IFFOPEN		! opens an IFF file (readonly)
	INTEGER*4	FLWOPN		! LSLLIB - opens file
	INTEGER*4	FLWCLO		! LSLLIB - closes file
	INTEGER*4	FLWSPL		! LSLLIB - closes & spools file
	INTEGER*4	FLWPRT		! LSLLIB - closes and prints
	INTEGER*4	FLWRTF		! LSLLIB - WRITEF to file
C					  command line	
	INTEGER*4	I2TCOM		! reads command line
	LOGICAL         FRTINI		! opens FRT file
C
C Local variables:
	INTEGER		WHERE		! output destination
	INTEGER*2	IECODE		! IFF entry code
	INTEGER*2	IELEN		! IFF entry length
	INTEGER*4	IERR		! error return
	INTEGER*4	RUNIT		! file read unit number
	INTEGER*4	WUNIT		! file write unit number
	INTEGER*4	RETCOD		! VAX error return code
	INTEGER*4	CLOSEOK		! file closing returns
	LOGICAL*4	OK		! function return
C
C ......................................................................
C Main Structure
C
C    The main structure is given in the algorithm below :-
C
C	set up timer and exit handler
C	initialise variables
C	repeat
C	   read and decode command line
C	   if successful then
C	      initialise IFF library and open IFF file
C	      if unsuccessful then
C		 output message
C	      else
C		 open text file
C		 if unsuccessful then
C		    output message
C		 else
C		    read IFF file and write text file
C		    close text file
C		    if unsuccessful output message
C		 close IFF file
C		 if unsuccessful output message
C	until command line read unsuccessful
C
C ......................................................................
C Initialise LSLLIB
C
	CALL LSL_INIT
C
C Increase default size of TXTBUF and EXPBUF to allow for 255
C byte AC, CH, TC and TX strings
C
	CALL SET_EXPMAX(255)
	CALL SET_TXTLIM(255)
C
	WHERE	  = 1			! default output destination
	RUNIT	  = 1			! file reading unit number
	WUNIT	  = 2			! file writing unit number
	REV_LEVEL = -1			! revision level
C
C Get command line
	LSL_STATUS = I2TCOM()
C
	IF (.NOT.LSL_STATUS) THEN
	  GOTO 1000
	ENDIF
C
C read FRT file
	IF (HAD_FRT) THEN
	   IF (FRTINI(FRT_FILE(:FRT_LEN)))THEN
	      CALL LSL_PUTMSG(ITOTEXT__ERRREADFRT,FRT_FILE(:FRT_LEN))
	      GOTO 1000
	   ENDIF
C
	ELSE
	   CALL FRT_ACDINI
	ENDIF
C.......................................................................
C Open IFF input file
C
	LSL_STATUS=IFFOPEN(RUNIT,INPFIL(:INPLEN),,LOG)
	IF (.NOT.LSL_STATUS) THEN
	   GOTO 1000
	ENDIF
C
	CALL IFFIRV(REV_LEVEL)
C
C.......................................................................
C Open text output file
C
	OK=FLWOPN(WUNIT,OUTPFIL(:OUTPLEN),IERR)
C
	IF (.NOT.OK) THEN
	  CALL LSL_PUTMSG(ITOTEXT__ERROPOUT,OUTPFIL(:OUTPLEN))
	  CALL LSL_ADDMSG(OK)
	  CALL LSL_ADDMSG(IERR)
	  GOTO 350
C
	ELSE
	  IF (BRIEF) THEN
	     OK=FLWRTF
     &	     ('! IFF file in brief - not valid for use with IFROMTEXT')
	  ENDIF
C
	  IF ( .NOT.OK) THEN
	     CALL LSL_PUTMSG(OK) 
	     GOTO 350
	  ENDIF
C
	  IF (LOG) THEN
	     CALL LSL_PUTMSG(ITOTEXT__OPTXT,OUTPFIL(:OUTPLEN))
	  ENDIF 
	ENDIF
C
C.......................................................................
C Read IFF file and write text file
C
C    Structure is :-
C
C	switch read look ahead on
c	get MD entry if had /ABSOLUTE
C	get first IFF entry
C	while not end of file and no write error do
C	   write entry to text file
C	   if unsuccessful output message
C	   get next IFF entry
C
C Get MD if had /ABSOLUTE
C
	IF (HAD_ABS) THEN
	   CALL IFFNXC('MD',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      OK = ITOTEXT__MDABSENT			! no MD available
	      CALL LSL_PUTMSG(ITOTEXT__MDABSENT)	! give up
	      GOTO 1000
C
	   ELSEIF (IELEN.NE.MD2LEN) THEN
	      CALL LSL_PUTMSG(ITOTEXT__MDDEFAULT)	! no MD2 available
	      MD2LOC(1) = 0
	      MD2LOC(2) = 0
C
	   ELSE
	      CALL EIHR(MD2ARR,MD2LEN,1)
C
	      IF (MATV2.NE.2) THEN
		 CALL LSL_PUTMSG(ITOTEXT__MDDEFAULT) 	! no MD2 available
		 MD2LOC(1) = 0
		 MD2LOC(2) = 0
	      ENDIF
	   ENDIF
C
C Position to start of file
C
	   CALL IFFRWD
	ENDIF
C
C Start reading the IFF entries
C
	CALL IFFNXT(IECODE,IELEN)		! get first IFF entry
C
C Main loop
C
200	IF (IELEN .EQ. -1) THEN
	   CALL LSL_PUTMSG(ITOTEXT__UNEXPEOF)
           GOTO 300				! end of file 
	ENDIF
C
	OK = I2TENT(IECODE,IELEN)		! write entry
    	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(ITOTEXT__ERRWROUT,OUTPFIL(:OUTPLEN))
	   CALL LSL_ADDMSG(OK)
	   GOTO 300
        ENDIF
C
	IF (IECODE.EQ.'EJ') GOTO 300		! End Job
	CALL IFFNXT(IECODE,IELEN)		! get next IFF entry
	GOTO 200				! branch back for test
C
C Close files
C
300	IF (PRINTER) THEN
	   IF (KEEP) THEN
	     CLOSEOK=FLWPRT(WUNIT,RETCOD)	! print and keep
	   ELSE
	     CLOSEOK=FLWSPL(WUNIT,RETCOD)	! print and delete
	   ENDIF
        ELSE
	   CLOSEOK=FLWCLO(WUNIT,RETCOD)		! keep	   
	ENDIF
C
	IF (.NOT.CLOSEOK) THEN
	   CALL LSL_PUTMSG(ITOTEXT__ERRCLO,OUTPFIL)
	   CALL LSL_ADDMSG(CLOSEOK)
	   CALL LSL_ADDMSG(RETCOD)
	ENDIF
C
350	CALL IFFCLO(RUNIT)			! close IFF file
C
C Finish up
C
1000	IF (OK) OK = ITOTEXT__NORMAL
	CALL LSL_EXIT(OK)
C
	END
C
