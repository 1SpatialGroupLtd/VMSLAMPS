C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-02 11:09:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION I2TCB()
C
***	MODULE	I2TCB
***	IDENT	02NO94
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C
C 	Author M.W.S. Reid
C
C 	Created						MWSR	28-Oct-1987
C
CMOD1387 Add /ABSOLUTE etc.				JB	29-Jul-1994
C
CMOD1419 Allow /DECIMAL_PLACES and /WIDTH without /ABSOLUTE
C						  	JB/PGH	 1-Nov-1994
C
C Writes out contents of CB entry which is in hand
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNIFF:CB.STR'		! CB structure
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNFRT:FRTACD.CMN'		! ACD stuff
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'		! MD2 stuff
C
	INCLUDE 'LSL$CMNITOTEXT:I2TCOM.CMN'	! itotext command cmn
	INCLUDE 'LSL$CMNITOTEXT:ITOTEXTMSG.PAR'	! itotext messages
C
C Functions
	LOGICAL		ACDFND			! finds ACD codes
	INTEGER		EXPAND          	! expands a string
	INTEGER		I2TABS			! write formatted coords
C						! for /ABSOLUTE
C Local Variables
	INTEGER*4	I,J			! counters
	INTEGER*4	NBLNK			! number of blank characters
	INTEGER     	INDX            	! index into array
	INTEGER         ILEN			! length of string
	INTEGER   	DTYPES(IFF_MAXCBCOL)  	! datatypes stored per column	
	REAL*8		REAL8
	REAL*8		X_OFF,Y_OFF		! double abs shift temp copy
C
	CHARACTER*(ACD_FORMAT_MAX) DFORMAT(IFF_MAXCBCOL) ! data formats
	INTEGER DFORMAT_LEN(IFF_MAXCBCOL) 		 ! data format lengths
C
	RECORD /IFF_CBH/ CBH			! header record
	RECORD /IFF_CBD/ CBD			! data record
C
C --------------------------------------------------------------------
C Assume success
	I2TCB = ITOTEXT__NORMAL
C
C Set up absolute shift
	IF (HAD_ABS) THEN		! add origin offset if /abs
	   X_OFF=MD2LOC(1)
	   Y_OFF=MD2LOC(2)
	ELSE
	   X_OFF=0.0D0			! double but not abs
	   Y_OFF=0.0D0
	ENDIF
C
C read the CB header
	CALL EIHRCB_HEAD(CBH)
C
C the FLAGS
	ILEN=EXPAND('CB FL %N',CBH.FLAGS)
	IF (ADDRESS) THEN
	   NBLNK=69-ILEN
	   CALL APPEND('%[ %] ! %^L%P0%X8',NBLNK,LPOSH)
	ENDIF
C
	CALL FLWLIN	  
C
C Graphical Type
	CALL FLWRTF('   GT %N',CBH.GTYPE)
C
C Number of rows
	CALL FLWRTF('   NR %N',CBH.NROW)
C
C Number of columns
	CALL FLWRTF('   NC %N',CBH.NCOL)
C
C Number of fixed attributes
	CALL FLWRTF('   NA %N',CBH.NATT)
C
C fixed attributes
	DO 60 I = 1,CBH.NATT
C
C find the data type according to the ACD table
	   IF (ACDFND(CBH.ATT(I).ATTC)) CONTINUE	! allow default
C
	   CALL EXPAND('   AT')
	   CALL APPEND(' %N ',CBH.ATT(I).ATTC)
C

	   IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) CALL APPEND('"')
	   CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN),CBH.ATT(I).IATTV)
C
	   IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) CALL APPEND('"')
	   CALL FLWLIN
C
60	CONTINUE
C
C column headers
	CALL EXPAND('   HC')  	
C
	DO 70 I = 1,CBH.NCOL
	   CALL APPEND(' %N',CBH.COLH(I))
70	CONTINUE
C
	CALL FLWLIN
C
	DO 80 I = 1,CBH.NCOL
C
C store ACD info (separate loop because FRTLIB error tramples EXPBUF)
C
	   IF (ACDFND(CBH.COLH(I))) CONTINUE	! allow default
C
	   DFORMAT(I)     = ACD_FORMAT
	   DFORMAT_LEN(I) = ACD_FORMAT_LEN
	   DTYPES(I)      = ACD_DATA_TYPE
80	CONTINUE
C
C Data
	IF (BRIEF) GOTO 999			! do no more
C
	CALL EIHRCB_DATA(CBD)
	INDX = 0
	CALL EXPAND('   DA')
C
	DO 140 I = 1,CBH.NROW
	   DO 130 J = 1,CBH.NCOL
	      INDX = INDX + 1
	      IF (J.EQ.1 .AND. I.NE.1) CALL EXPAND('     ')
C
C check it's not an absent value
	      IF (CBD.I(INDX)  .EQ. IFF_ABSENT) THEN
	         IF (DTYPES(J) .EQ. ACD_DATATYPE_C) THEN
	            CALL APPEND(' ""')
	         ELSE
	            CALL APPEND(' ?')
	         ENDIF
C
	      ELSE					! .not. iff_absent
C
		 IF (HAD_ABS.OR.HAD_WID.OR.HAD_DP) THEN	! complex case
		   CALL APPEND(' ')
		   IF (DTYPES(J).EQ.ACD_DATATYPE_C) CALL APPEND('"')
C
		   IF (CBH.COLH(J).EQ.IFF_C_X) THEN
			REAL8 =	CBD.R(INDX) + X_OFF	! convert x to real*8
C
		   ELSEIF (CBH.COLH(J).EQ.IFF_C_Y) THEN
			REAL8 =	CBD.R(INDX) + Y_OFF	! convert y to real*8
		   ENDIF
C
		   I2TCB = I2TABS(REAL8,1)		! do one coordinate
C
		   IF (DTYPES(J).EQ.ACD_DATATYPE_C) CALL APPEND('"')
C
		 ELSE				  	! no /absolute
		   CALL APPEND(' ')
C
		   IF (DTYPES(J).EQ.ACD_DATATYPE_C) CALL APPEND('"')
		   CALL APPEND(DFORMAT(J)(:DFORMAT_LEN(J)),CBD.I(INDX))
		   IF (DTYPES(J).EQ.ACD_DATATYPE_C) CALL APPEND('"')
		 ENDIF
	      ENDIF
130	   CONTINUE
C
	   CALL FLWLIN
140	CONTINUE
C
999	RETURN
	END
C
