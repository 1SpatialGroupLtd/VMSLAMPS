C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-02-13 12:24:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION I2TLIN(IECODE,REALB,RNUM)
C
***	MODULE	I2TLIN
***	IDENT	13FE95
C
C 	Copyright Laser-Scan Ltd., Cambridge, England.
C
CMOD1467 Check for IFF_ABSENT in the coordinate string and output
C	 as 'real' 0.0 for the AXP 			 JB 10-Feb-1995
C
CMOD1419 Allow /DECIMAL_PLACES and /WIDTH without /ABSOLUTE
C						     JB/PGH  1-Nov-1994
CMOD1387 Added /ABSOLUTE,/WIDTH,/DECIMAL_PLACES		 JB 26-Jul-1994
CMOD	Addresses output as 8 digits, 0 padded		TJI 31-Oct-1986
CMOD	References to I2TEXT changed to ITOTEXT! 	TJH 01-Oct-1986
CMOD    Deal with /ADDRESS output		       MWSR 07-Feb-1986
CMOD	Arguments not used were removed			ACM 15-Mar-1985
C
C 	Created						RJH 08-Mar-1984
C
C Description
C
C	This function appends a line of real numbers to the output
C	buffer, and writes the buffer to the currently selected
C	output file. The number of reals and a buffer containing them
C	are passed from the calling routine.
C
C	The real numbers will be output with seven significant digits,
C	and in some cases may exceed the specified field width.
C	Numbers which do not fill the specified field will be right
C	justified and padded with blanks.
C
C	The function returns the error code generated when the line
C	is written to the output file.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:CB.STR'	! for IFF_ABSENT
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNIFF:MD2DES.CMN'
	INCLUDE 'LSL$CMNITOTEXT:I2TCOM.CMN'
C
C Local parameters
	INTEGER*2	CSIZE		! character buffer size
	PARAMETER	(CSIZE = 80)
C
	INTEGER*2	FWIDTH
	PARAMETER	(FWIDTH = 10)
C
C Arguments
	INTEGER*2	IECODE		! IFF entry
	INTEGER*2	RNUM		! number of reals
	REAL*4		REALB(RNUM)	! buffer containing reals
C
C Functions called
	INTEGER*4	FLWLIN		! VIOLIB - writes line to file
	INTEGER*2	EXPAND
	INTEGER*2	APPEND
	INTEGER*4	I2TABS		! formats real*8 coords
	INTEGER*4	EXPFLT		! converts real to byte string
C
C Local variables
	INTEGER*4	ILEN
	INTEGER*4	NBLNK		! number of trailing blanks
C					! to right justify addresses
	INTEGER*2	I,J		! counters
	INTEGER*2	SPACES		! number of spaces to fill field
	INTEGER*2	CHNUM		! number of characters in buffer
	BYTE		CHARB(CSIZE)	! character code buffer
C
	REAL*8		REAL8(4)	! double numbers for /abs output
	REAL*8		X_OFF,Y_OFF	! double absolute shift temp copy
	INTEGER*2	DEXPLEN		! expansion of double output format
	CHARACTER*32    DFORMAT		! expansion of double output format
C
	REAL		REQUIV		! for IFF_ABSENT check
	INTEGER		IEQUIV
	EQUIVALENCE 	(REQUIV,IEQUIV)
C
C ......................................................................
C Main Structure
C
C    The algorithm for simple case is as follows :-
C
C	for i=1 to number of reals do
C	  convert real number to byte string
C	  put byte string into buffer, right justified
C	write buffer to file
C
C     For complex cases (/ABS, or /WID or /DEC), then use I2TABS
C
C ......................................................................
C Start of function
C
C Check for complex cases and handle in double precision.
C If simple then use old-style reals for 100% compatability
C
	IF (.NOT.COORD) GOTO 5		! not a coordinate - just as is
C
C Old-style simple coords
C
	IF (.NOT.(HAD_ABS.OR.HAD_DP.OR.HAD_WID)) GOTO 5 
C
C Add origin offset if had /abs 
C REALB represents x,y if rnum = 2; x,y,z if rnum = 3 
C
	IF (HAD_ABS) THEN			! add origin offset if /abs
	   X_OFF=MD2LOC(1)
	   Y_OFF=MD2LOC(2)
	ELSE
	   X_OFF=0.0D0				! double but not abs
	   Y_OFF=0.0D0
	ENDIF
C						! and a valid coordinate
C
	IF (IECODE.EQ.'RA') THEN		! RA entry
	  REAL8(1) = REALB(1) + X_OFF
	  REAL8(2) = REALB(2) + X_OFF
	  REAL8(3) = REALB(3) + Y_OFF
	  REAL8(4) = REALB(4) + Y_OFF
C
	ELSEIF (IECODE.EQ.'CP') THEN		! CP entry
	  REAL8(1) = REALB(1) + X_OFF
	  REAL8(2) = REALB(2) + Y_OFF
	  REAL8(3) = REALB(3) + X_OFF
	  REAL8(4) = REALB(4) + Y_OFF
C
	ELSE					! normal x, y (,z)
	  REAL8(1) = REALB(1) + X_OFF
	  REAL8(2) = REALB(2) + Y_OFF
	  IF (RNUM.EQ.3) REAL8(3) = REALB(3)
	ENDIF
C
C Build the format with which to write out the coords: %I<n>
C for double precision numbers
C
	I2TLIN = I2TABS(REAL8,RNUM)		! format the double prec 
C						! numbers
C
	COORD = .FALSE.				! a coordinate no more
	GOTO 30					! get any address appendages
C
C *********************************************************************
C Here for simple (old-style) case in single precision and no control.
C
5	CONTINUE
C
	DO 20 I = 1,RNUM
C
C Convert real number
C
C Check for IFF_ABSENT
C
	  REQUIV = REALB(I)			! check for IFF_ABSENT
C
	  IF (IEQUIV.EQ.IFF_ABSENT) THEN
	    REALB(I) = 0.0
C
c	    CALL APPEND (' ?')			! use unset flag
c	    CHNUM = CHNUM + 2			! (needs ifromtext to
c	    GOTO 20				! change to match)
	  ENDIF
C
	  CHNUM = EXPFLT(REALB(I),CHARB,CSIZE)
C
C Put byte string into buffer
	  CALL APPEND(' ')			! append space to buffer
C
	  IF (CHNUM.LT.FWIDTH) THEN
	    SPACES = FWIDTH-CHNUM		! calculate extra spaces
	    DO 10 J = 1,SPACES
10	      CALL APPEND(' ')			! append them to buffer
	  ENDIF					! (chnum.lt.fwidth)
C
	  ILEN = APPEND('%AZ',CHARB)		! append byte string
20	CONTINUE
C
C Append any address info
C
30	CONTINUE
C
	IF (ADDRESS.AND.FIRST) THEN
	    NBLNK=69-ILEN
            CALL APPEND('%[ %] ! %^L%P0%X8',NBLNK,LPOSH)
	ENDIF
	FIRST = .FALSE.
C
C Write buffer to file
C
	I2TLIN = FLWLIN()
C
	RETURN
	END
C
