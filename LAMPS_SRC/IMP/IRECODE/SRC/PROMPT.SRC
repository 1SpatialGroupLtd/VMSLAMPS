	INTEGER*4 FUNCTION PROMPT(CODE,LUTABLE,NUMPAIRS)
C
***	MODULE	PROMPT
***	IDENT	24AU93
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
CMOD	Qualifier argument limit now 1000 not 256	 ST 24-Aug-1993
C       Mod 1286.
CMOD	straightened out HORRENDOUS spaghetti code	 SG 04-Jun-1991
CMOD518 Now correctly sets return from PROMPT		TJH 20-Oct-1987
CMOD	':' separator changed to '>'			TJH 04-Nov-1986
CMOD	Now outputs message if repeated code change
C	specified. FRL'ed				TJH 24-Nov-1986
CMOD	Qualifier argument limit now 256 not 128	TJH 12-Nov-1986
CMOD	CALL to EXIT removed, made a function		TJH 23-Oct-1986
CMOD	LSL_ADDMSG added				TJH 01-sep-1986
C 	Author M.W.S. Reid
C 	Adapted from source code in ILAYFC - Author MD
C
C 	Created						MWSR 03-Dec-1985
C
C PROMPTs for pairs of Feature codes, TCCs, layer numbers or AC numbers.
C
	IMPLICIT NONE
C
C Arguments passed
C
	INTEGER*4	CODE		! value: FC=1,AC=2,TCC=3,LAYER=4
	INTEGER*2	LUTABLE(2,30000)	! look up table for number pairs
	INTEGER*2	NUMPAIRS	! number of number pairs
C
C Common blocks
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNIRECODE:IRECODEMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Parameters:
	INTEGER		MAXPAIR
	PARAMETER	(MAXPAIR = 30000)
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Workspace
	INTEGER*4	ITMP		! temp variable
	INTEGER*2	ERRCOD		! error return
	INTEGER*2	ERRCOUNT	! Error counter
	INTEGER*2	LINDEX		! Index to look up table
	INTEGER*2	CFCODE		! Current output number
	INTEGER*2	INNUM		! Current input no. (word)
	INTEGER*4	LONG		! Current input no. (longword)
	INTEGER*2	NCHARS		! number characters read
	INTEGER*4	RETVAL		! return value
	INTEGER*4	RET		! return value
C
	BYTE		ICH		! one character
C
C ......................................................................
C Functions
	LOGICAL		RDLONG		! Reads long integer from TXTBUF
	INTEGER*4	TTRSTR
	LOGICAL		RDCHS
C
C ......................................................................
C
	PROMPT=%LOC(SS$_NORMAL)
C
C ......................................................................
C Initialise counting variables
10	LINDEX=0
	ERRCOUNT=0
C
C ......................................................................
C Test for type of PROMPT
C
20	IF (CODE .EQ. 1) THEN
	   RET=TTRSTR(,NCHARS, 'Old FC, New FC ? ',		ERRCOD)
	ELSEIF (CODE .EQ. 2) THEN
	   RET=TTRSTR(,NCHARS, 'Old AC type, New AC type ? ',	ERRCOD)
	ELSEIF (CODE .EQ. 3) THEN
	   RET=TTRSTR(,NCHARS, 'Old TCC, New TCC ?',		ERRCOD)
	ELSEIF (CODE.EQ.4) THEN
	   RET=TTRSTR(,NCHARS, 'Old Layer, New Layer ? ',		ERRCOD)
	ENDIF
C
C.....................................................................
C check what was input
C
	IF (.NOT.RET) THEN			!end of file or CTRLZ
	   IF (RET .EQ. LSL__EOF) THEN		! ^Z
	      PROMPT=IRECODE__EOF
	   ELSE					! error
	      PROMPT=IRECODE__BADCHR
	      CALL LSL_PUTMSG(PROMPT)
	      CALL LSL_ADDMSG(RET)
	      CALL LSL_ADDMSG(ERRCOD)
	   ENDIF
	   GOTO 999
	ELSE					! read suceeded 
	   IF (NCHARS .EQ. 0) THEN		! no characters read
	      IF (LINDEX.GE.1) GOTO 990
	      CALL LSL_PUTMSG(IRECODE__ARGSREQ)
	      LSL_STATUS=%LOC(SS$_NORMAL)
	      GOTO 20
	   ENDIF
	ENDIF
C
C......................................................................
C Get the old code input number
C
	CALL BSLN				! to start of line
	IF (RDLONG(LONG)) THEN		! attempt to read number
	  CALL LSL_PUTMSG(IRECODE__BADARGFMT)
	  GOTO 20
	ELSE
	  IF (LONG.GE.0.AND.LONG.LE.32767) THEN
	     INNUM=LONG			! convert to word
	  ELSE
	     CALL LSL_PUTMSG(IRECODE__BADARGRA)
	     CALL EXPAND('%N',LONG)
	     CALL LSL_ADDBUF(EXPBUF,EXPLEN)
	     CALL LSL_ADDMSG(IRECODE__ARGRANGE)
	     GOTO 20
	  ENDIF
	ENDIF
C
C	.............................................................
C	check that string hasn't ended
C
	IF (RDCHS(ICH)) THEN
	   ERRCOUNT=ERRCOUNT+1
	   IF (ERRCOUNT .GT. 4) THEN
	      PROMPT=IRECODE__ERRSSNVIO
	      CALL LSL_PUTMSG(PROMPT)
	      GOTO 999
	   ELSE
	      CALL LSL_PUTMSG(IRECODE__TWOARGS)
	   ENDIF
	   GOTO 20
	ENDIF
C
C	...............................................................
C	Get separating colon (now >)
C
	IF (ICH.NE.','.AND.ICH.NE.'>') CALL BSCH
C
C	...............................................................
C	Get the new code input number
C
	IF (RDLONG(LONG)) THEN
	   CALL LSL_PUTMSG(IRECODE__BADARGFMT)
	   GOTO 20
	ELSE
	   IF (LONG.GE.0.AND.LONG.LE.32767) THEN
	      CFCODE=LONG			! convert to word
	   ELSE
	      CALL LSL_PUTMSG(IRECODE__BADARGRA)
	      CALL EXPAND('%N',LONG)
	      CALL LSL_ADDBUF(EXPBUF,EXPLEN)
	      CALL LSL_ADDMSG(IRECODE__ARGRANGE)
	      GOTO 20
	   ENDIF
	ENDIF
C
C......................................................................
C check that we haven't already had number
C
	DO 50 ITMP=1,LINDEX,1
	   IF (LUTABLE(1,ITMP).EQ.INNUM) THEN
	      CALL LSL_PUTMSG(IRECODE__REPCHANGE)
	      CALL EXPAND('%^W%N>%N and %N>%N',
     &		INNUM,LUTABLE(2,ITMP),INNUM,CFCODE)
	      CALL LSL_ADDBUF(EXPBUF,EXPLEN)
	      LUTABLE(2,ITMP)=CFCODE		! yes - change output again
	      ERRCOUNT=0
	      GOTO 20
	   ENDIF
50	CONTINUE
C
C	...............................................................
C	add a new entry
C
	LINDEX=LINDEX+1	
	ERRCOUNT=0
	IF (LINDEX.GT.MAXPAIR) THEN
	   CALL LSL_PUTMSG(IRECODE__TOOMNYPAR,MAXPAIR)
	   GOTO 990
	ELSE
	   LUTABLE(1,LINDEX)=INNUM
	   LUTABLE(2,LINDEX)=CFCODE
	ENDIF
	GOTO 20
C
C..............................................................................
C
990	NUMPAIRS=LINDEX
999	RETURN
	END
