	LOGICAL FUNCTION CMDLINE
C
***	IDENT	11NO87
***	MODULE	CMDLINE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 18 July 1986
C
C To read the command line and pack its data away safely
C
C - returns FALSE if we succeed, and TRUE if we should EXIT due
C   to an error
C
	IMPLICIT NONE
C
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error message numbers
C
C common files
C
	INCLUDE	'LSL$CMNLSL:CLD.CMN'		! for command line reading
	INCLUDE	'LSL$CMNLSL:FILENAME.CMN'	! for filename parts
	INCLUDE	'HERE:FILES.CMN'		! filenames
	INCLUDE	'HERE:SWITCHES.CMN'		! and switches
C
C externals - the command table for the command line
C
	INTEGER		IPATCH_CLD
	EXTERNAL	IPATCH_CLD
C
C functions
C
	LOGICAL		DCL_STARTUP		! start command line off
	LOGICAL		DCL_FILE		! read a file name
	LOGICAL		DCL_QUAL		! and a qualifier
	LOGICAL		DCL_INT			! and an integer
C
C workspace
C
	LOGICAL		OK			! return from DCL_xxx
	LOGICAL		ABSENT			! filename absent?
	LOGICAL		HAD_QUAL		! had global qualifier?
	LOGICAL		PRESENT			! had local  qualifier?
	LOGICAL		NEGATED			! qualifier negated?
C
	CHARACTER*(C_MAX_SIZ)	TEMPNAM		! for journal file
	INTEGER			TEMPLEN
C
C **********************************************************************
C assume that we fail...
C
	CMDLINE = .TRUE.
C
C and read in the command line
C
	OK = DCL_STARTUP( 'IPATCH',		! command verb
     &			  .FALSE.,		! don't burst parameter lists
     &			  IPATCH_CLD,		! our CLD file
     &			  .TRUE. )		! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C **********************************************************************
C P1 is INFILE - determine our IFF file name
C This is a REQUIRED value, so cannot be absent without causing an error
C
	OK = DCL_FILE( 'INFILE',		! qualifier name
     &		       'LSL$IF:IFF.IFF;0',	! default filename
     &		       ABSENT,			! out - was name absent?
     &		       .FALSE.,			! only one file to process
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C the filename is now in FILARY(1) - put it into our own space
C
	IFFLEN = FIL_LEN(1)
	IFFNAM = FILARY(1)(1:IFFLEN)
C
C **********************************************************************
C /WRITE - are we actually going to patch the file?
C This is an optional value
C
	OK = DCL_QUAL( 'WRITE',			! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and we are only reading the file if the qualifier was absent
C
	READONLY = .NOT.HAD_QUAL
C
C **********************************************************************
C /LOG - output extra information?
C This is an optional value
C
	OK = DCL_QUAL( 'LOG',			! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and we are only logging if the qualifier was present
C
	LOG = HAD_QUAL
C
C **********************************************************************
C /JOURNAL or /JOURNAL=file - commands are to be copied to a file
C This is an optional value
C
	OK = DCL_QUAL( 'JOURNAL',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and thus decide if we are journalling
C
	JOURNAL = HAD_QUAL
C
C if we ARE journalling, then we have to decide on a file to journal to
C - use the IFF filename, with extension .IPATCH, as the default
C
	IF ( JOURNAL ) THEN
C
	   TEMPNAM = STR_NAM(:LEN_NAM) // '.IPATCH'
	   TEMPLEN = LEN_NAM + 7
C
	   OK = DCL_FILE( 'JOURNAL',		! qualifier name
     &		          TEMPNAM(:TEMPLEN),	! default filename
     &		          ABSENT,		! out - was name absent?
     &		          .FALSE.,		! only one file to process
     &		          .TRUE. )		! deal with errors itself
C
	   IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C the name cannot be absent, as a default is supplied in the CLD
C
	   JOULEN = FIL_LEN(1)
	   JOUNAM = FILARY(1)(1:JOULEN)
C
	ENDIF
C
C **********************************************************************
C /COMMANDS or /COMMANDS=file - commands are to be read from a file
C This is an optional value
C
	OK = DCL_QUAL( 'COMMANDS',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and thus decide if we are obeying a file
C
	COMMAND = HAD_QUAL
C
C if we ARE obeying, then we have to decide on a file to journal to
C - use the IFF filename, with extension .IPATCH, as the default
C - NOTE that this is the same default as for /JOURNAL
C
	IF ( COMMAND ) THEN
C
	   TEMPNAM = STR_NAM(:LEN_NAM) // '.IPATCH'
	   TEMPLEN = LEN_NAM + 7
C
	   OK = DCL_FILE( 'COMMANDS',		! qualifier name
     &		          TEMPNAM(:TEMPLEN),	! default filename
     &		          ABSENT,		! out - was name absent?
     &		          .FALSE.,		! only one file to process
     &		          .TRUE. )		! deal with errors itself
C
	   IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C the name cannot be ABSENT, as a defualt is supplied in the CLD
C
	   COMLEN = FIL_LEN(1)
	   COMNAM = FILARY(1)(1:COMLEN)
C
	ENDIF
C
C **********************************************************************
C /STATUS - do we want to start up with the status line
C (this defaults to true, but also depends on the input device)
C
	OK = DCL_QUAL( 'STATUS',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and we will put up the status line if it was not negated
C
	START_STATUS = HAD_QUAL
C
C **********************************************************************
C /REVISION_LEVEL - set IFF input revision level (default -1)
C
	OK = DCL_QUAL( 'REVISION_LEVEL',	! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C get the value
C
	INPUT_REVISION = -1			! default value
	IF (HAD_QUAL) THEN
	   OK = DCL_INT( 'REVISION_LEVEL', .TRUE. )
	   IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
	   INPUT_REVISION = IARRAY(1)
	   IF (ABS(INPUT_REVISION).GT.1) THEN
	      CALL LSL_PUTMSG(IPATCH__BADREV,INPUT_REVISION)
	      GOTO 9000
	   ENDIF
	ENDIF
C
C **********************************************************************
C /FRT=file - read in an FRT file
C
	OK = DCL_QUAL( 'FRT',		! qualifier name
     &		       HAD_QUAL,		! out - globally there
     &		       PRESENT,			! out - locally there
     &		       NEGATED,			! out - true if negated
     &		       .TRUE. )			! deal with errors itself
C
	IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
C
C and thus decide if we are to read an FRT
C
	FRT = HAD_QUAL
C
C and get the FRT anme
C
	IF ( FRT ) THEN
	   OK = DCL_FILE( 'FRT',		! qualifier name
     &		          'LSL$FRT:.FRT',	! default filename
     &		          ABSENT,		! out - was name absent?
     &		          .FALSE.,		! only one file to process
     &		          .TRUE. )		! deal with errors itself
C
	   IF ( .NOT.OK ) GOTO 9000		! failed - give up with status
	   FRTLEN = FIL_LEN(1)
	   FRTNAM = FILARY(1)(1:FRTLEN)
C
	ENDIF
C
C **********************************************************************
C and that is our input line processing finished
C - if we reach here then it succeeded - report as much
C
	CMDLINE = .FALSE.
C
C and output any log data (note that the actual filename is output
C by IFFOPEN, IFMODIFY, when we get to that)
C
	IF ( LOG ) THEN
	   IF ( JOURNAL ) CALL LSL_PUTMSG( IPATCH__JOURNAL, JOUNAM(:JOULEN) )
	   IF ( COMMAND ) CALL LSL_PUTMSG( IPATCH__COMMAND, COMNAM(:COMLEN) )
	ENDIF
C
C **********************************************************************
C and return
C
9000	RETURN
      	END
