C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-17 11:21:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_COMMAND( IERR )
C
***	IDENT	17DE86
***	MODULE	READ_COMMAND
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 7 August 1986
C
C to read a line from the command file
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER		IERR			! secondary error return
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'		! for TXTDSC
    	INCLUDE	'HERE:FILES.CMN'		! filenames, etc
 	INCLUDE	'HERE:SWITCHES.CMN'		! for COMMAND,LOG
C
C functions
C
	LOGICAL		FLRSTR			! read the line
	INTEGER*2	EXPAND			! to expand a string
C
C workspace
C
	LOGICAL		OK			! function return
C
C **********************************************************************
C so read the next line from the file, into TXTDSC by default
C
	OK = FLRSTR( ,, IERR )
C
C if we hit the end of file, then return LSL__NORMAL, but tell the user
C and log something appropriate. We also unset COMMAND so that we will go
C back to prompting.
C
C if we get an error, then report that it's in command reading, but leave
C the main reporting to our caller. Note that if we had a SYSREAD error,
C we fudge it to look like the SYSERR error that TTRSTR would have returned
C
 	IF ( .NOT.OK ) THEN
C
	   IF ( OK.EQ.LSL__EOF ) THEN
	      OK = LSL__NORMAL
	      CALL LSL_PUTMSG( IPATCH__ENDOFCOM )
	      TXTPTR = EXPAND('%W! end of command file %S255',
     &					TXTBUF, COMNAM(:COMLEN) )
	   ELSE
	      CALL LSL_PUTMSG( IPATCH__READCOM, COMNAM(:COMLEN) )
	      IF ( OK.EQ.LSL__SYSREAD ) OK = LSL__SYSERR
	   ENDIF
C
	   COMMAND = .FALSE.	  ! disable command reading

	ELSE
	   IF ( LOG ) CALL WRITEF('-> %S',TXTDSC)
	ENDIF
C
	READ_COMMAND = OK
C
	RETURN
	END
