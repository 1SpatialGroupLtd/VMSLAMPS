C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-11 16:22:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PRINT_MD( EXPLAIN )
C
***	IDENT	11AU86
***	MODULE	PRINT_MD
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 21 July 1986
C
C To output the contents of the current MD to the user
C
	IMPLICIT NONE
C
C arguments
C
	LOGICAL		EXPLAIN		! TRUE if to explain the data
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNIFF:MD2DES.CMN'	! map descriptor common
	INCLUDE	'LSL$CMNIFF:MD2NAM.CMN'	! for description of things
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'	! for LPOSH
	INCLUDE	'HERE:ENTRY.CMN'	! contains the entry data
C
C functions
C
	INTEGER*2	SIGCHS
C
C workspace
C
	INTEGER		I		! DO loop counter
	INTEGER		PRJIND		! projection index
	INTEGER		SPHIND		! spheroid index
	INTEGER		UNTIND		! units index
C
C **********************************************************************
C so write out the basic description of the entry
C
	CALL WRITEF('%P0%X8: MD  %P %^W%I5  %I5',LPOSH,MATV2,IELEN)
C
C **********************************************************************
C and if so requested, explain what they mean
C
	IF ( .NOT.EXPLAIN ) GOTO 9000
C
	CALL WRITEF('Map descriptor entry')
	CALL WRITEF('- size is %^W%N word%m',IELEN)
C
C **********************************************************************
C check the version of map descriptor we have
C
	IF ( MATV2.EQ.-1 ) THEN
	   CALL WRITEF('- map descriptor is unset')
	   GOTO 9000
	ELSEIF ( MATV2.EQ.0 ) THEN
	   CALL WRITEF('- map descriptor version 1 (geographicals)')
	   GOTO 9000
	ELSEIF ( MATV2.EQ.1 ) THEN
	   CALL WRITEF('- map descriptor version 1 (grid coordinates)')
	   GOTO 9000
	ELSEIF ( MATV2.EQ.2 ) THEN
	   CALL WRITEF('- map descriptor version 2')
	   IF (IELEN.NE.MD2LEN) THEN
	      CALL LSL_PUTMSG( IPATCH__MD2LEN, MD2LEN )
	      GOTO 9000
	   ENDIF
	ELSE
	   CALL LSL_PUTMSG( IPATCH__MDVERSION, MATV2 )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C so we have a version 2 map descriptor - explain some of it to the user
C
     	CALL WRITEF('- Local origin: %^D%F12.4, %F12.4',MD2LOC(1),MD2LOC(2))
	CALL WRITEF('- Map scale:    %^D%F12.4',MD2SCL)
C
C **********************************************************************
C and determine which projection we have
C
	DO 100 I = 1,MD2_NOPRJ
	   IF (MD2PRJ.EQ.MD2_PRJCD(I)) THEN
	      PRJIND = I
   	      GOTO 150
	   ENDIF
100	CONTINUE
C
	CALL LSL_PUTMSG( IPATCH__BADPRJ, MD2PRJ )
   	GOTO 200
C
150	CALL WRITEF('- Projection:   %I4 (%S)',
     &				MD2_PRJCD(PRJIND),
     &				MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
C
C **********************************************************************
C and the spheroid
C
200	DO 210 I = 1,MD2_NOSPH
	   IF (MD2SPH.EQ.MD2_SPHCD(I)) THEN
	      SPHIND = I
	      GOTO 250
	   ENDIF
210	CONTINUE
C
 	CALL LSL_PUTMSG( IPATCH__BADSPH, MD2SPH )
   	GOTO 300
C
250	CALL WRITEF('- Spheroid:     %I4 (%S)',
     &			  	MD2_SPHCD(SPHIND),
     &				MD2_SPH(SPHIND)(1:SIGCHS(MD2_SPH(SPHIND))))
C
C **********************************************************************
C and the units
C
300	DO 310 I = 1,MD2_NOUNT
	   IF (MD2UNT.EQ.MD2_UNTCD(I)) THEN
	      UNTIND = I
	      GOTO 350
	   ENDIF
310	CONTINUE
C
	CALL LSL_PUTMSG( IPATCH__BADUNT, MD2UNT )
	GOTO 400
C
350	CALL WRITEF('- Units:        %I4 (%S)',
     &				MD2_UNTCD(UNTIND),
     &				MD2_UNT(UNTIND)(1:SIGCHS(MD2_UNT(UNTIND))))
C
C **********************************************************************
C and warn them about what else they can do
C
400	CALL EXPAND('* use the TYPE command to type the contents')
	CALL WRITAP(' of the map descriptor in *')
	CALL EXPAND('* hexadecimal, or use the ITRANS utility to')
	CALL WRITAP(' edit the map descriptor  *')
C
C **********************************************************************
C and return
C
9000	RETURN
	END
