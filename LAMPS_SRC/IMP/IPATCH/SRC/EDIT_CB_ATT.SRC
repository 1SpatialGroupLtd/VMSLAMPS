C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-23 11:37:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EDIT_CB_ATT( ATTC )
C
***	IDENT	23DE87
***	MODULE	EDIT_CB_ATT
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author Clarke Brunt, 21 December 1987
C
C to edit a fixed attribute of the current CB
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
C
C common files
C
  	INCLUDE	'HERE:ENTRY.CMN'	! for entry details
  	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'
C
C arguments
C
	INTEGER		ATTC		! the attribute code to edit
C
C functions
C
	LOGICAL		RDCHS		! read a character
	LOGICAL		READ_PROMPT
	LOGICAL		READ_WILD_ACTYPE
	LOGICAL		READ_WILD_ACVAL
	LOGICAL		CHECK_EOL	! look for rubbish at end of line
	LOGICAL		CHECK_ACD_RANGE
	INTEGER		EXPAND
C
C workspace
C
	INTEGER		ATT		! for a DO loop
	BYTE		ICH		! single character
	LOGICAL		WILD		! true if it is wildcarded
	LOGICAL		OLD_ATT_DATATYPE! as it says
	INTEGER		OLD_ATT_IATTV	! the original value
	INTEGER		NEW_IATTV	! the new value
	REAL		NEW_RATTV
	CHARACTER*4	NEW_CATTV
	EQUIVALENCE	(NEW_IATTV,NEW_RATTV,NEW_CATTV)
	INTEGER		NEW_ATTC	! the new code
	INTEGER		NEW_DATATYPE	! the new datatype
	CHARACTER*(ACD_NAME_MAX+8)	ERRMES
	INTEGER				ERRLEN
	CHARACTER*9	DNAM(5)		! names for data types
	INTEGER		DLEN(5)		! their lengths
	DATA DNAM/'integer','real','character','date','time'/
	DATA DLEN/7,4,9,4,4/
C
	EDIT_CB_ATT = .TRUE.		! assume failure
C
C **********************************************************************
C check for presence of ATTC in the CB
	DO 50 ATT=1,CBH.NATT
	   IF ( ATTC.EQ.CBH.ATT(ATT).ATTC ) GOTO 70	! found it
50	CONTINUE
	ERRLEN = EXPAND('%WS%S (%N)',ERRMES,ACD_NAME(:ACD_NAME_LEN),ATTC)
	CALL LSL_PUTMSG( IPATCH__NOATT,ERRMES(:ERRLEN) )
	GOTO 9000
C
C found attribute
70	OLD_ATT_DATATYPE = ACD_DATA_TYPE
	OLD_ATT_IATTV = CBH.ATT(ATT).IATTV
	NEW_ATTC = ATTC
	NEW_IATTV = OLD_ATT_IATTV
C
C **********************************************************************
C prompt the user for code and value
C
100	IF ( READ_PROMPT('Attribute code: ', ' ') ) GOTO 9000
	IF ( .NOT.RDCHS(ICH) ) THEN		! something on line
	   CALL BSCH
	   WILD = .FALSE.			! don't want wildcard
	   IF ( READ_WILD_ACTYPE( NEW_ATTC, WILD ) ) GOTO 100
	   IF ( CHECK_EOL() ) GOTO 100
	ENDIF
	CALL ACDFND( NEW_ATTC, .FALSE.)		! load FRTACD common
	NEW_DATATYPE = ACD_DATA_TYPE		! new datatype
C
200	IF ( READ_PROMPT('Attribute value ('//
     &	 DNAM(NEW_DATATYPE)(:DLEN(NEW_DATATYPE))//'): ', ' ')) GOTO 9000
	IF ( .NOT.RDCHS(ICH) ) THEN		! something on line
	   CALL BSCH
	   WILD = .FALSE.			! don't want wildcard
	   IF ( READ_WILD_ACVAL( NEW_IATTV, NEW_ATTC, WILD) ) GOTO 200
	   IF ( CHECK_EOL() ) GOTO 200
	ENDIF
C
C update the CB
C
	CBH.ATT(ATT).ATTC = NEW_ATTC
C
C it is a problem that some ACs have different datatypes for their value
C If the AC type has been changed in such a way that the value's
C data-type has changed to/from a real, but a new value has not been
C supplied, then we must coerce it for them
C NB. dates, times, and characters are treated as integer for this
C purpose, so it is quite possible that a silly value will result
C
	IF ( OLD_ATT_DATATYPE.NE.NEW_DATATYPE .AND.
     &	     OLD_ATT_IATTV.EQ.NEW_IATTV ) THEN
	   IF ( NEW_DATATYPE.EQ.ACD_DATATYPE_R .AND.
     &		OLD_ATT_DATATYPE.EQ.ACD_DATATYPE_I ) THEN
	      NEW_RATTV = FLOAT(NEW_IATTV)
	      CALL LSL_PUTMSG( IPATCH__ACNOWREAL )
	   ELSEIF ( NEW_DATATYPE.EQ.ACD_DATATYPE_I .AND.
     &		OLD_ATT_DATATYPE.EQ.ACD_DATATYPE_R ) THEN
	      NEW_IATTV = NINT(NEW_RATTV)
	      CALL LSL_PUTMSG( IPATCH__ACNOWINT )
	   ELSEIF ( CHECK_ACD_RANGE( NEW_IATTV ) ) THEN
	      NEW_IATTV = IFF_ABSENT
	      CALL LSL_PUTMSG( IPATCH__ACNOWABSENT )
	   ENDIF
	ENDIF
C
C and insert new value, whatever its data-type
C
	CBH.ATT(ATT).IATTV = NEW_IATTV
	EDIT_CB_ATT = .FALSE.		! success
C
C **********************************************************************
C and that's it
C
9000	RETURN                      
	END
