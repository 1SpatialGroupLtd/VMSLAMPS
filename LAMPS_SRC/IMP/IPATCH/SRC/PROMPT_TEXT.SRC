C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-11 15:40:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PROMPT_TEXT( PROMPT, TEXT, LENGTH )
C
***	IDENT	11AU86
***	MODULE	PROMPT_TEXT
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 31 July 1986
C
C function to prompt the user for a text
C - returns FALSE if the value is successfully read in, or if they
C   reply with carriage return
C
	IMPLICIT NONE
C
C arguments
C
	CHARACTER*(*)	PROMPT		! what to ask with
	CHARACTER*(*)	TEXT		! text to return in
	INTEGER*2	LENGTH		! it's size
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! for ON_CHAR2
	INCLUDE	'HERE:USEFUL.PAR'		! for Q1,Q2
C
C functions
C
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		RDCHS		! to read a character
	INTEGER		READSTR		! to read a string
C
C workspace
C
	LOGICAL		OK		! did call succeed?
	INTEGER		IERR		! error response
	BYTE		ICH		! single character
C
	CHARACTER*256	T$STR		! temporary string
	INTEGER*2	T$LEN		! and length
	INTEGER*2	ORIG_LEN	! length of input string
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_TEXT = .FALSE.
C
C and note the length of our destination string
C
	ORIG_LEN = LEN(TEXT)
C
C so prompt the user
C
2000	IF ( READ_PROMPT( PROMPT, ' ' ) ) THEN
	   PROMPT_TEXT = .TRUE.			! failure
	   GOTO 9000
	ENDIF
C
C is there anything there?
C
	IF ( RDCHS(ICH) ) GOTO 9000		! nothing - just return
C
C and read the string itself in - note that since we are prompting for
C a text, we don't require quotation marks around it. This has the side
C effect that it is impossible to specify a string consisting of a space,
C as that would have been thrown out by the RDCHS before us. Use command
C or line mode (which do require quotation marks around text) to do this.
C
	CALL BSCH
	T$LEN = READSTR( T$STR(:ORIG_LEN), 0, ON_CHAR2, .FALSE., OK )
C
C check for an error
C - if the string is truncated, then we still use it
C
	IF ( .NOT.OK ) THEN
	   CALL LSL_PUTMSG( OK )
	   IF (OK.NE.LSL__STRTOOLONG) GOTO 2000
	ENDIF
C
C otherwise, return the string
C
	TEXT   = T$STR(:T$LEN)
	LENGTH = T$LEN
C
9000	RETURN
	END
