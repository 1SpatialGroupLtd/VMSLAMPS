	SUBROUTINE NEW_STATUS( START )
C
***	IDENT	17DE87
***	MODULE	NEW_STATUS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 5 August 1986
C
C updates the status area on the screen
C
	IMPLICIT NONE
C
C arguments
C
	LOGICAL		START		! true if to start from scratch
C
C ***********************************************************************
C parameter files
C
	INCLUDE	'HERE:USEFUL.PAR'	! for ESC, CSI
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for LPOSH,etc
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'		! for EXPDSC
	INCLUDE	'HERE:FILES.CMN'		! filenames
	INCLUDE	'HERE:SWITCHES.CMN'		! program control
	INCLUDE	'HERE:POINTERS.CMN'		! positions in the file
	INCLUDE	'HERE:ENTRY.CMN'		! entry information
C
C local maintenance variables
C
	LOGICAL		DISPLAY_WAS
	SAVE		DISPLAY_WAS
	INTEGER		IRVLEV_WAS
	SAVE		IRVLEV_WAS
C
C ***********************************************************************
C only do something if the status line is actually in use
C
    	IF ( .NOT.STATUS_LINE ) GOTO 9000
C
C Explanation of escape codes:
C
C		<esc> 7		remembers current state
C		<esc> 8		restores it
C		<csi> 7 m	sets reverse video for this line
C		<csi> a;b H	moves to line a, column b
C
C (note that since %S would 'swallow' the next integer as a length,
C  we must use %S%<space> - %<space> is a terminator, and is not
C  transmitted to the final result)
C
C so we will save the current cursor position, etc, in terminal memory
C
 	CALL BINOUT( ESC // '7' )
C
C ----------------------------------------------------------------------
C line 1 - filename and read/write status
C	 - NOTE that this line is only output upon START
C
	IF ( START ) THEN
	   CALL EXPAND('%S% 7m%S% 1;1H',CSI,CSI)
   	   IF ( READONLY ) THEN
	      CALL APPEND('Reading')
	   ELSE
	      CALL APPEND('Writing')
 	   ENDIF
 	   CALL APPEND(' file %S',IFFNAM(:IFFLEN))
	   CALL BINOUT(EXPDSC)
	ENDIF
C
C ----------------------------------------------------------------------
C line 2 - current position - address, current NF, mark
C
	CALL EXPAND('%S% 7m%S% 2;1H',CSI,CSI)
	CALL APPEND('current %P0%X8',LPOSH)
C
C - if we are above HIGHWATER, or CURRENT_NF has been set to -1 to show
C that we are 'lost', then we don't know about a previous NF
C - if we are after the zeroth 'NF', then we don't have a current feature
C - otherwise report what we have
C
 	IF ( LPOSH.GE.HIGHWATER .OR. CURRENT_NF.LT.0 ) THEN
	   CALL APPEND('   no previous known NF       ')
	ELSEIF ( CURRENT_NF.EQ.0 ) THEN
	   CALL APPEND('   no previous NF             ')
	ELSE
	   CALL APPEND('   NF %U%P %^W%I5, %^W%I5 at %P0%^L%X8',
     &				   FSN,	   ISN,	     NF_PTR(CURRENT_NF) )
 	ENDIF
C
C if there's no mark, then say as much
C
	IF ( MARKED_ENTRY.EQ.0 ) THEN
	   CALL APPEND('   no mark         ')
	ELSE
	   CALL APPEND('   mark at %P0%X8',MARKED_ENTRY)
	ENDIF
C
	CALL BINOUT(EXPDSC)
C
C ----------------------------------------------------------------------
C line 3 - other positional data - end of file
C	   (current section and layer information to be added)
C	   and revision levels
C
	IF ( START .OR. IRVLEV.NE.IRVLEV_WAS ) THEN
C
	   CALL EXPAND('%S% 7m%S% 3;1H',CSI,CSI)
   	   CALL APPEND('eof     %P0%X8',LPOSE)
	   CALL APPEND('   revision levels: input %N output %N ',
     &						IRVLEV,ORVLEV)
C
	   CALL BINOUT(EXPDSC)
C
	   IRVLEV_WAS = IRVLEV
C
	ENDIF
C
C ----------------------------------------------------------------------
C line 4 - PREVIOUS status
C
	CALL EXPAND('%S% 7m%S% 4;1H',CSI,CSI)
 	CALL APPEND('%I5 feature%m scanned ',LAST_NF)
	IF (LAST_NF.EQ.1) CALL APPEND(' ')	! to allow for no 's'
C
	IF ( HIGHWATER.EQ.LPOSE+1 ) THEN
	   CALL APPEND('(up to EOF)     ')
	ELSE
	   CALL APPEND('(below %P0%X8)',HIGHWATER)
	ENDIF
C
	IF ( LPOSH.GE.HIGHWATER ) THEN
	   CALL APPEND(' - PREVIOUS will have to scan           ')
	ELSEIF ( AFTER_MAX_ENTRIES ) THEN
	   CALL APPEND(' - no PREVIOUS from %P0%X8 to ',
     &					    ENTRY_PTR(LAST_ENTRY))
	   IF ( NF_PTR(CURRENT_NF+1).EQ.LPOSE+1 ) THEN
	      CALL APPEND('EOF     ')
	   ELSE
	      CALL APPEND('%P0%X8',NF_PTR(CURRENT_NF+1))
	   ENDIF
	ELSE
	   CALL APPEND('                                        ')
	ENDIF
C
	CALL BINOUT(EXPDSC)
C
C ----------------------------------------------------------------------
C line 5 - other information
C
	IF ( START .OR. DISPLAY.NE.DISPLAY_WAS ) THEN
C
	   CALL EXPAND('%S% 7m%S% 5;1H',CSI,CSI)
	   CALL APPEND('NEXT will ')
	   IF ( .NOT.DISPLAY ) CALL APPEND('not ')
	   CALL APPEND('display intermediate entries')
	   IF ( DISPLAY ) CALL APPEND('    ')
C
	   CALL BINOUT(EXPDSC)
C
	   DISPLAY_WAS = DISPLAY
C
	ENDIF
C
C ----------------------------------------------------------------------
C restore the original cursor position, etc, from terminal memory
C
	IF (SKIPLF) THEN
	   CALL BINOUT( ESC // '8' // CR  )
	   SKIPLF = .FALSE.
	ELSE
	   CALL BINOUT( ESC // '8' // CR // LF )
	ENDIF
C
9000	RETURN
	END
