C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-11 10:29:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	LOGICAL FUNCTION PROMPT_CP( CORNER, DEST )
C
***	IDENT	11AU86
***	MODULE	PROMPT_CP
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 7 August 1986
C
C function to prompt the user for a replacement coordinate for
C control point CORNER of original or target sides in the current
C CP entry
C
C - returns FALSE if the value is successfully read in and changed,
C   or if they respond with nothing
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER		CORNER		! which corner to change
	REAL		DEST(2)		! the resultant values
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
C
C functions
C
	LOGICAL		RDCHS		! to read a character
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		RDREAL		! to read a real number
	LOGICAL		CHECK_EOL	! check for rubbish at end of line
	INTEGER*2	EXPAND		! to expand the prompt
C
C workspace
C
	LOGICAL		OK		! did call succeed?
	INTEGER		IERR		! error response
	BYTE		ICH		! read by RDCHS
C
 	REAL		VAL(2)		! the numbers read
	CHARACTER*80	PROMPT		! the prompt itself
	INTEGER*2	LENGTH		! the size of the prompt
C
	CHARACTER*2	N(4)
	DATA		N / 'NW', 'SW', 'SE', 'NE' /
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_CP = .FALSE.
C
C so compose the prompt
C
	LENGTH = EXPAND('%WS%S corner (was %F12.4, %F12.4) : ',PROMPT,
     &			    N(CORNER),     DEST(1),DEST(2) )
C
C prompt the user
C
2000	IF ( READ_PROMPT( PROMPT(:LENGTH), ' ' ) ) THEN
	   PROMPT_CP = .TRUE.			! failure
	   GOTO 9000
	ENDIF
C
C if they replied with a blank line, then use the current value
C
	IF ( RDCHS(ICH) ) GOTO 9000
C
C try to read the numbers
C
	CALL BSCH
	IF ( RDREAL(VAL(1)) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 2000
	ENDIF
C
C allow a separating comma, but it's not compulsory
C
	IF ( RDCHS(ICH) ) THEN
	   CALL LSL_PUTMSG( LSL__UNEXPEOL )	! unexpected end of line
	   GOTO 2000
	ELSE
	   IF ( ICH.NE.',' ) CALL BSCH		! not a comma
	ENDIF
C
C and the second number
C
	IF ( RDREAL(VAL(2)) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 2000
	ENDIF
C
C and check that that's all of the line
C
	IF ( CHECK_EOL() ) GOTO 2000
C
C so we have the values - return them
C
	DEST(1) = VAL(1)
	DEST(2) = VAL(2)
C
C and return
C
9000	RETURN
	END
