C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-22 12:27:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDIT_CB
C
***	IDENT	22DE87
***	MODULE	EDIT_CB
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author Clarke Brunt, 20 December 1987
C
C to edit the current CB entry
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'	! for command details
  	INCLUDE	'HERE:ENTRY.CMN'	! for entry details
	INCLUDE	'HERE:SWITCHES.CMN'	! for FATAL_ERROR
C
C command table
C
	EXTERNAL	EDIT_CB_CMD_TABLE
C
C functions
C
	LOGICAL		RDCHS		! read a character
	LOGICAL		RDLHEX		! read a hex number
	INTEGER		RDCOMM		! read a command
	LOGICAL		EDIT_CB_CHANGE	! change points
	LOGICAL		EDIT_CB_ATT	! change fixed attributes
	LOGICAL		EDIT_ST_DELETE	! or delete them
	LOGICAL		CHECK_EOL	! check for rubbish at eol
	LOGICAL		READ_WILD_ACTYPE
C
C workspace
C
	BYTE		ICH		! single character
	INTEGER		CMD		! command number
	INTEGER		NUMBER		! the number read
	LOGICAL		WILD		! want wildcard?
C
C **********************************************************************
C check if we have anything on the rest of this line
C - if there's nothing, then remind the user that strings can only
C   be edited with specific commands
C
	IF ( RDCHS(ICH) ) THEN
	   CALL LSL_PUTMSG( IPATCH__CBEDIT )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C otherwise, unread that character and read the command
C
	CALL BSCH
	CMD = RDCOMM( EDIT_CB_CMD_TABLE )
C
C check for an error
C
	IF ( CMD.LE.0 ) GOTO 9000		! give up
C
C otherwise, jump according to the command
C
	GOTO ( 2000, 2100, 2200, 2300, 2400 ), CMD
C
C and if we come here, then complain
C
	CALL LSL_PUTMSG( IPATCH__NOSUCHCMD, CMD )
	CALL LSL_PUTMSG( IPATCH__REPORTLSL )
	FATAL_ERROR = .TRUE.
	GOTO 9000
C
C **********************************************************************
C FLAGS  <hex> 	- change flags
C		- we have to read the hexadecimal value in ourselves
C
2000	IF ( RDLHEX(NUMBER) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 9000
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C check value
C
	IF ( NUMBER.LT.0 .OR. NUMBER.GT.'7F'X ) THEN
	   CALL LSL_PUTMSG( IPATCH__HEXRANGE, NUMBER, 0, '7F'X )
	   GOTO 9000
	ENDIF
C
C so change flags, and write it out
C
	CBH.FLAGS = NUMBER
	GOTO 8000
C
C **********************************************************************
C CHANGE	- change a range of coordinates
C		- firstly, check that we have a definition of what
C		  to change (we don't insist if NROW=1 !)
C
2100	IF ( CMDICT.EQ.0 ) THEN
	   IF ( CBH.NROW.EQ.1 ) THEN
	      CMDICT = 1
	      INTARG(1) = 1		! obviously, must be CHANGE 1
	   ELSE
	      CALL LSL_PUTMSG( IPATCH__STCHANGE )
	      GOTO 9000
	   ENDIF
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C so prompt the user for the new values, and change them
C
	IF ( EDIT_CB_CHANGE() ) GOTO 9000
	GOTO 8000
C
C **********************************************************************
C DELETE	- delete a range of coordinates
C		- firstly, check that we have a definition of what
C		  to change (we don't insist if NPTS=1 !)
C
C
2200	IF ( CMDICT.EQ.0 ) THEN
	   IF ( CBH.NROW.EQ.1 ) THEN
	      CMDICT = 1
	      INTARG(1) = 1		! obviously, must be DELETE 1
	   ELSE
	      CALL LSL_PUTMSG( IPATCH__STDELETE )
	      GOTO 9000
	   ENDIF
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C otherwise, squash the buffer in the appropriate manner
C
	IF ( EDIT_ST_DELETE() ) GOTO 9000
C
C and output the new CB instead of the old
C
	CALL REPLACE_STRING
C
C and reflect the change
C
	CALL DISPLAY_ENTRY(.FALSE.)
C
	GOTO 9000
C
C **********************************************************************
C GTYPE  <number> - change gtype
C
2300	IF ( CHECK_EOL() ) GOTO 9000
C
C check value
C
	IF ( INTARG(1).LE.0 .OR. INTARG(1).GT.12 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1), 1, 12 )
	   GOTO 9000
	ENDIF
C
C so change flags, and write it out
C
	CBH.GTYPE = INTARG(1)
	GOTO 8000
C
C **********************************************************************
C ATTRIBUTE  <number>/<name> - change specified fixed attribute
C
2400	IF ( RDCHS(ICH) ) THEN
	   CALL LSL_PUTMSG( LSL__UNEXPEOL )
	   GOTO 9000
	ENDIF
	CALL BSCH
	WILD = .FALSE.			! don't want wildcard
	IF ( READ_WILD_ACTYPE( NUMBER, WILD ) ) GOTO 9000
	IF ( CHECK_EOL() ) GOTO 9000
C
C edit the fixed attribute (prompt mode)
C
	IF ( EDIT_CB_ATT( NUMBER ) ) GOTO 9000
 	GOTO 8000
C
C **********************************************************************
C write back amended CB and display it
C
8000	CALL EIHWCB( CBH, CBD )
	CALL DISPLAY_ENTRY(.FALSE.)
C
C **********************************************************************
C and that's it
C
9000	RETURN
	END
