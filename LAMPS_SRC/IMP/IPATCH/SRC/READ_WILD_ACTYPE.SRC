	LOGICAL FUNCTION READ_WILD_ACTYPE( ACTYPE, IS_WILD )
C
***	IDENT	20DE87
***	MODULE	READ_WILD_ACTYPE
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author Clarke Brunt, 18 December 1987
C
C to read a (possibly wildcarded) long integer
C - returns TRUE if nothing there (ie not a number, not a wildcard)
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*4	ACTYPE	! the number to read
	LOGICAL		IS_WILD	! (input) true if wildcard permitted
C				! (output) true if wildcard present
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'
C
C functions
C
	LOGICAL		RDCHS		! read a character
	LOGICAL		RDINT		! read an integer*2
	INTEGER		READSTR
	INTEGER		ACDFND_NAME
C
C workspace
C
	BYTE		ICH		! character
	CHARACTER*(ACD_NAME_MAX)	ACDSTR
	INTEGER		ACDLEN
	INTEGER		RET		! code from ACDFND_NAME
C
C and the wildcard
C
	BYTE		WILD
	PARAMETER	(WILD='*')
C
C **********************************************************************
C assume that we fail
C
	READ_WILD_ACTYPE = .TRUE.
C
C is there anything on the line?
C
	IF ( RDCHS(ICH) ) GOTO 9000
C
C was it a wildcard?
C
	IF ( IS_WILD.AND.ICH.EQ.WILD ) THEN
	   READ_WILD_ACTYPE = .FALSE.
	   GOTO 9000
	ELSE
	   IS_WILD = .FALSE.
	ENDIF
C
	CALL BSCH
C
C try to read an integer*2 (nb reading into integer*4, so clear first)
C
	ACTYPE = 0
	IF ( RDINT(ACTYPE) ) THEN
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) THEN
	      CALL LSL_PUTMSG(ERRNUM)
	      CALL LSL_ADDMSG(LSL_EXCP)
	      GOTO 9000
	   ENDIF
C
C failing which, try for an AC name
C
	   ACDLEN = READSTR(ACDSTR,,ON_CMD)
	   IF (ACDFND_NAME(ACDSTR(1:ACDLEN))) GOTO 9000
	   ACTYPE = ACD_CODE
	ENDIF
C
	READ_WILD_ACTYPE = .FALSE.		! success
C
C and return
C
9000	RETURN
	END
