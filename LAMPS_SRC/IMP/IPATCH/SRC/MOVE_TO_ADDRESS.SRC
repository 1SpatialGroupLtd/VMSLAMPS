C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-30 13:54:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION MOVE_TO_ADDRESS( POSN, ENTNAM, ERROR, DISABLE )
C
***	IDENT	30JL86
***	MODULE	MOVE_TO_ADDRESS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 22 July 1986
C
C this function moves to the required address in the IFF file, and checks
C that the move has succeeded.
C
C It returns TRUE if something went wrong.
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER		POSN
	INTEGER*2	ENTNAM
	INTEGER		ERROR
	LOGICAL		DISABLE
C
C POSN		is the address we want to move to
C ENTNAM	is the name (2 characters) of the entry we think should
C		be at that position. If this is 0, then we don't care
C		(or know) what is there
C ERROR		is the error message to give if we don't succeed
C DISABLE	is TRUE if an error causes us to unset DONE_SCAN_FILE which
C		will force us to scan the file again before doing the next
C		PREVIOUS
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! for LSL__NORMAL
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error messages
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'	! for IERNM,IERCD,etc
	INCLUDE	'HERE:SWITCHES.CMN'	! for DONE_SCAN_FILE,etc
	INCLUDE	'HERE:ENTRY.CMN'	! to hold entry data
C
C workspace
C
	INTEGER		LOCAL_ERR	! local error number
C
C **********************************************************************
C assume that things succeed
C
	MOVE_TO_ADDRESS = .FALSE.
	LOCAL_ERR       = LSL__NORMAL
C
C so perform the move
C
C - if we have been asked to move to POSN=0, then use IFFRWD
C
C - if POSN=LPOSE, then use IFFUPP to update our position to the
C   end of file - we assign LPOSE to LPOSH and call IFFUPP because of
C   the warning not to call IFFUPP with the common block variables in
C   the 'wrong' call position - the POSN variable might be LPOSE if that
C   is what we were called with
C
C - otherwise, we can just IFFPKE to the required place
C
	IF ( POSN.EQ.0 ) THEN
	   CALL IFFRWD
	ELSEIF ( POSN.EQ.LPOSE ) THEN
	   LPOSH = LPOSE
	   CALL IFFUPP( LPOSF, LPOSM, LPOSH )
	ELSE
	   CALL IFFPKE( IECODE, IELEN, POSN )
	ENDIF
C
C and did it succeed? - check for an IFF error
C
	IF ( IERNM.NE.1 .OR. IERCD.NE.0 ) THEN
	   LOCAL_ERR = IPATCH__IFFPKE
	   GOTO 8000
	ENDIF
C
C and finally, if they asked for a particular entry, check that we've
C got the right one
C - for POSN = 0 or LPOSE, this check is obviously irrelevant
C - note that we report such an error, but it is treated as a success,
C   since we DO have an entry in hand
C
	IF ( POSN.NE.0 .AND. POSN.NE.LPOSE .AND.
     &	     ENTNAM.NE.0 .AND. (IECODE.NE.ENTNAM) ) THEN
	   CALL LSL_PUTMSG( IPATCH__UNEXPENT, IECODE )
	   CALL LSL_ADDMSG( IPATCH__LOOKFOR, ENTNAM, POSN )
	ENDIF
C
C and now check whether we must give error messages or not
C
8000	IF ( LOCAL_ERR.NE.LSL__NORMAL ) THEN
	   MOVE_TO_ADDRESS = .TRUE.
	   CALL LSL_PUTMSG( ERROR )
	   CALL LSL_ADDMSG( LOCAL_ERR )
	   CALL LSL_ADDMSG( IPATCH__LOOKFOR, ENTNAM, POSN )
	   IF ( DISABLE ) THEN
	      DONE_SCAN_FILE = .FALSE.
	   ENDIF
	ENDIF
C
	RETURN
	END
