	LOGICAL FUNCTION PROMPT_INT2( PROMPT, VALUE, UNSIGNED )
C
***	IDENT	11AU86
***	MODULE	PROMPT_INT2
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 31 July 1986
C
C function to prompt the user for an integer*2
C - returns FALSE if the user answers with a valid number, or a carriage
C   return
C
	IMPLICIT NONE
C
C arguments
C
	CHARACTER*(*)	PROMPT		! what to ask with
	INTEGER*2	VALUE	    	! what to return
	LOGICAL		UNSIGNED	! true if it should be unsigned
C					! (ie 0 to 65535)
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
	INCLUDE	'HERE:USEFUL.PAR'	! for number ranges
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
C
C functions
C
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		RDLONG		! to read a long integer
	LOGICAL		RDINT		! to read a short integer
	LOGICAL		RDCHS		! read a character
	LOGICAL		CHECK_EOL	! check end of line for rubbish
C
C workspace
C
	LOGICAL		OK		! did call succeed?
	LOGICAL		ERROR		! or fail
	INTEGER		IERR		! error response
	INTEGER		NUMBER		! to read into
	INTEGER*2	NUM		! short version of NUMBER
	EQUIVALENCE	(NUM,NUMBER)
	BYTE		ICH		! a character
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_INT2 = .FALSE.
	NUMBER = 0
C
C so prompt the user
C
2000	IF ( READ_PROMPT( PROMPT, ' ' ) ) THEN
	   PROMPT_INT2 = .TRUE.			! failure
	   GOTO 9000
	ENDIF
C
C did they reply with anything?
C
	IF ( RDCHS(ICH) ) GOTO 9000		! nothing - just return
	CALL BSCH
C
C try to read the number in - choose the appropriate routine
C
	IF ( UNSIGNED ) THEN
	   ERROR = RDLONG(NUMBER)
	ELSE
	   ERROR = RDINT(NUMBER)
	ENDIF
C
	IF ( ERROR ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 2000
	ENDIF
C
C if it's unsigned, we need to check the range
C
	IF ( UNSIGNED .AND. (NUMBER.GT.MAXU2.OR.NUMBER.LT.0) ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, NUMBER, 0, MAXU2 )
	   GOTO 2000
	ENDIF
C
C and check for rubbish on the end of line
C
	IF ( CHECK_EOL() ) GOTO 2000
C
C otherwise we have the value
C
	VALUE = NUM
C
C and return
C
9000	RETURN
	END
