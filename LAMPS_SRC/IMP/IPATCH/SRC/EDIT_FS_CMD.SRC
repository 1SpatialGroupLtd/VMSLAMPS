	LOGICAL FUNCTION EDIT_FS_CMD
C
***	IDENT	22OC86
***	MODULE	EDIT_FS_CMD
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 31 July 1986
C
C to read and obey an edit command for the current FS entry
C returns TRUE on error
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
	INCLUDE	'HERE:USEFUL.PAR'	! for WANT_xxx, ranges
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'	! for command details
  	INCLUDE	'HERE:ENTRY.CMN'	! for entry details
	INCLUDE	'HERE:SWITCHES.CMN'	! for FATAL_ERROR
C
C command table
C
	EXTERNAL	EDIT_FS_CMD_TABLE
C
C functions
C
	INTEGER		RDCOMM		! read a command
	LOGICAL		RDLHEX		! read a hexadecimal number
C
C workspace
C
	INTEGER		CMD		! command number
	INTEGER*4	NUMBER		! number read
	INTEGER*2	SHORT		! short version
	EQUIVALENCE	(NUMBER,SHORT)
C
C **********************************************************************
C assume the worst
C
	EDIT_FS_CMD = .TRUE.
C
C so read the command
C
	CMD = RDCOMM( EDIT_FS_CMD_TABLE )
C
C check for an error
C
	IF ( CMD.LE.0 ) GOTO 9999		! give up
C
C otherwise, jump according to the command
C
	GOTO (	2000,			! FC
     &		3000,3100,3200,3300,	! CLOS,NOTE,REVE,TWOP
     &		3400,3500,3600,3700,	! PAIN,SQUA,INVE,SUPP
     &		3800,			! STAT
     &		4000,4100,4200,4300,	! TEXT,SYMB,LINE,POSI
     &		4400,4500,4600,		! TYPE,CATE,PC
     &		5000			! WORD
     &	     ), CMD
C
C and if we come here, then complain
C
	CALL LSL_PUTMSG( IPATCH__NOSUCHCMD, CMD )
	CALL LSL_PUTMSG( IPATCH__REPORTLSL )
	FATAL_ERROR = .TRUE.
	GOTO 9999
C
C **********************************************************************
C FC  <fc>
C
2000	IF ( INTARG(1).GT.MAXI2 .OR. INTARG(1).LT.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1), 0, MAXI2 )
	   GOTO 9999
	ELSE
	   FS(1) = INTARG(1)
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C CLOSED	- set closed bit
C
3000	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),0,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C NOTEDGE	- set not-an-edge bit
C
3100	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),1,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C REVERSE	- set reverse bit
C
3200	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),2,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C TWOPART	- set two part feature bit
C
3300	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),3,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C PAINTOUT	- set paintout bit
C
3400	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),4,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C SQUARE	- set square bit
C
3500	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),5,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C INVERSE	- set inverse bit
C
3600	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),6,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C SUPPRESS	- set paintout suppress bit
C
3700	IF ( INTARG(1).NE.1 .AND. INTARG(1).NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTBIT, INTARG(1) )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),15,1,FS(2) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C STATUS	- set word 2 as a whole
C
3800	IF ( RDLHEX( NUMBER ) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 9999
	ENDIF
C
	IF ( NUMBER.LT.0 .OR. NUMBER.GT.MAXU2 ) THEN
	   CALL LSL_PUTMSG( IPATCH__HEXRANGE, NUMBER, 0, MAXU2 )
	   GOTO 9999
	ELSE
	   FS(2) = SHORT
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C TEXT		- make it a text item
C
4000	CALL LIB$INSV( 2,14,2,FS(3) )
	GOTO 9000
C
C **********************************************************************
C SYMBOL	- make it a symbol item
C
4100	CALL LIB$INSV( 1,14,2,FS(3) )
	GOTO 9000
C
C **********************************************************************
C LINE		- make it a linear item
C
4200	CALL LIB$INSV( 0,14,2,FS(3) )
	GOTO 9000
C
C **********************************************************************
C POSITON <value>	- set the text position code
C			- for texts only
C
4300	IF ( (FS(3).AND.FS_BITS) .NE. TEXT_BITS ) THEN
	   CALL LSL_PUTMSG( IPATCH__TEXTONLY )
	   GOTO 9999
	ELSEIF ( INTARG(1).LT.0 .OR. INTARG(1).GT.8 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,8 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),0,4,FS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C TYPE_STYLE	- set the type style
C		- for texts only
C
4400	IF ( (FS(3).AND.FS_BITS) .NE. TEXT_BITS ) THEN
	   CALL LSL_PUTMSG( IPATCH__TEXTONLY )
	   GOTO 9999
	ELSEIF ( INTARG(1).LT.0 .OR. INTARG(1).GT.3 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,3 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),4,2,FS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C CATEGORY  	- set the text category
C		- for texts only
C
4500	IF ( (FS(3).AND.FS_BITS) .NE. TEXT_BITS ) THEN
	   CALL LSL_PUTMSG( IPATCH__TEXTONLY )
	   GOTO 9999
	ELSEIF ( INTARG(1).LT.0 .OR. INTARG(1).GT.63 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,63 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),6,5,FS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C PC		- set the process code
C		- only if not text
C
4600	IF ( (FS(3).AND.FS_BITS) .EQ. TEXT_BITS ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOTIFTEXT )
	   GOTO 9999
	ELSEIF ( INTARG(1).LT.0 .OR. INTARG(1).GT.'3FFFFFFF'X ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,'3FFFFFFF'X )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),0,13,FS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C WORD  <n>  <hex>	- set FS(<n>) to value <hex>
C
5000	IF ( INTARG(1).LT.1 .OR. INTARG(1).GT.4 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE,INTARG(1),1,4 )
	   GOTO 9999
	ENDIF
C
C read the hex value we are to use
C
	IF ( RDLHEX( NUMBER ) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 9999
	ENDIF
C
	IF ( NUMBER.LT.0 .OR. NUMBER.GT.MAXU2 ) THEN
	   CALL LSL_PUTMSG( IPATCH__HEXRANGE, NUMBER, 0, MAXU2 )
	   GOTO 9999
	ELSE
	   FS( INTARG(1) ) = SHORT
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C and return
C
9000	EDIT_FS_CMD = .FALSE.
9999	RETURN
	END
