C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-07-30 14:10:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE DELETE_MARK
C
***	IDENT	30JL86
***	MODULE	DELETE_MARK
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 28 July 1986
C
C to delete from a marked entry to the previous entry
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'	! for LPOSH, etc
	INCLUDE	'HERE:POINTERS.CMN'	! for MARKED_ENTRY,etc
	INCLUDE	'HERE:SWITCHES.CMN'	! for DONE_SCAN_FILE, etc
C
C functions
C
	LOGICAL		BINARY_CHOP	! to find an NF_PTR
C
C workspace
C
	INTEGER		LOW_NF		! first NF above that
	INTEGER		HIGH_NF		! last NF we're concerned with
C
C **********************************************************************
C check that we have marked the file
C
	IF ( MARKED_ENTRY.EQ.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__MARKDEL )
	   GOTO 9000
	ENDIF
C
C finally, check that we have an entry in hand to delete to, and that it
C is above the marked entry
C
	IF ( LPOSH.LE.MARKED_ENTRY ) THEN
	   CALL LSL_PUTMSG( IPATCH__DELORDER )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C so we can proceed with the deletion
C
	CALL IFFVOM
C
C and clear the mark - just the IFFLIB version for the moment
C
	CALL EIHMK(0)
C
C **********************************************************************
C do we need to adjust our record of NF positions?
C - if we have not scanned the file yet, then we needn't
C
	IF ( .NOT.DONE_SCAN_FILE ) GOTO 8000
C
C - similarly, if the deletion started above the region in which
C   PREVIOUS works, then we don't need to worry
C
	IF ( MARKED_ENTRY.GE.HIGHWATER ) GOTO 8000
C
C otherwise, determine which NF is above MARKED_ENTRY
C - firstly, find the one below...
C
	IF ( BINARY_CHOP( MARKED_ENTRY, LOW_NF ) ) THEN
	   DONE_SCAN_FILE = .FALSE.
	   GOTO 8000
	ENDIF
C
C - and is it that one or the next which we've deleted?
C   if LOW_NF points to the NF, then that's deleted, otherwise it's
C   the next one we're concerned with
C
	IF ( MARKED_ENTRY.GT.NF_PTR(LOW_NF) ) THEN
	   LOW_NF = LOW_NF+1
	ENDIF
C
C Is CURRENT_NF defined where we are, or are we above HIGHWATER?
C
C If we are above HIGHWATER, then we have just deleted the last section
C of the NF_PTR array
C
	IF ( LPOSH.GE.HIGHWATER ) THEN
	   LAST_NF = NF_PTR(LOW_NF)	       	! just truncate the array
	   GOTO 8000
	ENDIF
C
C otherwise, we may need to compress the array.
C Note that we are only deleting up to the previous NF, so check that
C this entry isn't an NF...
C
	IF ( CURRENT_ENTRY.EQ.0 ) THEN
	   HIGH_NF = CURRENT_NF-1
	ELSE
	   HIGH_NF = CURRENT_NF
	ENDIF
C
C and compress the NF_PTR array
C
	CALL COMPRESS_NF( LOW_NF, HIGH_NF )
C
C and check that we have our current entry in its correct perspective
C - force it to scan the whole 'feature'
C
	CURRENT_NF = -1
	CALL GET_FEATURE
C
C **********************************************************************
C come here to clear OUR version of the mark
C
8000	MARKED_ENTRY = 0
C
9000	RETURN
	END
