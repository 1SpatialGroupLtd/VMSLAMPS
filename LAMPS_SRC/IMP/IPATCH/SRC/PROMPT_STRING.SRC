	LOGICAL FUNCTION PROMPT_STRING( PT )
C
***	IDENT	11AU86
***	MODULE	PROMPT_STRING
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 1 August 1986
C
C function to prompt the user for a replacement coordinate for
C point PT of the current ST or ZS
C
C - returns FALSE if the value is successfully read in and changed,
C   or if they respond with nothing
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER		PT		! which point to change
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'HERE:ENTRY.CMN'
C
C functions
C
	LOGICAL		RDCHS		! to read a character
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		RDREAL		! to read a real number
	INTEGER*2	EXPAND		! to expand the prompt
	LOGICAL		CHECK_EOL	! check end of line for rubbish
C
C workspace
C
	LOGICAL		OK		! did call succeed?
	INTEGER		IERR		! error response
	BYTE		ICH		! read by RDCHS
	INTEGER		I		! for a DO loop
C
	INTEGER		COUNT		! the number of numbers to read
 	REAL		VAL(3)		! the numbers read
	CHARACTER*80	PROMPT		! the prompt itself
	INTEGER*2	LENGTH		! the size of the prompt
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_STRING = .FALSE.
C
C so work out how many numbers we want to read and compose the prompt
C
	IF ( IECODE.EQ.'ST' ) THEN
	   COUNT = 2
	   LENGTH = EXPAND('%WSPoint %I3 (was %F12.4, %F12.4) : ',
     &			PROMPT, PT, STBUF(1,PT),STBUF(2,PT) )
	ELSE
	   COUNT = 3
	   LENGTH = EXPAND('%WSPoint %I3 (was %F12.4, %F12.4, %F12.4) : ',
     &			PROMPT, PT, ZSBUF(1,PT),ZSBUF(2,PT),ZSBUF(3,PT) )
	ENDIF
C
C prompt the user
C
2000	IF ( READ_PROMPT( PROMPT(:LENGTH), ' ' ) ) THEN
	   PROMPT_STRING = .TRUE.		! failure
	   GOTO 9000
	ENDIF
C
C if they replied with a blank line, then use the current value
C
	IF ( RDCHS(ICH) ) GOTO 9000
C
C try to read the first number
C
	CALL BSCH
	IF ( RDREAL(VAL(1)) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 2000
	ENDIF
C
C and read the next number(s) - separating commas are optional, and
C will be ignored
C
	DO 4000 I = 2,COUNT
C
	   IF ( RDCHS(ICH) ) THEN
	      CALL LSL_PUTMSG( LSL__UNEXPEOL )	! unexpected end of line
	      GOTO 2000
	   ELSE
	      IF ( ICH.NE.',' ) CALL BSCH	! not a comma
	   ENDIF
C
	   IF ( RDREAL(VAL(I)) ) THEN
	      CALL LSL_PUTMSG(ERRNUM)
	      IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	      GOTO 2000
	   ENDIF
C
4000	CONTINUE
C
C and check the end of line for rubbish
C
	IF ( CHECK_EOL() ) GOTO 2000
C
C so we have the values - replace them in the appropriate buffer
C
	IF ( IECODE.EQ.'ST' ) THEN
	   DO 5200 I = 1,2
	      STBUF(I,PT) = VAL(I)
5200	   CONTINUE
	ELSE
	   DO 5300 I = 1,3
	      ZSBUF(I,PT) = VAL(I)
5300	   CONTINUE
	ENDIF
C
C and return
C
9000	RETURN
	END
