C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-14 01:13:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PROCESS
C
***	IDENT	14NO87
***	MODULE	PROCESS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 18 July 1986
C
C This function runs the dialogue with which the user inspects and
C patches the IFF file - it is thus the main part of the program
C
C It returns TRUE if a fatal error has occurred, and FALSE otherwise
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB error codes
	INCLUDE	'HERE:IPATCHMSG.PAR'		! local error codes
C
C common files
C
	INCLUDE	'HERE:FILES.CMN'		! filenames
	INCLUDE	'HERE:SWITCHES.CMN'		! program control
	INCLUDE	'HERE:ENTRY.CMN'		! for TEXT_DSC
	INCLUDE	'HERE:CPEDIT.CMN'		! for TYPE_OF_EDIT
C
C **********************************************************************
C functions
C - LSLLIB functions
C
	LOGICAL		RDCHS		! read a (significant) char
	INTEGER		RDCOMM		! read a command
C
C - local functions
C
	LOGICAL		READ_PROMPT	! read line with prompt
	LOGICAL		OBEY		! process a command
	LOGICAL		CHECK_EOL	! check for rubbish at eol
C
C **********************************************************************
C command tables
C
	EXTERNAL	MAIN_CMD_TABLE
C
C **********************************************************************
C workspace
C
	LOGICAL		OK		! function return
	INTEGER		IERR		! secondary return
	BYTE		ICH		! character read by RDCHS
	INTEGER		CMD		! command number from RDCOMM
C
C **********************************************************************
C and assume the worst
C
	PROCESS = .TRUE.
C
C set up the text buffer descriptor in /ENTRY/
C
	TEXT_DSC(2) = %LOC( TEXT_BUF )
C
C but we haven't had a fatal error yet
C
	FATAL_ERROR = .FALSE.
C
C we haven't done any CP edits yet
C
	TYPE_OF_EDIT = CP_NONE
C
C we haven't scanned the file for PREVIOUS yet, either
C
	DONE_SCAN_FILE = .FALSE.
C
C but scan the first part (up to the first NF)
C
	CALL SCAN_FILE		! scan file
	CALL GET_FEATURE	! and work out where we are
	CALL DISPLAY_ENTRY	! and tell the user
C                            
C **********************************************************************
C we start by prompting the user for a command...
C (note that ^Z will be treated as EXIT)
C
1000	IF ( READ_PROMPT( 'IPATCH> ', 'EXIT' ) ) GOTO 9999
C
C start at the beginning of the line returned, and read the first
C character from it. If there is nothing on the line (or only spaces
C or tabs), then ignore it and prompt again
C
	CALL BSLN
	IF ( RDCHS(ICH) ) GOTO 1000
C
C now check whether the first character is of significance, or whether
C it may be assumed to be the start of an ordinary command.
C
C we recognise the single character commands:
C
C		!	- comment - ignore this line
C   		*	- go to the start of the IFF file - this may be
C			  followed by another command on the same line
C		?	- show the current entry again
C		/	- enter EDIT mode - this may be followed by edit
C			  commands on the same line
C
	IF ( ICH.EQ.'!' ) THEN
C
	   GOTO 1000
C
	ELSEIF ( ICH.EQ.'*' ) THEN
C
	   CALL REWIND_FILE		! go back to start-of-file
	   CALL NEW_STATUS(.FALSE.)	! display where we are
	   IF ( RDCHS(ICH) ) GOTO 1000	! try rest of line as a command
C
 	ELSEIF ( ICH.EQ.'?' ) THEN
C
	   IF ( CHECK_EOL() ) GOTO 1000	! rubbish on line - ignore
	   CALL DISPLAY_ENTRY(.FALSE.)	! show current entry
 	   GOTO 2000
C
	ELSEIF ( ICH.EQ.'/' ) THEN
C
	   CALL EDIT_ENTRY
	   IF ( FATAL_ERROR ) THEN
	      GOTO 9999
	   ELSE
	      GOTO 2000
	   ENDIF
C
 	ENDIF
C
C otherwise, this should be an ordinary command, which we can now read
C - first unread the character we just looked at
C
	CALL BSCH
C
C read the command
C
	CMD = RDCOMM( MAIN_CMD_TABLE )
C
C a positive number means that we have a good command, otherwise we have
C some sort of error. Note that RDCOMM will already have output an error
C message
C
	IF ( CMD.LE.0 ) GOTO 1000  	! just get another command
C
C so we can call OBEY to process the command. It returns TRUE if we are
C to EXIT
C
 	IF ( OBEY(CMD) ) GOTO 9000
	IF ( FATAL_ERROR ) GOTO 9999
C
C update the current status lines, and then go back for another
C line of input from the user
C
2000	CALL NEW_STATUS(.FALSE.)
	GOTO 1000
C
C **********************************************************************
C successful exit arrives here
C
9000	PROCESS = .FALSE.		! all went well
C
C and errors join us here
C
9999	RETURN
	END
