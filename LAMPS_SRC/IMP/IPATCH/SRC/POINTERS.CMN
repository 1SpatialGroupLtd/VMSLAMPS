C
C Common file to facilitate us moving BACKWARDS in the IFF file
C
C **********************************************************************
C - pointers to NF entries
C
	INTEGER		MAX_FEATURES
	PARAMETER	(MAX_FEATURES=65535)
C
	INTEGER*4	NF_PTR( 0:MAX_FEATURES+1 )
	INTEGER		CURRENT_NF
	INTEGER		LAST_NF
	INTEGER*4	HIGHWATER
C
	COMMON /NF_POINTERS/ NF_PTR, CURRENT_NF,
     &			     LAST_NF, HIGHWATER
C
C MAX_FEATURES	is the maximum number of NF entries that we can distinguish
C		- thus an IFF file cannot have more NFs than this in it, if
C		  we are to move BACKWARDS in it. Note that this is also the
C		  maximum value that the ISN (internal sequence number) may
C		  have
C
C NF_PTR	the address of each NF entry in the IFF file
C		- note that NF_PTR(n) is -1 if the NF has been deleted
C
C	NF_PTR(0)		is always 0, meaning the start of file
C	NF_PTR(CURRENT_NF)	is the address of the CURRENT_NF'th NF
C	NF_PTR(LAST_NF+1)	is set to HIGHWATER
C
C CURRENT_NF	index into NF_PTR - an NF is current if we are at the
C		NF entry, or after it but before the next
C
C LAST_NF	how many NFs there are in the file
C		- set to 0 if there are none
C
C HIGHWATER	is the address above which PREVIOUS is not defined,
C		that is it is one word higher than the last address
C		that LPOSH can take and still do PREVIOUS
C		- if the whole file was successfully scanned, then it
C		  is set to LPOSE (end-of-file plus a word)
C		- if scanning was aborted, then it is set to the entry
C		  which came before the error, or the NF that failed,
C		  whichever is appropriate
C
C **********************************************************************
C - pointers to entries after the current NF
C
	INTEGER		MAX_ENTRIES
	PARAMETER	(MAX_ENTRIES=200)
C
	INTEGER*4	ENTRY_PTR( 0:MAX_ENTRIES )
	INTEGER*2	ENTRY_NAM( 0:MAX_ENTRIES )
	INTEGER		CURRENT_ENTRY
	INTEGER		LAST_ENTRY
	LOGICAL		AFTER_MAX_ENTRIES
C
	COMMON /ENTRY_POINTERS/ ENTRY_PTR, ENTRY_NAM,
     &				CURRENT_ENTRY, LAST_ENTRY,
     &				AFTER_MAX_ENTRIES
C
C MAX_ENTRIES	is the maximum number of entries that we can remember
C		after an NF (and before the next). The value of this
C		is purely arbitrary
C
C ENTRY_PTR	the address of each entry after the current NF
C		- ENTRY_PTR(0) is the address of the NF itself
C ENTRY_NAM	the 2 letter mnemonic for each entry
C		- as returned by IFFNXT
C		- ENTRY_NAM(0) is 'NF'
C
C CURRENT_ENTRY	which of the entries we are currently concerned with
C		- set to 0 if we are looking at the NF itself
C
C LAST_ENTRY	the number of the last entry in the list for this NF
C
C AFTER_MAX_ENTRIES	is true if the current entry is positioned
C		after the end of the list - ie its LPOSH is greater
C		than ENTRY_PTR(LAST_ENTRY), and LAST_ENTRY equals
C		MAX_ENTRIES
C
C **********************************************************************
C - other sorts of pointer
C
	INTEGER*4	MARKED_ENTRY
	LOGICAL*4	SKIPLF
C
	COMMON /OTHER_POINTERS/ MARKED_ENTRY,SKIPLF
C
C MARKED_ENTRY	is the address of an entry identified by the MARK command
C
