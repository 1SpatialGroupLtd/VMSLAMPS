C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-22 11:34:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION EDIT_TS_CMD
C
***	IDENT	22OC86
***	MODULE	EDIT_TS_CMD
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 21 October 1986
C
C to read and obey an edit command for the current TS entry
C returns TRUE on error
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
	INCLUDE	'HERE:USEFUL.PAR'	! for WANT_xxx, ranges
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'	! for command details
  	INCLUDE	'HERE:ENTRY.CMN'	! for entry details
	INCLUDE	'HERE:SWITCHES.CMN'	! for FATAL_ERROR
C
C command table
C
	EXTERNAL	EDIT_TS_CMD_TABLE
C
C functions
C
	INTEGER		RDCOMM		! read a command
	LOGICAL		RDLHEX		! read a hexadecimal number
C
C workspace
C
	INTEGER		CMD		! command number
	INTEGER*4	NUMBER		! number read
	INTEGER*2	SHORT		! short version of it
	EQUIVALENCE	(NUMBER,SHORT)
C
C **********************************************************************
C assume the worst
C
	EDIT_TS_CMD = .TRUE.
C
C so read the command
C
	CMD = RDCOMM( EDIT_TS_CMD_TABLE )
C
C check for an error
C
	IF ( CMD.LE.0 ) GOTO 9999		! give up
C
C otherwise, jump according to the command
C
	GOTO (	2000,	    		! TCC
     &		4300,4400,4500,		! POSI,TYPE,CATE
     &		5000			! WORD
     &	     ), CMD
C
C and if we come here, then complain
C
	CALL LSL_PUTMSG( IPATCH__NOSUCHCMD, CMD )
	CALL LSL_PUTMSG( IPATCH__REPORTLSL )
	FATAL_ERROR = .TRUE.
	GOTO 9999
C
C **********************************************************************
C TCC  <tcc>
C
2000	IF ( INTARG(1).GT.MAXI2 .OR. INTARG(1).LT.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1), 0, MAXI2 )
	   GOTO 9999
	ELSE
	   TS(1) = INTARG(1)
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C POSITON <value>	- set the text position code
C
4300	IF ( INTARG(1).LT.0 .OR. INTARG(1).GT.8 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,8 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),0,4,TS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C TYPE_STYLE	- set the type style
C
4400	IF ( INTARG(1).LT.0 .OR. INTARG(1).GT.3 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,3 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),4,2,TS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C CATEGORY  	- set the text category
C
4500	IF ( INTARG(1).LT.0 .OR. INTARG(1).GT.63 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE, INTARG(1),0,63 )
	   GOTO 9999
	ELSE
	   CALL LIB$INSV( INTARG(1),6,5,TS(3) )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C WORD  <n>  <hex>	- set TS(<n>) to value <hex>
C
5000	IF ( INTARG(1).LT.1 .OR. INTARG(1).GT.4 ) THEN
	   CALL LSL_PUTMSG( IPATCH__INTRANGE,INTARG(1),1,4 )
	   GOTO 9999
	ENDIF
C
C read the hex value we are to use
C
	IF ( RDLHEX( NUMBER ) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 9999
	ENDIF
C
	IF ( NUMBER.LT.0 .OR. NUMBER.GT.MAXU2 ) THEN
	   CALL LSL_PUTMSG( IPATCH__HEXRANGE, NUMBER, 0, MAXU2 )
	   GOTO 9999
	ELSE
	   TS( INTARG(1) ) = SHORT
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C and return
C
9000	EDIT_TS_CMD = .FALSE.
9999	RETURN
	END
