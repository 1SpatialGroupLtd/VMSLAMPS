	LOGICAL FUNCTION PROMPT_HEX2( PROMPT, VALUE )
C
***	IDENT	11AU86
***	MODULE	PROMPT_HEX2
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 31 July 1986
C
C function to prompt the user for a short hexadecimal integer
C - returns FALSE if the user answers with a valid number, or a carriage
C   return
C
	IMPLICIT NONE
C
C arguments
C
	CHARACTER*(*)	PROMPT		! what to ask with
	INTEGER*2	VALUE	    	! what to return
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
	INCLUDE	'HERE:USEFUL.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
C
C functions
C
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		RDLHEX		! to read a long integer
	LOGICAL		RDCHS		! read a character
	LOGICAL		CHECK_EOL	! check for rubbish on end of line
C
C workspace
C
	LOGICAL		OK		! did call succeed?
	INTEGER		IERR		! error response
	INTEGER*4	NUMBER		! to read into
	INTEGER*2	NUM		! short version
	EQUIVALENCE	(NUM,NUMBER)
	BYTE		ICH		! a character
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_HEX2 = .FALSE.
C
C so prompt the user
C
2000	IF ( READ_PROMPT( PROMPT, ' ' ) ) THEN
	   PROMPT_HEX2 = .TRUE.			! failure
	   GOTO 9000
	ENDIF
C
C did they reply with anything?
C
	IF ( RDCHS(ICH) ) GOTO 9000		! nothing - just return
	CALL BSCH
C
C try to read the number in
C
	IF ( RDLHEX(NUMBER) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 2000
	ENDIF
C
C check that it's within the unsigned integer range
C
	IF ( NUMBER.LT.0 .OR. NUMBER.GT.MAXU2 ) THEN
	   CALL LSL_PUTMSG( LSL__HADEXCP )
	   CALL LSL_ADDMSG( LSL__INTOVF )
	   GOTO 2000
	ENDIF
C
C and make sure that's everything on the line
C
	IF ( CHECK_EOL() ) GOTO 2000
C
C so we have the value - return it
C
	VALUE = NUM
C
C and return
C
9000	RETURN 
	END
