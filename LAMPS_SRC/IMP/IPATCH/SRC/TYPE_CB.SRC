C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-23 23:56:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE TYPE_CB( START, END )
C
***	IDENT	23DE87
***	MODULE	TYPE_CB
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author Clarke Brunt, 11 Nov 1986
C
C To output some/all of the contents of the current CB to the user
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
C
C common files
C
	INCLUDE	'HERE:ENTRY.CMN'	! contains the entry data
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'	! contains ACD info
C
C arguments
C
	INTEGER	START,END		! rows to output
C
C functions
C
	INTEGER	APPEND
C
C workspace
C
	INTEGER	I,J			! for DO loops
	INTEGER	S,T			! string lengths
	INTEGER	INDX			! index into CBD
	INTEGER	DTYPES(IFF_MAXCBCOL)	! datatypes stored per column	
	CHARACTER*(ACD_FORMAT_MAX+2) DFORMAT(IFF_MAXCBCOL)! data formats 
	INTEGER DFORMAT_LEN(IFF_MAXCBCOL) !length of data formats 
	CHARACTER*(ACD_NAME_MAX) DNAME(IFF_MAXCBCOL) ! names
	INTEGER DNAME_LEN(IFF_MAXCBCOL) !length of names
C
C **********************************************************************
C so write out the basic description of the entry
C
	CALL PRINT_CB( .FALSE. )
C
C check that we actually have any data - if CBH.NROW is too big, we don't
C
	IF ( CBH.NROW.GT.MAXPTS ) THEN
	   CALL LSL_PUTMSG( IPATCH__NOPTS )
	   GOTO 9000
	ENDIF
C
C and type the entry out
C
C first the fixed attributes
C
	IF (CBH.NATT.GT.0) CALL WRITEF('Fixed attributes:')
	DO 1000 I=1,CBH.NATT
C
C try to get a name for the AC from the ACD table
C
	   CALL ACDFND(CBH.ATT(I).ATTC,.FALSE.)
C
	   CALL EXPAND('   %S%[ %](%I5) = ',
     &			ACD_NAME(:ACD_NAME_LEN),
     &			ACD_NAME_MAX-ACD_NAME_LEN+1,
     &			CBH.ATT(I).ATTC)
	   IF (CBH.ATT(I).IATTV.EQ.IFF_ABSENT) THEN
	      IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	         CALL APPEND('""')
	      ELSE
	         CALL APPEND('?')
	      ENDIF
	   ELSE
	      IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) CALL APPEND('"')
	      CALL APPEND(ACD_FORMAT(:ACD_FORMAT_LEN),CBH.ATT(I).IATTV)
	      IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) CALL APPEND('"')
	   ENDIF
	   CALL TTWLIN
1000	CONTINUE
C
C now the data points
C
	CALL WRITEF('Data points:')
C
	DO 2000 I = 1,CBH.NCOL
	   CALL ACDFND(CBH.COLH(I),.FALSE.)
	   DNAME(I) = ACD_NAME
	   DNAME_LEN(I) = ACD_NAME_LEN
	   IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	      DFORMAT(I) = '"'//ACD_FORMAT(:ACD_FORMAT_LEN)//'"'
	      DFORMAT_LEN(I) = ACD_FORMAT_LEN+2
	   ELSE
	      DFORMAT(I) = ACD_FORMAT
	      DFORMAT_LEN(I) = ACD_FORMAT_LEN
	   ENDIF
	   DTYPES(I) = ACD_DATA_TYPE
2000	CONTINUE
C
	CALL EXPAND('    ')
	S = 5
	T = 5
	DO 3000 I = 1,CBH.NCOL
	   CALL APPEND('%[ %]',T-S)	! add at least one space
	   S = APPEND('%S (%N)',DNAME(I)(:DNAME_LEN(I)),CBH.COLH(I))
	   T = T+15
3000	CONTINUE
	CALL TTWLIN
C
	INDX = (START-1)*CBH.NCOL
	DO 4000 I = START,END
	   CALL EXPAND('%I3: ',I)
	   S = 5
	   T = 5
	   DO 3500 J = 1,CBH.NCOL
	      INDX = INDX+1
	      IF (S.LT.T) CALL APPEND('%[ %]',T-S)
	      IF (CBD(INDX).EQ.IFF_ABSENT) THEN
	         IF (DTYPES(J).EQ.ACD_DATATYPE_C) THEN
	            CALL APPEND('""')
	         ELSE
	            CALL APPEND('?')
	         ENDIF
	      ELSE
	         CALL APPEND(DFORMAT(J)(:DFORMAT_LEN(J)),CBD(INDX))
	      ENDIF
	      S = APPEND(' ')
	      T = T+15
3500	   CONTINUE
	   CALL TTWLIN
4000	CONTINUE
C
9000	RETURN
	END
