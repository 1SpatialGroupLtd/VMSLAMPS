C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-10-17 13:15:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY( CMD )
C
***	IDENT	17OC89
***	MODULE	OBEY
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 18 July 1986
C
C This function obeys the appropriate command, according to the command
C number in CMD
C
C It returns TRUE if that command was EXIT
C
CMOD 	Added CB entry in command list to cure problem with LINE command not
C	being recognised.		APB 17-Oct-1989
C
	IMPLICIT NONE
C
C argument
C
	INTEGER		CMD		! the command number
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
C
C common files
C
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'	! for CMDFST
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'	! for LPOSH
	INCLUDE	'HERE:FILES.CMN'	! for FRT name
	INCLUDE	'HERE:SWITCHES.CMN'	! for DONE_SCAN_FILE
	INCLUDE	'HERE:POINTERS.CMN'	! for HIGHWATER
	INCLUDE	'HERE:ENTRY.CMN'	! for xxx_BITS
C
C functions
C
	LOGICAL		CHECK_EOL	! check for rubbish at eol
	LOGICAL		READ_WILD_INT4	! read a (wildcard?) integer
	INTEGER		GETFILNAM	! read a filename
C
C workspace
C
	LOGICAL		IS_WILD		! true if integer is wildcarded
	INTEGER		OK
C
C **********************************************************************
C assume that the command is not EXIT
C
	OBEY = .FALSE.
C
C so perform the appropriate leap
C
	GOTO (
     &		10010, 10020, 10030,			! NEXT,PREV,TYPE
     &		10035,					! LIST
     &		10040, 10050, 10060,			! FIND,EOF ,MARK
     &		10070,					! RETURN
     &		20010, 20020, 20030,			! STAT,HELP,EXPL
     &		20050, 20060,				! DELE,DISP
     &		20070, 20080, 20090,			! TO  ,EXIT,REVI
     &		20095,					! FRT
     &		30000, 30000, 30000, 30000, 30000,	! RA,HI,MH,MD,CC
     &		30000, 30000, 30000, 30000, 30000,	! CP,EF,EO,EM,EJ
     &		30000, 30000, 30000, 30000,		! CB,JB,SH,JP
     &		30000, 30000, 30000, 30000, 30000,	! NS,TH,RO,TX,TC
     &		30000, 30000, 30000, 30000, 30000,	! CH,SS,SL,VO,FS
     &		30000, 30000, 30000, 30000, 30000,	! TS,AC,NO,ST,ZS
     &		30000, 30000,				! NF,CS
     &		40070, 40080, 40090			! TEXT,SYMB,LINE
     &	     ), CMD
C
C and if it's not there, then complain and force an exit
C
	CALL LSL_PUTMSG( IPATCH__NOSUCHCMD, CMD )
	CALL LSL_PUTMSG( IPATCH__REPORTLSL )
	FATAL_ERROR = .TRUE.
	GOTO 99999
C
C **********************************************************************
C positioning commands
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C NEXT [<arg>]		- (1) move to the next entry
C			- (2) move to the <arg>th entry
C			- (3) move to the last entry (ie NEXT *)
C
C if DISPLAY is ON, then we will reflect each entry as we move over it
C
10010	ARGMSG = READ_WILD_INT4( INTARG(1), IS_WILD )
C
 	IF ( CHECK_EOL() ) GOTO 99999
C
	CALL PRINT_NEXT_ENTRY( IS_WILD )
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C PREVIOUS [<arg>]	- (1) move to the previous entry
C			- (2) move to the <arg>th previous entry
C
10020	IF ( CHECK_EOL() ) GOTO 99999
C
C if we are above where we had scanned before, then scan to above our
C current position to allow backwards movement
C
	IF ( .NOT.DONE_SCAN_FILE .OR. LPOSH.GE.HIGHWATER ) THEN
 	   CALL SCAN_FILE
	   CALL GET_FEATURE		! get our current posn
	ENDIF
C
	CALL PREVIOUS_ENTRY
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C TYPE [<arg>]		- (1) type the contents of this entry
C			- (2) type the contents of this and the next
C			      <arg> entries - similar to NEXT <arg>
C			- (3) type the rest of the entries (ie TYPE *)
C
C effect depends on whether the entry has any internal structure
C
10030	ARGMSG = READ_WILD_INT4( INTARG(1), IS_WILD )
C
 	IF ( CHECK_EOL() ) GOTO 99999
C
	CALL TYPE_NEXT_ENTRY( IS_WILD )
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C LIST [<arg>] [<arg>]	- list the contents of an ST or ZS or CB
C
10035	IF ( CHECK_EOL() ) GOTO 99999
	CALL LIST_ENTRY
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C FIND [<sign>] <arg>	- (1) move to address <arg> in the IFF file
C			- (2) if <sign> is +, move forwards  by <arg>
C			- (3) if <sign> is -, move backwards by <arg>
C
10040	CALL FIND_POSITION
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C EOF	    		- move to the end-of-file address
C
10050	IF ( CHECK_EOL() ) GOTO 99999
	CALL GOTO_EOF
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C MARK			- mark the current entry
C
10060	IF ( CHECK_EOL() ) GOTO 99999
	CALL MARK_ENTRY
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C RETURN		- go back to the last MARKed entry
C
10070	IF ( CHECK_EOL() ) GOTO 99999
	CALL GOTO_MARK
	GOTO 99999
C
C **********************************************************************
C miscellaneous commands
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C STATUS <on/off>	- (1) repeat the information normally shown on
C			      the status lines
C			- (2) turn the status lines on or off
C
20010	IF ( CHECK_EOL() ) GOTO 99999
	CALL STATUS
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C HELP {rest of line}	- consult the help library for IPATCH
C			- note that any rubbish is legal after this!
C
20020	CALL HELP			! (help!)
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C EXPLAIN		- elucidate the current entry
C
20030	IF ( CHECK_EOL() ) GOTO 99999
	CALL DISPLAY_ENTRY(.TRUE.)
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C DELETE <what>		- (1) delete the current entry
C			- (2) delete the marked entry and all entries until
C			      the entry before the current one
C
20050	IF ( CHECK_EOL() ) GOTO 99999
	CALL DELETE_ENTRY
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C DISPLAY <what>	- (1) display entries passed during NEXT <arg>
C			- (2) don't display entries during NEXT <arg>
C
20060	IF ( CHECK_EOL() ) GOTO 99999
	CALL SET_DISPLAY
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C TO <what> {arg}	- convert from one datatype to another
C
20070	CALL CONVERT
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C EXIT	     		- leave the program
C
20080	IF ( CHECK_EOL() ) GOTO 99999
	OBEY = .TRUE.
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C REVISION_LEVEL <arg>	- set input revision level
C
20090	IF ( CHECK_EOL() ) GOTO 99999
	IF (ABS(INTARG(1)).GT.1) THEN
	   CALL LSL_PUTMSG(IPATCH__BADREV, INTARG(1))
	ELSE
	   INPUT_REVISION = INTARG(1)
	   CALL IFFIRV(INPUT_REVISION)	! set new level
	   CALL THIS_ENTRY		! and verify the entry
	ENDIF
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C FRT filename - read new FRT file
C
20095	OK = GETFILNAM(FRTNAM,FRTLEN,'LSL$FRT:.FRT',.TRUE.)
	IF (.NOT.OK) THEN
	   CALL LSL_PUTMSG(OK)
	ELSE
 	   IF ( CHECK_EOL() ) GOTO 99999
	   IF (LOG) CALL LSL_PUTMSG(IPATCH__READINGFRT,FRTNAM(:FRTLEN))
	   CALL FRTINI(FRTNAM(:FRTLEN))
	   CALL THIS_ENTRY	! verify entry (in case altered)
	ENDIF
	GOTO 99999
C
C **********************************************************************
C entry mnemonics
C  
C +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
C - entries with no arguments, or which have their arguments read for us
C   by RDCOMM, are simple to deal with...
C
C	 RA		- range
C	 HI		- history record
C	 MH		- map header
C	 MD		- map descriptor
C	 CC		- cubic coefficients
C	 CP		- corner points
C	 EF		- end of feature
C	 EO		- end of overlay
C	 EM		- end of map
C	 EJ		- end of job
C	 CB		- coordinate block
C
C	 NS "text"	- new section
C	 TH  hgt	- text height
C	 RO  ang	- rotation
C	 TX "text"	- text
C	 TC "text"	- obsolete - transmitted comment
C	 CH "text"	- obsolete - literal characters
C	 SS  sym	- obsolete - symbol select
C	 SL  lib	- obsolete - symbol library select
C	 VO  siz 	- void
C
C - the junction entries may be dealt with specially in a future version,
C   but for the moment, just join up with the simple entries
C
C	 JB ??? - junction block
C	 SH ??? - section header
C	 JP ??? - junction pointer
C
C - and then entries which can have wildcarded numbers - we read them
C   for ourselves
C
C	 FS  fc  hex hex hex		- feature status
C	 TS  tcc hex hex hex		- text component status
C	 AC  typ cod "text"		- ancillary code
C	 NO  lyr 000 EOptr		- new overlay
C	 ST  pts pen			- string
C	 ZS  pts pen			- 3d ditto
C	 NF  fsn isn			- new feature
C	 CS  hgt spc	     - obsolete - character size and spacing
C
30000	CALL SEARCH_ENTRY(CMDFST)
	GOTO 99999
C
C **********************************************************************
C the following commands are not strictly entry names, but they select
C out particular parts of entries
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C TEXT			- select FS with text bit set
C
40070	IF ( CHECK_EOL() ) GOTO 99999
	CALL MATCH_FS_BITS( TEXT_BITS )
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C SYMBOL		- select FS with symbol bit set
C
40080	IF ( CHECK_EOL() ) GOTO 99999
	CALL MATCH_FS_BITS( SYMBOL_BITS )
	GOTO 99999
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C LINE			- select FS with neither bit set
C
40090	IF ( CHECK_EOL() ) GOTO 99999
	CALL MATCH_FS_BITS( LINE_BITS )
	GOTO 99999
C
C **********************************************************************
C and return to our caller, presumably to get another command from the user
C
99999	RETURN
	END
