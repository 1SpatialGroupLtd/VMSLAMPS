C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-20 15:13:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REPLACE_STRING
C
***	IDENT	20DE87
***	MODULE	REPLACE_STRING
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 1 August 1986
C
C to replace the current ST, ZS, or CB entry - this involves VOiding it
C and writing back into the same space
C
C - we need to do this if:
C
C		1) we have changed the NUMBER of points, by deleting
C		   some of them
C		2) we have changed IENDS
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'	! for IFF errors, etc
	INCLUDE	'HERE:POINTERS.CMN'	! for MARKED_ENTRY,etc
	INCLUDE	'HERE:ENTRY.CMN'	! for entry data
C
C functions
C
	LOGICAL		MOVE_TO_ADDRESS
C
C workspace
C
 	INTEGER		POSN	    	! where we are now
	INTEGER*2	ENTRY		! and what we are
C
C **********************************************************************
C remember our current position, and what we are
C
	POSN  = LPOSH
	ENTRY = IECODE
C
C and proceed with deleting the current entry (ST or ZS)
C - mark this entry, move to the next, and delete from the mark
C
	CALL EIHMK(1)
	CALL IFFNXT( IECODE,IELEN )
C
C if we get an error, give up the whole thing
C
	IF ( IERCD.NE.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__NEXTDEL )
	   GOTO 9000
	ENDIF
C
C do the deletion
C
	CALL IFFVOM
C
C now, we can write the new version of the ST/ZS/CB out, but only if we
C have any points left in it (no point in trying to write a zero length
C ST/ZS/CB!)
C
	IF ( ENTRY.EQ.'CB' ) THEN
	   IF ( CBH.NROW.EQ.0 ) THEN
	      ENTRY = 'VO'		! for when we move back to it
	   ELSE
	      CALL IFFCB( CBH, CBD )		! insert new CB
	   ENDIF
	ELSE
	   IF ( NPTS.EQ.0 ) THEN
	      ENTRY = 'VO'		! for when we move back to it
	   ELSEIF ( ENTRY.EQ.'ST' ) THEN
	      CALL IFFST( STBUF, NPTS, IENDS )	! insert new ST
	   ELSE
	      CALL IFFZS( ZSBUF, NPTS, IENDS )	! insert new ZS
	   ENDIF
	ENDIF
C
C and move back to get it into hand again
C
	CALL MOVE_TO_ADDRESS( POSN, ENTRY, IPATCH__HANDST, .FALSE. )
C
C and we can remove the mark
C
 	CALL EIHMK(0)
C
C **********************************************************************
C we now want to reinstate any previous mark
C - was there one?
C
	IF ( MARKED_ENTRY.EQ.0 ) GOTO 9000
C
C yes, so move back to that entry
C - if this fails, then give up on the mark and just get back to our
C   current entry
C
	IF ( MOVE_TO_ADDRESS( MARKED_ENTRY,0,
     &	     	 	IPATCH__REMARK,.FALSE.) ) THEN
	   CALL LSL_ADDMSG( IPATCH__UNMARK )
	   MARKED_ENTRY = 0
	ELSE
	   CALL EIHMK(1)		! otherwise, mark it
	ENDIF
C
C and return to our ST/ZS/CB
C
	CALL MOVE_TO_ADDRESS( POSN, ENTRY, IPATCH__RETST, .FALSE. )
C
C **********************************************************************
C and rescan our current feature to work out where we are
C
9000	CALL GET_FEATURE
C
	RETURN
	END
