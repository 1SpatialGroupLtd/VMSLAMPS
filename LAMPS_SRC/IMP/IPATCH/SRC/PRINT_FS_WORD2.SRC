C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-13 08:50:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PRINT_FS_WORD2( WORD )
C
***	IDENT	13AU86
***	MODULE	PRINT_FS_WORD2
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 21 July 1986
C
C To output the contents of the current FS's second word to the user
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	WORD		! the word to explain
C
C **********************************************************************
C workspace
C
	INTEGER		BIT		! result of extraction
C
C function
C
	INTEGER		LIB$EXTZV	! extract bit field
C
C **********************************************************************
C work through the bit fields in the word, explaining each one as we
C reach it (as defined in the LAPROCESS documentation)
C
	BIT = LIB$EXTZV( 0, 1, WORD )
	CALL EXPAND('	CLOSED   = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(feature is closed)')
	ELSE
	   CALL WRITAP('0	(feature is open)')
	ENDIF
C
	BIT = LIB$EXTZV( 1, 1, WORD )
 	CALL EXPAND('	NOTEDGE  = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(feature is a line, not an edge)')
	ELSE
	   CALL WRITAP('0	(feature is an edge, not a line)')
	ENDIF
C
	BIT = LIB$EXTZV( 2, 1, WORD )
	CALL EXPAND('	REVERSE  = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(feature is reversed)')
	ELSE
	   CALL WRITAP('0	(feature is not reversed)')
	ENDIF
C
	BIT = LIB$EXTZV( 3, 1, WORD )
	CALL EXPAND('	TWOPART  = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(feature is two-part)')
	ELSE
	   CALL WRITAP('0	(feature is not two-part)')
	ENDIF
C
	BIT = LIB$EXTZV( 4, 1, WORD )
	CALL EXPAND('	PAINTOUT = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(feature is for paintout only)')
	ELSE
	   CALL WRITAP('0	(feature is not paintout - keep it)')
	ENDIF
C
	BIT = LIB$EXTZV( 5, 1, WORD )
	CALL EXPAND('	SQUARE   = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(squaring flag set)')
	ELSE
	   CALL WRITAP('0	(squaring flag clear)')
	ENDIF
C
	BIT = LIB$EXTZV( 6, 1, WORD )
	CALL EXPAND('	INVERSE  = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(inverse polarity used)')
	ELSE
	   CALL WRITAP('0	(normal polarity)')
	ENDIF
C
C and then a gap, until we have...
C
	BIT = LIB$EXTZV( 15, 1, WORD )
	CALL EXPAND('	SUPPRESS = ')
	IF ( BIT.NE.0 ) THEN
	   CALL WRITAP('1	(paintout suppress used)')
	ELSE
	   CALL WRITAP('0	(no paintout suppress)')
	ENDIF
C
	RETURN
	END
