	LOGICAL FUNCTION PROMPT_CB( PT )
C
***	IDENT	23DE87
***	MODULE	PROMPT_CB
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 20 December 1987
C
C function to prompt the user for a replacement coordinate for
C point PT of the current CB
C
C - returns FALSE if the value is successfully read in and changed,
C   or if they respond with nothing
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER		PT		! which point to change
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'HERE:ENTRY.CMN'
	INCLUDE	'LSL$CMNFRT:FRTACD.CMN'
C
C functions
C
	LOGICAL		RDCHS		! to read a character
	LOGICAL		READ_PROMPT	! to read a reply
	LOGICAL		READ_WILD_ACVAL	! to read a value
	INTEGER		EXPAND		! to expand the prompt
	LOGICAL		CHECK_EOL	! check end of line for rubbish
C
C workspace
C
	BYTE		ICH		! read by RDCHS
	INTEGER		COL		! for a DO loop
C
	CHARACTER*80	PROMPT		! the prompt itself
	INTEGER		PLEN		! the size of the prompt
	INTEGER		INDX
	CHARACTER*(ACD_FORMAT_MAX+4) DFORMAT ! data formats 
	INTEGER 	DFORMAT_LEN	! length of data format
	LOGICAL		WILD		! want wildcard?
	INTEGER		IVAL		! new value
C
C **********************************************************************
C assume that we succeed
C
	PROMPT_CB = .FALSE.
C
C for each column of this row...
C
	DO 8000 COL=1,CBH.NCOL
C
C compose the prompt
C
	   CALL ACDFND(CBH.COLH(COL),.FALSE.)
	   IF ( ACD_DATA_TYPE.EQ.ACD_DATATYPE_C ) THEN
	      DFORMAT = '%W"'//ACD_FORMAT(:ACD_FORMAT_LEN)//'"'
	      DFORMAT_LEN = ACD_FORMAT_LEN+4
	   ELSE
	      DFORMAT = '%W'//ACD_FORMAT
	      DFORMAT_LEN = ACD_FORMAT_LEN+2
	   ENDIF
C
	   INDX = (PT-1)*CBH.NCOL + COL
	   PLEN = EXPAND( '%WPoint %I3 %S (%N) (was ',
     &			%REF(PROMPT), PT,
     &			ACD_NAME(:ACD_NAME_LEN),
     &			CBH.COLH(COL) )
	   IF ( CBD(INDX).EQ.IFF_ABSENT ) THEN
	      IF ( ACD_DATA_TYPE.EQ.ACD_DATATYPE_C ) THEN
	         PLEN = PLEN + EXPAND( '%W""', %REF(PROMPT(PLEN+1:)) )
	      ELSE
	         PLEN = PLEN + EXPAND( '%W?', %REF(PROMPT(PLEN+1:)) )
	      ENDIF
	   ELSE
	      PLEN = PLEN + EXPAND(
     &		DFORMAT(:DFORMAT_LEN), %REF(PROMPT(PLEN+1:)), CBD(INDX))
	   ENDIF
	   PLEN = PLEN + EXPAND( '%W) : ', %REF(PROMPT(PLEN+1:)) )
C
C prompt the user
C
2000	   IF ( READ_PROMPT( PROMPT(:PLEN), ' ' ) ) THEN
	      PROMPT_CB = .TRUE.			! failure
	      GOTO 9000
	   ENDIF
C
C if they replied with a blank line, then use the current value
C
	   IF ( RDCHS(ICH) ) GOTO 8000
C
C try to read the value
C
	   CALL BSCH
	   WILD = .FALSE.			! don't want wildcard
	   IF ( READ_WILD_ACVAL( IVAL, CBH.COLH(COL), WILD ) ) GOTO 2000
C
C and check the end of line for rubbish
C
	   IF ( CHECK_EOL() ) GOTO 2000
C
C so we have the value - replace it in the buffer
C
	   CBD(INDX) = IVAL
C
8000	CONTINUE
C
C and return
C
9000	RETURN
	END
