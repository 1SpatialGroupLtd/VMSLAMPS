C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-14 14:18:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE EDIT_STRING
C
***	IDENT	14AU86
***	MODULE	EDIT_STRING
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 1 August 1986
C
C to edit the current ST or ZS entry
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE	'HERE:IPATCHMSG.PAR'	! for error numbers
C
C common files
C
	INCLUDE	'LSL$CMNLSL:EXCEPTION.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'	! for command details
  	INCLUDE	'HERE:ENTRY.CMN'	! for entry details
	INCLUDE	'HERE:SWITCHES.CMN'	! for FATAL_ERROR
C
C command table
C
	EXTERNAL	EDIT_ST_CMD_TABLE
C
C functions
C
	LOGICAL		RDCHS		! read a character
	LOGICAL		RDHEX		! read a hex number
	INTEGER		RDCOMM		! read a command
	LOGICAL		EDIT_ST_CHANGE	! change points
	LOGICAL		EDIT_ST_DELETE	! or delete them
	LOGICAL		CHECK_EOL	! check for rubbish at eol
C
C workspace
C
	BYTE		ICH		! single character
	INTEGER		CMD		! command number
	INTEGER*2	NUMBER		! the number read
C
C **********************************************************************
C check if we have anything on the rest of this line
C - if there's nothing, then remind the user that strings can only
C   be edited with specific commands
C
	IF ( RDCHS(ICH) ) THEN
	   CALL LSL_PUTMSG( IPATCH__STEDIT )
	   GOTO 9000
	ENDIF
C
C **********************************************************************
C otherwise, unread that character and read the command
C
	CALL BSCH
	CMD = RDCOMM( EDIT_ST_CMD_TABLE )
C
C check for an error
C
	IF ( CMD.LE.0 ) GOTO 9000		! give up
C
C otherwise, jump according to the command
C
	GOTO ( 2000, 2100, 2200 ), CMD
C
C and if we come here, then complain
C
	CALL LSL_PUTMSG( IPATCH__NOSUCHCMD, CMD )
	CALL LSL_PUTMSG( IPATCH__REPORTLSL )
	FATAL_ERROR = .TRUE.
	GOTO 9000
C
C **********************************************************************
C PEN  <hex>  	- change IENDS
C		- we have to read the hexadecimal value in ourselves
C
2000	IF ( RDHEX(NUMBER) ) THEN
	   CALL LSL_PUTMSG(ERRNUM)
	   IF ( ERRNUM.EQ.LSL__HADEXCP ) CALL LSL_ADDMSG(LSL_EXCP)
	   GOTO 9000
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C so change IENDS, and write it out
C
	IENDS = NUMBER
	CALL REPLACE_STRING
C
C and reflect the change
C
	CALL DISPLAY_ENTRY(.FALSE.)
C
 	GOTO 9000
C
C **********************************************************************
C CHANGE	- change a range of coordinates
C		- firstly, check that we have a definition of what
C		  to change (we don't insist if NPTS=1 !)
C
2100	IF ( CMDICT.EQ.0 ) THEN
	   IF ( NPTS.EQ.1 ) THEN
	      CMDICT = 1
	      INTARG(1) = 1		! obviously, must be CHANGE 1
	   ELSE
	      CALL LSL_PUTMSG( IPATCH__STCHANGE )
	      GOTO 9000
	   ENDIF
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C so prompt the user for the new values, and change them
C
	IF ( EDIT_ST_CHANGE() ) GOTO 9000
C
C and output the string again
C
	IF ( IECODE.EQ.'ST' ) THEN
	   CALL EIHWR( STBUF, NPTS*2, 1 )
	ELSE
	   CALL EIHWR( ZSBUF, NPTS*3, 1 )
	ENDIF
C
C and reflect the change
C
	CALL DISPLAY_ENTRY(.FALSE.)
C
	GOTO 9000
C
C **********************************************************************
C DELETE	- delete a range of coordinates
C		- firstly, check that we have a definition of what
C		  to change (we don't insist if NPTS=1 !)
C
C
2200	IF ( CMDICT.EQ.0 ) THEN
	   IF ( NPTS.EQ.1 ) THEN
	      CMDICT = 1
	      INTARG(1) = 1		! obviously, must be DELETE 1
	   ELSE
	      CALL LSL_PUTMSG( IPATCH__STDELETE )
	      GOTO 9000
	   ENDIF
	ENDIF
C
	IF ( CHECK_EOL() ) GOTO 9000
C
C otherwise, squash the buffer in the appropriate manner
C
	IF ( EDIT_ST_DELETE() ) GOTO 9000
C
C and output the new ST or ZS instead of the old
C
	CALL REPLACE_STRING
C
C and reflect the change
C
	CALL DISPLAY_ENTRY(.FALSE.)
C
	GOTO 9000
C
C **********************************************************************
C and that's it
C
9000	RETURN
	END
