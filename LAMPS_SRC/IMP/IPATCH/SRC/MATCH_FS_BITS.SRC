C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-17 10:50:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	LOGICAL FUNCTION MATCH_FS_BITS( BITS_WANTED )
C
***	IDENT	17DE86
***	MODULE	MATCH_FS_BITS
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 25 July 1986
C
C to look for the next FS entry with the required text/symbol bits
C - returns FALSE if we find one, TRUE if we don't
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*2	BITS_WANTED	! the relevant text/symbol bits
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error numbers
C
C common files
C
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! for LPOSH
	INCLUDE	'HERE:ENTRY.CMN'		! for entry data
C
C functions
C
	LOGICAL		SEARCH_SIMPLE		! do our search
C
C workspace
C
	INTEGER*4   	POSN		! old entry's position
	INTEGER*2	ENTCOD		! copy of IECODE
C
C **********************************************************************
C assume the search works
C
	MATCH_FS_BITS = .FALSE.
C
C check that we aren't already at the end of file
C
	IF ( LPOSH.EQ.LPOSE ) THEN
	   CALL LSL_PUTMSG( IPATCH__SEARCHEOF )
	   MATCH_FS_BITS = .TRUE.
	   GOTO 9999
	ENDIF
C
C and remember where we are now
C
	POSN   = LPOSH
	ENTCOD = IECODE
C
C **********************************************************************
C and look for the next FS entry
C
4000	IF ( SEARCH_SIMPLE( %REF('FS') ) ) GOTO 8000
C
C and read the entry in
C
	CALL READ_ENTRY
C
C check the relevant bits in FS word 3
C
	IF ( (FS(3).AND.FS_BITS) .EQ. BITS_WANTED ) THEN
	   GOTO 9000
	ELSE
	   GOTO 4000
	ENDIF
C
C **********************************************************************
C and report if we can't find it
C
8000	MATCH_FS_BITS = .TRUE.
C
 	CALL EXPAND('%%IPATCH-W-FSBITS, cannot find ')
C
	IF ( BITS_WANTED.EQ.TEXT_BITS ) THEN
	   CALL APPEND('text')
	ELSEIF ( BITS_WANTED.EQ.SYMBOL_BITS ) THEN
	   CALL APPEND('symbol')
	ELSE
	   CALL APPEND('linear')
	ENDIF
C
	CALL WRITAP(' FS')
C
C and the search failed, so we must return to the entry
C that was current before we started it
C
	CALL MOVE_TO_ADDRESS( POSN, ENTCOD, IPATCH__NOSEARCH, .FALSE. )
C
C **********************************************************************
C regardless, ensure that we have the entry in its correct relationship
C to the current feature, and display it to the user
C
9000	CALL GET_FEATURE
9999	CALL DISPLAY_ENTRY(.FALSE.)
C
	RETURN
	END
