C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-06 12:20:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE NEXT_ENTRY( FOREVER, SPAN, TYPE_IT )
C
***	IDENT	06NO86
***	MODULE	NEXT_ENTRY
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 18 July 1986
C
C To read in the next entry in the IFF file, and display it to
C the user
C
	IMPLICIT NONE
C
C arguments
C
	LOGICAL		FOREVER		! true if to "next" to last entry
	INTEGER		SPAN		! number of times to "next"
	LOGICAL		TYPE_IT		! true if to TYPE rather than PRINT
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error numbers
C
C common files
C
 	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! IFF errors, etc
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'		! RDCOMM common
 	INCLUDE	'HERE:ENTRY.CMN'		! for IECODE,IELEN
	INCLUDE	'HERE:POINTERS.CMN'		! for CURRENT_ENTRY
	INCLUDE	'HERE:SWITCHES.CMN'		! for BACKWARD
C
C workspace
C
	INTEGER		I		! DO loop variable
C
C **********************************************************************
C so read the appropriate number of NEXT entries
C - start with the first one...
C
	I = 1
2000	CONTINUE
C
C	 if they try to NEXT off the end of the file, then
C	 don't let them. However, if they were going FOREVER,
C	 we don't need to complain, as this is just our termination
C	 condition
C
	   IF ( LPOSH.EQ.LPOSE ) THEN
	      IF (.NOT.FOREVER) CALL LSL_PUTMSG( IPATCH__NEXTEOF )
	      GOTO 9000
	   ENDIF
C
C	 and go to the next entry
C
	   CALL IFFNXT( IECODE, IELEN )
C
C	 check that there was no error - if there was,
C	 then give up at once
C
	   IF ( IERNM.NE.1 .OR. IERCD.NE.0 ) THEN
	      IF ( I.EQ.1 ) THEN
		 IF ( TYPE_IT ) THEN
	            CALL LSL_PUTMSG( IPATCH__TYPEONE )
		 ELSE
	            CALL LSL_PUTMSG( IPATCH__NEXTONE )
		 ENDIF
	      ELSE
		 IF ( TYPE_IT ) THEN
	            CALL LSL_PUTMSG( IPATCH__TYPEERR, I )
		 ELSE
	            CALL LSL_PUTMSG( IPATCH__NEXTERR, I )
		 ENDIF
	      ENDIF
	      GOTO 9000
	   ENDIF
C
C	 otherwise, we may want to display the entry
C	 - if TYPE_IT, then we TYPE every entry we pass through
C   	 - if DISPLAY is ON, then we DISPLAY all entries we
C	   pass through
C	 - regardless, the displaying of the last one of our SPAN
C	   is left for later
C
 	   IF ( I.NE.SPAN ) THEN
	      IF ( TYPE_IT ) THEN
		 CALL TYPE_ENTRY
	      ELSEIF ( DISPLAY ) THEN
		 CALL DISPLAY_ENTRY(.FALSE.)
	      ENDIF
	   ENDIF
C
C	 and if we are supporting backwards movement, try to keep
C	 track of where we are.
C	 - if this entry is above HIGHWATER, then we can't do anything,
C	   (presumably FIND was used to get us up here initially)
C	 - if this entry is an NF, then we have reached a new 'feature',
C	   and must scan it
C	 - if we have not yet reached MAX_ENTRIES for this 'feature',
C	   then we can just count the entry
C	 - if we have already counted MAX_ENTRIES, and we have not
C	   set AFTER_MAX_ENTRIES, then we must call the relevant routine
C	   to tell the user and to set the flag
C
	   IF ( DONE_SCAN_FILE .AND. LPOSH.LE.HIGHWATER ) THEN
C
	      IF ( IECODE.EQ.'NF' ) THEN
		 CALL SCAN_FILE			! locate the NF
		 CALL GET_FEATURE		! and prime ENTRY_PTR
C
	      ELSEIF ( CURRENT_ENTRY.LT.MAX_ENTRIES ) THEN
		 CURRENT_ENTRY = CURRENT_ENTRY+1
C
	      ELSEIF ( CURRENT_ENTRY.GE.MAX_ENTRIES ) THEN
		 IF (.NOT.AFTER_MAX_ENTRIES) THEN
		    CALL TOO_MANY_ENTRIES
		    AFTER_MAX_ENTRIES = .TRUE.
		 ENDIF
	      ENDIF
C
	   ENDIF
C
C and go back for the next iteration
C
	IF ( FOREVER .OR. I.LT.SPAN ) THEN
	   I = I+1
	   GOTO 2000
	ENDIF
C
C **********************************************************************
C display the final entry for the user
C - note that if we were going FOREVER, then this will already have been
C   done in the main loop
C
9000	IF ( .NOT.FOREVER ) THEN
	   IF ( TYPE_IT ) THEN
	      CALL TYPE_ENTRY
	   ELSE
	      CALL DISPLAY_ENTRY(.FALSE.)
	   ENDIF
	ENDIF
C
C and return
C
	RETURN
	END
