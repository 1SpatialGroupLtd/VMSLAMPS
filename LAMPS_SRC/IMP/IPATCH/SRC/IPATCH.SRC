C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-14 00:17:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM IPATCH
C
***	IDENT	13NO87
***	MODULE	IPATCH
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 17 July 1986
C
C IPATCH is the IMP package IFF patch program.
C
C It allows a user to browse through the contents of an IFF file at
C entry level. If the /WRITE switch is used, it also allows the user
C to patch entries - including replacing the data inside an entry,
C deleting an entry or sequence of entries, and overwriting data.
C
C BEWARE that in /WRITE mode, the program operates IN SITU
C - it does not create a new version of the file
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'($SSDEF)'			! for SS$_NORMAL
	INCLUDE	'($STSDEF)'			! for STS$ values
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB error numbers 
	INCLUDE	'HERE:IPATCHMSG.PAR'		! local ditto
C
C common files
C
	INCLUDE	'LSL$CMNLSL:STATUS.CMN'		! for LSL_STATUS
	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! IFFLIB errors, etc
	INCLUDE	'HERE:SWITCHES.CMN'		! command line switches
	INCLUDE	'HERE:FILES.CMN'		! file names
C
C functions used
C
	LOGICAL	   	CMDLINE		! read the command line
	LOGICAL		FRTINI		! read FRT file
	LOGICAL		IFFOPEN		! open IFF file for readonly
	LOGICAL		IFFMODIFY	! open IFF file to modify it
	LOGICAL		PROCESS		! process user commands
C
C workspace
C
	LOGICAL		IFF_OPEN	! true if file open
	INTEGER		STAT		! status w/s
C
C **********************************************************************
C initialise the libraries
C
	CALL LSL_INIT		! first LSLLIB generally
C
	IFF_OPEN = .FALSE.	! file not open yet
C
C and read the command line
C
	IF ( CMDLINE() ) GOTO 9999
C
C if we want to start up the status line, then try it now
C
	IF ( START_STATUS ) CALL AUTO_STATUS
C
C read FRT file if required
C
	IF (FRT) THEN		! had an FRT file
	   IF (LOG) CALL LSL_PUTMSG(IPATCH__READINGFRT,FRTNAM(:FRTLEN))
	   IF (FRTINI(FRTNAM(:FRTLEN))) GOTO 9999
	ELSE
	   CALL FRT_ACDINI	! just initialise default ACDs
	ENDIF
C
C and open the IFF file
C - if READONLY then we open it for read only, otherwise we open
C   it with a value of Patch for the HIstory record
C - note that if we open to modify the file, then we request read look
C   ahead - this is given us automatically if we use IFFOPEN. We are
C   assuming that we will be mostly moving to and fro in the file.
C
	IF ( READONLY ) THEN
 	   IF ( .NOT.IFFOPEN( IFFLUN, IFFNAM(:IFFLEN),,
     &			      LOG ) ) GOTO 9999
	ELSE
 	   IF ( .NOT.IFFMODIFY( IFFLUN, IFFNAM(:IFFLEN),
     &				'Patch',, LOG ) ) GOTO 9999
	   CALL IFFRLA(.TRUE.)
	ENDIF
C
C set input revision level
C
	CALL IFFIRV(INPUT_REVISION)
C
	IFF_OPEN = .TRUE.		! file is now opened
C
C re-do status line now we have the file eof and revision levels
C
	CALL NEW_STATUS(.TRUE.)
C
C and establish the exact name of the file
C
	CALL IFFINQ( IFFNAM, IFFLEN )
C
C if we are journalling, open the file
C
	IF ( JOURNAL ) CALL OPEN_JOURNAL
C
C if we are obeying commands from a file, open the file
C
	IF ( COMMAND ) CALL OPEN_COMMAND
C
C and we now accept commands from the user to do things with the file
C
	IF ( PROCESS() ) GOTO 9999
C
C we reach here if the user exited neatly - that is, if we terminated
C because we were asked to, rather than because of a fatal error
C
	IF ( LOG ) THEN
	   CALL WRITEF('IPATCH on file %S255 completed',IFFNAM(:IFFLEN))
	ENDIF
C
C and close the IFF file
C
9999	IF ( IFF_OPEN ) CALL IFFCLO( IFFLUN )
	IF ( JOURNAL  ) CALL FLWCLO( JOULUN )
	IF ( COMMAND  ) CALL FLRCLO( COMLUN )
C
C unset any strange screen options due to any status lines
C
	CALL STATUS_OFF(.FALSE.)	! don't clear the screen
C
C we want to reduce any WARNING in LSL_STATUS to something less severe,
C before we exit - this is not standard for LSL programming practice,
C but our warning errors are not generally harmful
C
	IF ( (LSL_STATUS.AND.STS$M_SEVERITY) .EQ.STS$K_WARNING ) THEN
	   LSL_STATUS = LSL__NORMAL
	ENDIF
C
C and exit the LSL way
C
	CALL LSL_EXIT( LSL_STATUS )
C
	END
