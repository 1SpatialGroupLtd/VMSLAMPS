	LOGICAL FUNCTION BINARY_CHOP( LOOKFOR, LOCATION )
C
***	IDENT	28JL86
***	MODULE	BINARY_CHOP
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 28 July 1986
C
C to search for the value in NF_PTR that is just below LOOKFOR
C and return the index of that value in LOCATION
C
C returns TRUE if it fails to find such an index
C
	IMPLICIT NONE
C
C arguments
C
	INTEGER*4	LOOKFOR		! value to search for
	INTEGER		LOCATION	! where we found it
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'	! error numbers
C
C common files
C
	INCLUDE	'HERE:POINTERS.CMN'	! for current entry positions
C
C workspace
C
	INTEGER		TOP,BOT,MID	! for simple binary chop
C
C **********************************************************************
C assume that we succeed
C
	BINARY_CHOP = .FALSE.
C
C and initialise the chop
C
     	BOT = 0
 	TOP = LAST_NF
C
C **********************************************************************
C make the next guess
C
2000	   MID = (TOP+BOT)/2
C
C are we within this area of the file?
C
	   IF ( LOOKFOR.GE.NF_PTR(MID) .AND.
     &		LOOKFOR.LT.NF_PTR(MID+1) ) THEN
	      LOCATION = MID
	      GOTO 9000
	   ENDIF
C
C if we have contracted our search window down to zero (or even
C crossed its ends over!) then we must give up
C (and note that we also disable the PREVIOUS command)
C
	   IF ( BOT.GE.TOP ) THEN
	      CALL LSL_PUTMSG( IPATCH__BINCHOPERR, LOOKFOR )
	      BINARY_CHOP = .TRUE.
	      GOTO 9000
	   ENDIF
C
C now choose which side of our partition we are on
C
	   IF ( LOOKFOR.LT.NF_PTR(MID) ) THEN
	      TOP = MID
	   ELSE
	      IF (MID.EQ.BOT) MID=MID+1
	      BOT = MID
	   ENDIF
C
C and try again
C
	   GOTO 2000
C
C **********************************************************************
C and we come down here and return
C
9000	RETURN
	END
