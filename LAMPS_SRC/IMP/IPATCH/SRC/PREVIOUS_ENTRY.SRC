C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-06 10:56:58.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PREVIOUS_ENTRY
C
***	IDENT	06NO86
***	MODULE	PREVIOUS_ENTRY
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 18 July 1986
C
C To read in the previous entry in the IFF file, and display it to
C the user
C
	IMPLICIT NONE
C
C **********************************************************************
C parameter files
C
	INCLUDE	'HERE:IPATCHMSG.PAR'		! error numbers
C
C common files
C
 	INCLUDE	'LSL$CMNIFF:IFFHAN.CMN'		! IFF errors, etc
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'		! RDCOMM common
 	INCLUDE	'HERE:ENTRY.CMN'		! for IECODE,IELEN
	INCLUDE	'HERE:POINTERS.CMN'		! for going back
	INCLUDE	'HERE:SWITCHES.CMN'		! for DONE_SCAN_FILE
C
C functions
C
	LOGICAL		MOVE_TO_ADDRESS
C
C a useful parameter
C
	INTEGER*2	NF
	PARAMETER	(NF='NF')
C
C workspace
C
	INTEGER		SPAN		! number of times to PREVIOUS
	INTEGER		I		! DO loop variable
C
C **********************************************************************
C if we don't have a current entry, or are at or above HIGHWATER, then
C we don't do it
C
	IF ( LPOSH.EQ.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__PREVBOF )
	   GOTO 9000
	ELSEIF ( LPOSH.GE.HIGHWATER ) THEN
	   CALL LSL_PUTMSG( IPATCH__DISABOVE,HIGHWATER-1 )
	   GOTO 9000
	ENDIF
C
C if we are after the MAX_ENTRIES'th entry for this feature, then
C we cannot PREVIOUS
C
	IF ( AFTER_MAX_ENTRIES ) THEN
	   CALL TOO_MANY_ENTRIES
	   GOTO 9000
	ENDIF
C
C if the PREVIOUS command had an argument, then it is the number of
C entries we are to PREVIOUS over
C - if the argument is zero or less, then we refuse to do anything
C
	IF ( .NOT.ARGMSG ) THEN
	   SPAN = INTARG(1)
	   IF ( SPAN.LE.0 ) THEN
	      CALL LSL_PUTMSG( IPATCH__BADPREV )
	      GOTO 9000
	   ENDIF
	ELSE
	   SPAN = 1		! default is same as PREVIOUS 1
	ENDIF
C
C **********************************************************************
C so go back the appropriate number of PREVIOUS entries
C
C as an example:	     current_entry
C			NF	0
C			FS	1
C			AC	2
C			ST	3  <------------+
C			EF	4               | PREVIOUS 3
C			NF	0               |
C			FS	1  -- current --+
C
C - if SPAN leaves us within the current feature, then we can just
C   move back to the relevant entry
C
2000 	IF ( SPAN.LE.CURRENT_ENTRY ) THEN
C
	   CURRENT_ENTRY = CURRENT_ENTRY-SPAN
	   CALL MOVE_TO_ADDRESS( ENTRY_PTR(CURRENT_ENTRY),
     &				 ENTRY_NAM(CURRENT_ENTRY),
     &				 IPATCH__PREVERR, .TRUE. )
	   GOTO 9000
C
	ENDIF
C
C - if we've reached the beginning of the file, then that's as far
C   as we can go - it's not possible to PREVIOUS off the start of
C   the file
C
	IF ( CURRENT_NF.EQ.0 ) THEN
	   CALL LSL_PUTMSG( IPATCH__PREVBOF )
	   GOTO 9000
	ENDIF
C
C - otherwise, we must move back to the previous NF, read in its
C   entries, and try again
C
C - reduce SPAN by the 'length' of the feature we've just looked at,
C   not forgetting the NF entry at position 0
C
 	SPAN = SPAN - CURRENT_ENTRY - 1
C
C - if we are moving back to the start-of-file entry, then we assume
C   that it is not an NF (!), but we don't force it to be anything else
C - otherwise, we are after an NF entry at our destination
C
	IF ( CURRENT_NF.EQ.1 ) THEN
	   IF ( MOVE_TO_ADDRESS( NF_PTR(CURRENT_NF-1), 0,
     &			         IPATCH__PREVXX, .TRUE. ) 
     &	      ) GOTO 9000
	ELSE
	   IF ( MOVE_TO_ADDRESS( NF_PTR(CURRENT_NF-1), NF,
     &			         IPATCH__PREVNF, .TRUE. )
     &	      ) GOTO 9000
	ENDIF
C
C - and scan it (which will also adjust CURRENT_NF for us)
C
    	CALL GET_FEATURE
C
C - now, pretend that we are at the last entry in that feature, and
C   try again
C
	CURRENT_ENTRY = LAST_ENTRY
	GOTO 2000
C
C **********************************************************************
C and return
C
9000	CALL DISPLAY_ENTRY(.FALSE.)
C
	RETURN
	END
