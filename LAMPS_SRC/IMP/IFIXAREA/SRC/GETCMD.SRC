C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-03 12:43:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GETCMD(CMLSTR,CMLEN)
C
***	MODULE GETCMD
***	IDENT 03NO88
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
CMOD	CLOSE command now takes an optional real value	ACM  03-Nov-1988
CMOD	HAD_CLOCK logical set with /DFAD	`	AC    2-Jun-1988
CMOD	HAD_OUTFIL logical set correctly		ATT   9-Dec-1986
CMOD	HAD_ACLOCK logical set with /DFAD		ATT   2-Dec-1986
CMOD	/FEATURE_CODE renamed /FC			TJH  29-Oct-1986
C
C	Author  : A.T. Timms
C	Created : 19 August 1986
C
C Command line decoding function for IMP utility IFIXAREA.
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNIFIXAREA:IFIXAREA.CMN'
	INCLUDE 'LSL$CMNIFIXAREA:IFIXMSG.PAR'
C
	INCLUDE '($SSDEF)'
C
C Command language definitions
	EXTERNAL IFIXAREA_CLD
C
C workspace
	LOGICAL*4	ABSENT	! .T. if file param. not found
	LOGICAL		LOCAL	! .T. if qual. is local
	LOGICAL		LOCNEG	! set .T. if qual. locally negated
C
	INTEGER*2	I	! loop variable
	INTEGER*4	CMLEN	! length of command line string
C
	CHARACTER*1024	CMLSTR	! command line string
C
C functions called
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_INT	   ! looks for integer string qualifier
	INTEGER*4	DCL_REAL   ! looks for real string qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
C
C...................................................................
C initialise the many logicals
	LOCAL   = .FALSE.       ! set .T. if qual. is local
        LOCNEG  = .FALSE.       ! set .T. if qual. locally negated
	HAD_AC = .FALSE.	!
	HAD_ACLOCK = .FALSE.	!
	HAD_CLOCK = .FALSE.	!
	HAD_CLOSE = .FALSE.	!
	HAD_DEL = .FALSE.	!
	HAD_DFAD = .FALSE.	!
	HAD_FC = .FALSE.	! we have not had any qualifiers yet
	HAD_LAY = .FALSE.	!
	HAD_LOG = .FALSE.	!
	HAD_NEAR = .FALSE.	!
	HAD_PRINT = .FALSE.	!
	HAD_REV = .FALSE.	!
	HAD_NEAR_TOL = .FALSE.	!
	HAD_CLOSE_TOL = .FALSE.	!
	HAD_OUT = .FALSE.	! 
	HAD_OUTFIL = .FALSE.	! assume default output file required
C
C....................................................................
C Now for the real work ... get command line for IFIXAREA. 
C DCL_STARTUP will return set to SS$NORMAL if all is well.
C
	GETCMD=DCL_STARTUP('IFIXAREA',.FALSE.,IFIXAREA_CLD,.TRUE.)
        IF (.NOT.GETCMD) GOTO 999
C
C....................................................................
C As we may want to write out the commad line to an output file lets 
C get it !
	GETCMD=DCL_CML(CMLSTR,CMLEN,.TRUE.) 
        IF (.NOT.GETCMD) GOTO 999
C....................................................................
C Now lets see what qualifiers we have. 
C The possibilites are (take a deep breath !):
C /AC, /ANTI_CLOCKWISE, /CLOCKWISE, /[NO]CLOSE [=real], /[NO]DELETE,
C /DFAD, /FC = [int], /LAYER = [int], /[NO]LOG, /NEAR [=real], 
C /OUTPUT = [filename], /[NO]PRINTER, /[NO]REVERSE
C
C...................................................................
C ... /AC
	GETCMD=DCL_QUAL('AC',HAD_AC,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /ANTI_CLOCKWISE
	GETCMD=DCL_QUAL('ANTI_CLOCKWISE',HAD_ACLOCK,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /CLOCKWISE
	GETCMD=DCL_QUAL('CLOCKWISE',HAD_CLOCK,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /CLOSE
	GETCMD=DCL_QUAL('CLOSE',HAD_CLOSE,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Lets see what we have
	IF (HAD_CLOSE) THEN			! Lets get the tolerance
	  GETCMD = DCL_REAL('CLOSE',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMREA.EQ.1) THEN			! got something?
	    IF (RARRAY(1).LE.1.0E-6) THEN	! greater than zero?
	       GETCMD=IFIX__INVCLOSE		! no!
	       CALL LSL_PUTMSG(GETCMD,RARRAY(1))
	       GOTO 999
	    ELSE
	       CLOSE_TOL = RARRAY(1)		! store arg in CLOSE_TOL
	       HAD_CLOSE_TOL = .TRUE.		! remember it
	    ENDIF
	  ENDIF
	ENDIF
C
C...................................................................
C ... /DELETE
	GETCMD=DCL_QUAL('DELETE',HAD_DEL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /DFAD		! For the I-SPY brigade
	GETCMD=DCL_QUAL('DFAD',HAD_DFAD,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /FC
	GETCMD=DCL_QUAL('FC',HAD_FC,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_FC) THEN			! Lets get the FC's
	  GETCMD = DCL_INT('FC',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMINT.GE.1) THEN			! put arguments into
	    DO 10 I = 1,NUMINT			! feature code array
	      FCODE(I) = IARRAY(I)
10	    CONTINUE
	    FC_NUM = NUMINT
	  ENDIF
	ENDIF
C
C...................................................................
C ... /LAYER
	GETCMD=DCL_QUAL('LAYER',HAD_LAY,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_LAY) THEN			! Let's get the layers
	  GETCMD = DCL_INT('LAYER',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMINT.GE.1) THEN			! put arguments into
	    DO 20 I = 1,NUMINT			! feature code array
	      LAYNO(I) = IARRAY(I)
20	    CONTINUE
	    LAY_NUM = NUMINT
	  ENDIF
	ENDIF
C
C...................................................................
C ... /LOG
	GETCMD=DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /NEAR
	GETCMD=DCL_QUAL('NEAR',HAD_NEAR,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Lets see what we have
	IF (HAD_NEAR) THEN			! Lets get the FC's
	  GETCMD = DCL_REAL('NEAR',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMREA.EQ.1) THEN			! got something?
	    IF (RARRAY(1).LE.1.0E-6) THEN	! greater than zero?
	       GETCMD=IFIX__INVNEAR		! no!
	       CALL LSL_PUTMSG(GETCMD,RARRAY(1))
	       GOTO 999
	    ELSE
	       NEAR_TOL = RARRAY(1)		! store arg in NEAR_TOL 
	       HAD_NEAR_TOL = .TRUE.		! remember it
	    ENDIF
	  ENDIF
	ENDIF
C
C
C...................................................................
C ... /OUTPUT
	GETCMD=DCL_QUAL('OUTPUT',HAD_OUT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Check for /OUTPUT=filespec. Default filespec is SYS$DISK:IFIXAREA.LIS
	IF (HAD_OUT) THEN    	  
	  GETCMD=
     &    DCL_FILE('OUTPUT','SYS$DISK:IFIXAREA.LIS',ABSENT,
     &						.FALSE.,.TRUE.)
	  IF (.NOT.GETCMD) GOTO 999	! error return
C
	  IF (.NOT.ABSENT) THEN		! File specified so
            OUTFILE=FILARY(1)(1:FIL_LEN(1))
	    OUTLEN=FIL_LEN(1)
	    HAD_OUTFIL = .TRUE.		! No default output file needed
	  ENDIF
	ENDIF
C
C...................................................................
C ... /PRINTER
	GETCMD=DCL_QUAL('PRINTER',HAD_PRINT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Set the output filespec for /PRINTER if we have not had /OUTPUT
	IF (HAD_PRINT.AND..NOT.HAD_OUTFIL) THEN
	  OUTFILE='SYS$DISK:IFIXAREA.LIS'
	  OUTLEN=18
	ENDIF
C
C Set the output filespec for /OUTPUT if we have not had /PRINTER
	IF (.NOT.HAD_PRINT.AND..NOT.HAD_OUTFIL) THEN
	  OUTFILE='SYS$OUTPUT'
	  OUTLEN=10
	ENDIF
C
C...................................................................
C ... /REVERSE
	GETCMD=DCL_QUAL('REVERSE',HAD_REV,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Set default rotation if not set and tell user if /LOG
	IF (HAD_REV.AND..NOT.HAD_CLOCK.AND..NOT.HAD_ACLOCK) THEN
	  HAD_ACLOCK = .TRUE.
	  IF (HAD_LOG) THEN
	    GETCMD = IFIX__DEFANTICLK
	    CALL LSL_PUTMSG(GETCMD)
	  ENDIF
	ENDIF
C			
C...................................................................
C If we have had /DFAD make sure /CLOSE, /NEAR and /REVERSE are
C also true. We must also set correct rotation /ANTI_CLOCKWISE !!
	IF (HAD_DFAD) THEN
	  HAD_CLOSE = .TRUE.
	  HAD_NEAR = .TRUE.
	  HAD_REV = .TRUE.
	  HAD_ACLOCK = .TRUE.
	  HAD_CLOCK = .FALSE.
	ENDIF
C
C...................................................................
C Now we can hunt for the input filename
	GETCMD=DCL_FILE
     &	('IN_FILESPEC','LSL$IF:IFF.IFF;',ABSENT,.FALSE.,.TRUE.)
C
C transfer file-spec to a common block
        IF(GETCMD) THEN
	  INFILE = FILARY(1)(1:FIL_LEN(1))
	  FILEN  = FIL_LEN(1)
        ELSE
          GOTO 999
        ENDIF 
C
C...................................................................
C and FIXED Ouput IFF file which defaults to input filename minus 
C version  no.
	HAD_VER=.FALSE.			! No version number
	CALL EXPFLN(FIXFILE,FIXLEN)	! strip off version no.
C
	GETCMD=DCL_FILE
     &	  ('FIXED_FILESPEC',FIXFILE(:FIXLEN),ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.GETCMD) GO TO 999	! Error
C
	FIXLEN=FIL_LEN(1)		! transfer file-spec 
	FIXFILE=FILARY(1)(:FIXLEN)	! to a common block
C
C...................................................................
999     IF (GETCMD) GETCMD = SS$_NORMAL	        ! normal completion
	RETURN
   	END
