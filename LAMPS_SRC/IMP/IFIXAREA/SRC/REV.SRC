C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-11-15 15:54:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE REV(XY,K,JUMPS,NJUMPS,EDGES,NEDGES,TOTPTS)
***	IDENT	15NO93
***	MODULE	REV
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C
C author 	S G Hancock	17 June 1984
CMOD    Now caters for array sizes of points based on	  ST  15-Nov-1993
C       logical LSL$FILL_POINTSMAX. Mod 1317
CMOD	redimension arrays to hold Z values		MWSR  Nov 1987
C
C reverse point string defined by co-ordinate array XY
C take account of 'jumped-to' points & edge points
	IMPLICIT NONE
	INTEGER*4	TOTPTS
	REAL*4		XY(3,TOTPTS)
	INTEGER*4 NJUMPS,NEDGES
	INTEGER*4 JUMPS(100),EDGES(100)
	INTEGER*4 K
	REAL*4 X,Y,Z
	INTEGER*4 I
	INTEGER*4 L
	INTEGER*4 J
C first reverse co-ordinates
	DO 100 I=1,K/2
	   X=XY(1,I)
	   Y=XY(2,I)
	   Z=XY(3,I)
	   L=K+1-I
	   XY(1,I)=XY(1,L)
	   XY(2,I)=XY(2,L)
	   XY(3,I)=XY(3,L)
	   XY(1,L)=X
	   XY(2,L)=Y
	   XY(3,L)=Z
100	CONTINUE
C set jump points for reversed string
	IF(NJUMPS.EQ.1)THEN
	   IF(JUMPS(1).NE.1)JUMPS(1)=K+2-JUMPS(1)
	ELSE
	   DO 200 I=1,(NJUMPS+1)/2
	      J=JUMPS(I)
	      L=NJUMPS+2-I
	      JUMPS(I)=K+2-JUMPS(L)
	      IF(JUMPS(I).GT.K)JUMPS(I)=1
	      JUMPS(L)=K+2-J
	      IF(JUMPS(L).GT.K)JUMPS(L)=1
200	   CONTINUE
	END IF
C set edge points for reversed string
	DO 300 I=1,NEDGES/2
	   J=EDGES(I)
	   L=NEDGES+1-I
	   EDGES(I)=EDGES(L)
	   EDGES(L)=J
300	CONTINUE
	RETURN
	END
