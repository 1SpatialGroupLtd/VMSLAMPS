C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-11-15 16:54:40.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM IFIXAREA
C
***	IDENT	15NO93
***	MODULE	IFIXAREA
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author: S G Hancock	27-June-1984
C
CMOD    Now allocates array sizes for points based on	 ST  15-Nov-1993
C       logical LSL$FILL_POINTSMAX. Mod 1317
CMOD    call to IFFIRV                                 MWSR  11-Nov-1987
CMOD	CHKQUAL now called before GETFIL		TJH  13-Nov-1986
CMOD	LSL_EXIT and new IFF opening routines		ATT   3-Nov-1986
CMOD	Name changed to IFIXAREA			TJH  29-Oct-1986
CMOD 	DAMP version re-written to IMP standards 
C	(LSLLIB lib. etc.)			  A T Timms  19-Aug-1986
C
C	Reads an IFF file and produces an amended IFF file after
C	performing selected corrections. Closure of open features,
C	reversal of clockwise features and elimination of repeated
C	points (possibly repeated after rounding to integer grid)
C	may be chosen. The whole file may be processed, or specified
C	overlays, or only features of DFAD type 2.
C
C	If only one IFF filename is given, a new IFF file of the
C	same name will be created to hold the result.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'	! LSL_STATUS ..
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'	! IFF read & write
	INCLUDE 'LSL$CMNIFIXAREA:IFIXAREA.CMN'	! IFIXAREA variables
C
	INCLUDE '($SSDEF)'		! system status etc.
C
C functions 
	LOGICAL		GETCMD	! to decode the command line
	LOGICAL		GETFIL	! to open relevant files
	LOGICAL		CHKQUAL ! to check qualifiers
	LOGICAL		FIXIT	! to do the fixing
	LOGICAL		CLOFIL	! to close relevant files
	INTEGER*4	LIB$GET_VM
	INTEGER*4	LIB$FREE_VM
	INTEGER*4	GET_LOGICAL
C
C workspace
	INTEGER*4	CMLEN	! length of command line string
	LOGICAL*4	KEEP	! close & keep fixed file?
	LOGICAL*4	OK	! function return
	INTEGER*4	XYZ_LOC	! address of start of virtual memory chunk
C
	CHARACTER*1024	CMLSTR	! command line string
C
C....................................................................
C initialise LSLLIB
	CALL LSL_INIT(.TRUE.)
C
C
C Increase default size of TXTBUF and EXPBUF to allow for 255
C byte AC, CH, TC, and TX strings
	CALL SET_EXPMAX(255)
	CALL SET_TXTLIM(255)
C
C get command line 
	OK = GETCMD(CMLSTR,CMLEN)
	IF (.NOT.OK) GOTO 20		! error 
C
C check qualifiers are valid
	OK = CHKQUAL()
	IF (.NOT.OK) GOTO 10		! error 
C
C open the relevant files
	OK = GETFIL(CMLSTR,CMLEN)
	IF (.NOT.OK) GOTO 10		! error 
C
C see if LSL$FILL_POINTSMAX is defined.
	NUM_POINTS = GET_LOGICAL('LSL$FILL_POINTSMAX',10000,8192,999999)
	IF (NUM_POINTS.EQ.-1) GOTO 10	! error
C
C grab a chunk of virtual memory
	OK = LIB$GET_VM(4*3*NUM_POINTS,XYZ_LOC)
	IF (.NOT.OK) GOTO 10		! error 
C
C do the fixing
	OK = FIXIT(%VAL(XYZ_LOC),NUM_POINTS)
	IF (.NOT.OK) GOTO 10		! error 
C
C free the grabbed virtual memory
	OK = LIB$FREE_VM(4*3*NUM_POINTS,XYZ_LOC)
	IF (.NOT.OK) GOTO 10		! error 
C
C close the relevant files
10	KEEP = OK
	OK = CLOFIL(KEEP)
C
C....................................................................
C Exit setting $STATUS as we go
20	CALL LSL_EXIT
C
	END
