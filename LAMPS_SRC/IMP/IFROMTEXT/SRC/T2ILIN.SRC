C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-07-02 17:12:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION T2ILIN(WHINGE)
C
***	IDENT	02JL90
***	MODULE	T2ILIN
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Trailing blanks removed and replaced by nulls	TJH 16-Jan-1987
CMOD	'EJ' forced into TXTBUF if ^Z pressed		TJH 06-Nov-1984
CMOD	Documentation completed				RJH 15-MAY-1984
C	Created						RJH 23-MAR-1984
C
C Description
C
C This subroutine is designed for use by the IFROMTEXT program, and its
C purpose is to read a line from the current input text file into
C the input buffer. Blank lines are ignored, and a message is displayed
C if an error occurs. Communication with other routines is via the
C common block T2IPAR; the first non-blank character on the line is left
C there, and the current line number incremented. If a line has been
C successfully read, the command decoding pointer is initialised to the
C beginning of the line.
C
	IMPLICIT NONE
C
C Argument
	LOGICAL		WHINGE		! whinge if error?
C
C Common blocks
C
***	COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***	COMMON/LSL$CMNIFROMTEXT:T2ICOM/		! switch flag in here
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNLSL:TXTC/		! VIOLIB input command decoding
***     COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***	COMMON/LSL$CMNLSL:STATUS/
C
C Functions called
C
	INTEGER*4	FLRLIN		! VIOLIB - gets line from file
	LOGICAL		RDCHS		! VIOLIB - reads next character
	LOGICAL		RDCH
	INTEGER*4	TTRSTR
	INTEGER*4	TTWLIN
C
C Local variables
C
	INTEGER		ERROR		! error code
	INTEGER*2	I,J		! loop counters
	INTEGER		RETCOD		! VAX error return code
	LOGICAL		EOLN		! end of line ?
	BYTE	        CH
	INTEGER*2	NCHS		! no. characters
	LOGICAL 	CTRLZ
C
C ......................................................................
C
	CTRLZ = .FALSE.
	J = 0
C
C Read in next line from terminal or input file
C
50	EOLN = .FALSE.			! assume non-blank line or error
C
	IF (TERMIN) THEN
	   T2ILIN = TTRSTR(,,'IFF entry> ',RETCOD)
	ELSE
	   T2ILIN = FLRLIN(,,,RETCOD)
	ENDIF
C
C Store length of string read before stripping off any '!' comments
C
	NCHS=TXTPTR
C
C Check success of read and take appropriate action
C
125	IF (.NOT. T2ILIN ) THEN
	   IF (T2ILIN .EQ. LSL__EOF) THEN
	      TXTBUF(1)=ICHAR('E')	! EOF? force an EJ
	      TXTBUF(2)=ICHAR('J')
	      TXTPTR=2
	      NCHS=TXTPTR
	      CALL LSL_PUTMSG(IFROM__EOFEJDEF)
	   ELSE
	      CALL LSL_PUTMSG(IFROM__ERRREADINP,CURLIN)
	      IF (WHINGE) THEN
	         CALL LSL_PUTMSG(T2ILIN)
	         CALL LSL_PUTMSG(RETCOD)	! VAX error message
	      ENDIF
	   ENDIF	
C
C No error
C
	ELSE
C
C Check that we had something
C
	   IF (NCHS .GT. 0) THEN
C
C Check for exclamation mark - ignore everything after it
C
	      CALL BSLN
160	      EOLN=RDCHS(CH)
C
	      IF (CH .EQ. 33) THEN
	        TXTPTR=DCPTR-2
	        GOTO 200
	      ELSEIF (EOLN) THEN
	        GOTO 200
	      ENDIF
C
	      GOTO 160
C
C Strip off any trailing spaces from the line. These will often be the
C result of the space padding applied before the "!" used to delimit
C an address, i.e. "XX nnnnnnnnn                         ! 00000AE3"
C
200	      DO 100 I=1,TXTPTR
	        J = TXTPTR-I+1
	        IF (TXTBUF(J).NE.' ') GOTO 210
100	      CONTINUE
C
C Reset any unwanted part of the string to null
C
210	      IF (J+1.LT.NCHS) THEN
C
	        DO 220 I=J+1,NCHS
	          TXTBUF(I)=0
220	        CONTINUE
C
	        NCHS=J			! fix length to new value
	        TXTPTR=NCHS
	      ENDIF
C
C Return decode pointer to beginning of line then advance it to the 1st
C non-space character. Report what we read if /ECHO.
C
	      CALL BSLN			! back to start of line
	      CURLIN = CURLIN+1		! increment line number
	      EOLN = RDCHS(FIRST)	! read first character
C
	      IF (ECHO) THEN
                 T2ILIN = TTWLIN(TXTBUF,NCHS,RETCOD) ! echo input line
	         IF (.NOT. T2ILIN) THEN
	            CALL LSL_PUTMSG(T2ILIN)
	            CALL LSL_PUTMSG(RETCOD)
	            GOTO 1000
	         ENDIF
	      ENDIF
	   ELSE
	      EOLN=.TRUE.		! blank line
	   ENDIF
	ENDIF	! (file/terminal read in error)
C
C Repeat if line was blank
C
	IF (EOLN) GOTO 50
C
C Indicate success
C
900	IF (T2ILIN .EQ. LSL__EOF) THEN 
	   STATUS=LSL__NORMAL
	ELSE
	   STATUS=T2ILIN
	ENDIF
C
	DONE = (T2ILIN .NE. LSL__NORMAL) !abort execution if error or ^Z
C
C Set command decoding pointer
C
	IF (.NOT. DONE) CALL BSLN	! back to start of line
C
C Return
C
1000	RETURN
	END
C
