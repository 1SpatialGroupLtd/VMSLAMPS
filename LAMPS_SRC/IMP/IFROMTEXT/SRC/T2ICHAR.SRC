	LOGICAL FUNCTION T2ICHAR(STR,CHECK_SEP)
C
***	IDENT	11NO87
***	MODULE	T2ICHAR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					MWSR	29-OCT-1987
C
C Description
C
C Reads the next 4 character string in the input file. If not found on
C the current line, a string is expected on the next non-blank 
C line.
C
C The function takes the value false if successful, and true if:
C   i) the string was corrupted,
C  ii) the string was not found before the
C      next IFF code,
C iii) an illegal separator was encountered, or
C  iv) an input file read error occurred.
C
C If the function was successful, the argument returned is the
C real read. If unsuccessful, the argument will be unchanged unless
C an attempt was made to read a real, in which case it will be zero.
C Communication with other routines is via the common block T2IPAR.
C
	IMPLICIT NONE
C
C Arguments
C
	CHARACTER*4	STR			!  date to be read
	LOGICAL	CHECK_SEP		! IN - true if to check for
C					! valid separator
C
C Common blocks
C
***     COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNLSL:READSTR.PAR/
C
C Functions called
C
	INTEGER*4	T2ICON		! converts IFF code to seq. no
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! reads char
	LOGICAL		RDCH		! reads char
	LOGICAL		READSTR		! reads a string
	INTEGER*4	CVT_DATE	! converts dates stringtointeger
C
C Local variables
C
	INTEGER*2	REAPTR		! pointer to start of date
	LOGICAL		RET		! got a real ?
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
	INTEGER		LEN		! length of string
	INTEGER		I		! counter
	LOGICAL		HAD_QUOTE       ! read a quote character?
	CHARACTER*255   REJECT		! reject characters
C
C Start of function
C
	RET = .FALSE.			! assume no real found
	HAD_QUOTE = .FALSE.		! not had a quote		
C
C Check separator is valid
C
	IF (CHECK_SEP) THEN
	   IF (T2ISEP()) GOTO 20
	ENDIF
C
C Get ready to read real
C
3	EOLN = RDCHS(NXTCH)		! get next non-blank character
5	IF (EOLN) THEN		! check if end of line
	   CALL T2ILIN(.TRUE.)	! read in next input line
	   CALL T2ITST		! test it
	   IF (GOTNXT .AND. (ECDNUM .NE. T2ICON('ST').AND. ECDNUM
     &     .NE. T2ICON('ZS').AND. (ECDNUM .NE.'CB'))) 
     &	   CALL LSL_PUTMSG(IFROM__UNEXPEOE,CURLIN-1)
	   IF (.NOT. (DONE.OR.GOTNXT)) GOTO 3
	ENDIF	! (EOLN)
C
	IF (NXTCH .EQ. 34.AND. (.NOT. HAD_QUOTE)) THEN
C ignore quotes
	   HAD_QUOTE = .TRUE.
	   EOLN = RDCH(NXTCH)
	   GOTO 5
	ELSE
	   CALL BSCH			! back to start of char string
	ENDIF
C Read the string
C
	IF (.NOT. (DONE .OR. GOTNXT)) THEN		! check can read
	   CALL DCPSAV(REAPTR)			! save pointer
	   IF (HAD_QUOTE)THEN
C
C  read charcters but terminating on closing quotes
	      LEN = READSTR(STR,34,ON_CHAR2,.FALSE.,RET)
	   ELSE
	      LEN= READSTR(STR,,ON_EOL,.FALSE.,RET)	! read chars
	   ENDIF
C
	   IF (RET) THEN 
C
C pad with blanks
	      DO 10 I = LEN+1,4
	         STR(I:I) = ' '
10	      CONTINUE
	   ENDIF
	   IF (RET .EQ. LSL__STRTOOLONG) THEN
	      CALL LSL_PUTMSG(IFROM__CHRTRUNC,CURLIN)
C
C move the read pointer to beyond the end of the stuff that's been 
C thrown away
	      LEN = READSTR(REJECT,,ON_SPACE)
	      RET = .TRUE.
	   ENDIF
	   IF (.NOT.RET) CALL T2ICOR(REAPTR,'Character')
	ENDIF
C
C Assign function value
C
20	IF (RET) THEN
	   T2ICHAR= .FALSE.
	ELSE
	   T2ICHAR= .TRUE.
	ENDIF
C
C Return
C
	RETURN
	END
