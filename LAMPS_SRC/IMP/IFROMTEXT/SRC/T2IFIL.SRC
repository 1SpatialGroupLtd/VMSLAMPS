C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-09 17:38:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE T2IFIL
C
***	IDENT	09AU94
***	MODULE	T2IFIL
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
CMOD1387Use /ORIGIN values to convert abs coord to local  JB 05-Aug-1994
C	Read all reals with T2IREAL8 for accuracy.
CMOD    Extra argument to T2IREA 			MWSR 02-Nov-1987 
CMOD	Now tells user that default RA entry used	 TJH 06-Nov-1986
CMOD	Documentation completed				 RJH 15-May-1984
C
C	Created						 RJH 03-Apr-1984
C
C Description
C
C This subroutine is designed for use by the IFROMTEXT program, and its
C purpose is to deal with IFF text entries at the file level.
C On entry to this subroutine, the first entry code in the text file
C is expected to have been read in. Junction and void entries are
C ignored, while entries at lower levels are dealt with by calling the
C subroutine which deals with map level entries. File level entries are
C written to the IFF file before calling the map level subroutine, and
C also prior to exit from this subroutine.
C Communication with other routines is via the common block T2IPAR.
C
	IMPLICIT NONE
C
C Common blocks
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNIFF:IFFHAN/		! IFF maintenance interface
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***     COMMON/LSL$CMNIFROMTEXT:T2ICOM.CMN/
C
C Functions called
	LOGICAL		T2IREAL8		! reads a real*8
C
C Local variables
	REAL*4		GIVRA(4)		! given range
	REAL*8		REAL8(4)		! double equivalent doubles
	INTEGER*4	RAPOSE			! first word of range entry
	INTEGER*4	NUM			! local IFF code sequence no.
	INTEGER*2	IECODE			! IFF entry code
	INTEGER*2	IELEN			! IFF entry length
	INTEGER*2	I			! counter
	LOGICAL		HADRA			! had range entry ?
	LOGICAL		FAILRA			! range entry read failed ?
	LOGICAL		WRTIFF			! written data to IFF file ?
C
C Main Structure
C
C	initialisation
C	repeat
C	   if entry is to be ignored then
C	      ignore entry
C	      if not done read next IFF entry code from text file
C	   else if entry is at map level or below then
C	      write RA entry to IFF file
C	      deal with entry at map level
C	   else
C	      case entry of
C		 RA : read in data
C		 EJ : done
C	      if not done read next IFF entry code from text file
C	until done
C	complete writing to IFF file
C
C ---------------------------------------------------------------------
C Initialisation
C
	DO 100 I=1,4
	   GIVRA(I) = 0.0			! assume zero
	   REAL8(I) = 0.0
100	CONTINUE
C
	HADHI  = .FALSE.			! assume not had HI
	HADRA  = .FALSE.			! assume not had RA
	FAILRA = .FALSE.			! assume RA read not failed
	WRTIFF = .FALSE.			! have not written to IFF file
C
C Entry to be ignored
C
200	IF (ECDNUM.LE.MAXIGN) THEN
	   CALL T2IIGN				! deal with entry to be ignored
	   IF (.NOT.DONE) CALL T2INXT(.TRUE.)  	! get next entry
C
C Entry at map level or below
C
	ELSEIF (ECDNUM.LE.MAXMAP) THEN
C
	   IF (.NOT.WRTIFF) THEN
	      RAPOSE = LPOSE			! save IFF end of file pointer
	      IF (.NOT.HADRA) THEN
		  CALL LSL_PUTMSG(IFROM__RADEFAULT)
	      ENDIF
C
	      CALL IFFRA(GIVRA)			! write given RA entry
C
	      IF (HADHI) THEN
	         CALL IFFHI			! write history entry
		 HADHI = .FALSE.
	      ENDIF
	      WRTIFF = .TRUE.			! RA entry now written
	   ENDIF  ! (.not.wrtiff)
C
	   CALL T2IMAP				! deal with entry at map level
C
C Entry at file level
C
	ELSEIF (ECDNUM.LE.MAXFIL) THEN
C
	   NUM = ECDNUM-MAXMAP			! calculate local sequence no.
	   GOTO (300,400), NUM
C
C RA entry
C
300	   IF (.NOT. (HADRA.OR.WRTIFF)) THEN
C
C Read data
	      I = 0				! initialise counter
310	      I = I+1				! increment counter
C
	      FAILRA = T2IREAL8(REAL8(I),.TRUE.)! read next real*8
C
	      IF (HAD_ORIGIN) THEN
		IF (I.EQ.1 .OR. I.EQ.2) THEN
		  GIVRA(I) = REAL8(I) - ORIGIN(1)	! convert to local real
		ELSEIF (I.EQ.3 .OR. I.EQ.4) THEN
		  GIVRA(I) = REAL8(I) - ORIGIN(2)	! convert to local real
		ENDIF
C
	      ELSE
		GIVRA(I) = REAL8(I) 			! convert to real
	      ENDIF
C
	      IF (.NOT.FAILRA .AND. I.NE.4) GOTO 310
C						! repeat if not failed/not got 4
C Check consistency of data
C
	      IF (.NOT.FAILRA) THEN
		 FAILRA = (GIVRA(1) .GT. GIVRA(2)) .OR.
     &			  (GIVRA(3) .GT. GIVRA(4))
C
C If read failed skip to next entry
C
	      ELSE
		 CALL LSL_PUTMSG(IFROM__ILLEGRAIGN,CURLIN)
		 IF (.NOT. (DONE.OR.GOTNXT)) CALL T2ISKP
	      ENDIF
C
C Had RA even if failed
C
	      HADRA = .TRUE.
	   ELSE
C
C Output message and skip to next entry
C
	      IF (HADRA .AND. (.NOT. WRTIFF)) THEN
		 CALL LSL_PUTMSG(IFROM__REPRAIGN,CURLIN)
	      ELSE
		 CALL LSL_PUTMSG(IFROM__ILLEGRAIGN,CURLIN)
	      ENDIF	! (hadra .and. (.not. wrtiff))
C
	      CALL T2ISKP
	   ENDIF	! (.not. (hadra .or. wrtiff))
C
	   GO TO 1000
C
C EJ entry
C
400	   DONE = .TRUE.		! end of text file
C
C If not done read next IFF entry code from text file
C
1000	   IF (.NOT. DONE) CALL T2INXT(.TRUE.)
C
	ENDIF	! (ecdnum .le. maxign)
C
C Repeat if not done
C
	IF (.NOT. DONE) GO TO 200
C
C Complete writing to IFF file
C
	IF (.NOT. WRTIFF) THEN		! check if not written RA entry
	   RAPOSE = LPOSE		! save IFF end of file pointer
	   IF (.NOT.HADRA) THEN
	      CALL LSL_PUTMSG(IFROM__RADEFAULT)
	   ENDIF
C
	   CALL IFFRA(GIVRA)		! write RA entry
	   CALL IFFHI			! write history entry
	ENDIF	! (.NOT. WRTIFF)
C
	CALL IFFEJ			! write EJ entry
C
	IF (.NOT. GOTPTS) THEN		! check if not had any ST coords
	   CURRA(1) = 0.0		! set range to zero
	   CURRA(2) = 0.0
	   CURRA(3) = 0.0
	   CURRA(4) = 0.0
	ENDIF	! (.not. gotpts)
C
	IF (.NOT.HADRA .OR. (FAILRA) .OR.
     &     (CURRA(1) .LT. GIVRA(1)) .OR. (CURRA(2) .GT. GIVRA(2)) .OR.
     &     (CURRA(3) .LT. GIVRA(3)) .OR. (CURRA(4) .GT. GIVRA(4))) THEN
	   CALL IFFPKE(IECODE,IELEN,RAPOSE)	! posn to known entry
	   CALL EIHWR(CURRA,4,1)		! rewrite RA data
	   CALL LSL_PUTMSG(IFROM__CALCRAOUT)
	ENDIF
C
C Return
	RETURN
	END
C
