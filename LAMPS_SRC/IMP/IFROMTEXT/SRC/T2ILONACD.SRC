	LOGICAL FUNCTION T2ILONACD(N,CHECK_SEP)
C
***	IDENT	15DE87
***	MODULE	T2ILONACD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Documentation completed			RJH	15-MAY-1984
C	Created					RJH	03-APR-1984
C
C Description
C
C looks for next integer in input buffer. If its not found then it 
C looks for a string.
C It then calls ACDFND or ACD_FNDNAME as appropriate and thus fills
C up the ACD common block

	IMPLICIT NONE
C
C Arguments
C
	INTEGER*4	N		! integer to be read
	LOGICAL	        CHECK_SEP       ! check for separator?
C
C Common blocks
C
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***     COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNLSL:READSTR.PAR/
C
C Functions called
C
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! reads a character
	LOGICAL		RDINT		! reads an integer
	INTEGER 	READSTR		! reads a string
	LOGICAL   	ACDFND		! finds ACD code
	LOGICAL		ACDFND_NAME     ! finds ACD code by name
C
C Local variables
C
	INTEGER*2	INTPTR		! pointer to start of integer
	LOGICAL		NODIG		! got an integer ?
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
	INTEGER         LN		! longword version of N
	CHARACTER*80    ACDSTR		! ACD name
	INTEGER		ACDLEN		! length of ACD name
	INTEGER		RET
C
C Start of function
C
	NODIG = .TRUE.			! assume no integer found
C
C Check separator is valid
C
	IF (CHECK_SEP) THEN
	  IF (T2ISEP()) GOTO 20
	ENDIF
C
C
C Get ready to read integer
C
	EOLN = RDCHS(NXTCH)		! get next non-blank character
	IF (EOLN) THEN		! check if end of line
	   CALL T2ILIN(.TRUE.)	! read in next input line
	   CALL T2ITST		! test it
C	   IF (GOTNXT) THEN		! check if got next IFF entry
C               CALL LSL_PUTMSG(IFROM__UNEXPEOE,CURLIN-1) 	
C	   ENDIF
	ELSE
	   CALL BSCH			! back to start of integer
	ENDIF	! (EOLN)
C
C Read the integer
C
	IF (.NOT. (DONE .OR. GOTNXT)) THEN		! check can read
	   CALL DCPSAV(INTPTR)			! save pointer
	   NODIG = RDINT(N)				! read integer
	   IF (NODIG) THEN 
	      CALL DCPSET(INTPTR) 
C
C we've not managed to read an integer so try and read a string ie the 
C ACD name is present - not the code
	      ACDLEN = READSTR(ACDSTR,,ON_SPACE,.TRUE.,RET)
C
C If string translates OK then put integer translation of the ACD into N
	      IF (.NOT.ACDFND_NAME(ACDSTR(:ACDLEN))) THEN
	         N = ACD_CODE
	         NODIG = .FALSE.
	      ENDIF
	   ELSE
	      CALL ACDFND(N)
	   ENDIF
C
	ENDIF	! (.NOT. (DONE .OR. GOTNXT))
C
C Assign function value
C
20	T2ILONACD = NODIG
C
C Return
C
	RETURN
	END
