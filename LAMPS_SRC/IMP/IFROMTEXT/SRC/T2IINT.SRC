	LOGICAL FUNCTION T2IINT(N)
C
***	IDENT	08DE86
***	MODULE	T2IINT
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Documentation completed			RJH	15-MAY-1984
C	Created					RJH	03-APR-1984
C
C Description
C
C    This function is designed for use by the IFROMTEXT program, and its
C purpose is to read the next integer in the input file. If not found on
C the current line, an integer is expected on the next non-blank line.
C    The function takes the value false if successful, and true if
C i) the number was corrupted, ii) the number was not found before the
C next IFF code, iii) an illegal separator was encountered, or
C iv) an input file read error occurred.
C    If the function was successful, the argument returned is the
C integer read. If unsuccessful, the argument will be unchanged unless
C an attempt was made to read an integer, in which case it will be zero.
C    Communication with other routines is via the common block T2IPAR.
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*2	N		! integer to be read
C
C Common blocks
C
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
C
C Functions called
C
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! VIOLIB - reads a character
	LOGICAL		RDINT		! VIOLIB - reads an integer
C
C Local variables
C
	INTEGER*2	INTPTR		! pointer to start of integer
	LOGICAL		NODIG		! got an integer ?
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
C
C Start of function
C
	NODIG = .TRUE.			! assume no integer found
C
C Check separator is valid
C
	IF (.NOT. T2ISEP()) THEN
C
C Get ready to read integer
C
	   EOLN = RDCHS(NXTCH)		! get next non-blank character
	   IF (EOLN) THEN		! check if end of line
	      CALL T2ILIN(.TRUE.)	! read in next input line
	      CALL T2ITST		! test it
	      IF (GOTNXT) THEN		! check if got next IFF entry
                  CALL LSL_PUTMSG(IFROM__UNEXPEOE,CURLIN-1) 	
	      ENDIF
	   ELSE
	      CALL BSCH			! back to start of integer
	   ENDIF	! (EOLN)
C
C Read the integer
C
	   IF (.NOT. (DONE .OR. GOTNXT)) THEN		! check can read
	      CALL DCPSAV(INTPTR)			! save pointer
	      NODIG = RDINT(N)				! read integer
	      IF (NODIG) CALL T2ICOR(INTPTR,'Integer')	! message if not
	   ENDIF	! (.NOT. (DONE .OR. GOTNXT))
	ENDIF	! (.NOT.T2ISEP())
C
C Assign function value
C
	T2IINT = NODIG
C
C Return
C
	RETURN
	END
