C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-09 17:40:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE T2ISEC
C
***	IDENT	09AU94
***	MODULE	T2ISEC
C
C	Copyright Laser-Scan Ltd., Cambridge, England.
C
CMOD1387Add /ORIGIN to convert absolute to local coords  JB 05-Aug-1994
C	Use T2IREAL8 for all CP coords for accuracy.
CMOD    Get length of NS right				CCB 14-Dec-1987
CMOD    New argument to T2IREA                         MWSR 02-Nov-1987
CMOD	NS text strings now up to 255 characters	TJH 16-Dec-1986
CMOD	Now tell the user more about defaults applied	TJH 06-Nov-1986
CMOD	Documentation completed				RJH 15-May-1984
C
C	Created						RJH 11-Apr-1984
C
C Description
C
C This subroutine is designed for use by the IFROMTEXT program, and its
C purpose is to deal with IFF text entries at the section level.
C
C On entry to this subroutine, the next entry code in the text file
C is expected to have been read in. Junction and void entries are
C ignored, while entries at lower levels are dealt with by calling the
C subroutine which deals with overlay level entries. Section level
C entries are written to the IFF file before calling the overlay level
C subroutine, and also prior to exit from this subroutine. On exit,
C a new IFF code will normally have been read from the text file, and
C that entry will be ready for processing at a higher level.
C
C Communication with other routines is via the common block T2IPAR.
C
	IMPLICIT NONE
C
C Local Parameters
	INTEGER*2	CCI		! cubic coefficients rows
	PARAMETER	(CCI = 10)
	INTEGER*2	CCJ		! cubic coefficients columns
	PARAMETER	(CCJ = 2)
	INTEGER*2	CPI		! corner points rows
	PARAMETER	(CPI = 4)
	INTEGER*2	CPJ		! corner points columns
	PARAMETER	(CPJ = 4)
C
C Common blocks
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***	COMMON/LSL$CMNIFROMTEXT:T2ICOM/		! global variables
***     COMMON/LSL$CMNIFF:IFFHAN/		! IFF interface
***     COMMON/LSL$CMNLSL:EXPC/
C
C Functions called
	LOGICAL		T2IREA			! reads a real
	LOGICAL		T2IREAL8		! reads a real*8
	LOGICAL		T2ISTR			! reads a string
	INTEGER		EXPAND			! returns number of chars
C
C Local variables
	INTEGER*4	NUM			! local IFF code sequence no.
	INTEGER		I,J			! counter
	INTEGER		NSLEN			! length of NS entry
	REAL*4		CFT(CCI,CCJ)		! cubic coefficients
C
	REAL*4		XY(CPI,CPJ)		! corner points
	REAL*8		DXY(CPI,CPJ)		! double corner points
C
	LOGICAL		HADNS			! had new section entry ?
	LOGICAL		HADCC			! had cubic coefficients entry ?
	LOGICAL		HADCP			! had corner points entry ?
	LOGICAL		HADEND			! end of section ?
	LOGICAL		FAILNS			! new section read failed ?
	LOGICAL		FAILCC			! cubic coeff. read failed ?
	LOGICAL		FAILCP			! corner points read failed ?
	LOGICAL		WRTIFF			! written data to IFF file ?
	BYTE		STRBUF(STRSZ)		! new section text data
	BYTE		TIMBUF(8)		! current time buffer
	BYTE		DATBUF(9)		! current date buffer
C
C Main Structure
C
C	repeat
C	   initialisation
C	   repeat
C	      if entry is to be ignored then
C		 ignore entry
C		 if not done read next IFF entry code from text file
C	      else if entry is at overlay level or below then
C		 write section level entries to IFF file
C		 deal with entry at overlay level
C		 if new entry is at section level
C		    note starting new section
C	      else if entry is at section level then
C		 case entry of
C		    NS : read in data
C		    CC : read in data
C		    CP : read in data
C		 if not done read next IFF entry code from text file
C	   until done or starting new sect. or entry above section level
C	   if necessary write section level entries to IFF file
C	until done or entry above section level
C
C --------------------------------------------------------------------
C Initialisation
C
10	DO 20 I=1,STRSZ
	   STRBUF(I) = 0		! start with nulls
20	CONTINUE
C
	CALL TIME(TIMBUF)		! current time
	CALL DATE(DATBUF)		! current date
C
	NSLEN = EXPAND('%Wcreated by IFROMTEXT at %A8 on %A9',
     &		  STRBUF,TIMBUF,DATBUF)	! default string
C
	DO 40 J=1,CCJ
	   DO 30 I=1,CCI
	      CFT(I,J) = 0.0		! start with zero's
30	   CONTINUE
40	CONTINUE
C
	CFT(2,1) = 1.0			! default x is unity
	CFT(3,2) = 1.0			! default y is unity
C
C Set up default CP values
C
	DXY(1,1) = 0.0			! default CP entry
	 XY(1,1) = DXY(1,1)
	DXY(2,1) = 1000.0
	 XY(2,1) = DXY(2,1)
	DXY(3,1) = 0.0
	 XY(3,1) = DXY(3,1)
	DXY(4,1) = 1000.0
	 XY(4,1) = DXY(4,1)
C
	DO 50 I=1,CPI
	   DXY(I,2) = 0.0
	    XY(I,2) = DXY(I,2)
50	CONTINUE
C
	DXY(1,3) = 1000.0
	 XY(1,3) = DXY(1,3)
	DXY(2,3) = 0.0
	 XY(2,3) = DXY(2,3)
	DXY(3,3) = 1000.0
	 XY(3,3) = DXY(3,3)
	DXY(4,3) = 0.0
	 XY(4,3) = DXY(4,3)
C
	DO 60 I=1,CPI
	  DXY(I,4) = 1000.0
	   XY(I,4) = DXY(I,4)
60	CONTINUE
C
	HADNS  = .FALSE.		! assume not had NS
	HADCC  = .FALSE.		! assume not had CC
	HADCP  = .FALSE.		! assume not had CP
	HADEND = .FALSE.		! assume not at end of section
	FAILNS = .FALSE.		! assume NS read not failed
	FAILCC = .FALSE.		! assume CC read not failed
	FAILCP = .FALSE.		! assume CP read not failed
	WRTIFF = .FALSE.		! have not written to IFF file
C
C Entry to be ignored
C
70	IF (ECDNUM.LE.MAXIGN) THEN
	   CALL T2IIGN
	   IF (.NOT.DONE) CALL T2INXT(.TRUE.)
C
C Entry at overlay level or below
C
	ELSEIF (ECDNUM.LE.MAXOVE) THEN
C
C Write data to IFF file
C
	   IF (.NOT.HADNS) THEN		! use default NS string?
	      CALL LSL_PUTMSG(IFROM__NSDEFAULT)
	      IF (LOG) THEN
	         CALL EXPAND('NS %AZ',STRBUF)
	         CALL LSL_ADDBUF(EXPBUF,EXPLEN)
	      ENDIF
	   ENDIF
C
	   CALL IFFNS(STRBUF,NSLEN)	! NS entry
C
	   IF (.NOT.HADCC) THEN		! use default CC values?
	      CALL LSL_PUTMSG(IFROM__CCDEFAULT)
	   ENDIF
C
	   CALL IFFCC(CFT)		! CC entry
	   IF (.NOT.HADCP) THEN		! use default CP values?
	      CALL LSL_PUTMSG(IFROM__CPDEFAULT)
	   ENDIF
C
	   CALL IFFCP(XY)		! CP entry
C
	   WRTIFF = .TRUE.		! IFF file now written
C
C Process entry at overlay level
C
	   CALL T2IOVE
C
C If new entry is at section level, start new section
C
	   IF (ECDNUM.LE.MAXSEC) HADEND = .TRUE.
C
C Entry at section level
C
	ELSEIF (ECDNUM.LE.MAXSEC) THEN
	   NUM = ECDNUM-MAXOVE		! calculate local sequence no.
	   GO TO (80,110,130), NUM
C
C NS entry
C
80	   IF (.NOT.HADNS) THEN
	      FAILNS = T2ISTR(STRBUF)	! read string
C
	      IF (FAILNS) THEN
	         CALL LSL_PUTMSG(IFROM__NSDEFAULT)
	      ELSE
		 DO 90 I=1,STRSZ
	           IF (STRBUF(I).EQ.0) THEN
		      NSLEN=I-1
		      GOTO 100
	            ENDIF
90		 CONTINUE
	         NSLEN=255
	      ENDIF
C
100	      HADNS = .TRUE.		! had NS even if failed
C
	   ELSE
	      CALL LSL_PUTMSG(IFROM__REPNSIGN,CURLIN)
	   ENDIF	! (.not. hadns)
C
	   GO TO 160
C
C CC entry
C
110	   IF (.NOT.HADCC) THEN
C
C Read data
	      I = 0
120	      I = I+1
C
	      FAILCC = T2IREA(CFT(I,1),.TRUE.)
C
	      IF (.NOT.FAILCC) FAILCC = T2IREA(CFT(I,2),.TRUE.)
	      IF (.NOT.FAILCC .AND. I.NE.CCI) GO TO 120
C
C If read failed skip to next entry
C
	      IF (FAILCC) THEN
	 	 CALL LSL_PUTMSG(IFROM__REMCCDEF)
		 IF (.NOT. (DONE.OR.GOTNXT)) CALL T2ISKP
	      ENDIF	! (failcc)
C
C Had CC even if failed
C
	      HADCC = .TRUE.
	   ELSE
C
C Output message and skip to next entry
C
	      CALL LSL_PUTMSG(IFROM__REPCCIGN,CURLIN)
	      CALL T2ISKP
	   ENDIF	! (.not. hadcc)
	   GO TO 160
C
C CP entry
C
130	   IF (.NOT.HADCP) THEN
C
C Read data
C
	      J = 0
140	      J = J+1
	      I = 0
150	      I = I+1
C
	      FAILCP = T2IREAL8(DXY(I,J),.TRUE.)
C
	      IF (HAD_ORIGIN) THEN
		IF (.NOT.FAILCP) THEN
		   IF (I.EQ.1 .OR. I.EQ.3) THEN
			XY(I,J) = DXY(I,J) - ORIGIN(1)	! convert x to local rea
		   ELSEIF (I.EQ.2 .OR. I.EQ.4) THEN
			XY(I,J) = DXY(I,J) - ORIGIN(2)	! convert y to local rea
		   ENDIF
		ENDIF		! (.not. failcp)
C
	      ELSE
		IF (.NOT.FAILCP) XY(I,J) = DXY(I,J)
	      ENDIF		! (had_origin)
C
	      IF (.NOT.FAILCP .AND. I.NE.CPI) GO TO 150
	      IF (.NOT.FAILCP .AND. J.NE.CPJ) GO TO 140
C
C If read failed skip to next entry
C
	      IF (FAILCP) THEN
		 CALL LSL_PUTMSG(IFROM__REMCPDEF)
		 IF (.NOT. (DONE.OR.GOTNXT)) CALL T2ISKP
	      ENDIF	! (failcp)
C
C Had CP even if failed
C
	      HADCP = .TRUE.
	   ELSE
C
C Output message and skip to next entry
C
	      CALL LSL_PUTMSG(IFROM__REPCPIGN,CURLIN)
	      CALL T2ISKP
	   ENDIF	! (.not.hadcp)
C
C If not done read next IFF entry code from text file
C
160	   IF (.NOT.DONE) CALL T2INXT(.TRUE.)
	ENDIF	! (ecdnum.le.maxign)
C
C Repeat if not done and not starting new section and
C entry at section level or below
C
	IF (.NOT.DONE .AND. .NOT.HADEND .AND.
     &				 ECDNUM.LE.MAXSEC) GO TO 70
C
C If not written, write section data to IFF file
C
	IF (.NOT. WRTIFF) THEN
	   IF (.NOT.HADNS) THEN		! use default NS string?
	      CALL LSL_PUTMSG(IFROM__NSDEFAULT)
	      IF (LOG)THEN
	         CALL EXPAND('NS %AZ',STRBUF)
	         CALL LSL_ADDBUF(EXPBUF,EXPLEN)
	      ENDIF
	   ENDIF
C
	   CALL IFFNS(STRBUF,NSLEN)	! NS entry
C
	   IF (.NOT.HADCC) THEN		! use default CC values?
	      CALL LSL_PUTMSG(IFROM__CCDEFAULT)
	   ENDIF
C
	   CALL IFFCC(CFT)		! CC entry
C
	   IF (.NOT.HADCP) THEN		! use default CP values?
	      CALL LSL_PUTMSG(IFROM__CPDEFAULT)
	   ENDIF
C
	   CALL IFFCP(XY)		! CP entry
	ENDIF	! (.not. wrtiff)
C
C Repeat if not done and entry at section level or below
C
	IF ((.NOT.DONE) .AND. (ECDNUM.LE.MAXSEC)) GO TO 10
C
C Return
C
	RETURN
	END
C
