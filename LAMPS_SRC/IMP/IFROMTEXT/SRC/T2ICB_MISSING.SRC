C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-02 17:13:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION T2ICB_MISSING(IS_CHAR,IS_MISSING)
C
***	IDENT	02NO87
***	MODULE	T2ICB_MISSING
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					MWSR	02-Nov-1987
C
C
C looks for the next non-blank character in the input file to check
C if it is the "missing character". If IS_CHAR is true then this 
C is designated by a null string - ie "". Otherwise we look for 
C a specific  parameterised character, MISSING_CHAR.
C On exit - the position in the input read buffer is set to the position
C before the character if not IS_MISSING otherwise it is set 
C after it.
C
C The function takes the value false if successful, and true if:
C  ii) the string was not found before the
C      next IFF code,
C iii) an illegal separator was encountered, or
C  iv) an input file read error occurred.
C
C
	IMPLICIT NONE
C
C Arguments
C
	LOGICAL		IS_CHAR        !IN - true to look  for ""
	LOGICAL	   	IS_MISSING     !OUT - true if found
C
C Common blocks
C
***     COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNLSL:READSTR.PAR/
***     COMMON/LSL$CMNIFROMTEXT:CBCMN.CMN/
C
C Functions called
C
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! reads char
	LOGICAL		RDCH		! reads char
C
C Local variables
C
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
C
C Start of function
	T2ICB_MISSING = .TRUE.
	IS_MISSING = .FALSE.
C
C
C Check separator is valid
C
	IF (.NOT. T2ISEP()) THEN
C
C read the character
C
3	   EOLN = RDCHS(NXTCH)		! get next non-blank character
	   IF (EOLN) THEN		! check if end of line
	      CALL T2ILIN(.TRUE.)	! read in next input line
	      CALL T2ITST		! test it
	      IF (.NOT. (DONE.OR.GOTNXT)) GOTO 3
	   ENDIF	! (EOLN)
C
	   IF (DONE .OR. GOTNXT) GOTO 999
C
	   IF (IS_CHAR) THEN
C
C check for ""
	      IF (NXTCH .EQ. 34) THEN
	         EOLN = RDCH(NXTCH)
	         IF(NXTCH .EQ. 34) THEN
	            IS_MISSING = .TRUE.
	         ELSE
	            CALL BSCH
	         ENDIF
	      ENDIF
	   ELSE
C
C check for ?
	      IF (NXTCH .EQ. MISSING_CHAR) THEN
	         IS_MISSING = .TRUE.
	      ENDIF
	   ENDIF
	   IF (.NOT. IS_MISSING) THEN
C
C restore pointer
	       CALL BSCH
	   ENDIF
C
	   T2ICB_MISSING = .FALSE.
	ENDIF
C
C Return
C
999	RETURN
	END
