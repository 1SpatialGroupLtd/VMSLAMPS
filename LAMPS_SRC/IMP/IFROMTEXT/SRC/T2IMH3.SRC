C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-10-29 16:21:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION T2IMH3( SIZE )
C
***	IDENT	19OC90
***	MODULE	T2IMH3
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author S Townrow, 1 October 1990
C
C to read a type 3 or 4 header from the text file. As the size of the header
C is not held in MH2DESC(2), it is taken from the lookup table pointed to by
C the logical LSL$LIBRARY:LSL$OS_MH_TABLE
C
	IMPLICIT NONE
C
C common files
C
	INCLUDE	'LSL$CMNOSMH:OSMH_NEW.PAR'	! header fields
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'	! LSLLIB messages
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'	! READSTR values
	INCLUDE	'LSL$CMNLSL:EXPC.CMN'		! text expansion 
	INCLUDE	'LSL$CMNIFF:MHOSGB.CMN'		! type 3 and 4 map header
	INCLUDE	'LSL$CMNOSMH:OSMH_NEW_MH.CMN'	! extracted field variable
C
	INCLUDE	'LSL$CMNIFROMTEXT:IFROMMSG.PAR'
	INCLUDE	'LSL$CMNIFROMTEXT:T2ICOM.CMN'	! switch flag in here
	INCLUDE	'LSL$CMNIFROMTEXT:T2IPAR.CMN'	! global variables
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'		! VIOLIB input command decoding
	INCLUDE	'LSL$CMNLSL:STATUS.CMN'
C
C Arguments
C
	INTEGER*4	SIZE		! the actual header size returned
	LOGICAL*4	OSMH_NEW_PUT_CITF_LINE ! write line to header
C       
C functions called
C
	LOGICAL		RDCH		! read character from input buffer
	INTEGER*4	FLRLIN		! VIOLIB - gets line from file
	INTEGER*4	FLRSEL		! VIOLIB - select file
!	INTEGER*4	READSTR		! read string
	INTEGER*4	OSMH_NEW_INI	! read and store translation table
	INTEGER*4	OSMH_NEW_GETFLD	! Extract a field from the header
C
C workspace
C
	BYTE		BYTELINE	! line as a byte array
	CHARACTER*80	TXTLINE		! A line of header text
	INTEGER*4	LINELIM		! maximum length of line
	INTEGER*4	HDSIZE		! Header size from table
	INTEGER*4	I,J,C		! loop counter
	INTEGER*4	OK		! selected file OK
	INTEGER		RETCOD		! VAX error return code
	INTEGER*4	NCHS		! no. characters
	INTEGER*4	RUNIT		! input file LUN
C
	EQUIVALENCE (BYTELINE,TXTLINE)
C
C **********************************************************************
C
	T2IMH3 = .TRUE.
C
	IF ( .NOT.OSMH_NEW_INI() ) THEN
C
C Reset BSLN and LUN
C
	   CALL BSLN
	   RUNIT = 1 		! this is also hard-coded in IFROMTEXT.SRC
	   OK = FLRSEL( RUNIT )
	   T2IMH3 = .TRUE.	! fail
	   GOTO 999
	ENDIF
C
C Set various things
C
	CALL BSLN
	RUNIT = 1 		! this is also hard-coded in IFROMTEXT.SRC
	OK = FLRSEL( RUNIT )
	J = 0
	C = 0
	LINELIM = 80
	SIZE = 0
C
C Get header size. For OSTF it is the sum of the -1 and -20 headers
C
	IF (MH2DESC(2).EQ.3) THEN			! type 3 OSTF header
	   IF ( .NOT.OSMH_NEW_GETFLD( MH_ONE )) GOTO 999
	   HDSIZE = MH_SIZE
	   IF ( .NOT.OSMH_NEW_GETFLD( MH_TWENTY )) GOTO 999
	   HDSIZE = HDSIZE + MH_SIZE
C
C The header size given in the table is assumed to be accurate and ASCII block
C will be read in blocks of 80 characters (the way it was written in ITOTEXT).
C
50	   CONTINUE
C
	   T2IMH3 = FLRLIN(TXTBUF,NCHS,TXTLIM,RETCOD)
	   CURLIN = CURLIN + 1
C       
C Check success of read and take appropriate action
C
	   IF (.NOT. T2IMH3 ) THEN
	      CALL LSL_PUTMSG(IFROM__ERRREADINP,CURLIN)
	      CALL LSL_PUTMSG(T2IMH3)
	      CALL LSL_PUTMSG(RETCOD) ! VAX error message
	      GOTO 999
C
C       No error
C       
	   ELSE
	      DO 100 I = 1,NCHS
		 MH2BYTE(I+J) = TXTBUF(I)
100	      CONTINUE
	   ENDIF
C
	   J = J + NCHS
	   IF (J.LT.HDSIZE) GOTO 50
C
C Size of header (in words) for IFFMH call is:
C
	   SIZE = HDSIZE / 2 + 2
C
C CITF type 4 header
C
	ELSE
	   HDSIZE = MH2BYSZ
200	   CONTINUE
C       
	   T2IMH3 = FLRLIN(BYTELINE,NCHS,LINELIM,RETCOD)
	   CURLIN = CURLIN + 1
	   IF (.NOT. T2IMH3 ) THEN
	      CALL LSL_PUTMSG(IFROM__ERRREADINP,CURLIN)
	      CALL LSL_PUTMSG(T2IMH3)
	      CALL LSL_PUTMSG(RETCOD) ! VAX error message
	      GOTO 999
	   ELSE
	      IF (TXTLINE(1:3).EQ.'!MD' .OR. TXTLINE(1:2).EQ.'MD') THEN
		 GOTO 300
	      ELSE
		 C = C + 1
		 T2IMH3 = OSMH_NEW_PUT_CITF_LINE(C,TXTLINE,NCHS)
		 IF (.NOT. T2IMH3 ) GOTO 999
		 SIZE = SIZE + 80
	      ENDIF
	   ENDIF
	   IF (SIZE.LT.MH2BYSZ) GOTO 200
C
C Size of header (in words) for IFFMH call is:
C
300	   SIZE = MAX(320,SIZE)
	   SIZE = MIN(SIZE,MH2BYSZ)
	   SIZE = SIZE / 2 + 2

	ENDIF
C
C Finish
C
	T2IMH3 = .FALSE.    ! success
C
C Return
C
999	RETURN
	END
C
