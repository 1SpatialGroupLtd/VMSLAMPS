C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-07-04 12:25:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION T2IACD(N)
C
***	IDENT	04JL90
***	MODULE	T2IACD
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Created					MWSR	26-NOV-1987
CMOD903 Use ACDFND/ACDFND_NAME to set up FRTACD correctly, and pass
C	back correct return code		  JB	03-JUL-1990
C
C looks for next integer in input buffer. If its not found then it 
C looks for a string.
C It then calls ACDFND or ACD_FNDNAME as appropriate and thus fills
C up the ACD common block
C
	IMPLICIT NONE
C
C Arguments
C
	INTEGER*2	N		! integer to be read
C
C Common blocks
C
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***     COMMON/LSL$CMNFRT:FRTACD/
***	COMMON/LSL$CMNLSL:READSTR.PAR/
C
C Functions called
C
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! reads a character
	LOGICAL		RDINT		! reads an integer
	INTEGER 	READSTR		! reads a string
	LOGICAL   	ACDFND		! finds ACD code
	LOGICAL		ACDFND_NAME     ! finds ACD code by name
C
C Local variables
C
	INTEGER*2	INTPTR		! pointer to start of integer
	LOGICAL		NODIG		! got an integer ?
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
	INTEGER         LN		! longword version of N
	CHARACTER*80    ACDSTR		! ACD name
	INTEGER		ACDLEN		! length of ACD name
	INTEGER		RET
C
C Start of function
C
	NODIG = .TRUE.			! assume no integer found
C
C Check separator is valid
C
	IF (.NOT. T2ISEP()) THEN
C
C Get ready to read integer
C
	   EOLN = RDCHS(NXTCH)		! get next non-blank character
C
	   IF (EOLN) THEN		! check if end of line
	      CALL T2ILIN(.TRUE.)	! read in next input line
	      CALL T2ITST		! test it
C
C Check if got next IFF entry
C
	      IF (GOTNXT) CALL LSL_PUTMSG(IFROM__UNEXPEOE,CURLIN-1) 	
	   ELSE
	      CALL BSCH			! back to start of integer/name
	   ENDIF			! (EOLN)
C
C Read as integer
C
	   IF (.NOT. (DONE .OR. GOTNXT)) THEN		! check can read
	      CALL DCPSAV(INTPTR)			! save pointer
	      NODIG = RDINT(N)				! read integer
C
	      IF (NODIG) THEN 				! no integer
		 CALL DCPSET(INTPTR) 
C
C we've not managed to read an integer so try and read a string ie the 
C ACD name is present - not the code
C
	         ACDLEN = READSTR(ACDSTR,,ON_SPACE,.TRUE.,RET)
	 	 NODIG = ACDFND_NAME(ACDSTR(1:ACDLEN),RET)   ! disable report
		 IF (NODIG) THEN
		    CALL LSL_PUTMSG(IFROM__UNKNACDNAM, ACDSTR(1:ACDLEN))
		    GOTO 100
		 ENDIF
C
	         N = ACD_CODE
	      ELSE					! an integer found
		 LN = N
		 NODIG = ACDFND(LN, .TRUE.)		! reports itself
	      ENDIF
C
	   ENDIF	! (.NOT. (DONE .OR. GOTNXT))
	ENDIF	! (.NOT.T2ISEP())
C
C Assign function value
C
100	T2IACD = NODIG
C
C Return
C
	RETURN
	END
C
