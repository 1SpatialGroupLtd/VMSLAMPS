C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-11 19:13:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION T2ISTR(STR)
C
***	IDENT	05NO87
***	MODULE	T2ISTR
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
CMOD    Now considers " as a string delimiter  MWSR     05-NOV-1987
CMOD	Documentation completed			RJH	15-MAY-1984
C	Created					RJH	27-APR-1984
C
C Description
C
C    This function is designed for use by the IFROMTEXT program, and its
C purpose is to read a string expected on the current input line.
C    Generally, the function takes the value false if a string was read,
C and true if there was no string on the line or if an illegal separator
C was encountered. In certain cases, i.e. if the current IFF code is NS
C or AC and no string was found, the function will succeed and take the
C value false.
C    If the function was successful, the argument returned is the
C string as read, padded with nulls. If unsuccessful, the argument will
C be unchanged.
C    Communication with other routines is via the common block T2IPAR.
C
	IMPLICIT NONE
C
C Common blocks
C
***	COMMON/LSL$CMNIFROMTEXT:IFROMMSG.PAR/
***	COMMON/LSL$CMNIFROMTEXT:T2IPAR/		! global variables
***     COMMON/LSL$CMNLSL:READSTR.PAR/
C
C Arguments
C
	BYTE		STR(STRSZ)	! text string
C
C Functions called
C
	INTEGER*4	T2ICON		! converts IFF code to seq. no.
	LOGICAL		T2ISEP		! skips separators
	LOGICAL		RDCHS		! VIOLIB - reads a character
	INTEGER		READSTR		! reads a string
C
C Local variables
C
	INTEGER*2	I		! counter
	LOGICAL		NOSTR		! got string ?
	LOGICAL		EOLN		! end of line ?
	BYTE		NXTCH		! next character
	INTEGER		LEN		! length of string
	LOGICAL		HAD_QUOTE	! read quotes char?
	INTEGER*4	STR_DESCR(2)   
	INTEGER*2	STR_LEN
	EQUIVALENCE     (STR_DESCR(1),STR_LEN)
C
C Start of Function
C
	STR_DESCR(1)  = 0
	STR_DESCR(2) = %LOC(STR)
	STR_LEN = STRSZ
	I = 1				! initialise counter
	NOSTR = .TRUE.			! assume no string found
	HAD_QUOTE  = .FALSE.		! quotes
C
C Check separator is valid
C
	IF (.NOT. T2ISEP()) THEN
C
C Get ready to read string
C
	   EOLN = RDCHS(NXTCH)		! get next character
	   IF (EOLN) THEN		! check if end of line
C
C Ascertain success of function so far
C
	      IF ((ECDNUM .EQ. T2ICON('NS')) .OR. 
     &		 (ECDNUM .EQ. T2ICON('AC'))) THEN
		 NOSTR = .FALSE.	! function successful
	      ELSE
		 CALL LSL_PUTMSG(IFROM__MISSTXT,CURLIN)
	      ENDIF	! ((ECDNUM .EQ. ...))
	   ELSE
C
C Read string
C
	      IF (NXTCH .EQ. 34) THEN
	         HAD_QUOTE = .TRUE.
	      ELSE
	         CALL BSCH
	      ENDIF
C
	      IF (HAD_QUOTE)THEN
C
C  read charcters but terminating on closing quotes
	         LEN = READSTR(STR_DESCR,34,ON_CHAR2,.FALSE.,)
	      ELSE
	         LEN= READSTR(STR_DESCR,,ON_EOL,.FALSE.,) ! read chars
	      ENDIF
	      IF (LEN .LE. STRSZ) THEN
	         DO 200 I=LEN+1,STRSZ
		    STR(I) = 0		! pad with nulls
200	         CONTINUE
	      ELSE
		 CALL LSL_PUTMSG(IFROM__TXTOUTRAN,CURLIN,STRSZ)
		 CALL LSL_ADDMSG(IFROM__REMCHRIGN)
	      ENDIF	! (I .LE. STRSZ)
	      NOSTR = .FALSE.		! string has been read
	   ENDIF	! (EOLN)
	ENDIF	! (.NOT. T2ISEP())
C
C Assign function value
C
	T2ISTR = NOSTR
C
C Return
C
	RETURN
	END
