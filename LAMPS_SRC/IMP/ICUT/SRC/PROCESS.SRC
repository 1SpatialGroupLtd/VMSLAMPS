C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1998-06-18 18:14:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION PROCESS(P_FSN,P_FC,ISTAT)
C
***	MODULE	PROCESS
***	IDENT	18JN98
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C 	Author						SG	20-May-1991
C
C	This module is part of the ICUT program.
C	It processes features that have been matched against the criteria
C	from the command line. It is called by CUTF which does the selection 
C	of features.
C	The features are cut into smaller child features, and will retain the 
C	ACs of the parent feature. Other attributes of the parent feature are
C	not retained unless specified by qualifiers on the command line.
C
C	Note that this version of Process can not deal effectively with CB 
C	entries.
C
CMOD	description improved				SG	30-May-1991
C
CMOD	The revision level of the input is set by GETF.SRC This functions 
C	assumes that it has been set to 1. and processes everything as CBs
C	STs and ZSs should never be detected, but if they are a warning 
C	message appears					SG	31-May-1991
C
CMOD	bug fixed in feature_length calculations, length now calculated by
C	looking at current and the next coord. no longer retrospective.
CMOD	new length calculation unable to look at next CB entry, (to see if
C	length will be exceeded at next point) reverted to retrospective length
C	calculations. Since change involves modifying variable in DO 
C	construct, this has been changed to become  conditional loop.
CMOD	Also removed duplicate code for writing feature
CMOD	code for breaking features at invisible entries, now moved to before
C	CB coordinates are processed. Which means that no special consideration
C	needs to be given to invisible features afterwards 
C							SG	03-Jun-1991 
CMOD    Made this routine write the RO entry rather than WRITE_NF.
C       Also corrected the logic in splitting features when using
C	the /INVISIBLE qualifier. Mod 1378.		ST	24-Mar-1995
CMOD	Deal with points at end of CBs correctly (SPR 3533).
C							MJGW	25-Nov-1996
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNICUT:ARG.CMN'
	INCLUDE 'LSL$CMNICUT:FLAG.CMN'
	INCLUDE 'LSL$CMNICUT:ICUTMSG.PAR'
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C...................................................................
C Arguments
C
	INTEGER*2	P_FSN			! FSN of parent Feature
	INTEGER*2	P_FC			! FC of parent Feature
	REAL*8		P_Z			! height attribute
	INTEGER*2	ISTAT(4)		! contents of FS entry
C
C workSpace
C
	BYTE		TEXT_BUF(80)		! store text here
	INTEGER		TEXT_LEN		! length of text
	INTEGER		PSTATUS			! pen-up, pendown flag
	INTEGER*2	OLD_PSTATUS
	INTEGER*2	NUM_COORDS		! size of CB entries 
	INTEGER		POINTS			! total points in feature
	INTEGER		WROTE_POINTS		! points actually written
	INTEGER		NEW_POS			! which coord to start new FSN
	INTEGER*2	NREALS			! number of reals to read
	INTEGER*2	IN_COLS,OUT_COLS	! number columns
	REAL*4		LENGTH			! total length of feature
	LOGICAL		CUT			! cut feature here?
	INTEGER		ITMP1,ITMP2,ITMP3
	REAL*8		RTMP1,RTMP2,RTMP3
	REAL*8		L_COORDS(3)		! previous coords for /LENGTH
	INTEGER		NUM_AC_FOUND		! how many ACs in parent
	INTEGER*4	LSAV
	LOGICAL		IGNORE
	RECORD/IFF_CBH/	TMP_CBH
C
C Functions
C
	INTEGER*2	WRITE_NF
	INTEGER*2	WRITE_CB
C
C...................................................................
C
	GOT_TS = .FALSE.			! initialisations
	GOT_TX = .FALSE.
	GOT_TC = .FALSE.
	GOT_ST = .FALSE.
	GOT_ZS = .FALSE.
	GOT_CB = .FALSE.
	GOT_RO = .FALSE.
	GOT_TH = .FALSE.
	GOT_AC = .FALSE.

	NUM_AC_FOUND = 0
	POINTS = 0
	WROTE_POINTS = 0
	LENGTH = 0.0
	WROTE_NF = .FALSE.
	OLD_PSTATUS = -1
	ITMP1= 1
C
C...................................................................
C
10	CALL IFFNXT(IECODE,IELEN)
	IF (IECODE.NE.'EF') THEN
	   IF (IECODE.EQ.'AC') 	GOTO 50
	   IF (IECODE.EQ.'TS') GOTO 100
	   IF (IECODE.EQ.'TH') GOTO 125
	   IF (IECODE.EQ.'ST') GOTO 150
	   IF (IECODE.EQ.'ZS') GOTO 200
	   IF (IECODE.EQ.'CB') GOTO 250
	   IF (IECODE.EQ.'JP') GOTO 300
	   IF (IECODE.EQ.'RO') GOTO 350
	   IF (IECODE.EQ.'TX') GOTO 400
	   IF (IECODE.EQ.'VO') GOTO 10
	   IF (IECODE.EQ.'JB') GOTO 10
	   IF (IECODE.EQ.'TC') GOTO 10
	   CALL LSL_PUTMSG(ICUT__UNEXPENTRY)
	   IF (HAD_LOG) THEN
	     IF (IECODE.EQ.'RA') CALL WRITEF('RA')
	     IF (IECODE.EQ.'HI') CALL WRITEF('HI')
	     IF (IECODE.EQ.'SH') CALL WRITEF('SH')
	     IF (IECODE.EQ.'EJ') CALL WRITEF('EJ')
	     IF (IECODE.EQ.'MH') CALL WRITEF('MH')
	     IF (IECODE.EQ.'MD') CALL WRITEF('MD')
	     IF (IECODE.EQ.'EM') CALL WRITEF('EM')
	     IF (IECODE.EQ.'NS') CALL WRITEF('NS')
	     IF (IECODE.EQ.'CC') CALL WRITEF('CC')
	     IF (IECODE.EQ.'CP') CALL WRITEF('CP')
	     IF (IECODE.EQ.'NO') CALL WRITEF('NO')
	     IF (IECODE.EQ.'EO') CALL WRITEF('EO')
	     IF (IECODE.EQ.'TC') CALL WRITEF('TC')
	     IF (IECODE.EQ.'CH') CALL WRITEF('CH')
	     IF (IECODE.EQ.'CS') CALL WRITEF('CS')
	     IF (IECODE.EQ.'SS') CALL WRITEF('SS')
	     IF (IECODE.EQ.'SL') CALL WRITEF('SL')
	     IF (IECODE.EQ.'NF') CALL WRITEF('NF')
	     IF (IECODE.EQ.'FS') CALL WRITEF('FS')
	   ENDIF
	   GOTO 10
	ENDIF
	GOTO 999
C
C...................................................................
C found an AC
50	GOT_AC = .TRUE.
	NUM_AC_FOUND = NUM_AC_FOUND +1
	IF (NUM_AC_FOUND.EQ.1) FIRST_AC_POS=LPOSH
	GOTO 10
C
C...................................................................
C found a TS
100	GOT_TS = .TRUE.			! set flag
	CALL EIHRI(ISTAT(2),1,1)	! read into array
	GOTO 10
C
C...................................................................
C found a TH
125	GOT_TH = .TRUE.
	CALL EIHRI(ITHK,1,1)
	GOTO 10
C
C...................................................................
C found a ST *** shouldn't ever get here ***
150	GOT_ST = .TRUE.			! increment number of STs
	CALL LSL_PUTMSG(ICUT__UNIMPLE,'ST')
	CALL IFFNXC('EF',IELEN)
	GOTO 10

C...................................................................
C found a ZS *** shouldn't ever get here ***
200	GOT_ZS = .TRUE.			! increment number of ZSs
	CALL LSL_PUTMSG(ICUT__UNIMPLE,'ZS')
	CALL IFFNXC('EF',IELEN)
	GOTO 10
C
C...................................................................
C found a CB
250	GOT_CB = .TRUE.
	GOTO 600
C
C...................................................................
C found a JP
300	IF (HAD_LOG) CALL WRITEF('Ignoring JP')
	GOTO 10
C
C...................................................................
C found AN RO
350	GOT_RO = .TRUE.
	CALL EIHRR(ROT,1,1)
	IF (POINTS.EQ.1) THEN
	   CALL IFFSEL(OUTLUN)
	   CALL IFFRO(ROT)
	   CALL IFFSEL(INLUN)
	ENDIF
	GOTO 10
C
C...................................................................
C found a TX
400	GOT_TX = .TRUE.
	CALL EIHR(TEXT_BUF,IELEN,1)		! read text
	TEXT_LEN = IELEN			! remember length of text
	GOTO 10
C
C...................................................................
C found a TC
450	IF (HAD_LOG) CALL WRITEF('Ignoring TC')
	GOTO 10
C
C...................................................................
C read CB entry
600	CALL EIHRCB_HEAD(IN_CBH)			! read header
	CALL EIHRCB_DATA(IN_CBD)			! read data
C
C	..................................................................
C	get data from CB header
C
	NUM_COORDS = IN_CBH.NROW			! how many coords
	IN_COLS =  IN_CBH.NCOL
	PSTATUS = IN_CBH.FLAGS				! visibility status
C
C	..................................................................
C	by default same number of output deimensions as input, and 
C	length calculations done in 3-d space
C
	OUT_COLS = IN_COLS
	NREALS = 3
	IF ( (IN_COLS.EQ.2).OR.HAD_XYONLY ) THEN
	   NREALS = 2					! output = 2-D
	   OUT_COLS= 2					! length calcs in 2-D
	ENDIF
C
C	..................................................................
C	should we break features at invisible features?
C	
	IF (HAD_INVIS.AND.(PSTATUS.EQ.0).AND.(OLD_PSTATUS.NE.-1)) THEN
	   IF (NUM_COORDS.EQ.1) THEN
C
C Check next entry in file. If it's another invisble CB, then ignore
C this one, as we don't want consecutive invisible segments to be
C output as separate features.
	      IGNORE = .FALSE.
	      LSAV = LPOSH
	      CALL IFFNXT(IECODE,IELEN)
	      IF (IECODE.EQ.'CB') THEN
	         CALL EIHRCB_HEAD(TMP_CBH)		! read header
	         IF (TMP_CBH.FLAGS .EQ. 0) IGNORE = .TRUE.
	      ENDIF
	      CALL IFFPKE(IECODE,IELEN,LSAV)
	      IF (IGNORE) THEN
	         WROTE_NF = .FALSE.
	         GOTO 10
	      ENDIF
	   ENDIF
	   IF (WROTE_NF) THEN
	     CALL IFFSEL(OUTLUN)
	     CALL IFFEF
	     CALL IFFSEL(INLUN)
	     WROTE_NF = .FALSE.
	   ENDIF
	ENDIF
	OLD_PSTATUS= PSTATUS
C
C	..................................................................
C	finished reading the data, now actually process them
C
	NEW_POS=0
	ITMP1 = 1
C
610	IF (ITMP1.LE.NUM_COORDS) THEN			! if more points in CB
	  POINTS = POINTS+1				! tot points in feature
C
C	  ..................................................................
C	  keep running total of feature length if reqd. Assume reals
C
	  IF (HAD_LENGTH.AND.(POINTS.GT.1)) THEN		! find length
	     RTMP1 = 0.0
	     DO 630 ITMP2=1,NREALS
	        RTMP2= IN_CBD.R( IN_COLS*(ITMP1-1) + ITMP2)	!current
	        RTMP1 = RTMP1 +(RTMP2-L_COORDS(ITMP2))**2	!distance
630	     CONTINUE
	     LENGTH = LENGTH + SQRT(RTMP1)			! add to length
	     IF (LENGTH.GT.MAX_LENGTH) THEN	! if length too big
		ITMP1 = ITMP1 -1		! reduce current point
		POINTS = POINTS -1		! reduce points in feature
	     ENDIF 
	  ENDIF
C
C	  ..................................................................
C	  remember coordinates for length calculations
C
	  IF (HAD_LENGTH.AND.(ITMP1.GE.1)) THEN 
	     DO 640 ITMP2=1,NREALS
		L_COORDS(ITMP2) = IN_CBD.R( IN_COLS*(ITMP1-1) + ITMP2)
640	     CONTINUE
	  ENDIF
C
C	  ..................................................................
C	  if criterion matches, set flag
C
	  CUT = .FALSE.					!default to no cut
C
	  IF ( 	 (  HAD_POINTS.AND.(POINTS.EQ.MAX_POINTS) ).OR.
     &		 (  HAD_LENGTH.AND.(LENGTH.GT.MAX_LENGTH) )  ) CUT = .TRUE.
C
C	  ..................................................................
C	  if criterion met, or at end of CB entry
C
	  IF (CUT.OR.(ITMP1.EQ.NUM_COORDS) ) THEN
	     P_Z = IN_CBD.R(IN_COLS*(ITMP1-1) + 3)
	     IF (.NOT.WROTE_NF)  CALL WRITE_NF(ISTAT,P_FSN,P_FC,P_Z)
	     CALL WRITE_CB(NEW_POS,POINTS-WROTE_POINTS,IN_COLS,OUT_COLS)
	     CALL IFFSEL(OUTLUN)
	     IF (GOT_TX) THEN
	        CALL IFFTX(TEXT_BUF,TEXT_LEN)		! write text
	        GOT_TX = .FALSE.
	     ENDIF
C
C	     ..........................................................
C 	     are we cutting feature or just at end of CB 
C
	     IF (CUT) THEN
		CALL IFFEF				! close feature
		WROTE_NF = .FALSE.
		NEW_POS = NEW_POS + (POINTS-WROTE_POINTS)
		LENGTH = 0.0
		POINTS = 0
		WROTE_POINTS =0
		IF (HAD_POINTS.AND.MAX_POINTS.GT.1) THEN
		   NEW_POS = NEW_POS - 1
		   POINTS = 1
		   IF (ITMP1.EQ.NUM_COORDS) THEN	! Last point in block?
		      ITMP1  = ITMP1-1			! Deal with properly.
		      POINTS = 0
		   ENDIF
		ENDIF
	     ELSE
		WROTE_POINTS= POINTS
	     ENDIF		
	     CALL IFFSEL(INLUN)				! back to input
	  ENDIF
C
C	  ..........................................................
C
	  ITMP1 = ITMP1+1				! next point in CB
	  GOTO 610					! go back and process
	ENDIF
	GOTO 10						! get next CB etc
C
C...................................................................
C 
999	IF (WROTE_NF) THEN
	  CALL IFFSEL(OUTLUN)
	  CALL IFFEF
	  CALL IFFSEL(INLUN)
	ENDIF
	RETURN
	END
