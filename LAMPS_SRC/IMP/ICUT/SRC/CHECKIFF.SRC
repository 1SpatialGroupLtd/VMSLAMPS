C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-05-30 11:44:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION CHECKIFF()
C
***	MODULE	CHECKIFF
***	IDENT	30MY91
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C 	Author					SG	17-May-1991
C
CMOD	explanation modified, source code redundancies identified by PGH,
C	corrected				SG	30-May-1991
C
C       This module checks the integrity of an IFF file. 
C	It ensures that the following match
C	NO, EO		NF,EF		MD,EM
C	and that EJ is the last entry in the file
C
C	The function also determines the highest external FSN in the IFF file
C	This is used later in ICUT so that newly created 'child' features 
C	will have FSNs which do not coincide with those of the original
C	parent features.
C		
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNICUT:ARG.CMN'
	INCLUDE 'LSL$CMNICUT:FILES.CMN'
	INCLUDE 'LSL$CMNICUT:FLAG.CMN'
C
	INCLUDE 'LSL$CMNICUT:ICUTMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
C
C...................................................................
C workspace
C
	LOGICAL		GOT_NF, GOT_OVERLAY, GOT_MAP
	INTEGER*2	INF_FSN
	INTEGER		INF_MAX_FSN
	LOGICAL		HAD_EJ
C...................................................................
C Initialisations
C
	GOT_NF = .FALSE.
	GOT_OVERLAY = .FALSE.
	GOT_MAP = .FALSE.
	MAX_FSN = 0
C...................................................................
C	
C	
	CHECKIFF = LSL__NORMAL			! set default return code
	CALL IFFSEL(INLUN)			! select input file
	CALL IFFRWD				! rewind to start
	IF (HAD_LOG) CALL WRITEF()
C
10	CALL IFFSEL(INLUN)			! read from input IFF file
	CALL IFFNXT(IECODE,IELEN)		! get next entry
C
	IF (IELEN.EQ.-1) THEN			!check EOF
	   IF (.NOT.HAD_EJ)  CALL LSL_PUTMSG(ICUT__UNEXPEOF)
	   GOTO 999
	ENDIF
C
C...................................................................
C look at entries
	IF(IECODE.EQ.'EJ')THEN
	  HAD_EJ = .TRUE.
C
	ELSEIF(IECODE.EQ.'MD')THEN
	  IF (GOT_MAP) THEN
	    CALL LSL_PUTMSG(ICUT__TOOMANYMH)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_MAP = .TRUE.
C
	ELSEIF(IECODE.EQ.'EM')THEN
	  IF (.NOT.GOT_MAP) THEN
	    CALL LSL_PUTMSG(ICUT__UNEXPEM)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_MAP = .FALSE.
C
	ELSEIF(IECODE.EQ.'NO')THEN
	  IF (GOT_OVERLAY) THEN
	    CALL LSL_PUTMSG(ICUT__TOOMANYNO)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_OVERLAY = .TRUE.
C
	ELSEIF(IECODE.EQ.'EO')THEN
	  IF (.NOT.GOT_OVERLAY) THEN
	    CALL LSL_PUTMSG(ICUT__UNEXPEO)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_OVERLAY = .FALSE.
C
	ELSEIF(IECODE.EQ.'NF')THEN
	  IF (GOT_NF) THEN
	    CALL LSL_PUTMSG(ICUT__TOOMANYNF)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_NF = .TRUE.
	  CALL EIHRI(INF_FSN,1,1)
	  MAX_FSN = MAX(INF_FSN,MAX_FSN)
C
	ELSEIF(IECODE.EQ.'EF')THEN
	  IF (.NOT.GOT_NF) THEN
	    CALL LSL_PUTMSG(ICUT__UNEXPEF)
	    CHECKIFF = LSL__HADEXCP
	    GOTO 999
	  ENDIF
	  GOT_NF = .FALSE.
	ENDIF
C
C ignore other entries for now
C
	GOTO 10					! get next entry
C
C...................................................................
C
999	IF (CHECKIFF.EQ.LSL__NORMAL) THEN
	  IF (HAD_LOG)  CALL LSL_PUTMSG(ICUT__HIGHINFSN,MAX_FSN)
	ENDIF
	RETURN
	END
