        INTEGER*4 FUNCTION OBEY()
C
***	MODULE	OBEY
***	IDENT	24MY91
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C 	Author					SG	13-May-1991
C
C       This module is the command decoder of an IFF ICUT program
C	adapted from command decoder of IFF ISELECT program
C
CMOD	added /XYONLY qualifier				SG	15-May-1991
CMOD	disallowed /AC=Z without /POINTS=1		SG	21-May-1991
CMOD	standardised messages and check for 
CMOD	premature end of file				SG	24-May-91
CMOD	checks that one of POINTS ,LENGTH exists
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNICUT:ARG.CMN'
	INCLUDE 'LSL$CMNICUT:FILES.CMN'
	INCLUDE 'LSL$CMNICUT:FLAG.CMN'
	INCLUDE 'LSL$CMNICUT:ICUTMSG.PAR'
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
C
	INCLUDE '($FORDEF)'
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
C
C...................................................................
C Command Language Definitions
	EXTERNAL	ICUT_CLD
C
C...................................................................
C workspace
C
	CHARACTER*128   TMP_FIL		! filename
C
	INTEGER*4       TMP_LEN		! length of file-spec
	INTEGER*4	LOOP		! loop variable
C
	LOGICAL*4	ABSENT		! .T. if  param. not found
	LOGICAL*4	NO_INFILE	! .T. if infile param. not found
	LOGICAL*4	NO_OUTFILE	! .T. if outfile param. not found
        LOGICAL*4	WHINGE		! .T.-local error reporting
	LOGICAL		LOCAL		! .T. if qual. is local
	LOGICAL		LOCNEG		! set .T. if qual. locally negated
C
C...................................................................
C functions called
C
	INTEGER*4	DCL_FILE   ! reads & parses file title from cmd line
	INTEGER*4	DCL_INT	    ! get integer arguments
	INTEGER*4	DCL_QUAL    ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP ! looks for command line
	INTEGER*4	DCL_DBL	    ! get real*8 args
	INTEGER*4	WRITEF	
	INTEGER*4	EXPAND
	INTEGER*4	APPEND
	INTEGER*4	WRITAP
	INTEGER*4	EXPFLN
C
C...................................................................
C initialise things
C
	HAD_AC     = .FALSE.
	HAD_AC_FSN = .FALSE.
	HAD_AC_FC  = .FALSE.
	HAD_AC_Z   = .FALSE.
	HAD_FC     = .FALSE.
	HAD_FCP    = .FALSE.
	HAD_INVIS  = .FALSE.
	HAD_LAYER  = .FALSE.
	HAD_LENGTH = .FALSE.
	HAD_LOG    = .FALSE.
	HAD_NEWFC  = .FALSE.
	HAD_POINTS = .FALSE.
	HAD_XYONLY = .FALSE.
C
	WHINGE    = .TRUE.		! local error reporting
	LOCAL   = .FALSE.		! set .T. if qual. is local
        LOCNEG  = .FALSE.		! set .T. if qual. locally negated
C
C....................................................................
C get command line for verb ICUT. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	OBEY=DCL_STARTUP ('ICUT',.FALSE.,ICUT_CLD,WHINGE)
        IF (.NOT.OBEY) GOTO 80
C
C....................................................................
C check for qualifiers: 
C /AC,/FC,/FCP,/INVISIBLES,/LAYER,/LENGTH,/LOG,/NEWFC,/POINTS,/XYONLY
C....................................................................
C first /AC
C
	OBEY=DCL_QUAL('AC',HAD_AC,LOCAL,LOCNEG,WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_AC) THEN
	  OBEY = DCL_QUAL('AC.FC' ,HAD_AC_FC ,LOCAL,LOCNEG,WHINGE)
	  IF (.NOT.OBEY) GOTO 80
	  OBEY = DCL_QUAL('AC.FSN',HAD_AC_FSN,LOCAL,LOCNEG,WHINGE)
	  IF (.NOT.OBEY) GOTO 80
	  OBEY = DCL_QUAL('AC.Z'  ,HAD_AC_Z  ,LOCAL,LOCNEG,WHINGE)
	  IF (.NOT.OBEY) GOTO 80
	ENDIF
C
C ......................................................................
C now /FC
C
	OBEY=DCL_QUAL('FC', HAD_FC, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_FC) THEN
          OBEY=DCL_INT('FC',WHINGE)	! get integer arguments
          IF (.NOT.OBEY) GOTO 80
          IF (NUMINT.GE.1) THEN
      	    DO 10 LOOP = 1,NUMINT	! transfer to array
	       FC(LOOP,1)= IARRAY(LOOP)
10          CONTINUE
	    NUM_FC = NUMINT
	  ENDIF
	ENDIF
C
C ......................................................................
C now /FCP
C
	OBEY=DCL_QUAL('FCP', HAD_FCP, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_FCP) THEN				! get file name
          OBEY=DCL_FILE('FCP','PAIR.FIL;0',ABSENT, .FALSE., .TRUE.)
	  IF (.NOT.OBEY) GOTO 80
	  IF (ABSENT) THEN
	    OBEY = .FALSE.
	    GOTO 80
	  ENDIF
	  PAIR_FIL = FILARY(1)(1:FIL_LEN(1))
	  PAIR_LEN = FIL_LEN(1)	  
	ENDIF
C
C ......................................................................
C now /invisibles
C
	OBEY=DCL_QUAL('INVISIBLES', HAD_INVIS, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
C
C ......................................................................
C now /LAYER
C
	OBEY=DCL_QUAL('LAYER', HAD_LAYER, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_LAYER) THEN
          OBEY=DCL_INT('LAYER',WHINGE)	! get integer arguments
          IF (.NOT.OBEY) GOTO 80
          IF (NUMINT.GE.1) THEN
      	    DO 20 LOOP = 1,NUMINT	! transfer to array
	       LAYER(LOOP)= IARRAY(LOOP)
20          CONTINUE
	    NUM_LAY = NUMINT
	  ENDIF
	ENDIF
C
C ......................................................................
C now /LENGTH
C
	OBEY=DCL_QUAL('LENGTH', HAD_LENGTH, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_LENGTH) THEN
          OBEY=DCL_DBL('LENGTH',WHINGE)		! get REAL argument
          IF (.NOT.OBEY) GOTO 80
	  MAX_LENGTH = DBLRAY(1)
	ENDIF
C
C ......................................................................
C now /LOG
C
	OBEY=DCL_QUAL('LOG', HAD_LOG, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
C
C ......................................................................
C now /NEWFC
C
	OBEY=DCL_QUAL('NEWFC', HAD_NEWFC, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_NEWFC) THEN
          OBEY=DCL_INT('NEWFC',WHINGE)	! get integer argument
          IF (.NOT.OBEY) GOTO 80
          OUT_FC = IARRAY(1)
	ENDIF
C ......................................................................
C now /POINTS
C
	OBEY=DCL_QUAL('POINTS', HAD_POINTS, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
	IF (HAD_POINTS) THEN
          OBEY=DCL_INT('POINTS',WHINGE)	! get integer argument
          IF (.NOT.OBEY) GOTO 80
	  MAX_POINTS = IARRAY(1)
	ENDIF
C
C ......................................................................
C now /XYONLY
C
	OBEY=DCL_QUAL('XYONLY', HAD_XYONLY, LOCAL, LOCNEG, WHINGE)
	IF (.NOT.OBEY) GOTO 80
C
C ......................................................................
C get input  file-name or prompt for it
	OBEY=DCL_FILE('IN_FILESPEC', 'LSL$IF:IFF.IFF;0',
     &					 NO_INFILE, .FALSE., WHINGE)
        IF (.NOT.OBEY) GOTO 80
	P1_FIL=FILARY(1)(1:FIL_LEN(1))	!Copy file-spec to a local var
	P1_LEN=FIL_LEN(1)		!Copy file-spec-length to a local var
C
C ......................................................................
C output file defaults to same name as input file without version no.
	HAD_VER = .FALSE.
	OBEY = EXPFLN(TMP_FIL,TMP_LEN)
	IF (.NOT.OBEY) GOTO 80
C ......................................................................
C get output file details
	OBEY=DCL_FILE('OUT_FILESPEC', TMP_FIL(:TMP_LEN),
     &					NO_OUTFILE, .FALSE., WHINGE)
	IF (.NOT. OBEY) GOTO 80
	P2_FIL=FILARY(1)(1:FIL_LEN(1))	! get file_spec
	P2_LEN=FIL_LEN(1)		! get file_spec_length
C			
C ......................................................................
C
80	IF (OBEY) THEN
	  IF ((.NOT.HAD_POINTS).AND.(.NOT.HAD_LENGTH)) THEN
	    MAX_POINTS = 1
	    HAD_POINTS = .TRUE.
	    CALL LSL_PUTMSG(ICUT__WARNINSUFSWITCH)
	    CALL LSL_PUTMSG(ICUT__SETPTS)
	  ENDIF
	  IF (HAD_AC_Z.AND.(MAX_POINTS.NE.1)) THEN
	    CALL LSL_PUTMSG(ICUT__INAPAZ)
	    CALL LSL_PUTMSG(ICUT__CANAZ)
	    HAD_AC_Z = .FALSE.
	  ENDIF
	  IF (HAD_LOG) THEN			! diagnostics
	    CALL LSL_PUTMSG(ICUT__CMDQUAL)
	    CALL EXPAND('%T')
	    IF (HAD_AC)		CALL APPEND(' /AC ')
	    IF (HAD_AC_FSN)	CALL APPEND(' /AC=FSN ')
	    IF (HAD_AC_FC)	CALL APPEND(' /AC=FC ')
	    IF (HAD_AC_Z)	CALL APPEND(' /AC=Z ')
	    IF (HAD_FC)		CALL APPEND(' /FC ')
	    IF (HAD_FCP)	CALL APPEND(' /FCP ')
	    IF (HAD_INVIS)	CALL APPEND(' /INVISIBLE ')
	    IF (HAD_LAYER)	CALL APPEND(' /LAYER ')
	    IF (HAD_LENGTH)	CALL APPEND(' /LENGTH ')
	    IF (HAD_LOG)	CALL APPEND(' /LOG ')
	    IF (HAD_NEWFC)	CALL APPEND(' /NEWFC ')
	    IF (HAD_POINTS)	CALL APPEND(' /POINTS ')
	    IF (HAD_XYONLY)	CALL APPEND(' /XYONLY ')
	    CALL WRITAP('.')
	  ENDIF	
	ELSEIF (OBEY.EQ.CLI__NOMSG) THEN
	  CALL LSL_PUTMSG(OBEY)
	ENDIF
	RETURN
	END
