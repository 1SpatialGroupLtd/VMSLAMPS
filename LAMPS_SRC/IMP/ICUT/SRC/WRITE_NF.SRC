C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-03-24 15:20:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION WRITE_NF(ISTAT,IN_FSN,IN_FC,IN_Z)
C
***	MODULE	WRITE_NF
***	IDENT	24MR95
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C 	Author						SG	21-May-1991
C
C       This writes out the NF and FSN parts of a new IFF entry
C
CMOD	Enhanced to copy the AC codes of the parent features.
C
CMOD	out-of sequence code corrected			SG	30-May-1991
C
CMOD    Made the routine check for overflow before the	ST	24-Mar-1995
C	MAX_FSN exceeds 32767. Also removed the code
C       that attempts to write the RO entry as it can
C       never happen. Mod 1378.
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNICUT:FLAG.CMN'
	INCLUDE 'LSL$CMNICUT:FILES.CMN'
	INCLUDE 'LSL$CMNICUT:ARG.CMN'
C
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
C
C...................................................................
C Arguments
C
	INTEGER*2	IN_FSN			! FSN of parent Feature
	INTEGER*2	IN_FC			! FC of parent Feature
	REAL*8		IN_Z			! value of Height
	INTEGER*2	ISTAT(4)		! contents of FS entry
C
	REAL*8		RCODE
	INTEGER*2	LCODE
C
	INTEGER*2	IN_AC
	INTEGER*4	OUT_AC
	INTEGER*4	CURRENT_POS		!current reading position
	INTEGER*2	TMP_CODE
	INTEGER*2	TMP_LEN
C
	EQUIVALENCE	(LCODE,RCODE)		!effectively a UNION
	EQUIVALENCE	(IN_AC,OUT_AC)

C
C...................................................................
C	    write new-feature details if not allready done
C
	IF (.NOT.WROTE_NF) THEN			!write FSN entry if not done
	  IF (MAX_FSN.GE.32767) MAX_FSN = 0	!start from zero again
	  IF (ISQ.GE.32767) ISQ = 0		!start from zero again
	  MAX_FSN = MAX_FSN + 1			!increase external FSN number
	  ISQ = ISQ + 1				!increase internal sequence
	  CALL IFFSEL(OUTLUN)			!select output file
	  CALL IFFNF(MAX_FSN,ISQ)		!write NF entry
	  CALL IFFFS(ISTAT)			! write FS
C
C	  ................................................................
C	  write the AC's which hold info about parent feature
C
	  IF (HAD_AC_FSN) THEN
	     IN_AC = IN_FSN			! convert
	     CALL IFFAC(9,OUT_AC)		! AC with parent's FSN
	  ENDIF
	  IF (HAD_AC_FC)THEN
	     IN_AC = IN_FC			! convert 
	     CALL IFFAC(1,OUT_AC)		! AC with parent's FC
	  ENDIF
	  IF (HAD_AC_Z) THEN
	    RCODE = IN_Z
	    CALL IFFAC(3,LCODE)
	  ENDIF
C
C	  ................................................................
C	  write out the ACs which were in parent feature
C
	  IF (GOT_AC) THEN			! if parent feature had ACs
	    CALL IFFSEL(INLUN)			! select input file
	    CURRENT_POS = LPOSH			! remember current position
C						! move to start of ACs
	    CALL IFFPKE(TMP_CODE,TMP_LEN,FIRST_AC_POS)
10	    IF (TMP_CODE.EQ.'AC') THEN		! if current entry an AC
	      CALL EIHCPY(OUTLUN)		! copy to output file
	      CALL IFFNXT(TMP_CODE,TMP_LEN)	! get next entry
	      GOTO 10		
	    ENDIF
C						! move to where left of
	    CALL IFFPKE(TMP_CODE,TMP_LEN,CURRENT_POS)
	    CALL IFFSEL(OUTLUN)			! select output file
	  ENDIF 
C
C	  ................................................................
C	  write out any other bits 
C
	  IF (GOT_TH) CALL IFFTH(ITHK)		! write TH
C
C This shouldn't be here. The RO will never be found before an ST only after.
C So this routine (whuich is called before the ST is written by PROCESS) will
C never have GOT_RO set to TRUE!
C
CCC	  IF (GOT_RO) CALL IFFRO(ROT)
	  WROTE_NF = .TRUE.			! set flag to say so
	  CALL IFFSEL(INLUN)			! back to input
	ENDIF					! finished writing header bit
	RETURN
	END
