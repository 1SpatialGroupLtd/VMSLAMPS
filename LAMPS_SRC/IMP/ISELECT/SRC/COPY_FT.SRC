C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-04 18:12:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION COPY_FT(FT_START,FT_CODE)
C
***	MODULE COPY_FT
***	IDENT  05NO86
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C
CMOD	Output RAnge now determined from STs and ZSs  TJH 04-Dec-1986
C	Author A.T.Timms (with a rocket !)	          05-Nov-1986
C	
C Subroutine to copy a selected "feature" from input IFF file to output 
C IFF file for ISELECT. The start position of the feature in the input
C file is FT_START and the start code FT_CODE.
C
C Copy everything except VOids and and Junction stuff.
C
 	IMPLICIT NONE 
C
C LSL common blocks
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C Program common blocks
	INCLUDE 'LSL$CMNISELECT:FLAG.CMN'
	INCLUDE 'LSL$CMNISELECT:ARG.CMN'
	INCLUDE 'LSL$CMNISELECT:ISELECTMSG.PAR'
C
C Workspace:
	INTEGER*2	FS_NUM		! feature serial number
	INTEGER*2	IECODE 		! entry code
	INTEGER*2	IELEN 		! entry length
	INTEGER*2	IENDS		! string pen control
	INTEGER*2	I		! loop variable
	INTEGER*2	NPTS		! number of points in string
	INTEGER*4	ISQ		! Internal sequence number
	INTEGER*2	FT_CODE 	! feature start code
	INTEGER*4	FT_START	! feature start flag...actually
C					! set at EF and NO because of
C					! those lovely !**! TC entries 
	REAL    TBUF(2,200)    		! IFF string coords. for feature
	REAL    TBUF3(3,200)   		! 3D string coords. for feature
C
	EQUIVALENCE(TBUF3(1,1),TBUF(1,1))
C
C......................................................................
	COPY_FT = .TRUE.		! assume success
C
C......................................................................
C Select input file and rewind to saved position.
10	CALL IFFSEL(INLUN)
	CALL IFFPKE(IECODE,IELEN,FT_START)
	IF (IECODE.NE.FT_CODE.OR.IELEN.EQ.-1) THEN
	  COPY_FT = ISELECT__FTOREPTONV		! Oh dear !!
	  CALL LSL_PUTMSG(COPY_FT)		! we are lost !!
	  CALL IFFSEL(OUTLUN)			! exit tidyly
	  CALL IFFEJ				! write EJ
	  GOTO 999
	ENDIF
C
C....................................................................
C Copy everything except VOid's and junctions until NF, unless already 
C at NF
20	IF (IECODE.NE.'NF') THEN
	  IF (IECODE.NE.'VO'.OR.IECODE.NE.'JB') CALL EIHCPY(OUTLUN)
	  CALL IFFNXT( IECODE, IELEN )
	  IF (IELEN.EQ.-1) GOTO 800		! error
	  GOTO 20
	ENDIF
C
C....................................................................
C At an NF so write an NF
	CALL EIHRI(FS_NUM,1,1)			! read FSN from input 
	CALL IFFSEL(OUTLUN)			! select output file
	ISQ = 0					! set sequence no. = 0
	CALL IFFNF(FS_NUM,ISQ)			! write NF
	CALL IFFSEL(INLUN)			! back to input
C
C....................................................................
C
C Copy until EF except VOids and Junction stuff.
30	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 800		! error
	IF (IECODE.EQ.'VO') GOTO 30
	IF (IECODE.EQ.'JP') GOTO 30
C
C STs are special - we must determine the new RAnge
C
	IF (IECODE.EQ.'ST') THEN
	   CALL EIHRS(NPTS,IENDS) 		! read the string header
	   CALL EIHRR(TBUF(1,1),NPTS*2,1)	! read the string coords
	   DO 35 I=1,NPTS
	      IRANGE(1)=AMIN1(IRANGE(1),TBUF(1,I))! determine new range
	      IRANGE(2)=AMAX1(IRANGE(2),TBUF(1,I))! entry values for
	      IRANGE(3)=AMIN1(IRANGE(3),TBUF(2,I))! output file
	      IRANGE(4)=AMAX1(IRANGE(4),TBUF(2,I))
35	   CONTINUE
	ENDIF
C
C ZSs are special too - we must determine the new RAnge from these too
C
	IF (IECODE.EQ.'ZS') THEN
	   CALL EIHRS(NPTS,IENDS) 		! read the string header
	   CALL EIHRR(TBUF3(1,1),NPTS*3,1)	! read the string coords
	   DO 36 I=1,NPTS
	      IRANGE(1)=AMIN1(IRANGE(1),TBUF3(1,I))! determine new range
	      IRANGE(2)=AMAX1(IRANGE(2),TBUF3(1,I))! entry values for
	      IRANGE(3)=AMIN1(IRANGE(3),TBUF3(2,I))! output file
	      IRANGE(4)=AMAX1(IRANGE(4),TBUF3(2,I))
36	   CONTINUE
	ENDIF
	IF (IECODE.NE.'EF') THEN
	   CALL EIHCPY( OUTLUN )
	   GOTO 30
	ENDIF
C
C....................................................................
C Reached an EF so write an EF in output file
	CALL IFFSEL(OUTLUN)
	CALL IFFEF
	CALL IFFSEL(INLUN)
	OUTSIDE=.TRUE.		! now we are back outside a feature
	GOTO 999
C
C....................................................................
C Errors here:
800	COPY_FT = ISELECT__UNEXPEOF
	CALL LSL_PUTMSG(COPY_FT)
C
C....................................................................
C All done
999	RETURN
	END
