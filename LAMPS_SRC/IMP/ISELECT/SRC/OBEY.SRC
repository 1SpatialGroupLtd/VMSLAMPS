C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-05-07 11:52:46.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION OBEY()
C
***	MODULE	OBEY
***	IDENT	01MY91
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
CMOD	/TS qualifier changed to /TCC			TJH 12-Nov-1986
CMOD	Output file version numbers tidied & TS entries	ATT 04-Nov-1986 
CMOD	Messages rationalised. FORTRAN INCLUDE statement
CMOD	/FC made non-negatable				 SG 01-May-1991
C	used consistently. Statement labels tidied.	TJH 21-Jul-1986
C 
C 	Author				  Immanuel Freedman 29-Jan-1986
C
C       This module is the command decoder of an IFF select program
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNISELECT:ARG.CMN'
	INCLUDE 'LSL$CMNISELECT:FILES.CMN'
	INCLUDE 'LSL$CMNISELECT:FLAG.CMN'
	INCLUDE 'LSL$CMNISELECT:ISELECTMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE '($FORDEF)'
	INCLUDE '($RMSDEF)'
	INCLUDE '($SSDEF)'
	INCLUDE '($STSDEF)'
C
C Command Language Definitions
	EXTERNAL	ISELECT_CLD
C workspace
	CHARACTER*128   TMP_FIL    ! filename
C
	INTEGER*4       TMP_LEN    ! length of file-spec
	INTEGER*4	LOOP	   ! loop variable
C
	LOGICAL*4	ABSENT	   ! .T. if file param. not found
	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
C
        LOGICAL*4	WHINGE     ! .T.-local error reporting
C
C functions called
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_INT	   ! get integer arguments
	INTEGER*4	MY_REAL	   ! get real arguments
        INTEGER*4       DCL_STARTUP! looks for command line
C
C...................................................................
C initialise things
C
	WHINGE = .TRUE.		   ! local error reporting
	HAD_AC = .FALSE.	   ! set .T. if /AC
	HAD_FC = .FALSE. 	   ! set .T. if /FC
	HAD_EXCLUDE = .FALSE. 	   ! set .T. if /EXCLUDE_FC
	HAD_TCC = .FALSE. 	   ! set .T. if /TCC
	HAD_FSN = .FALSE.	   ! set .T. if /FSN
	HAD_INT = .FALSE.          ! set .T. if /INTEGER_HEIGHT
	HAD_LAY = .FALSE. 	   ! set .T. if /LAYER
	HAD_LOG = .FALSE. 	   ! set .T. if /LOG
	HAD_MOD = .FALSE.	   ! set .T. if /MODULUS
	HAD_REA = .FALSE.	   ! set .T. if /REAL_HEIGHT
	LOCAL   = .FALSE.          ! set .T. if qual. is local
        LOCNEG  = .FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C get command line for verb ISELECT. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	OBEY=DCL_STARTUP('ISELECT' ! command verb
     &      ,.FALSE.               ! don't split parameter lists
     &      ,ISELECT_CLD           ! CLD module name
     &      ,WHINGE)               ! .T. -local error reporting
        IF (.NOT.OBEY) GOTO 80
C
C....................................................................
C check for qualifiers, we could have /AC,/TCC,/FC,FSN,/INTEGER_HEIGHT,
C /LAYER,/LOG,/MODULUS,/REAL_HEIGHT
C first /AC
	OBEY=DCL_QUAL('AC'       ! qual. name
     &        		,HAD_AC  ! returned .T. if qual. found
     &			,LOCAL    ! .T. if qual local to parameter
     &			,LOCNEG   ! .T. if qual. negated locally
     &			,WHINGE)  ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
          GOTO 80
	ELSEIF (HAD_AC) THEN
C
C get integer arguments
          OBEY=DCL_INT('AC',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMINT.GE.1) THEN
	    DO 10 LOOP = 1,NUMINT
	      AC(LOOP)= IARRAY(LOOP)
10	    CONTINUE
	    NUM_AC=NUMINT
          ENDIF
	ENDIF
C
C ......................................................................
C now /EXCLUDE_FC
	OBEY=DCL_QUAL('EXCLUDE_FC'        ! qual. name
     &  		,HAD_EXCLUDE   ! returned .T. if qual. found
     &   		,LOCAL    ! .T. if qual. local to parameter
     &			,LOCNEG   ! .T. if qual. locally negated
     &		     	,WHINGE)  ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
	  GOTO 80
	ELSEIF (HAD_EXCLUDE) THEN
          OBEY=DCL_INT('EXCLUDE_FC',WHINGE)	! get integer arguments
          IF (.NOT.OBEY) GOTO 80
          IF (NUMINT.GE.1) THEN
      	    DO 15 LOOP = 1,NUMINT	! transfer to array
	       FC(LOOP)= IARRAY(LOOP)
15          CONTINUE
	    NUM_FC = NUMINT
	  ENDIF
	ENDIF

C
C ......................................................................
C now /FC
	OBEY=DCL_QUAL('FC'        ! qual. name
     &  		,HAD_FC   ! returned .T. if qual. found
     &   		,LOCAL    ! .T. if qual. local to parameter
     &			,LOCNEG   ! .T. if qual. locally negated
     &		     	,WHINGE)  ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
	  GOTO 80
	ELSEIF (HAD_FC) THEN
          OBEY=DCL_INT('FC',WHINGE)	! get integer arguments
          IF (.NOT.OBEY) GOTO 80
          IF (NUMINT.GE.1) THEN
      	    DO 20 LOOP = 1,NUMINT	! transfer to array
	       FC(LOOP)= IARRAY(LOOP)
20          CONTINUE
	    NUM_FC = NUMINT
	  ENDIF
	ENDIF
C
C ......................................................................
C now /TCC
	OBEY=DCL_QUAL('TCC'        ! qual. name
     &  		,HAD_TCC	  ! returned .T. if qual. found
     &   		,LOCAL    ! .T. if qual. local to parameter
     &			,LOCNEG   ! .T. if qual. locally negated
     &		     	,WHINGE)  ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
	  GOTO 80
	ELSEIF (HAD_TCC)THEN
C
C get integer arguments
          OBEY=DCL_INT('TCC',WHINGE)
          IF (.NOT.OBEY) GOTO 80
          IF (NUMINT.GE.1) THEN
C
C transfer to array
      	    DO 25 LOOP = 1,NUMINT
	       TCC(LOOP)= IARRAY(LOOP)
25          CONTINUE
	    NUM_TCC = NUMINT
	  ENDIF
	ENDIF
C
C ......................................................................
C now /FSN
	OBEY=DCL_QUAL('FSN'       ! qual. name
     & 		,HAD_FSN          ! returned .T. if qual. found
     &		,LOCAL		  ! .T. if qual. local to parameter
     &		,LOCNEG		  ! .T. if qual. locally negated
     &		,WHINGE)          ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
 	  GOTO 80
	ELSEIF (HAD_FSN)THEN
C
C get integer arguments
	  OBEY=DCL_INT('FSN',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMINT.GE.1) THEN
	    DO 30 LOOP=1,NUMINT
	       FSN(LOOP)=IARRAY(LOOP)
30	    CONTINUE
	    NUM_FSN=NUMINT
	  ENDIF
	ENDIF		
C
C ......................................................................
C now /INTEGER_HEIGHT
	OBEY=DCL_QUAL('INTEGER_HEIGHT'	! qual. name
     & 		,HAD_INT     		! returned .T. if qual. found
     &		,LOCAL			! .T. if qual local to parameter
     &		,LOCNEG			! .T. if qual. locally negated
     &		,WHINGE)          	! .T.-local error reporting
	IF (.NOT.OBEY) THEN
 	  GOTO 80
	ELSEIF (HAD_INT)THEN
C
C get integer arguments
	  OBEY=DCL_INT('INTEGER_HEIGHT',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMINT.GE.1) THEN
	    DO 40 LOOP=1,NUMINT
	       IHEIGHT(LOOP)=IARRAY(LOOP)
40	    CONTINUE
	    NUM_INT=NUMINT
	  ENDIF
	ENDIF		
C
C ......................................................................
C now /MODULUS
	OBEY=DCL_QUAL('MODULUS'   ! qual. name
     & 		,HAD_MOD          ! returned .T. if qual. found
     &		,LOCAL		  ! .T. if qual. local to parameter
     &		,LOCNEG		  ! .T. if qual. locally negated
     &		,WHINGE)          ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
 	  GOTO 80
	ELSEIF (HAD_MOD)THEN
C
C get integer arguments
	  OBEY=DCL_INT('MODULUS',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMINT.GE.1) THEN
	    DO 50 LOOP=1,NUMINT
	       MODULUS(LOOP)=IARRAY(LOOP)
50	    CONTINUE
	    NUM_MOD=NUMINT
	  ENDIF
	ENDIF		
C
C ......................................................................
C now /LAYER
	OBEY=DCL_QUAL('LAYER' 	  ! qual. name
     & 		,HAD_LAY	  ! returned .T. if qual. found
     &		,LOCAL		  ! .T. if qual. local to parameter
     &		,LOCNEG		  ! .T. if qual. locally negated
     &		,WHINGE)          ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
 	  GOTO 80
	ELSEIF (HAD_LAY) THEN
C
C get integer arguments
	  OBEY=DCL_INT('LAYER',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMINT.GE.1) THEN
	    DO 60 LOOP=1,NUMINT
	       LAYER(LOOP)=IARRAY(LOOP)
60	    CONTINUE
	    NUM_LAY=NUMINT
	  ENDIF
	ENDIF		
C ......................................................................
C now /REAL_HEIGHT
	OBEY=DCL_QUAL('REAL_HEIGHT' ! qual. name
     & 		,HAD_REA         ! returned .T. if qual. found
     &		,LOCAL		  ! .T. if qual. local to parameter
     &		,LOCNEG		  ! .T. if qual. locally negated
     &		,WHINGE)          ! .T.-local error reporting
	IF (.NOT.OBEY) THEN
 	  GOTO 80
	ELSEIF (HAD_REA)THEN
C
C get real arguments
	  OBEY=MY_REAL('REAL_HEIGHT',WHINGE)
	  IF (.NOT.OBEY) GOTO 80
C
C transfer to array
	  IF (NUMREA.GE.1) THEN
	    DO 70 LOOP=1,NUMREA
	       RHEIGHT(LOOP)=RARRAY(LOOP)
70	    CONTINUE
	    NUM_REA=NUMREA
	  ENDIF
	ENDIF
C
C ......................................................................
C now /LOG
	OBEY=DCL_QUAL('LOG' ! qual. name
     & 		,HAD_LOG          ! returned .T. if qual. found
     &		,LOCAL		  ! .T. if qual. local to parameter
     &		,LOCNEG		  ! .T. if qual. locally negated
     &		,WHINGE)          ! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 80
C
C ......................................................................
C get input  file-name or prompt for it
	OBEY=DCL_FILE('IN_FILESPEC' !parameter label
     &		,'LSL$IF:IFF.IFF;0'! default file-name
     &		,ABSENT  	  ! .T. if no file-name
     &		,.FALSE.          ! don't expect list of files
     &          ,WHINGE)          ! .T.-local error reporting
C
C transfer file-spec to a local variable
        IF (OBEY) THEN
           P1_FIL=FILARY(1)(1:FIL_LEN(1))
	   P1_LEN=FIL_LEN(1)
        ELSE
           GOTO 80
        ENDIF 
C
C ......................................................................
C output file defaults to same name as input file without version no.
C
	HAD_VER = .FALSE.
	CALL EXPFLN(TMP_FIL,TMP_LEN)
C
C ......................................................................
C
	OBEY=DCL_FILE('OUT_FILESPEC'	! parameter label
     &		,TMP_FIL(:TMP_LEN)	! default file-name = input file
     &		,ABSENT		  	! .T. if no file-name
     &		,.FALSE.	  	! don't expect list of files
     &		,WHINGE)	  	! .T.-local error reporting
C
C Transfer file-spec to a local variable
C
	IF (OBEY) THEN
	  P2_FIL=FILARY(1)(1:FIL_LEN(1))
	  P2_LEN=FIL_LEN(1)
        ENDIF
C			
C ......................................................................
80	RETURN
	END
