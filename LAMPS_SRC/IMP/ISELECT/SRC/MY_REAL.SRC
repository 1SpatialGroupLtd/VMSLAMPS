	INTEGER*4 FUNCTION MY_REAL(CLD_LABEL,WHINGE)
C
***	MODULE	MY_REAL
***	IDENT	22MY86
C
C
C 	Author I. Freedman  		10-Feb-1986
C
C 	This module is a version of DCL_REAL which permits range 
C	decoding.
C
	IMPLICIT NONE
C
	INTEGER*4 	CLI$_ABSENT, CLI$GET_VALUE
	EXTERNAL 	CLI$_ABSENT
	CHARACTER*16	CHAR_ARRAY	! found string argument
	INTEGER*2	CHAR_LEN        ! length of found string arg.
	CHARACTER*(*)	CLD_LABEL	! the CLD label for qualifier
	INTEGER*4	COLPOS		! position of colon in range
	INTEGER*4	I		! loop var.
	INTEGER*4	IERR		! for error return
	REAL*4		RSTART		! defines start of number range
	REAL*4		RSTOP		! defines end of number range
	LOGICAL*4	REPORT		! .T. if local error reporting
	LOGICAL*4	WHINGE		! .T. if local error reporting
C
	EXTERNAL	DCL_ERRET
C
	INCLUDE 	'LSL$CMNISELECT:ARG.CMN'	
	INCLUDE 	'LSL$CMNLSL:CLD.CMN'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 	'($SSDEF)'
	INCLUDE 	'($STSDEF)'
C
	COMMON /REPORT/ REPORT	
C
C ......................................................................
C
	NUMREA=0		! initialise number of args. counter
	REPORT=WHINGE		! is condition handler to scream?
	CALL LIB$ESTABLISH( DCL_ERRET )
	MY_REAL= CLI$GET_VALUE (CLD_LABEL,
     &				 CHAR_ARRAY,
     &				 CHAR_LEN)
	DO WHILE (MY_REAL)
	    NUMREA=NUMREA+1
	    IF (NUMREA.EQ.MAX_REAL) THEN
	        MY_REAL=LSL__RESPARSOVF
		CALL LIB$SIGNAL
     &			( %VAL(MY_REAL) ) ! signal error
	        IF (WHINGE)
     &		           CALL WRITEF(' \%S\',CHAR_ARRAY(:CHAR_LEN))
	        CALL LIB$REVERT
	        RETURN
	    ENDIF
	    DO 10 I=1,CHAR_LEN
	      IF ((CHAR_ARRAY(I:I).LT.'0'
     &		  	.OR.CHAR_ARRAY(I:I).GT.'9')
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'+'
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'-'
     &	  	  	.AND.CHAR_ARRAY(I:I).NE.'.' 
     &			.AND.CHAR_ARRAY(I:I).NE.':')
     &						THEN
	        MY_REAL=LSL__INVALSPEC
	        IF (WHINGE) THEN
	           CALL LSL_PUTMSG(MY_REAL) 	! sets $status for you
		   CALL WRITEF(' \%S\',CHAR_ARRAY(:CHAR_LEN))
		ELSE
	           LSL_STATUS=MY_REAL.OR.LSL_QUIET	! set $status 
		ENDIF
	        CALL LIB$REVERT
	        RETURN
	     ENDIF
10	   CONTINUE
	COLPOS=INDEX(CHAR_ARRAY,':')
	IF (COLPOS.EQ.CHAR_LEN) THEN	! user said,n:,or,:,
	   MY_REAL=LSL__INVALSPEC
	   IF (WHINGE) THEN
	      CALL LSL_PUTMSG(MY_REAL)	! set $status for you
	      CALL WRITEF(' \%S\',CHAR_ARRAY(:CHAR_LEN))
	   ELSE
	      LSL_STATUS=MY_REAL.OR.LSL_QUIET	! set $status
	   ENDIF
	   CALL LIB$REVERT
	   RETURN
	ENDIF
	IF (COLPOS.EQ.0) THEN		! no colon...single number
	   READ(CHAR_ARRAY,*,ERR=30) RARRAY(NUMREA)
	   MY_REAL= CLI$GET_VALUE (CLD_LABEL,
     &				    CHAR_ARRAY,
     &				    CHAR_LEN)
	ELSE				! read range start/stop numbers
	   IF (COLPOS.EQ.1) THEN	! user said ,:N,or ,:,
	     RSTART=0.0
	   ELSE
	     READ(CHAR_ARRAY(:COLPOS-1),*,ERR=30) RSTART
	   ENDIF
	   READ(CHAR_ARRAY(COLPOS+1:CHAR_LEN),*,ERR=30) RSTOP
	   RARRAY(NUMREA)=RSTART
	   RANGE_FLAG(NUMREA) = .TRUE.
	   NUMREA=NUMREA+1
	   RARRAY(NUMREA)=RSTOP
	   MY_REAL=CLI$GET_VALUE(CLD_LABEL,CHAR_ARRAY,CHAR_LEN)
	ENDIF
	END DO
	IF (MY_REAL
     &		.OR.
     &		    (MY_REAL.EQ. %LOC(CLI$_ABSENT) )) THEN
	    MY_REAL=SS$_NORMAL
	ELSE IF (IBITS(MY_REAL,0,3).NE.STS$K_WARNING) THEN
     	    CALL LIB$SIGNAL( %VAL(MY_REAL) ) ! signal error
	ENDIF
	GOTO 40
30	CALL ERRSNS(,,,,MY_REAL)
	CALL LIB$SIGNAL ( %VAL(MY_REAL) ) 
40	CALL LIB$REVERT
	LSL_STATUS=MY_REAL.OR.LSL_QUIET	! set $status 
	RETURN 	
	END
