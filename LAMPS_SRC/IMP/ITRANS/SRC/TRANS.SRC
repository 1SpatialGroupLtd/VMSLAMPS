C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-26 16:22:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION TRANS(COORD,RNGE)
C
***	MODULE TRANS
***	IDENT 15JN89
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				 6-Jan-1986
C
CMOD	do not ever scale output coordinates, when using 
C	plane transformation mode
C						RWR	15-Jun-1989
C
CMOD    Convert for F77 GCTPLIB compatibility (WI/CC 1514)      TJM 26-Oct-1995
C
C       This subroutine transforms a coordinate pair from one projection
C	to another
C
C	It operates on R*8 values, so that it can be called from
C	PRCPTS, to transform individual (possibly large) coordinates
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:ITRANSMSG/
	INCLUDE '($STSDEF)'
C
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/HERE:DESCRIPT/
***	COMMON/HERE:GENERAL/
C
C arguments
C
	REAL*8		COORD(3)	! coordinate pair to transform
	LOGICAL		RNGE		! .TRUE. when transformed point
 					! is to be included in 
					! calculation of range
	
C
C w/s
C
	REAL*8		ICOORD(3)
	REAL*8		OCOORD(3)
	REAL*8		SCL
	INTEGER*4	IDMS(4)
	INTEGER*4	IERR
	CHARACTER*30	PROJ
	CHARACTER*60	ERR
C
C functions
C
	REAL*8		DMSP
	INTEGER		SIGCHS
C
C assume success 
C
	TRANS=ITRANS__NORMAL
C
C add local origin
C
	COORD(1)=COORD(1)+CURRLOC(1)
	COORD(2)=COORD(2)+CURRLOC(2)
C
C if we have done a plane transformation, then the output system has
C been defined by the RHS CP entry - and the coordinates should not
C be altered
	IF (HAD_FTT) GOTO 10
C
C convert input units, if required
C
	IF (INUNIT.NE.CURRUNT) THEN
	   IF (CURRUNT.EQ.200) THEN	! units already in secs
	      ICOORD(1)=COORD(1)
	      ICOORD(2)=COORD(2)
	   ELSEIF (CURRUNT.EQ.110) THEN ! convert 1/10 secs to secs
	      ICOORD(1)=COORD(1)/10.0
	      ICOORD(2)=COORD(2)/10.0
	   ELSEIF (CURRUNT.EQ.1) THEN	! convert to international
	      ICOORD(1)=COORD(1)*F2M	! metres
	      ICOORD(2)=COORD(2)*F2M
	   ELSE				! currunt  mms, thou or  rads
	      ICOORD(1)=COORD(1)
	      ICOORD(2)=COORD(2)
	   ENDIF
C
C otherwise, just copy the coords over
C
	ELSE
	   ICOORD(1)=COORD(1)
	   ICOORD(2)=COORD(2)
	ENDIF
C
	ICOORD(3) = COORD(3)
C
C do transformation if required
C
	IF (DOTRANS) THEN
	   ITREX=.FALSE.
C
C transform
C
	   IF (HAD_DATUM) THEN
	      CALL DATUM_SHIFT(ICOORD,INUNIT,OUTUNIT,SPH(1,1),
     &	                           SPH(1,2),DIFFS,IERR)
	      OCOORD(1) = ICOORD(1)
	      OCOORD(2) = ICOORD(2)
	      OCOORD(3) = ICOORD(3)
	   ELSE
	      CALL GTRN(ICOORD,INSYS,INZONE,PARIN,INUNIT,
     &	                OCOORD,OUTSYS,OUTZONE,PAROUT,OUTUNIT,IERR)
	   ENDIF
C
C deal with error (either error from GCTPLIB or from exception handler)
C
	   IF (IERR.NE.0.OR.ITREX) THEN
	      COORD(1)=0.0
	      COORD(2)=0.0
	      COORD(3)=0.0
C
C error in GCTP or DATUM_SHIFT
C
	      IF (IERR.NE.0) THEN    ! fatal error
	         IF (HAD_DATUM) THEN
	            IF (IERR.EQ.1) THEN
	               CALL LSL_PUTMSG(ITRANS__ILLEGINPUT)
	               TRANS = ITRANS__ILLEGINPUT
	            ELSEIF (IERR.EQ.2) THEN
	               CALL LSL_PUTMSG(ITRANS__ILLEGOUTPUT)
	               TRANS = ITRANS__ILLEGOUTPUT
	            ELSE
	               CALL LSL_PUTMSG(ITRANS__NOCONVERGE)
	               TRANS = ITRANS__NOCONVERGE
	            ENDIF
	            GOTO 999
	         ELSE
	            CALL GTRNERR(IERR,PROJ,ERR)	! get error message
	            CALL LSL_PUTMSG(ITRANS__WGCTPERR,
     &	                     PROJ(1:SIGCHS(PROJ)))
	            CALL WRITEF('*** %S',ERR(1:SIGCHS(ERR)))
	         ENDIF
	      ENDIF
C
C allow to continue
C
	      IF (HAD_DATUM) THEN
	         TRANS = ITRANS__DSERR
	      ELSE
	         TRANS=ITRANS__WGCTPERR
	      ENDIF
	      GOTO 999
	   ENDIF
	ELSE
	   OCOORD(1)=ICOORD(1)
	   OCOORD(2)=ICOORD(2)
	   OCOORD(3)=ICOORD(3)
	ENDIF
C
C convert to output units
C
	IF (OUTUNIT.NE.TARGUNT) THEN
	   IF (TARGUNT.EQ.200) THEN	! conversion done in PRCPTS
	      COORD(1)=OCOORD(1)
	      COORD(2)=OCOORD(2)
C
	   ELSEIF (TARGUNT.EQ.110) THEN	! convert to 1/10s secs
	      COORD(1)=OCOORD(1)*10.0
	      COORD(2)=OCOORD(2)*10.0
C
	   ELSEIF (TARGUNT.EQ.1) THEN	! convert to feet
	      COORD(1)=OCOORD(1)/F2M
	      COORD(2)=OCOORD(2)/F2M
C
	   ELSEIF (TARGUNT.EQ.101.OR.TARGUNT.EQ.102) THEN
	      SCL=TARGSCL
	      IF (SCL.EQ.0.0) SCL=1.0
	      OCOORD(1)=OCOORD(1)/SCL	! metres on map
	      OCOORD(2)=OCOORD(2)/SCL
	      COORD(1)=OCOORD(1)*1000.0		! mms on map
	      COORD(2)=OCOORD(2)*1000.0
C
	   ELSEIF (TARGUNT.EQ.103.OR.TARGUNT.EQ.104) THEN
	      SCL=TARGSCL
	      IF (SCL.EQ.0.0) SCL=1.0
	      OCOORD(1)=OCOORD(1)/SCL	! metres on map
	      OCOORD(2)=OCOORD(2)/SCL
	      COORD(1)=OCOORD(1)*39370.08	! thous on map
	      COORD(2)=OCOORD(2)*39370.08
	   ELSE					! radians
	      COORD(1)=OCOORD(1)
	      COORD(2)=OCOORD(2)
	   ENDIF
	ELSE
	   COORD(1)=OCOORD(1)
	   COORD(2)=OCOORD(2)
	ENDIF
C
	COORD(3) = OCOORD(3)
C
C subtract local origin
C
   10	CONTINUE
	COORD(1)=COORD(1)-TARGLOC(1)
	COORD(2)=COORD(2)-TARGLOC(2)
C
C update range
C
	IF (RNGE) THEN
	   IF(COORD(1).LT.RANGE(1)) RANGE(1) = COORD(1)
	   IF(COORD(1).GT.RANGE(2)) RANGE(2) = COORD(1)
	   IF(COORD(2).LT.RANGE(3)) RANGE(3) = COORD(2)
	   IF(COORD(2).GT.RANGE(4)) RANGE(4) = COORD(2)
	ENDIF
C
  999	RETURN
   	END
