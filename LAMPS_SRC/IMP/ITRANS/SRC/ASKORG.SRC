C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-10-16 16:20:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ASKORG(MD,TYPE)
C
***	MODULE ASKORG
***	IDENT 16OC90
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
CMOD	    Output more sensible message for reset 	RWR  15-Oct-1990
C	    origin
CMOD	    Use THSUNT, instead of CURRUNT		RWR  22-Jun-1989
CMOD	    Don't output "," in prompt (mod 745)	RWR  27-Feb-1989
CMOD	    Copy THSLOC into a 3 element array before
C	    transforming it				RWR   1-Jun-1988
CMOD	    Don't transform origin offset for default
C	    if it is 0.0 0.0; it is usually not wanted	RWR  11-May-1988
CMOD	    Don't ask for origin, if it has been reset
C	    by a 4Pt transformation
C	    (I don't know when this bug was introduced)	RWR  15-Dec-1987
CMOD	    Don't ask for map scale at all - it is done
C	    in ASKMD for all projections now		RWR  12-Feb-1987
C	    (mod m2/420)
CMOD	    Don't ask for map scale with projection 21	RWR  19-Jan-1987
C	    after getting new corner points
CMOD	    Allow longitude offset of 180 degrees	RWR   7-Jan-1987
C
C Author    Ron Russell				 24-Jan-1986
C
C       This subroutine fills in local origin and scale in map descriptor
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/HERE:ITRANSMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/HERE:GENERAL/
***	COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:DESCRIPT/
C
C argument
C
	INTEGER*2	MD(MD2LEN)
	INTEGER*4	TYPE		! = 1 current map descriptor
					! = 2 target map descriptor
C
C working storage
C
	INTEGER*2	THISMD(MD2LEN)	! this is a copy of the argument
					! to equivalence it
C
	INTEGER*2	MATTHS		! note I*2, for compatability
	INTEGER*2	THSDUM		! and a dummy for longword
					! alignment
	REAL*8		THSLOC(2)	! local origin
	REAL*8		THSSCL		! scale of map
	INTEGER*4	THSPRJ		! projection system
	INTEGER*4	THSUNT		! units that IFF file is in
	INTEGER*4	THSSPH		! spheroid
	REAL*8		THSUSP(2)	! user defined spheroid
	REAL*8		THSPAR(15)	! parameters for projection
C
C which is equivalenced onto the variables
C
	EQUIVALENCE	(MATTHS,THISMD(1)),
     &			(THSDUM,THISMD(2)),
     &			(THSLOC,THISMD(3)),
     &			(THSSCL,THISMD(11)),
     &			(THSPRJ,THISMD(15)),
     &			(THSUNT,THISMD(17)),
     &			(THSSPH,THISMD(19)),
     &			(THSUSP,THISMD(21)),
     &			(THSPAR,THISMD(29))
C
	INTEGER*4	I,J		! loop counters
	INTEGER*4	LEN
	INTEGER*4	IERR
	INTEGER		UNTIND		! unit index
	REAL*8		X,Y
	REAL*8		COORD(3)
	EQUIVALENCE	(COORD(1),X),(COORD(2),Y)
	REAL*8		YY		! copy of Y
	BYTE		ICH
	CHARACTER*80	STRNG
	INTEGER*4	STRNL
C
C functions
C
	INTEGER		TTRSTR
	INTEGER		RDDBLE
	INTEGER		RDCHS
	INTEGER		SIGCHS
	INTEGER		TRANS
	INTEGER		EXPAND
C
C assume success
C
    5	CONTINUE
	ASKORG=ITRANS__NORMAL
C
C don't do anything if dealing with points (should not happen)
C
	IF (HAD_POINT) GOTO 999
C
C make a copy of the argument
C
	DO 10, I=1,MD2LEN
	   THISMD(I)=MD(I)
   10	CONTINUE
C
C unset descriptor for safety
C
	MATTHS = -1
C
C set up default for local origin
C
	IF (TYPE.EQ.1) THEN			! current IFF file
	   IF (DO4PT) THEN			! origin has been reset
	      CALL WRITEF
	      IF (THSPRJ.NE.100) THEN
	         CALL WRITEF('Default origin of current IFF file has '//
     &	            'been computed')
	         CALL WRITEF('as:      Easting %^D%F0.3 Northing  %F0.3',
     &	            THSLOC(1),THSLOC(2))
	      ELSE
	         CALL WRITEF('Default origin of current IFF file has '//
     &	          'been computed')
	         CALL WRITEF('as:      Latitude %^D%F0.3 Longitude  %F0.3',
     &	           THSLOC(2),THSLOC(1))
	      ENDIF
	      GOTO 300
	   ENDIF
C
C transform existing origin into target system unless current system
C has an origin offset of 0.0, 0.0, as this really means unset, and 
C it is probably a long way from the actual data
	ELSEIF (THSLOC(1).NE.0.0.OR.THSLOC(2).NE.0.0) THEN
C
C CURRLOC has been set up by call of ASKORG(...,1)
C set TARGLOC to be 0.0,0.0 - it will be set correctly again by the 
C end of this subroutine
C
	   THSLOC(1)=THSLOC(1)-CURRLOC(1)	! CURRLOC will be
	   THSLOC(2)=THSLOC(2)-CURRLOC(2)	! added on by TRANS
C
	   TARGLOC(1)=0.0			! reset TARGLOC for
	   TARGLOC(2)=0.0			! this call of TRANS
C
C as TRANS uses 3 dimensional coordinates, don't pass THSLOC directly
C to it
	   COORD(1) = THSLOC(1)
	   COORD(2) = THSLOC(2)
	   COORD(3) = 0.0
C
	   ASKORG = TRANS(COORD,.FALSE.)
C
	   THSLOC(1) = COORD(1)
	   THSLOC(2) = COORD(2)
	   IF (.NOT.ASKORG) THEN
	      IF (ASKORG.EQ.ITRANS__WGCTPERR) THEN	! don't fail
	         THSLOC(1)=0.0
	         THSLOC(2)=0.0
	         ASKORG=ITRANS__NORMAL
	      ELSE
	         GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C set up defaults - ITRANS talks about LAT LONG, IFF about LONG LAT
C
	IF (THSPRJ.NE.100) THEN
	   X = THSLOC(1)
	   Y = THSLOC(2)
	ELSE
	   X = THSLOC(2)
	   Y = THSLOC(1)
	ENDIF
	YY = Y
C	
	CALL WRITEF(' ')
	IF (.NOT.HAD_LEARN) GOTO 250
C
C help information
240	CONTINUE
	CALL WRITEF
	CALL WRITEF('To preserve accuracy in coordinates '//
     &	            'over a limited geographical area a')
	CALL WRITEF('constant can be subtracted from all '//
     &	            'coordinates. This can produce smaller')
	CALL WRITEF('numbers which avoid problems of rounding '//
     &	            'and loss of accuracy, particularly')
	CALL WRITEF('as the coordinates in IFF files are '//
     &	            'held as REAL*4 (single precision)')
	CALL WRITEF('numbers.')
	CALL WRITEF('These constants are called the local '//
     &	            'origin and are held as REAL*8 (double')
	CALL WRITEF('precision) numbers.')
	CALL WRITEF
	IF (THSPRJ.EQ.100) THEN
	   CALL WRITEF('Enter the Latitude and Longitude of the '//
     &	                     'origin as two real numbers.')
	ELSE
	   CALL WRITEF('Enter the Eastings and Northings of the '//
     &	               'origin as two real numbers.')
	ENDIF
	CALL WRITEF
C
C ask for origin
250	CONTINUE
	IF (THSPRJ.EQ.100) THEN
	   CALL EXPAND('Define local origin as Latitude Longitude '//
     &	               '(%^D%F0.3  %F0.3): ',X,Y)
	ELSE
	   CALL EXPAND('Define local origin as Eastings Northings '//
     &	               '(%^D%F0.3  %F0.3): ',X,Y)
	ENDIF
C
	ASKORG=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKORG) THEN			!  error
	   IF (ASKORG.NE.LSL__EOF) THEN
	      ASKORG=IERR
	      CALL LSL_PUTMSG(ASKORG)
	   ELSE
	      ASKORG=ITRANS__EOF
	   ENDIF
	   GOTO 999
	ELSEIF (LEN.EQ.0) THEN			! take default
	   GOTO 260
	ENDIF
C
	CALL BSLN
C
C check for ?
C
	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 250
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 240
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDDBLE(X)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 250
	ENDIF	
	IF (.NOT.RDDBLE(Y)) GOTO 270 ! check for both on one line
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	   GOTO 250
	ENDIF
C
260	CONTINUE
	IF (THSPRJ.NE.100) THEN
	   CALL EXPAND('Northings (%^D%F0.3): ',YY)
	ELSE
	   CALL EXPAND('Longitude (%^D%F0.3): ',YY)
	ENDIF
C
	ASKORG=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKORG) THEN			! error
	   IF (ASKORG.NE.LSL__EOF) THEN
	      ASKORG=IERR
	      CALL LSL_PUTMSG(IERR)
	      GOTO 999				! quit
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 250				! start again
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! take default
	   GOTO 272
	ENDIF
C
	CALL BSLN
	IF (RDDBLE(Y)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 260
	ENDIF
C
  270	CONTINUE
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	   GOTO 250
	ENDIF
C
  272	CONTINUE
	IF (THSPRJ.NE.100) THEN
	   THSLOC(1) = X
	   THSLOC(2) = Y
	ELSE
C
C check for sensible values - first the latitude - in range -90 -> +90
C
	   STRNL=0
	   IF (THSUNT.EQ.5.AND.ABS(X).GT.PI/2.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,X)
	   ELSEIF (THSUNT.EQ.3.AND.ABS(X).GT.324000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,X)
	   ELSEIF (THSUNT.EQ.4.AND.ABS(X).GT.90) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,X)
	   ELSEIF (THSUNT.EQ.110.AND.ABS(X).GT.3240000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,X)
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLAT,STRNG(1:STRNL))
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
C
C now the longitude - in range -180 -> +180
C
	   STRNL=0
	   IF (THSUNT.EQ.5.AND.ABS(Y).GT.PI) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,Y)
	   ELSEIF (THSUNT.EQ.3.AND.ABS(Y).GT.648000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,Y)
	   ELSEIF (THSUNT.EQ.4.AND.ABS(Y).GT.180.0) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,Y)
	   ELSEIF (THSUNT.EQ.110.AND.ABS(Y).GT.6480000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,Y)
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLONG,STRNG(1:STRNL))
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
C
C accept these values then (remember to switch them)
C
	   THSLOC(1) = Y
	   THSLOC(2) = X
	ENDIF
C
C copy the descriptor back into the argument
C
300	CONTINUE
	MATTHS=2		! this descriptor is now set
	DO 900, I=1,MD2LEN
	   MD(I)=THISMD(I)
  900	CONTINUE
C
  999	RETURN
	END
