	LOGICAL FUNCTION ASKPAR(MD,ORGSPH,ORGPRJ)
C
***	MODULE ASKPAR
***	IDENT 26OC95
C
C 	Copyright Laser-Scan Ltd., Cambridge, England
C
C	Author    Ron Russell				            17-Dec-1985
C
CMOD	/HELP changed to /LEARNER			        TJH 05-Dec-1986
CMOD	Two very trivial bugs in prompt mech. corrected         DRC 05-Oct-1987
CMOD    Use new LSLLIB DISPANG			 	        RWR  5-Aug-1988
CMOD	Ask correct questions for Sinusoidal and 
C	Equirectangular Projections			        RWR  8-May-1991
CMOD    Add Cassini Projection	    			        RWR 19-Nov-1992
CMOD	Add Krovak, Bonne, Mollweide, Hammer-Aitoff	        RWR 11-Feb-1993
C	    and Winkel III projections (wi 93/3)
CMOD    Add Modified-stereographic projections (WI 1500)        TJM 30-Jun-1995
C
CMOD    Convert for F77 GCTPLIB compatibility (WI/CC 1514)      TJM 26-Oct-1995
C
C       This subroutine fills in the parameters of the descriptor
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READANG/
***	PARAMETER/HERE:ITRANSMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/HERE:GENERAL/
***	COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:DESCRIPT/
C
***	PARAMETER/LSL$CMNLSL:RDYES/
C
C arguments
	INTEGER*2	MD(DESCLN)
	INTEGER*4	ORGSPH,ORGPRJ
C
C functions
	INTEGER		EXPAND
C
C working storage
	INTEGER*2	THISMD(DESCLN)	! this is a copy of the argument
					! to equivalence it
C
	INTEGER*2	MATTHS		! note I*2, for compatability
	INTEGER*2	THSDUM		! and a dummy for longword
					! alignment
	REAL*8		THSLOC(2)	! local origin
	REAL*8		THSSCL		! scale of map
	INTEGER*4	THSPRJ		! projection system
	INTEGER*4	THSUNT		! units that IFF file is in
	INTEGER*4	THSSPH		! spheroid
	REAL*8		THSUSP(2)	! user defined spheroid
	REAL*8		THSPAR(15)	! parameters for projection
C
C which is equivalenced onto the variables
C
	EQUIVALENCE	(MATTHS,THISMD(1)),
     &			(THSDUM,THISMD(2)),
     &			(THSLOC,THISMD(3)),
     &			(THSSCL,THISMD(11)),
     &			(THSPRJ,THISMD(15)),
     &			(THSUNT,THISMD(17)),
     &			(THSSPH,THISMD(19)),
     &			(THSUSP,THISMD(21)),
     &			(THSPAR,THISMD(29))
C
	INTEGER*4	LAT,LONG
	PARAMETER	(LONG=READANG_LONGITUDE,LAT=READANG_LATITUDE)
	INTEGER*4	SCL,COORD
	PARAMETER	(COORD=0,SCL=1)
C
	INTEGER*4	I,J		! loop counters
	INTEGER*4	LEN
	INTEGER*4	IERR
	INTEGER*4       TYPE
	REAL*8		X,Y
	REAL*8		DATA(15)
	INTEGER		PRJIND		! projection index
	INTEGER		MODIND		! modified-stereographic proj. index
	INTEGER         NOCHAR
	LOGICAL		TYPEA
	BYTE		ICH
	REAL*8		RAD		! radian value of angle
	INTEGER*4	ZONE
	INTEGER		IER		! error code for GCTP
	COMMON/ERRM/	IER
	LOGICAL		EQUIRECT	! equirectangular
	LOGICAL		EQUIDIST	! equidistant conic
C
	CHARACTER*80	BLANK
	DATA		(BLANK(I:I),I=1,80)/80*' '/
C
C functions
	INTEGER		TTRSTR
	INTEGER		RDCHS
	INTEGER		SIGCHS
	INTEGER		RDLONG
	INTEGER		DMSQU
	INTEGER		DBLQU
C
C assume success
C
	ASKPAR=ITRANS__NORMAL
C
C assume not Equirectangular or Equidistant Conic projection at the moment
	EQUIRECT = .FALSE.
	EQUIDIST = .FALSE.
	TYPEA = .TRUE.			! for krovak
C
C make a copy of the argument
C
	DO 10, I=1,DESCLN
	   THISMD(I)=MD(I)
   10	CONTINUE
C
C get the projection index
C
    5	CONTINUE
C
	PRJIND=-1			! get an error if not found
	DO 20, I=1,MD2_NOPRJ
	   IF (THSPRJ.EQ.MD2_PRJCD(I)) THEN
	      PRJIND=I
	      GOTO 22
	   ENDIF
   20	CONTINUE
C
C get type A or type B for equidistant conic or Oblique Mercator
C
CCC or Krovak
C
CCC   22	IF (THSPRJ.EQ.8 .OR. THSPRJ.EQ.20 .OR. THSPRJ.EQ.21 .OR.
CCC     &      	    THSPRJ.EQ.24) THEN
C
   22	IF (THSPRJ.EQ.8 .OR. THSPRJ.EQ.20 .OR. THSPRJ.EQ.21) THEN
   25	   CALL WRITEF(' ')
	   CALL EXPAND('Select format A or B for %S projection: ',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	   ASKPAR=TTRSTR(,LEN,EXPDSC,IERR)
	   IF (.NOT.ASKPAR) THEN			!  error
	      IF (ASKPAR.NE.LSL__EOF) THEN
	         ASKPAR=IERR
	         CALL LSL_PUTMSG(ASKPAR)
C
	      ELSE
	         ASKPAR=ITRANS__EOF
	      ENDIF
C
	      GOTO 9999
C
	   ELSEIF (LEN.EQ.0) THEN
	      GOTO 25
	   ENDIF
C
	   CALL BSLN
C
C read a character
C
	   IF (RDCHS(ICH)) THEN
	      CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	      GOTO 25
	   ENDIF	
C
	   IF (ICH.NE.'A'.AND.ICH.NE.'a'.AND.ICH.NE.'B'.AND.ICH.NE.'b'
     &	                 .AND.ICH.NE.'?') THEN
	      GOTO 25
C
	   ELSEIF (ICH.EQ.'?') THEN
C
C /LEARNER message
C
	      CALL WRITEF(' ')
	      CALL WRITEF('For the %S projection, format A uses ',
     &	                     MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	      IF (THSPRJ.EQ.8) THEN
	         CALL WRITEF('1 standard parallel; format B uses 2')
C
	      ELSEIF (THSPRJ.EQ.20) THEN
	         CALL WRITEF('2 points to define the central line; '//
     &	                     'format B uses one point and an azimuth')
C
	      ELSEIF (THSPRJ.EQ.21) THEN
	         CALL WRITEF('2 points to define the false equator; '//
     &	                     'format B uses the vertex')
	         CALL WRITEF('Both define the datum in '//
     &	                     'geographical coordinates')
C
	      ELSEIF (THSPRJ.EQ.24) THEN
	         CALL WRITEF('a right handed coordinate system based on '//
     &	                     'origin point;')
	         CALL WRITEF('format B uses a left handed coordinate '//
     &	                     'system based on the apex of the cone')
	      ENDIF
C
	      GOTO 25
C
C select A or B
C
	   ELSE
	      TYPEA=(ICH.EQ.'A'.OR.ICH.EQ.'a')	   
	   ENDIF
	ENDIF
C
C switch on projection index
C
   30	CONTINUE
C
C projection parameters
C
C	     unset,  utm,   spc,  alb,   lcc,  mer,  pol ster, poly, eqd con,
C	        tm, ster,  laea,   az,  gnom,  orth,
C	      gvnp, sinu, equirect, mill, vdg,
C	      obl mer (hot/sph),  ster,  cass,  krov,  bonn,
C	      moll, hamm, wink, mod ster, geo,  ukng
C
	GOTO ( 50,   100,   200,   300,   400,   500,   600, 700, 800,
     &        900,  1000,  1100,  1200,  1300,  1400,
     &	     1500,  1600,  1700,  1800,  1900,
     &	     2000,  2100,         2200,  2300,  2400,  2500,
     &	     2600,  2700,  2800,  2900,  3400,  3500) PRJIND
C
C no such projection defined
C
	CALL LSL_PUTMSG(ITRANS__BADPRJCDS,THSPRJ)
	ASKPAR=ITRANS__BADPRJCDS
C
	GOTO 9999
C
C************************************************************************
C unset - don't do anything
C************************************************************************
C
   50	CONTINUE
C
	DO 60, I=1,15
	   THSPAR(I)=0.0
   60	CONTINUE
C
	GOTO 8000
C
C************************************************************************
C UTM - ask for zone
C************************************************************************
C
  100	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
C
C get zone
C
  	IF (.NOT.HAD_LEARN) GOTO 160
C
  158	CONTINUE
C
	IF (THSPRJ.EQ.1) THEN
	   CALL WRITEF(' ')
	   CALL WRITEF('UTM zones cover 6 degrees of longitude. '//
     &	               'The central meridian')
	   CALL WRITEF('of zone 1 is 177 degrees west, '//
     &	               'and they increase eastward. Thus')
	   CALL WRITEF('zone 30 is centred on 3 degrees W, '//
     &	               '31 on 3 degrees E and zone 60')
	   CALL WRITEF('on 177 degrees E.')
	   CALL WRITEF('Use negative zones if working in southern '//
     &	               'hemisphere.')
	   CALL WRITEF('If the zone is unknown, enter zone 0; you '//
     &	               'will then be asked for')
	   CALL WRITEF('the geographical coordinates of one point in '//
     &	               'the area')
	ENDIF
C
  160	CALL WRITEF(' ')
C
	IF (THSPRJ.EQ.ORGPRJ) THEN		! set up default
	   J=THSPAR(3)
	ELSE
	   J=0
	ENDIF
C
	ZONE=J
C
	CALL EXPAND('   UTM zone (%^L%N): ',ZONE)
C
	ASKPAR=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKPAR) THEN			!  error
	   IF (ASKPAR.NE.LSL__EOF) THEN
	      ASKPAR=IERR
	      CALL LSL_PUTMSG(ASKPAR)
C
	   ELSE
	      ASKPAR=ITRANS__EOF
	   ENDIF
C
	   GOTO 9999				! quit
C
	ELSEIF (LEN.EQ.0) THEN			! take default
	   GOTO 170
	ENDIF
C
	CALL BSLN
C
C check for ?
C
	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 160
C
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 158
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDLONG(J)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 160
C
C check for end of line
C
	ELSEIF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	   GOTO 160
	ENDIF	
C
C check for sensible values
C
170	CONTINUE
C
	IF (J.LT.-60.OR.J.GT.60) THEN
	   CALL LSL_PUTMSG(ITRANS__BADUTMZON,J)
	   GOTO 158
	ENDIF
C
	THSPAR(3)=J
C
	IF (THSPRJ.NE.ORGPRJ) THEN
	   THSPAR(1)=0.0
	   THSPAR(2)=0.0
	ENDIF
C
C get latitude
C
	IF (J.EQ.0) THEN
	   ASKPAR=DMSQU(THSPAR(2),'Latitude of any point in '//
     &	                  'the UTM zone',LAT)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
C now get longitude
C
	   ASKPAR=DMSQU(THSPAR(1),'Longitude of any point in '//
     &	                  'the UTM zone',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
C for -ve zone (southern hemisphere) have a -ve latitude
C
	ELSEIF (J.LT.0.OR.THSPAR(2).LT.0) THEN
	   THSPAR(1)=0.0
	   THSPAR(2)=-45000000.00
	   THSPAR(3)=ABS(J)
	ELSE
	   THSPAR(1)=0.0
	   THSPAR(2)=0.0
	ENDIF
C
	DO 180, I=4,15
	   THSPAR(I)=0.0
  180	CONTINUE
C
	GOTO 8000
C
C************************************************************************
C State plane coordinate system - no parameters required
C************************************************************************
C
  200	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
C
C get zone
C
	IF (.NOT.HAD_LEARN) GOTO 220
C
  210	CONTINUE
	CALL SPSHLP
C
  220	CALL WRITEF(' ')
C
	IF (THSPRJ.EQ.ORGPRJ) THEN	! set up default
	   J=THSPAR(3)
	ELSE
	   J=0
	ENDIF
C
	ZONE=J
C
	CALL EXPAND('   State Plane zone (%^L%N): ',ZONE)
C
	ASKPAR=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKPAR) THEN			!  error
	   IF (ASKPAR.NE.LSL__EOF) THEN
	      ASKPAR=IERR
	      CALL LSL_PUTMSG(ASKPAR)
	   ELSE
	      ASKPAR=ITRANS__EOF
	   ENDIF
	   GOTO 9999				! quit
C
	ELSEIF (LEN.EQ.0) THEN			! take default
	   GOTO 230
	ENDIF
C
	CALL BSLN
C
C check for ?
C
	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 220
C
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 210
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDLONG(J)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 220
C
C check for end of line
C
	ELSEIF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	   GOTO 220
	ENDIF	
C
C check for sensible values by initialising projection
C
230	CONTINUE
C
	IER=0			! initialise common block
	DATA(1)=0.0
	CALL IS02F(J,DATA)
C
	IF (IER.NE.0) THEN
	   CALL LSL_PUTMSG(ITRANS__BADSPSZON,J)
	   GOTO 220			! don't get help - too much output
	ENDIF
C
	THSPAR(3)=J
	THSPAR(1)=0.0
	THSPAR(2)=0.0
C
	DO 240,I=4,15
	   THSPAR(I)=0.0
  240	CONTINUE
C
	GOTO 8000
C
C************************************************************************
C Albers Conical equal area
C************************************************************************
C Lambert Conformal Conic
C************************************************************************
C
  300	CONTINUE
  400	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
  405	THSPAR(1)=0.0
	THSPAR(2)=0.0
C
	IF (THSPRJ.NE.ORGPRJ) THEN
	   THSPAR(3)=0.0
	   THSPAR(4)=0.0
	ENDIF
C
C get latitude for 1st standard parallel
C
	ASKPAR=DMSQU(THSPAR(3),'Latitude of 1st standard '//
     &	            'parallel',LAT)
	IF (.NOT.ASKPAR) GOTO 9999
C
C now get latitude of 2nd standard parallel
C
	ASKPAR=DMSQU(THSPAR(4),'Latitude of 2nd standard '//
     &	            'parallel',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C get long of central meridian, latitude of origin, false eastings
C and false northings
C
  435	CONTINUE
	IF (THSPRJ.NE.ORGPRJ) THEN
	   DO 440, I=5,8
	      THSPAR(I)=0.0
  440	   CONTINUE
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(6),'Latitude of the origin ',
     &	               LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(5),'Longitude of the central '//
     &	             'meridian',LONG )
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C get false origin
C
  470	ASKPAR=DBLQU(THSPAR(7),
     &	       'Eastings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(8),
     &	       'Northings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C fill rest with 0.0
C
	IF (.NOT.EQUIDIST.OR.(EQUIDIST.AND.TYPEA)) THSPAR(9)=0.0
C
	DO 490, I=10,15
	   THSPAR(I)=0.0
  490	CONTINUE
C
	GOTO 8000
C
C************************************************************************
C MERCATOR 
C************************************************************************
C POLAR STEREOGRAPHIC
C************************************************************************
C
  500	CONTINUE
  600	CONTINUE	
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	DO 610, I=1,4
	   THSPAR(I)=0.0
  610	CONTINUE
C
	IF (THSPRJ.NE.ORGPRJ) THEN
	   DO 620, I=5,8
	      THSPAR(I)=0.0
  620	   CONTINUE
	ENDIF
C
C latitude of true scale
C
	ASKPAR=DMSQU(THSPAR(6),
     &	         'Latitude that has true scale',LAT)
	IF (.NOT.ASKPAR) GOTO 9999
C
C longitude of central meridian (for Mercator)
C
	IF (PRJIND.EQ.6) THEN
	   ASKPAR=DMSQU(THSPAR(5),'Longitude of the central '//
     &	             'meridian',LONG )
C
C for Polar sterographic, get longitude straight down from the pole
C
	ELSE
	   ASKPAR=DMSQU(THSPAR(5),
     &	     'Longitude straight down from N Pole of map, '//
     &               'up from S Pole',LONG)
	ENDIF
C
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C rest is same as projection 3 and 4
C
	GOTO 470
C
C************************************************************************
C POLYCONIC
C************************************************************************
C
  700	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	DO 710, I=1,4
	   THSPAR(I)=0.0
  710	CONTINUE
C
C rest is same as other conics
C
	GOTO 435
C
C************************************************************************
C EQUIDISTANT CONIC - type B is same as other conics
C************************************************************************
C
800	CONTINUE
C
	EQUIDIST = .TRUE.
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	IF (.NOT.TYPEA) THEN
	   THSPAR(9)=999.0
	   GOTO 405
C
	ELSE
	   THSPAR(9)=0.0
	ENDIF
C
C type A is slightly different
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(4)=0.0
C
C get latitude for standard parallel
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(3)=0.0
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(3),
     &	         'Latitude of standard parallel',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C now the same as other conics
C
	GOTO 435
C
C************************************************************************
C Transverse Mercator
C************************************************************************
C
  900	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(4)=0.0
C
C get scale factor of Central meridian
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(3)=1.0
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(3),
     &	            'Scale factor of central meridian',SCL)
	IF (.NOT.ASKPAR) GOTO 9999
C
C now the same as other conics
C
	GOTO 435
C
C************************************************************************
C STEREOGRAPHIC, LAMBERT AZIMUTHAL EQUAL AREA, AZIMUTHAL, GNOMONIC,
C ORTHOGRAPHIC are all the same
C************************************************************************
C
 1000	CONTINUE
 1100	CONTINUE
 1200	CONTINUE
 1300	CONTINUE
 1400	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C first 4 parameters are blank
C
	DO 1410, I=1,4
	   THSPAR(I)=0.0
 1410	CONTINUE
C
	IF (THSPRJ.NE.ORGPRJ) THEN
	   DO 1420, I=5,8
	      THSPAR(I)=0.0
 1420	   CONTINUE
	ENDIF
C
 1430	CONTINUE
C
	ASKPAR=DMSQU(THSPAR(6),
     &	         'Latitude of the centre of the '//
     &	            'projection',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (THSPRJ.NE.15) THEN
	      GOTO 9999
	   ELSE
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
	ENDIF
C
C and longitude
C
	ASKPAR=DMSQU(THSPAR(5),
     &	         'Longitude of the centre of the '//
     &	            'projection',LONG)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C now get false eastings and northings
C
	GOTO 470
C
C************************************************************************
C General Vertical Near-side Perspective
C************************************************************************
C
 1500	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(4)=0.0
C
C get height of perspective point above surface
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(3)=0.0
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(3),
     &	            'Height of perspective point above '//
     &	            'surface',COORD)
	IF (.NOT.ASKPAR) GOTO 9999
C
C now the same as other shperical projections
C
	GOTO 1430
C
C****************************************************************
C Sinusoidal, Miller Cylindrical and Van der Grinten projection
C also Equi-rectangular, Mollweide, Hammer-Aitoff and Winkel III
C ***************************************************************
C
 1700	CONTINUE     			! equirectangular
	EQUIRECT = .TRUE.
C
 1600	CONTINUE
 1800	CONTINUE
 1900	CONTINUE
 2600	CONTINUE
 2700	CONTINUE
 2800	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C these parameters are 0.0
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(3)=0.0
	THSPAR(4)=0.0
C
C get longitude of central meridian
C
	IF (THSPRJ.NE.ORGPRJ) THSPAR(5)=0.0
	ASKPAR=DMSQU(THSPAR(5),'Longitude of the central '//
     &	             'meridian',LONG )
	IF (.NOT.ASKPAR) GOTO 9999
C
C get latitude of true scale, for equi-rectangular projection
C
	IF (.NOT.EQUIRECT) THEN
	   THSPAR(6)=0.0
C
	ELSE
	   IF (THSPRJ.NE.ORGPRJ) THSPAR(6)=0.0
	   ASKPAR=DMSQU(THSPAR(6),
     &	         'Latitude that has true scale',LAT)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
	ENDIF
C
C rest is same as projection 3 and 4
C
	GOTO 470
C
C*********************************************************************
C Oblique Mercator (Hotine)
C*********************************************************************
C
 2000	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C first two parameters are zero
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
C
C scale factor at centre of projection
C
	IF (THSPRJ.NE.ORGPRJ) THSPAR(3)=1.0
C
	ASKPAR=DBLQU(THSPAR(3),
     &	         'Scale factor at centre of projection',SCL)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C type B, azimuth angle east of north of central line
C	  longtitude of point on central line where azimuth is measured
C
	IF (TYPEA) THEN
	   THSPAR(4)=0.0
	   THSPAR(5)=0.0
C
	ELSE
	   IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	      THSPAR(4)=0.0
	      THSPAR(5)=0.0
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(4),
     &	          'Angle (clockwise from north) of central line',
     &	               0)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(5),
     &	          'Longitude of point where azimuth of central '//
     &	          'line is measured',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
	ENDIF
C
C now get latitude of centre of map, and false origin
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(6)=0.0
	   THSPAR(7)=0.0
	   THSPAR(8)=0.0
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(6),
     &	       'Latitude of centre of projection (on central '//
     &	       'line)',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(7),
     &	       'Eastings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(8),
     &	       'Northings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C typeA - end points of central line
C
	IF (.NOT.TYPEA) THEN
	   THSPAR(9)=0.0
	   THSPAR(10)=0.0
	   THSPAR(11)=0.0
	   THSPAR(12)=0.0
C
	ELSE
	   IF (THSPRJ.NE.ORGPRJ) THEN	! set up defaults
	      THSPAR(9)=0.0
	      THSPAR(10)=0.0
	      THSPAR(11)=0.0
	      THSPAR(12)=45000000.0
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(10),
     &	          'Latitude of 1st point on central line',LAT)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(9),
     &	          'Longitude of 1st point on central line',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(12),
     &	          'Latitude of 2nd point on central line',LAT)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(11),
     &	          'Longitude of 2nd point on central line',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
C check for valid value (cannot be same as THSPAR(10))
C
	   IF (THSPAR(12).EQ.THSPAR(10)) THEN
	      CALL WRITEF('%%ITRANS-W-INVALLATS, cannot have %S '//
     &	               'projection along a line of latitude',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C THSPAR(13) is a flag to say which type we have
C
	IF (TYPEA) THEN
	   THSPAR(13)=0.0
	ELSE
	   THSPAR(13)=999.0
	ENDIF	
C
	THSPAR(14)=0.0
	THSPAR(15)=0.0
C
	GOTO 8000
C
C*********************************************************************
C Oblique Mercator (Spherical)
C*********************************************************************
C
 2100	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C first two parameters are zero
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
C
C scale factor at centre of projection
C
	IF (THSPRJ.NE.ORGPRJ) THSPAR(3)=1.0
	ASKPAR=DBLQU(THSPAR(3),
     &	         'Scale factor on false equator',SCL)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	THSPAR(4)=0.0
	THSPAR(5)=0.0
	THSPAR(6)=0.0
C
C now get false origin (in geographicals!)
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(7)=0.0
	   THSPAR(8)=0.0
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(8),
     &	       'Latitude  of datum of projection',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(7),
     &	       'Longitude of datum of projection',LONG)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999

	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C TYPE A - end points of central line
C
	IF (TYPEA) THEN
	   IF (THSPRJ.NE.ORGPRJ) THEN	! set up defaults
	      THSPAR(9)=0.0
	      THSPAR(10)=0.0
	      THSPAR(11)=0.0
	      THSPAR(12)=0.0
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(10),
     &	          'Latitude of 1st point on central line',LAT)
C
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(9),
     &	          'Longitude of 1st point on central line',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(12),
     &	          'Latitude of 2nd point on central line',LAT)
C
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(11),
     &	          'Longitude of 2nd point on central line',LONG)
C
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
	ELSE
C
C TYPE B - geographicals of vertex
C
	   IF (THSPRJ.NE.ORGPRJ) THEN	! set up defaults
	      THSPAR(9)=0.0
	      THSPAR(10)=0.0
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(10),
     &	          'Latitude  of vertex of central line',LAT)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   ASKPAR=DMSQU(THSPAR(9),
     &	          'Longitude of vertex of central line',LONG)
	   IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	      ENDIF
	   ENDIF
C
	   THSPAR(11)=0.0
	   THSPAR(12)=0.0
	ENDIF
C
C THSPAR(13) is a flag to say which type we have
C
	IF (TYPEA) THEN
	   THSPAR(13)=0.0
	ELSE
	   THSPAR(13)=999.0
	ENDIF	
C
	THSPAR(14)=0.0
	THSPAR(15)=0.0
C
	GOTO 8000
C
C*********************************************************************
C Stereographic (UKSL formulae)
C*********************************************************************
C
 2200	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C parameters 1-3 are blank
C
	DO 2210, I=1,3
	   THSPAR(I)=0.0
 2210	CONTINUE
C
	IF (THSPRJ.NE.ORGPRJ) THEN
	   DO 2220, I=4,8
	      THSPAR(I)=0.0
 2220	   CONTINUE
	ENDIF
C
C ask for radius of conformal earth
C
	ASKPAR=DBLQU(THSPAR(4),'Radius of Conformal Earth',COORD)
	IF (.NOT.ASKPAR) GOTO 9999
C
C ask for latitude of centre of projection
C
	ASKPAR=DMSQU(THSPAR(6),
     &	         'Latitude of the centre of the '//
     &	            'projection',LAT)
	IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	   ENDIF
	ENDIF
C
C and longitude
C
	ASKPAR=DMSQU(THSPAR(5),
     &	         'Longitude of the centre of the '//
     &	            'projection',LONG)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C now get false eastings and northings
C
	GOTO 470
C
C************************************************************************
C CASSINI
C************************************************************************
C
 2300	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(3)=0.0
	THSPAR(4)=0.0
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(5)=0.0
	   THSPAR(6)=0.0
	   THSPAR(7)=0.0
	   THSPAR(8)=0.0
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(6),'Latitude of the origin ',
     &	               LAT)
	IF (.NOT.ASKPAR) GOTO 9999
C
	ASKPAR=DMSQU(THSPAR(5),'Longitude of the central '//
     &	             'meridian',LONG )
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C Get false origin
C
	GOTO 470
C
C************************************************************************
C STEREOGRAPHIC, LAMBERT AZIMUTHAL EQUAL AREA, AZIMUTHAL, GNOMONIC,
C ORTHOGRAPHIC are all the same
C************************************************************************
C
C************************************************************************
C KROVAK
C************************************************************************
C
 2400	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF

	THSPAR(1)=0.0
	THSPAR(2)=0.0

	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(3)=0.0
	   THSPAR(4)=0.0
	   THSPAR(5)=0.0
	   THSPAR(6)=1.0
	   THSPAR(7)=0.0
	   THSPAR(8)=0.0
	   THSPAR(9)=0.0
	   THSPAR(10)= 0.0
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(9),
     &	       'Latitude for conformal projection to sphere',LAT)
	IF (.NOT.ASKPAR) GOTO 9999
C
	ASKPAR=DMSQU(THSPAR(4),'Latitude of origin',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(3),'Longitude of origin',LONG)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DMSQU(THSPAR(5),'Latitude of origin on oblique sphere',LAT)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(6),
     &	            'Scale factor on standard line through origin',SCL)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C get false origin (don't use common code, as it clears PAR(9) which
C we are using)
C
	ASKPAR=DBLQU(THSPAR(7),
     &	       'Eastings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	ASKPAR=DBLQU(THSPAR(8),
     &	       'Northings of the origin of the projection',COORD)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
	IF (TYPEA) THEN
	   THSPAR(10) = 0.0
	ELSE
	   THSPAR(10) = 999.0
	ENDIF
C
C fill rest with 0.0
C
	DO 2410, I=11,15
	   THSPAR(I)=0.0
2410	CONTINUE
C
	GOTO 8000
C
C************************************************************************
C BONNE
C************************************************************************
C
 2500	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C these parameters are not used
C
	THSPAR(1)  = 0.0
	THSPAR(2)  = 0.0
	THSPAR(4)  = 0.0
	THSPAR(6)  = 0.0
C
	DO 2510 , I = 9,15
	   THSPAR(I) = 0.0
2510	CONTINUE
C
	IF (THSPRJ.NE.ORGPRJ) THEN		! set up default
	   THSPAR(3)=45000000.0
	   THSPAR(5)=0.0
	   THSPAR(7)=0.0
	   THSPAR(8)=0.0
	ENDIF
C
C latitude of standard parallel
C
	ASKPAR=DMSQU(THSPAR(3),'Latitude of standard parallel',LAT)
	IF (.NOT.ASKPAR) GOTO 9999
C
C longitude of central meridian
C
	ASKPAR=DMSQU(THSPAR(5),'Longitude of the central meridian',LONG )
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C get false origin
C
	GOTO 470
C
C************************************************************************
C MODIFIED-STEREOGRAPHIC
C************************************************************************
C
 2900	CONTINUE
C
C write out header for parameters for this projection
C
	CALL WRITEF
	CALL WRITEF('The %S projection requires the following',
     &	               MD2_PRJ(PRJIND)(3:SIGCHS(MD2_PRJ(PRJIND))))
	CALL WRITEF('additional information:-')
	CALL WRITEF
C
C these parameters are 0.0
C
	THSPAR(1)=0.0
	THSPAR(2)=0.0
	THSPAR(3)=0.0
	THSPAR(4)=0.0
C
C ask for the modified-stereographic projection code
C
	IF (.NOT.HAD_LEARN) GOTO 2930	! skip help if not required
C
C list available modified-stereographic projections (in pairs)
C
 2910	CONTINUE
C
	CALL WRITEF(' ')	
	CALL WRITEF('Allowable modified-stereographic projections '//
     &              'and their codes are:-')
	CALL WRITEF(' ')
C
	DO 2920, I=1,MD2_NOMOD/2
	   J=I*2-1
	   CALL WRITEF('%^L%I3%S  %I3%S',MD2_MODCD(J),MD2_MOD(J),
     &	                 MD2_MODCD(J+1),MD2_MOD(J+1))
 2920	CONTINUE
C
C and any odd one
C
	IF (MOD(MD2_NOMOD,2).NE.0) CALL WRITEF('%^L%I3%S',
     &	      		 MD2_MODCD(MD2_NOMOD),MD2_MOD(MD2_NOMOD))
C
C add an explanation
C
	CALL WRITEF
	CALL WRITEF('Note: projections marked "*" are defined for '//
     &	            'the sphere, not the spheroid.')
	CALL WRITEF('      If a spheroid is defined, then the sphere '//
     &	            'with the same surface area')
	CALL WRITEF('      as the spheroid is used')
C
C ask for projection code
C
 2930	CALL WRITEF(' ')
C
	J = MD2_MODCD(1)
	NOCHAR = EXPAND('Enter modified-stereographic projection '//
     &                  'code (%^L%N): ',J)
	ASKPAR=TTRSTR(,LEN,EXPDSC,IERR)
C
	IF (.NOT.ASKPAR) THEN			!  error
	   IF (ASKPAR.NE.LSL__EOF) THEN
	      ASKPAR=IERR
	      CALL LSL_PUTMSG(IERR)
	      GOTO 9999
	   ELSE
	      ASKPAR=ITRANS__EOF
	      CALL LSL_PUTMSG(ASKPAR)
	      GOTO 9999			        ! quit
	   ENDIF
C
	ELSEIF (LEN.EQ.0) THEN			! take default
	   GOTO 2940
	ENDIF
C
	CALL BSLN
C
C check for ?
C
	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 2930
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 2910
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDLONG(J)) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 2930
C
C check for end of line
C
	ELSEIF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	   GOTO 2930
	ENDIF	
C
C check if this is a valid code
C
 2940	CONTINUE
C
	DO 2950, I=1,MD2_NOMOD
	   IF (J.EQ.MD2_MODCD(I)) THEN
	      MODIND=I
	      GOTO 2960
	   ENDIF
 2950	CONTINUE
C
C invalid projection code
C
	CALL LSL_PUTMSG(ITRANS__BADMODSTOPT,J)
	GOTO 2910
C
 2960	CONTINUE
C
	CALL WRITEF('%S(%S)',BLANK(1:NOCHAR),
     &	            MD2_MOD(MODIND)(3:SIGCHS(MD2_MOD(MODIND))))
C
	THSPAR(4) = REAL(MODIND)
	IF (MODIND.EQ.1) THEN
	   THSPAR(5)= 020000000.0
	   THSPAR(6)= 018000000.0
C
	ELSEIF (MODIND.EQ.2) THEN
	   THSPAR(5)=-165000000.0
	   THSPAR(6)=-010000000.0
C
	ELSEIF (MODIND.EQ.3) THEN
	   THSPAR(5)=-120000000.0
	   THSPAR(6)= 045000000.0
C
	ELSEIF (MODIND.EQ.4) THEN
	   THSPAR(5)=-152000000.0
	   THSPAR(6)= 064000000.0
C
	ELSEIF (MODIND.EQ.5) THEN
	   THSPAR(5)=-096000000.0
	   THSPAR(6)= 039000000.0
	ENDIF
C
C ask for latitude of centre of projection
C
	ASKPAR=DMSQU(THSPAR(6),
     &	         'Latitude of the centre of the '//
     &	            'projection',LAT)
C
	IF (.NOT.ASKPAR) THEN
	      IF (ASKPAR.NE.ITRANS__EOF) THEN
	         GOTO 9999
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__REENTER)
	         GOTO 5
	   ENDIF
	ENDIF
C
C and longitude
C
	ASKPAR=DMSQU(THSPAR(5),
     &	         'Longitude of the centre of the '//
     &	            'projection',LONG)
	IF (.NOT.ASKPAR) THEN
	   IF (ASKPAR.NE.ITRANS__EOF) THEN
	      GOTO 9999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 5
	   ENDIF
	ENDIF
C
C now get false eastings and northings
C
	THSPAR(7)=0.0
	THSPAR(8)=0.0
C
	GOTO 470

C************************************************************************
C GEOGRAPHICALS - don't do anything
C************************************************************************
C
 3400	CONTINUE
	GOTO 50
C
C************************************************************************
C UK NATIONAL GRID - special case, don't do anything here
C************************************************************************
C
 3500	CONTINUE
C
	GOTO 50
C
C copy the descriptor back into the argument
C
8000	CONTINUE
C
	DO 9000, I=1,DESCLN
	   MD(I)=THISMD(I)
9000	CONTINUE
C
9999	RETURN
	END
C
