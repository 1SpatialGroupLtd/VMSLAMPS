C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-26 15:12:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION PRCPTS()
C
***	MODULE PRCPTS
***	IDENT 13MY91
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				 9-Dec-1985
C
CMOD use new LSLLIB DISPANG			 5-Aug-1988	RWR
CMOD if not using HEIGHT, set third input coord
C    to 0.0					13-May-1991	RWR
C
CMOD    Convert for F77 GCTPLIB compatibility (WI/CC 1514)      TJM 26-Oct-1995
C
C       This subroutine transforms individual points
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READANG/
***	PARAMETER/HERE:ITRANSMSG/
C	INCLUDE '($STSDEF)'
	INCLUDE '($SSDEF)'
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/HERE:GENERAL/
***	COMMON/HERE:DESCRIPT/
C
C functions
C
	INTEGER		TTRSTR
	INTEGER		RDDBLE
	INTEGER		RDCHS
	INTEGER		TRANS
	INTEGER		RDANG
	INTEGER		EXPAND
	INTEGER		SIGCHS
	CHARACTER*14	DISPANG
	INTEGER		FLRSTR
	INTEGER		FLROPN
	INTEGER		FLRCLO
	INTEGER		GETFILNAM
C
C w/s
C
	INTEGER*4	LEN
	INTEGER*4	IERR
	INTEGER*4	FLG,SAVFLG
	REAL*8		COORD(3)
	REAL*8		TMPCRD
	BYTE		ICH
	CHARACTER*80	STRNG
	INTEGER*4	STRNL
	INTEGER		IER		! error code for GCTP
	COMMON/ERRM/	IER
C
	INTEGER*4	LAT,LONG
	PARAMETER	(LONG=READANG_LONGITUDE,LAT=READANG_LATITUDE)
C
C if outputting to file, write header
C
	IF (HAD_OUT) THEN
	   CALL FLWSEL(OUTLUN)
	   CALL FLWRTF
	   CALL FLWRTF
	   CALL FLWRTF('Transformed points')
	   CALL FLWRTF('******************')
	   CALL FLWRTF
	   CALL FLWRTF('             Input  Point                '//
     &			'            Output Point')
	   CALL FLWRTF
	   IF (CURRUNT.EQ.1.OR.CURRUNT.EQ.2) THEN
	      STRNL=EXPAND('%WS    Easting           '//
     &	                     'Northing          ',STRNG)
	   ELSE
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL=EXPAND('%WS    Latitude          '//
     &	                     'Longitude         ',STRNG)
	      ELSE
	         STRNL=EXPAND('%WS    Latitude        '//
     &	                     'Longitude    Height ',STRNG)
	      ENDIF
	   ENDIF
	   IF (TARGUNT.EQ.1.OR.TARGUNT.EQ.2) THEN
	      CALL FLWRTF('%S    Easting           '//
     &	                     'Northing          ',STRNG(1:STRNL))
	   ELSE
	      IF (.NOT.HAD_HEIGHT) THEN
	         CALL FLWRTF('%S    Latitude          '//
     &	                     'Longitude         ',STRNG(1:STRNL))
	      ELSE
	         CALL FLWRTF('%S    Latitude        '//
     &	                     'Longitude    Height ',STRNG(1:STRNL))
	      ENDIF
	   ENDIF
	   CALL FLWRTF
	ENDIF
C
  10	CONTINUE
	IF (.NOT.HAD_HEIGHT) COORD(3) = 0.0
	IF (INOPN) THEN
C
C read from file
	   PRCPTS = FLRSTR(,LEN,IERR)
C
C read from terminal
	ELSE
	   CALL WRITEF(' ')
	   IF (CURRUNT.EQ.1.OR.CURRUNT.EQ.2) THEN
	      PRCPTS=TTRSTR(,LEN,'Eastings and Northings: ',IERR)
	   ELSE
	      IF (.NOT.HAD_HEIGHT) THEN
	         PRCPTS=TTRSTR(,LEN,'Latitude and Longitude: ',IERR)
	      ELSE
	         PRCPTS=TTRSTR(,LEN,'Latitude, Longitude and Height: ',
     &	                      IERR)
	      ENDIF
	   ENDIF
	ENDIF
	IF (.NOT.PRCPTS) THEN			!  error
	   IF (PRCPTS.NE.LSL__EOF) THEN		! must be LSL__SYSERR
	      PRCPTS=IERR
	      CALL LSL_PUTMSG(PRCPTS)
	      GOTO 999
	   ELSE
	      IF (INOPN) THEN  		! close file
	         PRCPTS=FLRCLO(INLUN,IERR)
	         IF (.NOT.PRCPTS) THEN		! output message,
						! but soldier on
	            IF (PRCPTS.EQ.LSL__SYSCLOSE) THEN
	               CALL LSL_PUTMSG(IERR)
	            ELSE
	               CALL LSL_PUTMSG(PRCPTS)
	            ENDIF
	            GOTO 999
	         ENDIF
	         INOPN = .FALSE.
	         GOTO 10
	      ELSE
	         PRCPTS=SS$_NORMAL
	         GOTO 999
	      ENDIF
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! blank line
	   GOTO 10
	ENDIF
C
	CALL BSLN
C
C check for @ sign
	IF (RDCHS(ICH)) GOTO 10		! blank line
	IF (ICH.EQ.'@') THEN
C
C open file, if not open already
	   IF (INOPN) THEN
	      CALL LSL_PUTMSG(ITRANS__UNEXPAT)
	      PRCPTS = ITRANS__UNEXPAT
	      GOTO 999
	   ELSE
	      PRCPTS = GETFILNAM(IN_FILE,IN_LEN,'ITRANS.DAT',.FALSE.)
	      IF (.NOT.PRCPTS) THEN
	         CALL LSL_PUTMSG(PRCPTS)
	         GOTO 10
	      ENDIF
	      PRCPTS=FLROPN(INLUN,IN_FILE(1:IN_LEN),IERR)
	      IF (.NOT.PRCPTS) THEN
	         CALL LSL_PUTMSG(PRCPTS)
	         IF (PRCPTS.EQ.LSL__SYSOPEN) CALL LSL_PUTMSG(IERR)
	      ELSE
	         INOPN =.TRUE.
	      ENDIF
	      GOTO 10
	   ENDIF
	ELSE
	   CALL BSLN
	ENDIF	
C
	IF (CURRUNT.NE.200) THEN	! everything except dd mm ss
C
	   IF (RDDBLE(COORD(1))) THEN
	      IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	         CALL LSL_PUTMSG(LSL_EXCP)
	      ELSE
	         CALL LSL_PUTMSG(ERRNUM)
	      ENDIF
	      GOTO 10
	   ENDIF	
C
C check for valid angle (latitude)
C
	   STRNL=0
	   IF (CURRUNT.EQ.5.AND.ABS(COORD(1)).GT.PI/2.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,COORD(1))
	   ELSEIF (CURRUNT.EQ.3.AND.ABS(COORD(1)).GT.324000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,COORD(1))
	   ELSEIF (CURRUNT.EQ.4.AND.ABS(COORD(1)).GT.90) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,COORD(1))
	   ELSEIF (CURRUNT.EQ.110.AND.ABS(COORD(1)).GT.3240000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,COORD(1))
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLAT,STRNG(1:STRNL))
	      GOTO 10
	   ENDIF
C
	   IF (.NOT.RDDBLE(COORD(2))) GOTO  30 ! check for both vals
C
C check for end of line
C
	   IF (.NOT.RDCHS(ICH)) THEN
	      CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	      GOTO 10
	   ENDIF
C
 20	   CONTINUE
	   IF (INOPN) THEN
C
C read from file
	      PRCPTS = FLRSTR(,LEN,IERR)
C
C read from terminal
	   ELSE
	      CALL WRITEF(' ')
	      IF (CURRUNT.EQ.1.OR.CURRUNT.EQ.2) THEN
	         PRCPTS=TTRSTR(,LEN,'Northings: ',IERR)
	      ELSE
	         IF (.NOT.HAD_HEIGHT) THEN
	            PRCPTS=TTRSTR(,LEN,'Longitude: ',IERR)
	         ELSE
	            PRCPTS=TTRSTR(,LEN,'Longitude and Height: ',IERR)
	         ENDIF
	      ENDIF
	   ENDIF
	   IF (.NOT.PRCPTS) THEN		!  error
	      IF (PRCPTS.NE.LSL__EOF) THEN	! must be LSL__SYSERR
	         PRCPTS=IERR
	         CALL LSL_PUTMSG(PRCPTS)
	         GOTO 999
	      ELSE
	         IF (INOPN) THEN  		! close file
	            PRCPTS=FLRCLO(INLUN,IERR)
	            IF (.NOT.PRCPTS) THEN		! output message,
	               IF (PRCPTS.EQ.LSL__SYSCLOSE) THEN
	                  CALL LSL_PUTMSG(IERR)
	               ELSE
	                  CALL LSL_PUTMSG(PRCPTS)
	               ENDIF
	               GOTO 999
	            ENDIF
	            INOPN = .FALSE.
	            GOTO 10
	         ELSE
	            PRCPTS=SS$_NORMAL
	            GOTO 999
	         ENDIF
	      ENDIF
	   ELSEIF (LEN.EQ.0) THEN			! blank line
	      GOTO 20
	   ENDIF
C
	   CALL BSLN
	   IF (RDDBLE(COORD(2))) THEN
	      IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	         CALL LSL_PUTMSG(LSL_EXCP)
	      ELSE
	         CALL LSL_PUTMSG(ERRNUM)
	      ENDIF
	      GOTO  20
	   ENDIF
C
   30	   CONTINUE
C
C check for end of line
C
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (.NOT.RDCHS(ICH)) THEN
	         CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	         GOTO 10
	      ENDIF
	   ENDIF
C
C check for valid angle (longitude)
C
	   STRNL=0
	   IF (CURRUNT.EQ.5.AND.ABS(COORD(2)).GT.PI) THEN
	      STRNL=EXPAND('%WS%^D%F10.7',STRNG,COORD(2))
	   ELSEIF (CURRUNT.EQ.3.AND.ABS(COORD(2)).GT.648000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.3',STRNG,COORD(2))
	   ELSEIF (CURRUNT.EQ.4.AND.ABS(COORD(2)).GT.180) THEN
	      STRNL=EXPAND('%WS%^D%F8.3',STRNG,COORD(2))
	   ELSEIF (CURRUNT.EQ.110.AND.ABS(COORD(2)).GT.6480000.0) THEN
	      STRNL=EXPAND('%WS%^D%F10.2',STRNG,COORD(2))
	   ENDIF	      
C
	   IF (STRNL.GT.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLONG,STRNG(1:STRNL))
	      GOTO 20
	   ENDIF
C
C dd mm ss.sss format
C
	ELSE
   40	   CONTINUE
	   IF (RDANG(COORD(1),FLG)) GOTO 10	! outputs own error
C
C check for sensible value
C
	   IF (FLG.EQ.READANG_LONGITUDE.AND.
     &	            ABS(COORD(1)).GT.648000.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLONG,DISPANG(COORD(1),
     &	                  READANG_ANGLE))
	      GOTO 10
	   ELSEIF ((FLG.EQ.READANG_ANGLE.OR.FLG.EQ.READANG_LATITUDE).AND.
     &	                  ABS(COORD(1)).GT.324000.0)
     &	                      THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLAT,DISPANG(COORD(1),
     &	                  READANG_ANGLE))
	      GOTO 10
	   ENDIF
C
C perhaps we had longitude
C
	   SAVFLG=FLG
	   IF (FLG.EQ.READANG_LONGITUDE) COORD(2)=COORD(1)
C
C see what terminated angle
C
	   IF (RDCHS(ICH)) THEN
	      GOTO 50
	   ELSE
	      IF (ICH.EQ.'+'.OR.ICH.EQ.'-'.OR.
     &	          (ICH.GE.'0'.AND.ICH.LE.'9')) THEN
	         CALL BSCH
	      ELSE
	         CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	         GOTO 10
	      ENDIF
C
C check for another angle
C
	      IF (SAVFLG.EQ.READANG_LONGITUDE) THEN
	         IF (.NOT.RDANG(COORD(1),FLG)) GOTO 55
	      ELSE
	         IF (.NOT.RDANG(COORD(2),FLG)) GOTO 55
	      ENDIF
	   ENDIF
C
C check for end of line
C
	   IF (.NOT.RDCHS(ICH)) THEN
	      CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	      GOTO 10
	   ENDIF
C
 50	   CONTINUE
	   IF (INOPN) THEN
C
C read from file
	      PRCPTS = FLRSTR(,LEN,IERR)
C
C read from terminal
	   ELSE
	      CALL WRITEF(' ')
	      IF (SAVFLG.EQ.READANG_LONGITUDE) THEN
	         PRCPTS=TTRSTR(,LEN,'Latitude: ',IERR)
	      ELSE
	         IF (.NOT.HAD_HEIGHT) THEN
	            PRCPTS=TTRSTR(,LEN,'Longitude: ',IERR)
	         ELSE
	            PRCPTS=TTRSTR(,LEN,'Longitude and Height: ',IERR)
	         ENDIF
	      ENDIF
	   ENDIF
	   IF (.NOT.PRCPTS) THEN		!  error
	      IF (PRCPTS.NE.LSL__EOF) THEN	! must be LSL__SYSERR
	         PRCPTS=IERR
	         CALL LSL_PUTMSG(PRCPTS)
	         GOTO 999
	      ELSE
	         IF (INOPN) THEN  		! close file
	            PRCPTS=FLRCLO(INLUN,IERR)
	            IF (.NOT.PRCPTS) THEN		! output message,
	               IF (PRCPTS.EQ.LSL__SYSCLOSE) THEN
	                  CALL LSL_PUTMSG(IERR)
	               ELSE
	                  CALL LSL_PUTMSG(PRCPTS)
	               ENDIF
	               GOTO 999
	            ENDIF
	            INOPN = .FALSE.
	            GOTO 10
	         ELSE
	            PRCPTS=SS$_NORMAL
	            GOTO 999
	         ENDIF
	      ENDIF
	   ELSEIF (LEN.EQ.0) THEN			! blank line
	      GOTO 50
	   ENDIF
C
	   CALL BSLN
C
	   IF (SAVFLG.EQ.READANG_LONGITUDE) THEN
	      IF (.NOT.RDANG(COORD(1),FLG)) GOTO 55
	   ELSE
	      IF (.NOT.RDANG(COORD(2),FLG)) GOTO 55
	   ENDIF
	   GOTO 50
	   
   55	   CONTINUE
C
C see what terminated number
C
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (.NOT.RDCHS(ICH)) THEN
	         CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	         GOTO 50
	      ENDIF
	   ENDIF
C
C perhaps wrong hemisphere
C
	   IF (FLG.EQ.SAVFLG.AND.SAVFLG.NE.0) THEN
	      CALL LSL_PUTMSG(ITRANS__BADHEMI)
	      GOTO 10
	   ENDIF
C
C check for sensible value
C
	   IF (SAVFLG.EQ.READANG_LATITUDE.AND.
     &	               ABS(COORD(1)).GT.324000.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLAT,DISPANG(COORD(1),
     &	                     READANG_ANGLE))
	      GOTO 20
	   ELSEIF (ABS(COORD(2)).GT.648000.0) THEN
	      CALL LSL_PUTMSG(ITRANS__ILLEGLONG,DISPANG(COORD(2),
     &	                     READANG_ANGLE))
	      GOTO 20
	   ENDIF
	ENDIF
C
C if wanting height, read it now (may already be on line)
	IF (HAD_HEIGHT) THEN
	   IF (RDCHS(ICH)) THEN
C
C nothing on line, so get something
   60	      CONTINUE
	      IF (INOPN) THEN
C
C read from file
	         PRCPTS = FLRSTR(,LEN,IERR)
C
C read from terminal
	      ELSE
	         CALL WRITEF(' ')
	         PRCPTS=TTRSTR(,LEN,'Height: ',IERR)
	      ENDIF
	      IF (.NOT.PRCPTS) THEN		!  error
	         IF (PRCPTS.NE.LSL__EOF) THEN	! must be LSL__SYSERR
	            PRCPTS=IERR
	            CALL LSL_PUTMSG(PRCPTS)
	            GOTO 999
	         ELSE
	            IF (INOPN) THEN  		! close file
	               PRCPTS=FLRCLO(INLUN,IERR)
	               IF (.NOT.PRCPTS) THEN		! output message,
	                  IF (PRCPTS.EQ.LSL__SYSCLOSE) THEN
	                     CALL LSL_PUTMSG(IERR)
	                  ELSE
	                     CALL LSL_PUTMSG(PRCPTS)
	                  ENDIF
	                  GOTO 999
	               ENDIF
	               INOPN = .FALSE.
	               GOTO 10
	            ELSE
	               PRCPTS=SS$_NORMAL
	               GOTO 999
	            ENDIF
	         ENDIF
	      ELSEIF (LEN.EQ.0) THEN			! blank line
	         GOTO 60
	      ENDIF
C
	      CALL BSLN
	   ELSE
	      CALL BSCH
	   ENDIF
C
C now got something on line, so read it
	   IF (RDDBLE(COORD(3))) THEN
	      IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	         CALL LSL_PUTMSG(LSL_EXCP)
	      ELSE
	         CALL LSL_PUTMSG(ERRNUM)
	      ENDIF
	      GOTO  60
	   ENDIF
C
C see if anything else on line
	   IF (.NOT.RDCHS(ICH)) THEN
	      CALL LSL_PUTMSG(ITRANS__UNEXPCH,ICH)
	      GOTO 10
	   ENDIF
	ENDIF
C
C if keeping a log, put input value in STRNG
C
	IF (HAD_OUT) THEN
C
C dd mm ss.sss
C
	   IF (CURRUNT.EQ.200) THEN
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL=EXPAND('%WS%S    %S        ',STRNG,
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG))
	      ELSE
	         STRNL=EXPAND('%WS%S  %S %F7.2  ',STRNG,
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG),
     &	               COORD(3))
	      ENDIF
C
C 1/10ths seconds
C
	   ELSEIF (CURRUNT.EQ.110) THEN
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL=EXPAND('%WS%^D%F13.3     %F13.3         ',STRNG,
     &	               COORD(1),COORD(2))
	      ELSE
	         STRNL=EXPAND('%WS%^D%F13.3  %F13.3   %F7.2  ',STRNG,
     &	               COORD(1),COORD(2),COORD(3))
	      ENDIF
C
C metres, feet
C
	   ELSEIF (CURRUNT.EQ.1.OR.CURRUNT.EQ.2) THEN
	      IF (CURRPRJ.EQ.1.OR.CURRPRJ.EQ.2) THEN
	         STRNL=EXPAND('%WS%^D%F13.3     %F13.3'//
     &	                  ' Zone %^L%I3',STRNG,
     &	                 COORD(1),COORD(2),INZONE)
	         IF (STRNL.GT.40) STRNL=40
	      ELSE
	         STRNL=EXPAND('%WS%^D%F13.3     %F13.3         ',STRNG,
     &	               COORD(1),COORD(2))
	      ENDIF
C
C radians  
C
	   ELSEIF (CURRUNT.EQ.5) THEN
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL=EXPAND('%WS%^D%F13.10     %F13.10         ',STRNG,
     &	                  COORD(1),COORD(2))
	      ELSE
	         STRNL=EXPAND('%WS%^D%F13.10  %F13.10   %F7.2  ',STRNG,
     &	                  COORD(1),COORD(2),COORD(3))
	      ENDIF
C
C degrees
C
	   ELSEIF (CURRUNT.EQ.4) THEN
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL=EXPAND('%WS%^D%F13.8      %F13.8        ',STRNG,
     &	                  COORD(1),COORD(2))
	      ELSE
	         STRNL=EXPAND('%WS%^D%F13.8   %F13.8  %F7.2  ',STRNG,
     &	                  COORD(1),COORD(2),COORD(3))
	      ENDIF
C
C seconds
C
	   ELSEIF (CURRUNT.EQ.3) THEN
	      IF (.NOT.HAD_HEIGHT) THEN
	         STRNL = EXPAND('%WS%^D%F13.4      %F13.4        ',STRNG,
     &	                  COORD(1),COORD(2))
	      ELSE
	         STRNL = EXPAND('%WS%^D%F13.4   %F13.4  %F7.2  ',STRNG,
     &	                  COORD(1),COORD(2),COORD(3))
	      ENDIF
C
C unknown current unit
C
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__BADUNTCDS,CURRUNT)
	      PRCPTS=ITRANS__BADUNTCDS
	      GOTO 999
	   ENDIF
	ENDIF
C
C
C reverse latitude and longitude
C
	IF (CURRUNT.NE.1.AND.CURRUNT.NE.2) THEN
	   TMPCRD=COORD(1)
	   COORD(1)=COORD(2)
	   COORD(2)=TMPCRD
	ENDIF
C
C transform this point
C
   	PRCPTS=TRANS(COORD,.FALSE.)
C
C if unsuccessful, abort
C
	IF (.NOT.PRCPTS) GOTO 10
C
C output values
C
C if outputting angles, output them as LAT - LONG
C
	IF (TARGUNT.NE.1.AND.TARGUNT.NE.2) THEN
	   TMPCRD=COORD(1)
	   COORD(1)=COORD(2)
	   COORD(2)=TMPCRD
	ENDIF
C
C make sure LHS of output stays on LHS
	IF (HAD_OUT) STRNL = 40
C
C Output angles (angle is in seconds)
C
	IF (TARGUNT.EQ.200) THEN
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%S    %S',STRNG(1:STRNL),
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG))
	      CALL WRITEF('Transformed point %S    %S',
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG))
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%S  %S %F7.2 ',STRNG(1:STRNL),
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG),
     &	               COORD(3))
	      CALL WRITEF('Transformed point %S    %S    %F7.2 ',
     &	               DISPANG(COORD(1),LAT),DISPANG(COORD(2),LONG),
     &	               COORD(3))
	   ENDIF
C
C metres, feet
C
	ELSEIF (TARGUNT.EQ.1.OR.TARGUNT.EQ.2) THEN
C
C (projections that need zone)
C
	   IF (TARGPRJ.EQ.1.OR.TARGPRJ.EQ.2) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.3     %F13.3'//
     &	                  ' Zone %^L%N',STRNG(1:STRNL),
     &	                 COORD(1),COORD(2),OUTZONE)
	      CALL WRITEF('Transformed point %^D%F13.3  %F13.3'//
     &	                  '     Zone %^L%N',
     &	                 COORD(1),COORD(2),OUTZONE)
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.3      %F13.3',
     &	               STRNG(1:STRNL),COORD(1),COORD(2))
	      CALL WRITEF('Transformed point %^D%F13.3   %F13.3',
     &	                  COORD(1),COORD(2))
	   ENDIF
C
C 1/10s seconds
C
	ELSEIF (TARGUNT.EQ.110) THEN
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.3      %F13.3',
     &	            STRNG(1:STRNL),COORD(1),COORD(2))
	      CALL WRITEF('Transformed point %^D%F13.3 (Lat)   '//
     &	               '%F13.3 (Long)',COORD(1),COORD(2))
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.3  %F13.3  %F7.2 ',
     &	            STRNG(1:STRNL),COORD(1),COORD(2),COORD(3))
	      CALL WRITEF('Transformed point %^D%F13.3 (Lat) '//
     &	               '%F13.3 (Long)  %F7.2 (Height)',
     &	               COORD(1),COORD(2),COORD(3))
	   ENDIF
C
C radians  
C
	ELSEIF (TARGUNT.EQ.5) THEN
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.10     %F13.10',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2))
	      CALL WRITEF('Transformed point %^D%F13.10 (Lat)  '//
     &	                  '%F13.10 (Long)',COORD(1),COORD(2))
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.10  %F13.10  %F7.2 ',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2),COORD(3))
	      CALL WRITEF('Transformed point %^D%F13.10 (Lat) '//
     &	                  '%F13.10 (Long)  %F7.2 (Height)',
     &	                  COORD(1),COORD(2),COORD(3))
	   ENDIF
C
C degrees
C
	ELSEIF (TARGUNT.EQ.4) THEN
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.8     %F13.8',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2))
	      CALL WRITEF('Transformed point %^D%F13.8 (Lat)   '//
     &	                  '%F13.8 (Long)',COORD(1),COORD(2))
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.8  %F13.8  %F7.2 ',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2),COORD(3))
	      CALL WRITEF('Transformed point %^D%F13.8 (Lat)   '//
     &	                  '%F13.8 (Long)  %F7.2 ',COORD(1),
     &	                  COORD(2),COORD(3))
	   ENDIF
C
C seconds
C
	ELSEIF (TARGUNT.EQ.3) THEN
	   IF (.NOT.HAD_HEIGHT) THEN
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.4     %F13.4',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2))
	      CALL WRITEF('Transformed point %^D%F13.4 (Lat)   '//
     &	                  '%F13.4 (Long)',COORD(1),COORD(2))
	   ELSE
	      IF (HAD_OUT) CALL FLWRTF('%S%^D%F13.4  %F13.4  %F7.2 ',
     &	                  STRNG(1:STRNL),COORD(1),COORD(2),COORD(3))
	      CALL WRITEF('Transformed point %^D%F13.4 (Lat)  '//
     &	                  '%F13.4 (Long)  %F7.2 ',COORD(1),COORD(2),
     &	                  COORD(3))
	   ENDIF
C
C unknown target unit
C
	ELSE
	   CALL LSL_PUTMSG(ITRANS__BADUNTCDS,CURRUNT)
	   PRCPTS=ITRANS__BADUNTCDS
	   GOTO 999
	ENDIF
C
	GOTO 10
C
  999	CONTINUE
	IF (HAD_OUT) THEN
	   CALL FLWRTF
	   CALL FLWRTF
	   CALL FLWRTF('==============================='//
     &		'=================================================')
	ENDIF
	RETURN
   	END
