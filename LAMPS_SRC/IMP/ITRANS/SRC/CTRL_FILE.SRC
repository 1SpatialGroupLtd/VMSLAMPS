C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-09-05 11:44:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CTRL_FILE()
C
***	MODULE	CTRL_FILE
***	IDENT	05SE90
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author  : C A Biggs
C	Created : 17 Aug 1990
C	Modified:
C
C	Function for ITRANS to read a CONTROL file.
C
C----------------------------------------------------------------------
	IMPLICIT NONE
C
C
C	ITRANS commons
	INCLUDE '($SSDEF)'
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/HERE:ITRANSMSG/
C
***	COMMON/HERE:GENERAL/
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:CLD/
C
C Functions:
	INTEGER*4	FLROPN		   !to open a file for read
	INTEGER*4	DCL_FILE	   !read file name
	INTEGER*4	FLRCLO             !to close a file
	INTEGER*4	FLRSTR		   !to read a line from the file
	INTEGER		RDCHS		   !read a character
	INTEGER		RDDBLE		   !read a double
	INTEGER*4	STR$POSITION	   !find the position of a string
C
C Locals:
	INTEGER*4	I		   !temporary index
	INTEGER*4	J		   !temporary index
	INTEGER*4	K		   !temporary index
	INTEGER*4	OK		   !.T. if successful
	INTEGER*4	IERR		   !error code
	LOGICAL		END		   !end of line
	BYTE		ASC		   !ascii character
	LOGICAL		NODIG		   !.T. if no digit read
	LOGICAL		HAD_COMM	   !.T. if found a comment
	LOGICAL*4	ABSENT		   !.T. if no control file name
	LOGICAL*4	WHINGE		   !error code
	INTEGER*4	LENGTH		   !length of string before comment
	INTEGER*4	TEMPLEN		   !length of read string
	INTEGER*4	TEMP		   !temp. length
C
	INTEGER*4	TWO_LOWER	   !min no of cpts for /TWO t'mation
	PARAMETER	(TWO_LOWER = 2)
	INTEGER*4	THREE_LOWER	   !min no of cpts for /THREE t'mation
	PARAMETER	(THREE_LOWER = 3)
	INTEGER*4	FOUR_LOWER	   !min no of cpts for /FOUR t'mation
	PARAMETER	(FOUR_LOWER = 4)
	INTEGER*4	PROJ_LOWER	   !min no of cpts for /PROJ t'mation
	PARAMETER	(PROJ_LOWER = 4)
	INTEGER*4	SIX_LOWER	   !min no of cpts for /SIX t'mation
	PARAMETER	(SIX_LOWER = 6)
C
	INTEGER		MAX_COMMENTS
	PARAMETER	(MAX_COMMENTS = 2)
	CHARACTER*1	COMMENTS(MAX_COMMENTS)
	DATA		COMMENTS/'!',';'/	!comment characters
C
C----------------------------------------------------------------------
C
C initialise things
C
	WHINGE = .TRUE.
C
C assume success
C
	CTRL_FILE = SS$_NORMAL
C
C get its name, if specified
C
	IF(HAD_CONT) THEN			! if /OUTPUT=filespec
	   CTRL_FILE=DCL_FILE('CONTROL',	! label
     &	                      'CONTROL.DAT',
     &	                       ABSENT,		! .T. if absent
     &	                       .FALSE.,		! don't expect list of files
     &	                       WHINGE)		! .T.-local error reporting
C
           IF(.NOT.CTRL_FILE) GOTO 999
C
           CONT_FILE = FILARY(1)(1:FIL_LEN(1))
	   CONT_LEN  = FIL_LEN(1)
	ENDIF
C
C open this file
C
	CTRL_FILE=FLROPN(CONTLUN,CONT_FILE(1:CONT_LEN),I)
	IF (.NOT.CTRL_FILE) THEN
	   CALL LSL_PUTMSG(ITRANS__ERROPNCTRL,CONT_FILE(1:CONT_LEN))
	   CALL LSL_ADDMSG(CTRL_FILE)
	   IF (CTRL_FILE.EQ.LSL__SYSOPEN) CALL LSL_ADDMSG(I)
	   GOTO 999
	ENDIF
C
	I = 1					! line count
10	HAD_COMM = .FALSE.			! no comment found, yet
	CALL BSLN
	OK = FLRSTR(,TEMPLEN,IERR)		! read in line
	IF (OK) THEN
	   IF (TEMPLEN .EQ. 0) GOTO 10		! blank line
C
	   LENGTH = TEMPLEN
	   DO 20, K = 1,MAX_COMMENTS
	      TEMP = STR$POSITION(TXTDSC,COMMENTS(K))
	      IF (TEMP .NE. 0) HAD_COMM = .TRUE.	! found a comment
	      IF (TEMP .EQ. 0) TEMP = TEMPLEN		! not found a comment
	      LENGTH = MIN(LENGTH,TEMP)		! no. of chars before comment
20	   CONTINUE
	   IF (LENGTH .EQ. 1) GOTO 10   	! just a comment line
C
C  check that the limit on control points have not been exceeded
C
	   IF (I .EQ. MAX_LINES+1) THEN		! too many lines of points ?
	      CALL LSL_PUTMSG(ITRANS__2MANYLINES)	! warning
	      GOT_LINES = MAX_LINES
	      GOTO 100				! merely truncate here
	   ENDIF
C
C  set a window to contain upto the first comment character, or if none,
C  then the whole line
C
	   IF (HAD_COMM) LENGTH = LENGTH-1
	   CALL BSLN
	   CALL SETWIN(,LENGTH)			! set buffer to first comment 
	   DO 30 J = 1,4
	      END = RDCHS(ASC)			! read first character
	      IF (END .AND. J .EQ. 1) GOTO 10	! no other characters 
	      IF (END) THEN			! unexpected eoln
	         CALL LSL_PUTMSG(ITRANS__PREMEOL)
		 CTRL_FILE = .FALSE.
	         GOTO 999
	      ENDIF
C
	      CALL BSCH				! backspace 
	      NODIG = RDDBLE(CTRLPTS(J,I))	! read value and put in array
	      IF (NODIG) THEN			! invalid digit
	         CALL LSL_PUTMSG(ITRANS__INVAL_PT)
		 CTRL_FILE = .FALSE.
	         GOTO 999
	      ENDIF
30	   CONTINUE
C
	   END = RDCHS(ASC)			! extra characters 
	   IF (.NOT.END) THEN
	      CALL LSL_PUTMSG(ITRANS__EXTRACHARS)
	      CTRL_FILE = .FALSE.
	      GOTO 999
	   ENDIF
C
	   I = I + 1				! increment line count
	   GOTO 10				! read the next line
C
C	 end of file, check that lower limits for the number
C	 of lines of control points have been reached
C
	ELSE IF (OK .EQ. LSL__EOF) THEN
	   I=I-1
	   IF ((HAD_TWO .AND. I .LT. TWO_LOWER) .OR.	! lower limits
     &         (HAD_THREE .AND. I .LT. THREE_LOWER) .OR.
     &         (HAD_FOUR .AND. I .LT. FOUR_LOWER) .OR.
     &         (HAD_SIX .AND. I .LT. SIX_LOWER) .OR.
     &         (HAD_PROJECTIVE .AND. I .LT. PROJ_LOWER)) THEN
	      CALL LSL_PUTMSG(ITRANS__2FEWPTS)		! error
	      CTRL_FILE = .FALSE.
	      GOTO 999
	   ENDIF
	ELSE						! some other error
	   CALL LSL_PUTMSG(ITRANS__CTRLFILERR)
	   CALL LSL_PUTMSG(IERR)
	   CTRL_FILE = .FALSE.
	   GOTO 999
	ENDIF
C
	GOT_LINES = I				! no. of lines of control points
100	CONTINUE
C
999	OK = FLRCLO()				! finish up
	CONTINUE
	RETURN
	END
