C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-28 16:33:02.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ASKSHIFT(DIF)
C
***	MODULE ASKSHIFT
***	IDENT 28FE89
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				  9-May-1988
C
CMOD use new LSLLIB DISPANG			  5-Aug-1988	RWR
CMOD use 5 element transformation (add scale)	 27-Feb-1989	RWR
C
C       This subroutine asks for differences between datums
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNLSL:READANG/
***	PARAMETER/LSL$CMNLSL:RDYES/
***	PARAMETER/HERE:ITRANSMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/HERE:GENERAL.CMN/
C
C argument
C
	REAL*8		DIF(5)	! DX, DY, DZ, RZ and scale
C
C working storage
	REAL*8		DEFAULT(5)
	REAL*8		ANG
	INTEGER		OUTFLG
	BYTE		ICH
	INTEGER*4	LEN
	INTEGER*4	IERR
	INTEGER		I
	LOGICAL		YESNO
C
C functions
C
	INTEGER		TTRSTR
	INTEGER		RDDBLE
	INTEGER		RDANG
	INTEGER		RDCHS
	INTEGER		EXPAND
	CHARACTER*14	DISPANG
	INTEGER		RDYES
C
C assume success
C
	ASKSHIFT=ITRANS__NORMAL
C	
	CALL WRITEF(' ')
	IF (.NOT.HAD_LEARN) GOTO 100
C
C write out help information
   50	CONTINUE
	CALL WRITEF
	CALL WRITEF('To change the datum of a survey system, in '//
     &	            'addition to specifying the current')
	CALL WRITEF('and target spheroids, it is also necessary '//
     &	            'to specify the relationship of these')
	CALL WRITEF('spheroids to each other. This is done by '//
     &	            'giving the separation of their centres,')
	CALL WRITEF('the rotation, about the Z axis, and the scale '//
     &	            'change of the second relative')
	CALL WRITEF('to the first.')
	CALL WRITEF('If present, the rotation angle is always small '//
     &	            '(less than 1 degree).')
	CALL WRITEF('The scale change is given as "parts per million".')
	CALL WRITEF('For the most accurate work use the '//
     &	            '/HEIGHT_ADJUST qualifier.')
	CALL WRITEF
	CALL WRITEF('Enter the separation of the centres as the '//
     &	            'differences in X, Y and Z in the ')
	CALL WRITEF('units used to define the current spheroid. '//
     &	            'The rotation must be entered in')
	CALL WRITEF('degrees minutes and seconds and '//
     &	            'the scale factor as the difference from 1.0')
	CALL WRITEF
	CALL WRITEF('These values can be entered separately, in '//
     &	            'response to the prompts,')
	CALL WRITEF('or several can be entered on one line')
	CALL WRITEF
C
C set up default
C
  100	CONTINUE
	DEFAULT(1) = 0.0
	DEFAULT(2) = 0.0
	DEFAULT(3) = 0.0
	DEFAULT(4) = 0.0
	DEFAULT(5) = 0.0
C
C get shift in X
	CALL EXPAND('Define shift in X from original datum to target '//
     &	               'datum (%^D%F0.3): ',DEFAULT(1))
C
	ASKSHIFT=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	   ELSE
	      ASKSHIFT=ITRANS__EOF
	   ENDIF
	   CALL LSL_PUTMSG(ASKSHIFT)
	   GOTO 999
	ELSEIF (LEN.EQ.0) THEN			! take default
	   DIF(1) = DEFAULT(1)
	   GOTO 200
	ENDIF
C
	CALL BSLN
C
C check for ?
C
	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 100
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 50
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDDBLE(DIF(1))) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 100
	ENDIF	
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL BSCH
	   GOTO 210
	ENDIF
C
200	CONTINUE
	CALL EXPAND('Define shift in Y from original datum to target '//
     &	               'datum (%^D%F0.3): ',DEFAULT(2))
C
	ASKSHIFT=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	      CALL LSL_PUTMSG(ASKSHIFT)
	      GOTO 999
	   ELSE
	      ASKSHIFT=ITRANS__EOF
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 100
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! take default
	   DIF(2) = DEFAULT(2)
	   GOTO 300
	ENDIF
C
	CALL BSLN
C
C check for ?
C
  210	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 200
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 50
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDDBLE(DIF(2))) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 300
	ENDIF	
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL BSCH
	   GOTO 310
	ENDIF
C
300	CONTINUE
	CALL EXPAND('Define shift in Z from original datum to target '//
     &	               'datum (%^D%F0.3): ',DEFAULT(3))
C
	ASKSHIFT=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	      CALL LSL_PUTMSG(ASKSHIFT)
	      GOTO 999
	   ELSE
	      ASKSHIFT=ITRANS__EOF
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 100
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! take default
	   DIF(3) = DEFAULT(3)
	   GOTO 400
	ENDIF
C
	CALL BSLN
C
C check for ?
C
  310	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 300
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 50
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDDBLE(DIF(3))) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 300
	ENDIF	
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL BSCH
	   GOTO 410
	ENDIF
C
C
400	CONTINUE
	ANG = DEFAULT(4) * 180.0 * 3600.00 / PI
	CALL WRITEF('Define rotation about Z axis of the '//
     &	            'target datum from the original')
C
	CALL EXPAND('datum (in DDD MM SS.SS format) (%S)       : ',
     &	               DISPANG(ANG,READANG_ANGLE))
C
	ASKSHIFT=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	      CALL LSL_PUTMSG(ASKSHIFT)
	      GOTO 999
	   ELSE
	      ASKSHIFT=ITRANS__EOF
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 100
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! take default
	   DIF(4) = DEFAULT(4)
	   GOTO 500
	ENDIF
C
	CALL BSLN
C
C check for ?
C
  410	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 400
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 50
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDANG(ANG,OUTFLG)) GOTO 400
	IF (OUTFLG.NE.READANG_ANGLE) THEN
	   CALL LSL_PUTMSG(ITRANS__NOHEMI)
	   GOTO 400
	ENDIF	
C
C convert angle to radians
C
	DIF(4) = ANG / 3600.0 * PI /180
C
C check for end of line
C
	IF (.NOT.RDCHS(ICH)) THEN
	   CALL BSCH
	   GOTO 510
	ENDIF
500	CONTINUE
	CALL EXPAND('Define scale difference between datums '//
     &	               '(in ppm) (%^D%F0.3) : ',DEFAULT(4))
C
	ASKSHIFT=TTRSTR(,LEN,EXPDSC,IERR)
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	      CALL LSL_PUTMSG(ASKSHIFT)
	      GOTO 999
	   ELSE
	      ASKSHIFT=ITRANS__EOF
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 100
	   ENDIF
	ELSEIF (LEN.EQ.0) THEN			! take default
	   DIF(5) = DEFAULT(5)
	   GOTO 590
	ENDIF
C
	CALL BSLN
C
C check for ?
C
  510	IF (RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 500
	ELSE
	   IF (ICH.EQ.'?') THEN
	      GOTO 50
	   ELSE
	      CALL BSCH
	   ENDIF
	ENDIF	
C
C read a value
C
	IF (RDDBLE(DIF(5))) THEN
	   IF (ERRNUM.EQ.LSL__HADEXCP) THEN
	      CALL LSL_PUTMSG(LSL_EXCP)
	   ELSE
	      CALL LSL_PUTMSG(ERRNUM)
	   ENDIF
	   GOTO 500
	ENDIF	
C
C check for end of line
C
  590	IF (.NOT.RDCHS(ICH)) THEN
	   CALL LSL_PUTMSG(ITRANS__UNEXPEOL)
	   GOTO 500
	ENDIF
C
C check that at least some difference has been set
C
  	DO 600, I=1,5
	   IF (DIF(I).NE.0.0) GOTO 999
  600	CONTINUE
C
C this is most unusual
C
	CALL WRITEF
	CALL WRITEF('It is most unusual for all these parameters to '//
     &	            'be 0.0')
	ASKSHIFT=RDYES(
     &	         'Do you wish to continue with them nevertheless [N]',
     &	         YESNO,ASSUME_NO,IERR)
C
	IF (.NOT.ASKSHIFT) THEN			!  error
	   IF (ASKSHIFT.NE.LSL__EOF) THEN
	      ASKSHIFT=IERR
	      CALL LSL_PUTMSG(ASKSHIFT)
	      GOTO 999
	   ELSE
	      CALL LSL_PUTMSG(ITRANS__REENTER)
	      GOTO 100
	   ENDIF
	ENDIF
C
	IF (.NOT.YESNO) GOTO 100
C
  999	RETURN
	END
