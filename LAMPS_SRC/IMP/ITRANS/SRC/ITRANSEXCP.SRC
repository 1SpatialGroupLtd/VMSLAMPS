C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-08-08 12:06:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION ITRANSEXCP(SIGARG, MCHARG)
C
***	MODULE	ITRANSEXCP
***	IDENT	08AU86
C
	IMPLICIT NONE
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England
C
C Author		R. Fairbairns		January 1982
C Modified 		R.W. Russell		9 April 1986
C
C ITRANS condition handler for arithmetic errors
C
C arguments
C
	INTEGER		SIGARG(*)	! in - signal array
	INTEGER		MCHARG(*)	! in - mechanism array (ignored)
C
C include files
C
	INCLUDE '($MTHDEF)/NOLIST'
	INCLUDE '($SSDEF)/NOLIST'
	INCLUDE '($FORDEF)'
C
C - ITRANS common block
C
***	COMMON/HERE:GENERAL/
C
C - system status values
C
	INCLUDE '($STSDEF)/NOLIST'
C
C workspace
C
	INTEGER		INDEX		! return from LIB$MATCH_COND
	INTEGER		COND
C
C function
C
	INTEGER		LIB$MATCH_COND	! match condition codes
	INTEGER		LIB$FIXUP_FLT
C
C *********************************************************************
C
C deal with TRAP-loops
C (faults don't increment PC - for all I know, they might even do or
C  fail to do things that traps do - so we use this wonderful little
C  library routine to convert a fault to a trap; I didn't know about
C  it - it's all AJW's fault!)
C
	CALL LIB$SIM_TRAP( SIGARG, MCHARG )
C
C copy the condition, for simplicity
C
	COND = SIGARG(2)
C
C condition for GCTPLIB
C
	IF (LIB$MATCH_COND(COND,FOR$_FORVARMIS).NE.0) THEN
	   ITRANSEXCP = SS$_CONTINUE
	   GOTO 999
	ENDIF
C
C now, is it one of the ones we care about?
C
	INDEX = LIB$MATCH_COND( COND, SS$_ROPRAND,
     &		SS$_FLTDIV, SS$_FLTDIV_F, SS$_FLTOVF, SS$_FLTOVF_F,
     &		SS$_FLTUND, SS$_FLTUND_F, SS$_INTDIV, SS$_INTOVF,
     &		MTH$_INVARGMAT,  MTH$_FLOOVEMAT, MTH$_FLOUNDMAT,
     &		MTH$_LOGZERNEG  )	! (for mercator)
C
	IF ( INDEX.EQ.0 ) THEN
C
C	 not an error we care about - resignal it
C
	   ITRANSEXCP = SS$_RESIGNAL
C
	ELSEIF (INDEX.EQ.1) THEN
C
C it's a reserved operand error, so zap it.
C
	      ITRANSEXCP=LIB$FIXUP_FLT(SIGARG,MCHARG,1.0D0)
	ELSE
C
C	 we must deal with it - reduce it to a Warning
C
	   CALL MVBITS( STS$K_WARNING, 0, 3, SIGARG(2), 0 )
C
C output a message
C
	   SIGARG(1)=SIGARG(1) - 2	! subtract last two elements
	   CALL SYS$PUTMSG(SIGARG,,,)
	   SIGARG(1)=SIGARG(1) + 2	! restore last two elements
C
C	 and remember the problem for the user
C
	   ITREX = .TRUE.
	   CONDIT= SIGARG(2)
C
C	 and we will continue execution after the problem
C
	   ITRANSEXCP = SS$_CONTINUE
C
	ENDIF
C
  999	RETURN
	END
