C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1995-10-26 15:22:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE PARINIT(SYS,ZONE,PAR,UNIT,MD,TYPE)
C
***	MODULE PARINIT
***	IDENT 23MR93
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C Author    Ron Russell				19-Dec-1985
C
CMOD make sure SPHD always sets the parameters by passing
C    them as 0.0					RWR	23-Mar-93
C
CMOD    Convert for F77 GCTPLIB compatibility (WI/CC 1514)      TJM 26-Oct-1995
C
C       This subroutine initialises arguments for call of GTRN
C
	IMPLICIT NONE
C
***	COMMON/HERE:GENERAL/
***	COMMON/LSL$CMNIFF:MD2DES/
***     COMMON/HERE:DESCRIPT/
C
C arguments (output)
C
	INTEGER*4	SYS		! projection system
	INTEGER*4	ZONE		! projection zone
	REAL*8		PAR(15)		! projection parameters
	INTEGER*4	UNIT		! units to work in
C
C (input)
C
	INTEGER*4	TYPE		! = 1 for current projection
					! = 2 for target  projection
C
C argument (input)
C
	INTEGER*2	MD(DESCLN)
C
C working storage
C
	INTEGER*2	THISMD(DESCLN)	! this is a copy of the argument
					! to equivalence it
C
	INTEGER*2	MATTHS		! note I*2, for compatability
	INTEGER*2	THSDUM		! and a dummy for longword
					! alignment
	REAL*8		THSLOC(2)	! local origin
	REAL*8		THSSCL		! scale of map
	INTEGER*4	THSPRJ		! projection system
	INTEGER*4	THSUNT		! units that IFF file is in
	INTEGER*4	THSSPH		! spheroid
	REAL*8		THSUSP(2)	! user defined spheroid
	REAL*8		THSPAR(15)	! parameters for projection
	REAL*8		THSSEP		! geoid - spheroid separation
C
C which is equivalenced onto the variables
C
	EQUIVALENCE	(MATTHS,THISMD(1)),
     &			(THSDUM,THISMD(2)),
     &			(THSLOC,THISMD(3)),
     &			(THSSCL,THISMD(11)),
     &			(THSPRJ,THISMD(15)),
     &			(THSUNT,THISMD(17)),
     &			(THSSPH,THISMD(19)),
     &			(THSUSP,THISMD(21)),
     &			(THSPAR,THISMD(29)),
     &			(THSSEP,THISMD(MD2LEN+3))
C
	INTEGER*4	I		! loop counters
	INTEGER*4	PRJIND
	REAL*8		DUMM(2)
	REAL*8		A$,E$,ES$,E0$,E1$,E2$,E3$
C
C common blocks for GCTP
C
	COMMON/ELLP/ A$,E$,ES$,E0$,E1$,E2$,E3$
C
C functions
C
	REAL*8		E0FN
	REAL*8		E1FN
	REAL*8		E2FN
	REAL*8		E3FN
C
C make a copy of the argument
C
	DO 10, I=1,DESCLN
	   THISMD(I)=MD(I)
   10	CONTINUE
C
C get projection index (cannot fail at this stage!)
C
	DO 20, I=1,MD2_NOPRJ
	   IF (THSPRJ.EQ.MD2_PRJCD(I)) THEN
	      PRJIND=I
	      GOTO 22
	   ENDIF
   20	CONTINUE
C
C set up units
C
C 1) GCTP cannot cope with dd mm ss fomat, so use seconds
C
   22	CONTINUE
	IF (THSUNT.EQ.200) THEN
	   UNIT=3
C
C 2) GCTP thinks radians are code 0
C
	ELSEIF (THSUNT.EQ.5) THEN
	   UNIT=0
C
C 3) GCTP cannot cope with 1/10's of seconds, so use seconds
C
	ELSEIF (THSUNT.EQ.110) THEN
	   UNIT=3
C
C 4) GCTP cannot cope with real feet (only american feet) so use metres
C
	ELSEIF (THSUNT.EQ.1.AND.THSPRJ.NE.2) THEN
	   UNIT=2
C
C 5) GCTP does not know about sheet or table units, so use default
C
	ELSEIF (THSUNT.GE.101.AND.THSUNT.LE.105) THEN
	   IF (THSPRJ.EQ.2) THEN
	      UNIT=1				! feet
	   ELSE
	      UNIT=2				! metres
	   ENDIF
C
C 6) otherwise use units from MD
C
	ELSE
	   UNIT=THSUNT
	ENDIF
C
C copy all but first 2 parameters from MD
C
	DO 30,I=3,15
	   PAR(I)=THSPAR(I)
   30	CONTINUE
C
C specify spheroid
C
C for all projections, except UTM and SPS this is first two elements
C of par
C
	IF (THSPRJ.GT.2.AND.THSPRJ.NE.100) THEN
	   IF (THSSPH.EQ.101) THEN	! user specified
	      PAR(1)=THSUSP(1)
	      PAR(2)=THSUSP(2)
	   ELSE				! GCTP knows about this spheroid
	      PAR(1) = 0.0
	      PAR(2) = 0.0
	      CALL SPHD(THSSPH,PAR)
	   ENDIF
C
C for UTM, need to set up common block ELLP
C
	ELSEIF (THSPRJ.EQ.1) THEN
C
C	first get data about spheroid in DUMM
C
	   IF (THSSPH.EQ.101) THEN
	      DUMM(1)=THSUSP(1)	   
	      DUMM(2)=THSUSP(2)
	   ELSE
	      DUMM(1) = 0.0
	      DUMM(2) = 0.0
	      CALL SPHD(THSSPH,DUMM)
	   ENDIF
C
C 	now use this to fill in common block
C
	   IF (DUMM(2).LE.0.0) THEN		! dealing with sphere
	      ES$=0.0
	      E$ =0.0
	   ELSEIF (DUMM(2).LT.1.0) THEN		! eccentricity squared
	      ES$=DUMM(2)
	      E$ =SQRT(ES$)
	   ELSE					! major and minor axes
	      ES$=1.0-(DUMM(2)/DUMM(1))**2
	      E$ =SQRT(ES$)
	   ENDIF
	   E0$ = E0FN(ES$)
	   E1$ = E1FN(ES$)
	   E2$ = E2FN(ES$)
	   E3$ = E3FN(ES$)
	   A$  = DUMM(1)
C
C 	   for UTM, PAR(1) and PAR(2) should be preserved from MD
C
	   PAR(1)=THSPAR(1)
	   PAR(2)=THSPAR(2)
C
C for geographicals, they can be 0.0
C
	ELSEIF (THSPRJ.EQ.100) THEN
	   PAR(1)=0.0
	   PAR(2)=0.0
	ENDIF
C
C for projections marked with a "*" use a sphere rather than a spheroid
C so convert the spheroid to a sphere with the same area
C
	IF (INDEX(MD2_PRJ(PRJIND),'*').NE.0) THEN
	   CALL EQRAD(PAR)
	ENDIF
C
C GCTP thinks geographicals are code 0
C
	IF (THSPRJ.EQ.100) THEN
	   SYS=0
C
C projection 101 is UK national grid - set up special case of proj 9
C
	ELSEIF (THSPRJ.EQ.101) THEN
	   PAR(3)=0.9996012717		! scale factor on CM
	   PAR(5)=-2000000.00		! central meridian 2 deg W
	   PAR(6)=49000000.00		! origin 49 deg N
	   PAR(7)=400000.00		! false eastings
	   PAR(8)=-100000.00		! false northings
	   SYS=9
	ELSE
	   SYS=THSPRJ
	ENDIF
C
C set up zone; use specified zone for UTM and SPS.
C otherwise make sure input and output zones are different
C
	IF (THSPRJ.EQ.1.OR.THSPRJ.EQ.2) THEN
	   ZONE=PAR(3)			! R*8 -> I*4
	ELSE
	   IF (TYPE.EQ.1) THEN		! input zone
	      ZONE=99
	   ELSE				! output zone
	      ZONE=100
	   ENDIF
	ENDIF
C
C set up data for DATUM_SHIFT
C
	IF (HAD_DATUM) THEN
	   IF (THSSPH.EQ.101) THEN
	      SPH(1,TYPE) = THSUSP(1)
	      SPH(2,TYPE) = THSUSP(2)
	   ELSE
	      SPH(1,TYPE) = 0.0
	      SPH(2,TYPE) = 0.0
	      CALL SPHD(THSSPH,SPH(1,TYPE))
	   ENDIF
	   SPH(3,TYPE) = THSSEP
	ENDIF
C
	RETURN
	END
