C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-09-04 15:22:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION OBEY()
C
***	MODULE OBEY
***	IDENT 04SE90
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
CMOD 	Take account of /SIX qualifier			RWR  4-Sep-1990
CMOD 	Allows a control file to be read 		CAB 23-Aug-1990
CMOD	Output file header output with /POINT		RWR 16-Feb-1987
CMOD	/HELP changed to /LEARNER Format of /OUTPUT file
C	headeer changed					TJH 09-Dec-1986

C	Author    Ron Russell				    09-Dec-1985
C
C       The command decoder for the IFF transformation program
C
	IMPLICIT NONE
C
***	PARAMETER/HERE:ITRANSMSG/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/LSL$CMNLSL:CLD/
***	COMMON/HERE:GENERAL/
***     COMMON/HERE:DESCRIPT/
***	COMMON/LSL$CMNLSL:FILENAME/
C
C Command Language Definitions
C
	EXTERNAL	ITRANS_CLD
C
C workspace
C
	LOGICAL*4	ABSENT	! .T. if file param. not found
	LOGICAL		LOCAL	! .T. if qual. is local
	LOGICAL		LOCNEG	! set .T. if qual. locally negated
	LOGICAL*4       WHINGE	! set .T. local error reporting
	CHARACTER*256	CMDLIN	! command line as a string
	INTEGER*4	CMDLEN	! its length
	CHARACTER*256   TMP_FIL	! filename
	INTEGER*4       TMP_LEN	! length of file-spec
	INTEGER		I	! loop counter
	CHARACTER*80	STARS
	DATA		(STARS(I:I),I=1,80)/80*'*'/
C
C functions called
C
	INTEGER*4	DCL_CML	   ! get command line as a string
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
	INTEGER*4	FLWOPN
	INTEGER*4	FLROPN
	INTEGER*4	WRTCMD	   ! print commmand line
	LOGICAL		CTRL_FILE
C
C...................................................................
C
C initialise things
C
	WHINGE = .TRUE.		   ! LSLDCL local error reporting
	LOCAL   = .FALSE.          ! set .T. if qual. is local
        LOCNEG  = .FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C
C get command line for verb ITRANS. DCL_STARTUP will return set to
C SS$NORMAL if all well.
C
	OBEY=DCL_STARTUP('ITRANS',	! command verb
     &      .FALSE.,			! don't split parameter lists
     &      ITRANS_CLD,			! CLD module name
     &      WHINGE)			! .T. -local error reporting
        IF(.NOT.OBEY) GOTO 999
C
C....................................................................
C
C check for qualifiers, we could have /LOG,/LEARNER,/DESCRIPTOR,/POINT,
C /OUTPUT=file-spec,/CONTROL=file-spec,/PROJECTIVE,/FOUR,/THREE,/TWO,/SIX,
C /DATUM_SHIFT,/HEIGHT_ADJUST or /RETAIN_CP
C
C first /LEARNER
C
	OBEY=DCL_QUAL('LEARNER',	! qual. name
     &                 HAD_LEARN,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C now /LOG
C
	OBEY=DCL_QUAL('LOG',		! qual. name
     &                 HAD_LOG,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C now /OUTPUT
C
	OBEY=DCL_QUAL('OUTPUT',		! qual. name
     &	               HAD_OUT,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual local to parameter
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C get its name, if specified
C
	IF(HAD_OUT) THEN		! if /OUTPUT=filespec
	   OBEY=DCL_FILE('OUTPUT',	! label
     &	                  'SYS$DISK:ITRANS.LIS',
     &	                  ABSENT,	! .T. if absent
     &	                  .FALSE.,	! don't expect list of files
     &	                  WHINGE)	! .T.-local error reporting
C
           IF(.NOT.OBEY) GOTO 999
C
           OUT_FILE = FILARY(1)(1:FIL_LEN(1))
	   OUT_LEN  = FIL_LEN(1)
	ELSE				! default
	   OUT_FILE = 'SYS$OUTPUT:'
	   OUT_LEN  = 11
	ENDIF
C
C open this file
C
	OBEY=FLWOPN(OUTLUN,OUT_FILE(1:OUT_LEN),I)
	IF (.NOT.OBEY) THEN
	   CALL LSL_PUTMSG(OBEY)
	   IF (OBEY.EQ.LSL__SYSOPEN) CALL LSL_PUTMSG(I)
	   GOTO 999
	ELSE
	   OUTOPN=.TRUE.
	ENDIF
C
C open terminal as a file
C
	OBEY=FLWOPN(TERMLUN,'SYS$INPUT:',I)
	IF (.NOT.OBEY) THEN
	   CALL LSL_PUTMSG(OBEY)
	   IF (OBEY.EQ.LSL__SYSOPEN) CALL LSL_PUTMSG(I)
	   GOTO 999
	ENDIF
C
C next /PROJECTIVE
C
	OBEY=DCL_QUAL('PROJECTIVE',		! qual. name
     &                 HAD_PROJECTIVE,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) THEN
	   GOTO 999
	ELSE
	   HAD_FTT=HAD_FTT.OR.HAD_PROJECTIVE
	ENDIF
C
C next /FOUR
C
	OBEY=DCL_QUAL('FOUR',		! qual. name
     &                 HAD_FOUR,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) THEN
	   GOTO 999
	ELSE
	   HAD_FTT=HAD_FTT.OR.HAD_FOUR
	ENDIF
C
C next /THREE
C
	OBEY=DCL_QUAL('THREE',		! qual. name
     &                 HAD_THREE,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) THEN
	   GOTO 999
	ELSE
	   HAD_FTT=HAD_FTT.OR.HAD_THREE
	ENDIF
C
C next /TWO
C
	OBEY=DCL_QUAL('TWO',		! qual. name
     &                 HAD_TWO,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) THEN
	   GOTO 999
	ELSE
	   HAD_FTT=HAD_FTT.OR.HAD_TWO
	ENDIF
C
C next /SIX
C
	OBEY=DCL_QUAL('SIX',		! qual. name
     &                 HAD_SIX,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) THEN
	   GOTO 999
	ELSE
	   HAD_FTT=HAD_FTT.OR.HAD_SIX
	ENDIF
C
C now /CONTROL
C
	OBEY=DCL_QUAL('CONTROL',	! qual. name
     &	               HAD_CONT,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual local to parameter
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C next /ABSOLUTE
C
	OBEY=DCL_QUAL('ABSOLUTE',	! qual. name
     &                 HAD_ABS,		! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C next /DESCRIPTOR
C
	OBEY=DCL_QUAL('DESCRIPTOR',	! qual. name
     &                 HAD_DESCR,	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C next /POINT
C
	   OBEY=DCL_QUAL('POINT',	! qual. name
     &                    HAD_POINT,	! returned .T. if qual. found
     &	                  LOCAL,	! .T. if qual local to parameter
     &	                  LOCNEG,	! .T. if qual. negated locally
     &	                  WHINGE)	! .T.-local error reporting
	   IF(.NOT.OBEY) GOTO 999
C
C next /DATUM_SHIFT
C
	   OBEY=DCL_QUAL('DATUM_SHIFT',	! qual. name
     &                    HAD_DATUM,	! returned .T. if qual. found
     &	                  LOCAL,	! .T. if qual local to parameter
     &	                  LOCNEG,	! .T. if qual. negated locally
     &	                  WHINGE)	! .T.-local error reporting
	   IF(.NOT.OBEY) GOTO 999
C
C next /HEIGHT_ADJUST
C
	   OBEY=DCL_QUAL('HEIGHT_ADJUST',	! qual. name
     &                    HAD_HEIGHT,	! returned .T. if qual. found
     &	                  LOCAL,	! .T. if qual local to parameter
     &	                  LOCNEG,	! .T. if qual. negated locally
     &	                  WHINGE)	! .T.-local error reporting
	   IF(.NOT.OBEY) GOTO 999
C
C now /RETAIN_CP
C
	OBEY=DCL_QUAL('RETAIN_CP',    	! qual. name
     &                 HAD_RETAIN_CP, 	! returned .T. if qual. found
     &	               LOCAL,		! .T. if qual local to parameter
     &	               LOCNEG,		! .T. if qual. negated locally
     &	               WHINGE)		! .T.-local error reporting
	IF(.NOT.OBEY) GOTO 999
C
C....................................................................
C
C no parameters are required if /POINT specified
C
	IF (HAD_POINT) GOTO 998
C
C
C
	IF (HAD_CONT) THEN
	   OBEY=CTRL_FILE()
	   IF (.NOT. OBEY) GOTO 999
	ELSE
	   GOT_LINES = 4
	ENDIF
C
C get parameters
C 1) input file-name or prompt for it
C
	OBEY=DCL_FILE('IN_FILESPEC',	!parameter label
     &	              'LSL$IF:IFF.IFF;0',! default file-name
     &	               ABSENT,		! .T. if no file-name
     &	               .FALSE.,		! don't expect list of files
     &	               WHINGE)		! .T.-local error reporting
C
C transfer file-spec to a common block
C
        IF(OBEY) THEN
           SRCE_FILE = FILARY(1)(1:FIL_LEN(1))
	   SRCE_LEN  = FIL_LEN(1)
        ELSE
           GOTO 999
        ENDIF 
C
C 2) output file name
C    this defaults to same name as input file without version number
C    so use the exploded file name in RDFILN.CMN to construct it.
C    This has been put there by a call of RDFILN in DCL_FILE
C
        HAD_VER = .FALSE.		! ignore any existing version
	CALL EXPFLN(TMP_FIL,TMP_LEN)
C
C no output file required if /DESCRIPT - use input file name, even if 
C required to rewrite file
C
	IF (.NOT.HAD_DESCR) THEN
C
	   OBEY=DCL_FILE('OUT_FILESPEC',! parameter label
     &	               TMP_FIL,		! default file-name
     &	               ABSENT,		! .T. if no file-name
     &	               .FALSE.,		! don't expect list of files
     &	               WHINGE)		! .T.-local error reporting
C
	ELSE
	   ABSENT=.TRUE.
	ENDIF
C
C transfer file-spec to a local variable
C
	IF(OBEY) THEN
	   IF (ABSENT) THEN
	      FILARY(1)=TMP_FIL
	      FIL_LEN(1)=TMP_LEN
	      IF(HAD_LOG.AND..NOT.HAD_DESCR) THEN
	         CALL LSL_PUTMSG(ITRANS__OUTFILEDEF,
     &	                     FILARY(1)(1:FIL_LEN(1)))
	      ENDIF
	   ELSEIF(HAD_VER) THEN
	      CALL LSL_PUTMSG(ITRANS__HADVER)
	      OBEY = ITRANS__HADVER
	      GOTO 999 	
	   ENDIF
C
C transfer file name to common block
C
	   DEST_FILE = FILARY(1)
	   DEST_LEN  = FIL_LEN(1)
	ELSE
	   GOTO 999
        ENDIF
C
C
C write header to file opened for /OUTPUT
C
  998	CONTINUE
	IF (OBEY) THEN
	  IF (HAD_OUT) THEN
	    CALL FLWSEL(OUTLUN)
	    CALL FLWRTF('==============================='//
     &		'=== ITRANS ======================================')
	    CALL FLWRTF
	    CALL FLWRTF
C
C Get command line, then get process details/print cmd. line
C
	    OBEY=DCL_CML(CMDLIN,CMDLEN,.TRUE.)
	    IF (OBEY) THEN
	      OBEY=WRTCMD(CMDLIN,CMDLEN)
	    ENDIF
	  ENDIF
	ENDIF

C			
999     RETURN
   	END
