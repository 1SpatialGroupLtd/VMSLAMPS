C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-05 16:44:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION INIT()
C
***	MODULE INIT
***	IDENT 05MY88
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
C 	Author    Ron Russell			     09-Dec-1985
CMOD	Deal with /DATUM_SHIFT qualifier - only allowed with
C	                                    geographicals
C	(work instruction W/28)
C						RWR  5-May-1988
CMOD	Deal with CB entries - set up ACD common block
C						RWR  23-Nov-1987
CMOD    save values of CP entry, so that CPTS can be reset
C	(mod m2/420)
C					   	RWR  11-Feb-1987
CMOD	IFFOPN replaced by LSLLIB IFFOPEN	TJH  06-Nov-1986
C
C       This subroutine opens and reads the MD from the input file
C
	IMPLICIT NONE
C
	INCLUDE '($SSDEF)'
C
***	PARAMETER/HERE:ITRANSMSG/
***	COMMON/LSL$CMNIFF:IFFHAN/	! IFF library interface
***	COMMON/LSL$CMNIFF:MD2DES/
***	COMMON/HERE:DESCRIPT/
***	COMMON/HERE:GENERAL/
C
C
C w/s
C
	INTEGER*4	I,J		! loop counter
	INTEGER*2	IELEN		! for reading from IFF file
	LOGICAL		DIFFCPTS	! are corner points different
C
C Function:
	INTEGER		IFFOPEN		! open IFF file (readonly)
C
C ......................................................................
C
	INIT=ITRANS__NORMAL
	CLOSE_STATUS = SS$_NORMAL
C
	IF (.NOT.HAD_POINT) THEN
C
C initialise IFFLIB
C
	   CALL IFFTDY
C
C open iff file for read
C
	   INIT=IFFOPEN(SRCELUN,SRCE_FILE(1:SRCE_LEN),,HAD_LOG)
	   IF (.NOT.INIT) THEN
	      GOTO 999
	   ELSE
	      SRCE_LEN=0			! zero top bits
	      CALL IFFINQ(SRCE_FILE,SRCE_LEN)	! expects I*2
	      SRCEOPN=.TRUE.
	      CALL IFFIRV(1)
	   ENDIF
C
C and get map descriptor
C
	   CALL IFFNXC('MD',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      CALL LSL_PUTMSG(ITRANS__NOMD,SRCE_FILE(1:SRCE_LEN))
	      INIT=ITRANS__NOMD
	      GOTO 999
	   ELSEIF (IELEN.NE.MD2LEN) THEN
	      CALL LSL_PUTMSG(ITRANS__NOV2MD,SRCE_FILE(1:SRCE_LEN))
	   ELSE
	      CALL EIHR(MD2ARR,MD2LEN,1)
	      IF (MATV2.NE.2) THEN		! no MD available
	         CALL LSL_PUTMSG(ITRANS__UNSETMD,
     &	                          SRCE_FILE(1:SRCE_LEN))
	         DO 10, I=1,MD2LEN
	            CURRMD(I)=0.0
   10	         CONTINUE
	      ELSE				! use existing MD
	         DO 20, I=1,MD2LEN
	            CURRMD(I)=MD2ARR(I)
   20	         CONTINUE
C
C check that not geographicals and trying to do plane transformation
C
	         IF (HAD_FTT.AND.CURRPRJ.EQ.100) THEN
	            CALL LSL_PUTMSG(ITRANS__NOTPLANE)
	            INIT=ITRANS__NOTPLANE
	            GOTO 999
C
C check that units and projection are not unset
C
	         ELSEIF (CURRPRJ.EQ.0.AND..NOT.HAD_DESCR) THEN
	            CALL LSL_PUTMSG(ITRANS__UNSETPRJ,SRCE_FILE
     &	                     (1:SRCE_LEN))
	         ELSEIF (CURRUNT.EQ.0.AND..NOT.HAD_DESCR) THEN
	            CALL LSL_PUTMSG(ITRANS__UNSETUNT,SRCE_FILE
     &	                     (1:SRCE_LEN))
C
C can only do datum shift on geographicals
C
	         ELSEIF (HAD_DATUM.AND.CURRPRJ.NE.100) THEN
	            CALL LSL_PUTMSG(ITRANS__NOTGEOGS)
	            INIT=ITRANS__NOTGEOGS
	            GOTO 999
	         ELSE
	            CURRGOOD=.TRUE.
	         ENDIF
	      ENDIF
	   ENDIF
C
C get corner points
C
	   CALL IFFNXC('CP',IELEN)
	   IF (IELEN.EQ.-1) THEN
	      CALL LSL_PUTMSG(ITRANS__NOCP,SRCE_FILE(1:SRCE_LEN))
	      INIT=ITRANS__NOCP
	      GOTO 999
	   ELSE
	      CALL EIHRR(CPTS,16,1)
C
C check that LHS is same as RHS
C (don't care if patching descriptor or if going to alter them anyway)
C
	      DO 30, I=1,4
	         IF (CPTS(1,I).NE.CPTS(3,I).OR.CPTS(2,I).NE.CPTS(4,I))
     &	                        THEN
	            DIFFCPTS=.TRUE.
	            GOTO 40
	         ENDIF
   30	      CONTINUE
C
	      DIFFCPTS=.FALSE.
C
   40	      CONTINUE
	      IF (.NOT.(HAD_DESCR.OR.HAD_FTT.OR.
     &	          (CURRGOOD.AND.(MD2UNT.GE.101.AND.MD2UNT.LE.105)))
     &	          .AND.DIFFCPTS) THEN
	         CALL LSL_PUTMSG(ITRANS__WRNGCPTS)
	         INIT=ITRANS__WRNGCPTS
	      ENDIF
C
C keep a copy of these values for future reference
C
	      DO 50, I=1,4
	         DO 50, J=1,4
	            ORGCPTS(I,J) = CPTS(I,J)
	         CONTINUE
   50	      CONTINUE
	   ENDIF	      
	ENDIF
C
  999	RETURN
   	END
