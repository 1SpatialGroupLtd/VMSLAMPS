C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-12-15 13:40:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION CLOSEF(INOPN,OUTOPN,LSTOPN)
C
***	MODULE	CLOSEF
***	IDENT	15DE87
C
C	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C
CMOD	Altered so that does not give error on closing output file
C	if get attributes lost warning			JMB  15-Dec-1987
CMOD	Logical file open flags added, output IFF file
C	deleted in event of processing error worse than
C	severity 'warning'				TJH  24-Nov-1986
CMOD	Modified to correctly set $STATUS		ATT   7-Nov-1986
CMOD	Rewritten.					TJH  25-JUL-1986
C	Author 	Immanuel Freedman 11-DEC-85
C
C	This modules closes the IFF files and spools the listing file.
C
	IMPLICIT NONE	
C
C Arguments:
	LOGICAL		INOPN		! .T. if input IFF file open
	LOGICAL		LSTOPN		! .T. if listing file open
	LOGICAL		OUTOPN		! .T. if output IFF file open
C
C Parameters:
	INCLUDE 	'LSL$CMNISORT:ISORTMSG.PAR'
	INCLUDE 	'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 	'($SSDEF)'
	INTEGER*4	STS$K_WARNING
	EXTERNAL  	STS$K_WARNING	! bit mask for warning severity
	INTEGER		INLUN
	PARAMETER	(INLUN=1)	! input IFF file lun
	INTEGER		OUTLUN
	PARAMETER	(OUTLUN=2)	! output IFF file lun
	INTEGER		MSGLUN
	PARAMETER	(MSGLUN=2)	! listing file lun
C
C Workspace:
	INTEGER		IERR		! for error return
C
C Functions:
	INTEGER*4	FLWPRT		! spool file
	INTEGER*4	FLWSPL  	! spool and delete file
C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNISORT:IFFOK.CMN'
	INCLUDE 'LSL$CMNISORT:FILES.CMN'
	INCLUDE 'LSL$CMNISORT:FLAG.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C ......................................................................
C
	CLOSEF = SS$_NORMAL 			! assume success
C
C Close IFF input file
C
	IF (INOPN) THEN
	  CALL IFFCLO(INLUN)			! current input file
          IF ((IERCD.NE.0).AND.(IERCD.NE.'LOST')) THEN	! error?
	    CLOSEF=ISORT__ERRCLINFL		! error closing file
	    CALL LSL_PUTMSG(CLOSEF,P1_FIL(:P1_LEN))!tell user
	  ENDIF
	ENDIF
C
C Close IFF output file
	IF (OUTOPN) THEN
	  IF (.NOT.LSL_STATUS) THEN
	    IF (IBITS(LSL_STATUS,0,3).NE.%LOC(STS$K_WARNING)) THEN
	      CALL IFFCDL(OUTLUN) 		! delete output file
	    ELSE
	      CALL IFFCLO(OUTLUN,SS$_ABORT) ! close output file
	    ENDIF
	  ELSE
	    CALL IFFCLO(OUTLUN,SS$_NORMAL) 	! close output file
	  ENDIF
          IF ((IERCD.NE.0).AND.(IERCD.NE.'LOST')) THEN	! error?
	    CLOSEF=ISORT__ERRCLOUTFL		! error closing file
	    CALL LSL_PUTMSG(CLOSEF,P2_FIL(:P2_LEN))!tell user
	  ENDIF
	ENDIF
C
C If required, close the listing file and print/delete it
C
	IF (LSTOPN) THEN
          IF (HAD_PRI .AND..NOT.HAD_OUT) THEN
            CLOSEF=FLWSPL(MSGLUN,IERR)
	    IF (CLOSEF.NE.LSL__NORMAL) THEN	! error?
	      CLOSEF=ISORT__LSTNSPLDEL		! list file not spooled
	      CALL LSL_PUTMSG(CLOSEF)		! tell user
C
C Give any secondary error message
	      IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
            ENDIF
	  ENDIF
C
C
C If required, close the listing file and print it
C
	  IF (HAD_PRI.AND.HAD_OUT) THEN
	    CLOSEF=FLWPRT(MSGLUN,IERR)
	    IF (CLOSEF.NE.LSL__NORMAL) THEN	! error?
	      CLOSEF=ISORT__LSTNSPL   		! list file not spooled
	      CALL LSL_PUTMSG(CLOSEF)		! tell user
C
C Give any secondary error message
	      IF (IERR.NE.0) CALL LSL_ADDMSG(IERR)
	    ENDIF
	  ENDIF	
	ENDIF
C
	IF (CLOSEF) CLOSEF=SS$_NORMAL	! normal completion?
	RETURN
	END
