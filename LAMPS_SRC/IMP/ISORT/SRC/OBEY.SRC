C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-11-11 15:16:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION OBEY(CMLSTR,CMLEN)
C
***	MODULE	OBEY
***	IDENT	11NO87
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 
CMOD	/FC added					JMB  11-Nov-1987
C
CMOD	/NODUPLICATES = FIRST and /NODUPLICATES = LAST added,
C	and DUPLICATES made non-negatable		DRC  05-Aug-1987
C
CMOD	New IFF opening, and command line printing added.
C							ATT   7-Nov-1986
CMOD	Tidied and /PRINTER now prints even if /OUTPUT is
C	not specified.					TJH  24-Jul-1986
C
C 	Author    Immanuel Freedman 
C 	History   Created   				      2-Dec-1985
C
C       This module is the command decoder for ISORT
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNISORT:FILES.CMN'
	INCLUDE 'LSL$CMNISORT:FLAG.CMN'
	INCLUDE 'LSL$CMNISORT:ISORTMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
C
C Command Language Definitions:
	EXTERNAL	ISORT_CLD
C
C Workspace:
	CHARACTER*128   TMP_FIL    ! filename
C
	INTEGER*4       TMP_LEN    ! length of file-spec
C
	LOGICAL		ABSENT	   ! .T. if file param. not found
	LOGICAL		HAD_QUAL   ! .T. if had this qualifier
	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
C
	LOGICAL		OUTFIL_DEF ! .T. - if /OUTPUT with no file-spec
        LOGICAL		WHINGE     ! .T. - local error reporting
C
	INTEGER*4	CMLEN	! length of command line string
	CHARACTER*1024	CMLSTR	! command line string
C
C Functions called:
	INTEGER*4	DCL_FILE   ! reads & parses file title from DCL 
C			           ! command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_CML	   ! gets command line
C
C...................................................................
C
C Initialise things
C
	WHINGE=.TRUE.		 ! local error reporting
	HAD_LOG=.FALSE.          ! set .T. if /LOG
        HAD_INT=.FALSE.          ! set .T. if /INTERNAL
	HAD_DUP=.TRUE.           ! default is /DUPLICATES
	HAD_NODUP=.FALSE.	 ! set .T. if /NODUPLICATES
	HAD_FIRST=.TRUE.	 ! default is to retain first duplicated
C				 ! feature
	HAD_LAST=.FALSE.	 ! set .T. if /NODUPLICATES = LAST
	HAD_FC=.FALSE.		 ! default is no /FC
	HAD_OUT=.FALSE.          ! set .T. if /OUTPUT
        HAD_PRI=.FALSE.          ! set .T. if /PRINTER
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
	OUTFIL_DEF = .TRUE.	 ! assume default output file required
C
C....................................................................
C
C Get command line for verb ISORT. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	OBEY=DCL_STARTUP('ISORT'    	! command verb
     &      		,.FALSE.        ! don't split parameter lists
     &      		,ISORT_CLD      ! CLD module name
     &      		,WHINGE)        ! .T. -local error reporting
        IF (.NOT.OBEY) GOTO 10 		! return
C
C....................................................................
C
C Check for qualifiers, we could have /LOG,/INTERNAL,/DUPLICATES,
C /OUTPUT=file-spec or /PRINTER
C
C First try /LOG
	OBEY=DCL_QUAL('LOG'		! qual. name
     &        		,HAD_LOG	! returned .T. if qual. found
     &			,LOCAL		! .T. if qual local to parameter
     &			,LOCNEG		! .T. if qual. negated locally
     &			,WHINGE)	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
C
C Now /INTERNAL
	OBEY=DCL_QUAL('INTERNAL'  	! qual. name
     &  		,HAD_INT  	! returned .T. if qual. found
     &   		,LOCAL    	! .T. if qual local to parameter
     &			,LOCNEG   	! .T. if qual locally negated
     &		     	,WHINGE)  	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
C
C Now /DUPLICATES
	OBEY=DCL_QUAL('DUPLICATES'	! qual. name
     & 		,HAD_QUAL          	! returned .T. if qual. found
     &		,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual. locally negated
     &		,WHINGE)          	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
	IF (HAD_QUAL)THEN
	   HAD_DUP = .TRUE.
	   HAD_NODUP=.FALSE.
	   HAD_FIRST=.FALSE.
	   HAD_LAST=.FALSE.
	ENDIF
C
C Now /FC
	OBEY=DCL_QUAL('FC'		! qual. name
     &		,HAD_FC			! returned .T. if qual. found
     &		,LOCAL			! .T. if qual local to parameter
     &		,LOCNEG			! .T. if qual locally negated
     &		,WHINGE)		! .T. local error reporting
	IF (.NOT.OBEY) GOTO 10		! return
C
C Now /NODUPLICATES
	OBEY=DCL_QUAL('NODUPLICATES'	! qual. name
     & 		,HAD_QUAL          	! returned .T. if qual. found
     &		,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual. locally negated
     &		,WHINGE)          	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
	IF (HAD_QUAL)THEN
	   HAD_DUP = .FALSE.
	   HAD_NODUP=.TRUE.
	   HAD_FIRST=.TRUE.		! default
	   HAD_LAST =.FALSE.		! therefore
C
C Check for NODUPLICATES.LAST
C
	   OBEY=DCL_QUAL('NODUPLICATES.LAST'	! qual. name
     & 		,HAD_QUAL          	! returned .T. if qual. found
     &		,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual. locally negated
     &		,WHINGE)          	! .T.-local error reporting
	   IF (.NOT.OBEY) GOTO 10 		! return
	   IF (HAD_QUAL)THEN
	      HAD_LAST=.TRUE.
	      HAD_FIRST=.FALSE.
	   ENDIF
	ENDIF
C
C Now /OUTPUT
	OBEY=DCL_QUAL('OUTPUT'    	! qual. name
     &     	,HAD_OUT          	! returned .T. if qual. found
     &          ,LOCAL 		  	! .T. if qual local to parameter
     &		,LOCNEG   	  	! .T. if qual locally negated
     &          ,WHINGE)          	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
C
C Check for /OUTPUT=filespec
	IF (HAD_OUT) THEN    	  
	  OBEY=DCL_FILE('OUTPUT'	! label
     &	            ,'SYS$DISK:ISORT.LIS'! default filespec
     &	            ,ABSENT		! .T. if absent
     &	            ,.FALSE.      	! don't expect list of files
     &              ,WHINGE)      	! .T.-local error reporting
	  IF (.NOT.OBEY) GOTO 10 	! return
C
	  IF (.NOT.ABSENT) THEN		! File specified
            OUT_FIL=FILARY(1)(1:FIL_LEN(1))
	    OUT_LEN=FIL_LEN(1)
	    OUTFIL_DEF = .FALSE.
	  ENDIF
	ENDIF
C
C Now /PRINTER
	OBEY=DCL_QUAL('PRINTER'   	! qual. name
     & 		,HAD_PRI          	! returned .T. if qual. found
     &		,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG           	! .T. if qual locally negated
     &		,WHINGE)          	! .T.-local error reporting
	IF (.NOT.OBEY) GOTO 10 		! return
C
C Set the output filespec for /PRINTER if we have not had /OUTPUT
	IF (HAD_PRI.AND.OUTFIL_DEF) THEN
	  OUT_FIL='SYS$DISK:ISORT.LIS'
	  OUT_LEN=18
	ENDIF
C
C Set the output filespec for /OUTPUT if we have not had /PRINTER
	IF (.NOT.HAD_PRI.AND.OUTFIL_DEF) THEN
	  OUT_FIL='SYS$OUTPUT'
	  OUT_LEN=10
	ENDIF
C
C Get input file-name
	OBEY=DCL_FILE('IN_FILESPEC'	!parameter label
     &		,'LSL$IF:IFF.IFF;0'	! default file-name
     &		,ABSENT  	  	! .T. if no file-name
     &		,.FALSE.		! don't expect list of files
     &          ,WHINGE)		! .T.-local error reporting
C
C Transfer file-spec to a local variable
        IF (OBEY) THEN
          P1_FIL=FILARY(1)(1:FIL_LEN(1))
	  P1_LEN=FIL_LEN(1)
        ELSE
          GOTO 10 			! return
        ENDIF 
C
C Generate output default filespec based on input file. Strip version if
C specified.
        HAD_VER=.FALSE.
	CALL EXPFLN(TMP_FIL,TMP_LEN)
C
C Get output filename
	OBEY=DCL_FILE('OUT_FILESPEC'	! parameter label
     &		,TMP_FIL           	! default file-name
     &		,ABSENT		  	! .T. if no file-name
     &		,.FALSE.	  	! don't expect list of files
     &		,WHINGE)	  	! .T.-local error reporting
C
C Transfer file-spec to a local variable
	IF (OBEY) THEN
	  P2_FIL=FILARY(1)(1:FIL_LEN(1))
	  P2_LEN=FIL_LEN(1)
        ENDIF
C
C As we may want to write out the commad line to an output file lets 
C get it !
	OBEY=DCL_CML(CMLSTR,CMLEN,.TRUE.) 
C			
10      RETURN
   	END
