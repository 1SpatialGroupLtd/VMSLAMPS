C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-25 18:01:46.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4  FUNCTION GETF(INOPN,OUTOPN,LSTOPN)
C
***	MODULE	GETF
***	IDENT	24NO86
C
C 	Copyright Laser-Scan Laboratories Ltd.,England
C
CMOD	Logical file open flags and IFFINQ added	TJH  24-Nov-1986
CMOD	New IFF opening routines added			ATT   7-Nov-1986
CMOD	IFFRLA added					TJH  23-Oct-1986
CMOD	Rewritten.					TJH  23-Jul-1986
C	Author Immanuel Freedman 29-JA-86
C
C       This module obtains (opens) IFF files (and listing file). 
C
	IMPLICIT NONE
C
C
C Arguments:
	LOGICAL			INOPN	! .T. if input IFF file open
	LOGICAL			LSTOPN	! .T. if listing file open
	LOGICAL			OUTOPN	! .T. if output IFF file open
C
C Parameters:
	INTEGER*4 	SS$_NORMAL
	EXTERNAL  	SS$_NORMAL	! normal successful completion
	PARAMETER 	INLUN=1 	! input unit
	PARAMETER	OUTLUN=2	! output unit
	PARAMETER	MSGLUN=2	! list file unit
C
C Function:
	INTEGER*4	FLWOPN		! opens list file for write
	LOGICAL		IFFOPEN		! open existing IFF file to read
	LOGICAL		IFFCREATE	! open new IFF file to write
C
C Workspace:
	INTEGER*4	IERR		! for error return	
	LOGICAL		IFF_OK		! to test for IFF opening
	INTEGER*4	CREATED(2)	! dummy quadword for IFFINQ
	INTEGER*4	REVISED(2)	! dummy quadword for IFFINQ
	INTEGER*2	NREV		! dummy word for IFFINQ
	INTEGER*2	PLEN		! tmp file-spec length

C
C Common:
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'
	INCLUDE 'LSL$CMNISORT:FILES.CMN'
	INCLUDE 'LSL$CMNISORT:FLAG.CMN'
	INCLUDE 'LSL$CMNISORT:ISORTMSG.PAR'
C
C.......................................................................
C
	GETF = %LOC(SS$_NORMAL)        	! normal completion
	
	INOPN = .FALSE.			! .T. if input IFF file open
	LSTOPN = .FALSE.		! .T. if listing file open
	OUTOPN = .FALSE.		! .T. if output IFF file open
C
C.......................................................................
C
C Open IFF input file
C
	IFF_OK = IFFOPEN(INLUN,P1_FIL(:P1_LEN),,HAD_LOG)
C
        IF (IFF_OK) THEN			
	  INOPN=.TRUE.
C
C Get the full input file-spec as actually opened
C
	  CALL IFFINQ(P1_FIL,PLEN,CREATED,REVISED,NREV)
	  P1_LEN=PLEN
	ELSE
	  GETF = IFF_OK
	  GOTO 10				! file didn't open OK
	ENDIF
C	
C.......................................................................
C
C Open IFF output file
	IFF_OK = IFFCREATE(OUTLUN,P2_FIL(1:P2_LEN),,,HAD_LOG)
C
        IF (IFF_OK) THEN
	  OUTOPN=.TRUE.
C
C Get the full output file-spec as actually opened
C
	  CALL IFFINQ(P2_FIL,PLEN,CREATED,REVISED,NREV)
	  P2_LEN=PLEN
	ELSE
	  GETF = IFF_OK
	  GOTO 10				! file didn't open OK
	ENDIF
C
	CALL IFFSEL(INLUN)
C
C.......................................................................
C
C Open listing file, if required.
C
	IF (HAD_OUT.OR.HAD_PRI) THEN 
	   GETF = FLWOPN(MSGLUN,OUT_FIL(:OUT_LEN),IERR)
           IF (GETF) THEN			! did it open ok?
	     LSTOPN=.TRUE.
             IF (HAD_LOG.AND.OUT_FIL(:OUT_LEN).NE.'SYS$OUTPUT') THEN
	       GETF = ISORT__LSTOPNOUT		! yes, tell user 
	       CALL LSL_PUTMSG(GETF,OUT_FIL(:OUT_LEN))
	     ENDIF
	   ELSE					! file open error
	      GETF = ISORT__ERROPLST		! tell user
	      CALL LSL_PUTMSG(GETF,OUT_FIL(:OUT_LEN))
	      CALL LSL_ADDMSG(IERR)		! give any 2ndary error
           ENDIF
	ENDIF
C
C.......................................................................
C
10	IF (GETF) GETF = %LOC(SS$_NORMAL)        ! normal completion?
C
	RETURN
	END
