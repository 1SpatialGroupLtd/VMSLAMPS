C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-01-27 11:24:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION READ_IFF()
C
***	MODULE READ_IFF
***	IDENT 27JA87
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : A.T. Timms 				14 January 1987
C
C	Function to pass through input IFF file collecting relevant
C	information as we go.
C
C.......................................................................
C
C	Valid returns are:
C
C	SS$NORMAL		normal successful completion
C
C	ICHECK__UNEXPEOF	unexpected end of file
C
C	and error returns from READ_NO, READ_FS, READ_ZS, and READ_EF
C
C.......................................................................
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNIFF:IFFHAN.CMN'		! IFF read & write
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKFIL.CMN'	! ICHECK files
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK features
	INCLUDE 'LSL$CMNICHECK:ICHECKMSG.PAR'	! ICHECK errors
C
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL		! normal successful completion
C
C Workspace 
	INTEGER		I		! loop variable
	INTEGER*2	IELEN		! length of entry in hand
	INTEGER*2	IECODE		! entry code of entry in hand
C
C Functions
	LOGICAL		READ_NO		! to check NO entries
	LOGICAL		READ_FS		! to check FS entries
	LOGICAL		READ_ST		! to check ST entries
	LOGICAL		READ_ZS		! to check ZS entries
	LOGICAL		WRTLHDR		! to write LITES2 header

C
C.......................................................................
C Initialise all IFF variables and logicals
C
	NFTOT = 0		! total no. of features
C
	BORD_ERR = 0		! number of border errors
	CROSS_ERR = 0		! number of crossing errors
	DUPL_ERR = 0		! number of Duplicate errors
	FRT_ERR = 0		! number of FRT errors
	NEAT_ERR = 0		! number of neatline errors
	TOUCH_ERR = 0		! number of touching errors
C
	KEEP = .TRUE.		! Do we keep files ?
	FIRST_LAY = .TRUE.	! First layer ?
C
	CALL RESET_FT		! reset feature logicals & totals
C
C.......................................................................
C Assume success. Errors will unset READ_IFF
C
	READ_IFF = %LOC(SS$_NORMAL)	! normal completion
C
C.......................................................................
C start looking for entries
C
10	CALL IFFSEL(INLUN)		! select input file
C
	CALL IFFNXT(IECODE,IELEN)	! get next entry
	IF (IELEN.EQ.-1) GOTO 990	! Unexpected end of file
C
C the following entries require some action (the commonest first !)
C 
	IF (IECODE.EQ. 'NF') GOTO 120	! New Feature
	IF (IECODE.EQ. 'FS') GOTO 130	! Feature Status (code)
	IF (IECODE.EQ. 'RO') GOTO 140	! ROtation
	IF (IECODE.EQ. 'ZS') GOTO 150	! String of 3d coords
	IF (IECODE.EQ. 'ST') GOTO 160	! String of 2d coords
	IF (IECODE.EQ. 'TX') GOTO 170	! Text
	IF (IECODE.EQ. 'TS') GOTO 180	! Text Status
	IF (IECODE.EQ. 'EF') GOTO 190	! End feature
C
	IF (IECODE.EQ. 'RA') GOTO 20	! RAnge	
	IF (IECODE.EQ. 'HI') GOTO 30	! HIstory entry	
	IF (IECODE.EQ. 'EJ') GOTO 500	! End Job (end of file)
C
	IF (IECODE.EQ. 'NO') GOTO 100	! New overlay	
	IF (IECODE.EQ. 'EO') GOTO 110	! End overlay	
C
	IF (IECODE.EQ. 'MH') GOTO 40	! Map header	
	IF (IECODE.EQ. 'MD') GOTO 50	! Map descriptor	
CCC	IF (IECODE.EQ. 'EM') GOTO 60	! Ignore End Map	
C
	IF (IECODE.EQ. 'CC') GOTO 70	! Cubic Coefficients	
	IF (IECODE.EQ. 'CP') GOTO 80	! Control Points	
	IF (IECODE.EQ. 'NS') GOTO 90	! New section	
C
C Other entries do not really matter
	GOTO 10				! and go back for more
C
C...................................................................
C RAnge. Read the values and if necessary copy to marker IFF file.
C
20	CALL READ_RA
	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
C
C write the required header to LITES2 command file
	IF (HAD_LITES) READ_IFF = WRTLHDR()
	IF (.NOT.READ_IFF) GOTO 999
	GOTO 10				! and go back for more
C
C...................................................................
C HIstory entry. If there is one write an entry to the marker file
C
30	IF (HAD_MARK) THEN
	  CALL IFFSEL(MRKLUN)		! select marker file
	  CALL IFFHI			! write a HI entry
	  CALL IFFSEL(INLUN)		! reselect input file
	ENDIF
	GOTO 10				! and go back for more
C
C...................................................................
C MH (Map Header). If we have had a marker file then copy to it
C
40	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
	GOTO 10				! and go back for more
C
C...................................................................
C MD (Map Descriptor). If we have had a marker file then copy to it
C
50	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
	GOTO 10				! and go back for more
C
C...................................................................
C EM (End Map). If we have had a marker file then copy to it
C
CCC60	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
CCC	GOTO 10				! and go back for more
C
C...................................................................
C CC (Cubic Coefficients). If we have had a marker file then copy to it
C
70	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
	GOTO 10				! and go back for more
C
C...................................................................
C CP (Control points). If we have had a marker file then copy to it.
C
80	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
	GOTO 10				! and go back for more
C
C...................................................................
C NS (New Section). If we have had a marker file then copy to it
C
90	IF (HAD_MARK) CALL EIHCPY(MRKLUN)
	GOTO 10				! and go back for more
C
C...................................................................
C NO (New Overlay). Do all relevant processing in a function.
C
100	READ_IFF = READ_NO()
	IF (.NOT.READ_IFF) GOTO 999
	GOTO 10				! and go back for more
C
C...................................................................
C EO (End Overlay). Do all relevant processing in subroutine.
C
110	CALL READ_EO
	GOTO 10				! and go back for more
C
C...................................................................
C NF (New Feature). This is where the fun begins !
C
120	CALL READ_NF
	GOTO 10				! and go back for more
C
C...................................................................
C FS (Feature Status)
C
130	READ_IFF = READ_FS()
	IF (.NOT.READ_IFF) GOTO 999
	GOTO 10				! and go back for more
C
C...................................................................
C ROtation
C
140	IF (HAD_FRT) CALL READ_RO
	GOTO 10				! and go back for more
C
C...................................................................
C ZS (3-D string)
C
150	READ_IFF = READ_ZS()
	IF (.NOT.READ_IFF) GOTO 999
	GOTO 10				! and go back for more
C
C...................................................................
C ST (2-D) string of coordinates. The real business !!
C
160	READ_IFF = READ_ST()
	IF (.NOT.READ_IFF) GOTO 999
	GOTO 10				! and go back for more
C
C...................................................................
C TeXt
C
170	IF (HAD_FRT) CALL READ_TX
	GOTO 10				! and go back for more
C
C...................................................................
C TS (Text Status)
C
180	IF (HAD_FRT) CALL READ_TS
	GOTO 10				! and go back for more
C
C...................................................................
C EF (End Feature). Now we can start the checks !
C
190	CALL READ_EF
	GOTO 10				! and go back for more
C
C...................................................................
C EJ (End Job). End of file, apparent success. Phew !
C
500	CALL READ_EJ
	GOTO 999			! return
C
C...................................................................
C Whoops! Unexpected end of IFF file.
C
990	READ_IFF = ICHECK__UNEXPEOF
	CALL LSL_PUTMSG(READ_IFF)
C
C...................................................................
C Return
C
999	RETURN
   	END
