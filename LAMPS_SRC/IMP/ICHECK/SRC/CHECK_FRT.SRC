C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-13 19:33:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE CHECK_FRT
C
***	MODULE CHECK_FRT
***	IDENT 13MR91
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : A.T. Timms 				19 January 1987
C
CMOD975 Use new FRTFND to switch off message if no FC 
C	found in FRT
C	Do not treat symbol strings as areas, and add 
C	symbol strings					JB 13-Mar-1991
C
C	Subroutine to check feature characteristics against the 
C	specified FRT file.
C
C.......................................................................
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNFRT:FRTCOM.CMN'		! FRT common
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK features
	INCLUDE 'LSL$CMNICHECK:ICHECKMSG.PAR'	! ICHECK messages
C
C Functions
	LOGICAL*4	FRTFND			! to find FC in FRT
C
C Workspace
	REAL		X,Y			! Dummy real coords
	LOGICAL		OK
C
C.......................................................................
C First and most important check, is the feature code for this feature
C in the FRT file ?
C
	OK = FRTFND(FS(1), .FALSE.)
C
	IF (OK) THEN				! No so say so
	  CALL WRITE_ERR(X,Y,11)
	  FRT_ERR = FRT_ERR + 1
	  GOTO 999
	ENDIF
C
C Ok, check the feature
C
	IF (FRTGT.EQ.1) THEN			! Linear ?
	   IF (TOT_NPTS.EQ.1) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.2) THEN		! Clockwise arc ?
	   IF (TOT_NPTS.NE.3) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.3) THEN		! Anti-clockwise arc ?
	   IF (TOT_NPTS.NE.3) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.4) THEN		! Circum-circle arc ?
	   IF (TOT_NPTS.NE.3) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.5) THEN		! full circum-circle ?
	   IF (TOT_NPTS.NE.3) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.6) THEN		! interpolated curve ?
	   IF (TOT_NPTS.LT.2) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.7) THEN		! unoriented symbol ?
	   IF (.NOT.FS_SYMB) CALL WRITE_ERR(X,Y,9)
	   IF (TOT_NPTS.GT.1) THEN
	      FRT_ERR = FRT_ERR + 1
	      CALL WRITE_ERR(X,Y,3)
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.8) THEN		! oriented symbol ?
	   IF (.NOT.FS_SYMB) CALL WRITE_ERR(X,Y,9)
	   IF (((TOT_NPTS.EQ.1).AND.(.NOT.HAD_RO)).OR.(TOT_NPTS.GT.2))
     &	     THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.9) THEN		! scaled symbol ?
	   IF (.NOT.FS_SYMB) CALL WRITE_ERR(X,Y,9)
	   IF (TOT_NPTS.GT.2) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.10) THEN		! text ?
	   IF (.NOT.FS_TEXT) CALL WRITE_ERR(X,Y,10)
	   IF (TOT_NPTS.GT.2) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	   IF (.NOT.HAD_TX) THEN
	      CALL WRITE_ERR(X,Y,10)
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.11) THEN		! Symbol string ?
	   IF (TOT_NPTS.EQ.1) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	ELSEIF (FRTGT.EQ.12) THEN		! fill area ?
	   IF (TOT_NPTS.LT.3) THEN
	      CALL WRITE_ERR(X,Y,3)
	      FRT_ERR = FRT_ERR + 1
	      GOTO 999
	   ENDIF
C
	   IF (.NOT.ST_CLOS) THEN
	      CALL WRITE_ERR(X,Y,7)
	      GOTO 999
	   ENDIF
	ENDIF
C...................................................................
C
999	RETURN
   	END
C
