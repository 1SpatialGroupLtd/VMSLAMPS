	INTEGER*4 FUNCTION WRTLHDR()
C
***	MODULE	WRTLHDR
***	IDENT	23JA87
C
C	Copyright Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Author A T Timms				14-Jan-1987
C
C 	Routine to print job information to output LITES2 file header
C	for IMP module ICHECK. 
C	(N.b. Format of LCM is compatable with LCMORG so change at your
C	peril).
C
	IMPLICIT NONE
C
C functions:
	INTEGER SYS$GETJPIW	! Get Job/Process Information
C
C Common:
	INCLUDE	'LSL$CMNICHECK:ICHKCMD.CMN'
	INCLUDE	'LSL$CMNICHECK:ICHKFIL.CMN'
	INCLUDE	'LSL$CMNICHECK:ICHKFT.CMN'
C
C parameters:
	INCLUDE '($SSDEF)'
	INCLUDE '($JPIDEF)'
C
C workspace:
	INTEGER   IERR		! Error from queing of System service
	INTEGER   IOSB		! status at completion of Sys service
	INTEGER*2 IOSBW(2)	! bottom word is error code
	EQUIVALENCE (IOSB,IOSBW)
C
	INTEGER   ITMLEN	! size of item list
	PARAMETER (ITMLEN = 25)
	INTEGER*4 ITMLST(ITMLEN)
	INTEGER*2 ITMLST2(2*ITMLEN)
	EQUIVALENCE (ITMLST,ITMLST2)
C
	CHARACTER*9   DATSTR	! string for date
	CHARACTER*128 IMAGNAME	! name of image being executed
	INTEGER	      IMAGELEN	! no. of chars
	CHARACTER*15  PRCNAM	! name of process
	INTEGER       PRCLEN	! no. of chars
	CHARACTER*7   TERMINAL	! terminal name
	INTEGER       TERMLEN	! no. of chars
	CHARACTER*8   TIMSTR	! string for time
	CHARACTER*15  USERNAME	! name of user
	INTEGER       USERLEN	! no. of chars
C
C ......................................................................
C
	WRTLHDR = SS$_NORMAL		! assume success
C
C set up the item list ( see SYSTEM SERVICES Reference Manual)
C
	ITMLST2(1)   = 128
	ITMLST2(2)   = JPI$_IMAGNAME
	ITMLST (3/2+1) = %LOC(IMAGNAME)
	ITMLST (5/2+1) = %LOC(IMAGELEN)
C
	ITMLST2(7)  = 7
	ITMLST2(8)  = JPI$_TERMINAL
	ITMLST (9/2+1)= %LOC(TERMINAL)
	ITMLST (11/2+1)= %LOC(TERMLEN)
C
	ITMLST2(13)  = 15
	ITMLST2(14)  = JPI$_PRCNAM
	ITMLST (15/2+1)= %LOC(PRCNAM)
	ITMLST (17/2+1)= %LOC(PRCLEN)
C
	ITMLST2(19)  = 15
	ITMLST2(20)  = JPI$_USERNAME
	ITMLST (21/2+1)= %LOC(USERNAME)
	ITMLST (23/2+1)= %LOC(USERLEN)
C
	ITMLST (25/2+1) = 0		! to terminate it
C
C	queue the request
	IERR = SYS$GETJPIW(,		! efn
     &                   ,		! pid
     &                   ,		! prcnam
     &                   ITMLST,	! itmlst
     &                   IOSB,		! iosb
     &                   ,		! astadr
     &                   ,)		! astprm
C
	IF (IERR.NE.SS$_NORMAL) GOTO 50	! branch if failed to queue
C
C did the request complete OK ? - branch if it failed
	IF (IOSBW(1).NE.SS$_NORMAL) GOTO 40
C
C tidy things up
	USERLEN = INDEX(USERNAME,' ') - 1
	IF (USERLEN.LE.0) USERLEN = 12
C
C Get date
	CALL DATE (DATSTR)
C
C Get time
	CALL TIME(TIMSTR(:8))
C
C print our results
	CALL FLWSEL(LITLUN)
	CALL FLWRTF('%%POSITION %F %F',RA(1),RA(3))
	CALL FLWRTF('%%POSITION %F %F',RA(2),RA(4))
	CALL FLWRTF('%%ABANDON')
	CALL FLWRTF('%%MESSAGE  ')
	CALL FLWRTF
     &  ('%%MESSAGE ========== ICHECK LITES2 COMMAND FILE ==========')
	CALL FLWRTF('%%MESSAGE  ')
	CALL FLWRTF('%%MESSAGE Input file:   %S',INFILE(:FILEN))
	CALL FLWRTF('%%MESSAGE  ')
	CALL EXPAND
     &	  ('%%MESSAGE Invoked by: %S, Process: %S',USERNAME(1:USERLEN),
     &    PRCNAM(1:PRCLEN))
	CALL APPEND(', on: %S %S',DATSTR(:9),TIMSTR(:8))
	CALL FLWSTR
	CALL FLWRTF('%%MESSAGE  ')
	CALL FLWRTF('%%PING')
	CALL FLWRTF('%%ABANDON')
	CALL FLWRTF('%%ABANDON')
C
	GOTO 50
C
C here if GETJPI failed to queue - should never happen so don't know 
C what to do except return
40	WRTLHDR = IOSBW(1)
50	RETURN
	END
