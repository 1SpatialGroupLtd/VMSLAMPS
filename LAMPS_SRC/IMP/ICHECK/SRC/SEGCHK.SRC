C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-12-03 15:25:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION SEGCHK(ILIN,JLIN,IP,IQ)
C
***	MODULE SEGCHK
***	IDENT 03DE97
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : A.T. Timms 			21 January 1987
C
CMOD1584 /PARALLEL support added (SPR 3857)	       MJGW 03-Dec-1997
C
CMOD928 /IGNORE=POLYGONS option supported		TJH 22-Oct-1990
C
CMOD	Made to return SS$_NORMAL for success instead of
C	.TRUE. (as specified by QUADSCAN documentation)	ACM 21-Feb-1989
C
C	Subroutine called by QUADSCAN to find intersections and touching
C	(or near touching) segments.
C
C 	Reports segment intersection if distance of segment STBUF(IP) 
C	to STBUF(IP+1) is less than TOUCH/(2*sqrt(2)) units from segment
C	STBUF(IQ) to STBUF(IQ+1), and segments are not parallel (unless
C	/PARALLEL qualifier given with /TOUCH).
C
C 	Does not report intersection if this distance is greater than 
C	TOUCH/2.
C
C	ILIN and JLIN are dummy parameters representing the two lines	
C	(features) but as we are only dealing with one line (feature)
C	these will be the same (I hope !)
C
C.......................................................................
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'($SSDEF)'
C
C Commons
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK feature
	INCLUDE 'LSL$CMNICHECK:ICHKINT.CMN'	! ICHECK intersection
	INCLUDE 'LSL$CMNICHECK:ICHECKMSG.PAR'	! ICHECK messages
C
C workspace
C
	REAL		P1X,P1Y,P2X,P2Y		! P1 and P2 coords
	REAL		Q1X,Q1Y,Q2X,Q2Y		! Q1 and Q2 coords
	REAL		DXP,DYP,DXQ,DYQ		! P12 and Q12
	REAL		D1P,D2P,D1Q,D2Q	! dists of points from lines
	REAL		DET,A
	REAL		LP,LQ			! pseudo lengths
	REAL		RLP,RLQ			! exact lengths
	REAL		X,Y			! int pnt coords
	INTEGER		INTYP			! touch = 0, cross = 1
	INTEGER		NT			! loop counter
C
C Parameters in
	INTEGER		IP,IQ		! indices of start vectors
	INTEGER		ILIN,JLIN	! line (feature) numbers
C
C.......................................................................
C If IP and IQ are adjacent vectors then don't look for the intersection
C which WILL be found.
C
	IF (ABS(IQ-IP).EQ.1) GOTO 50	! ignore adjacent points
C
C.......................................................................
C If IP and IQ are first and last vectors in a closed feature we WILL
C also find an intersection so ignore such cases.
C
	IF (ST_CLOS.AND.(IP.EQ.1.AND.IQ.EQ.TOT_NPTS-1)) GOTO 50
	IF (ST_CLOS.AND.(IP.EQ.TOT_NPTS-1.AND.IQ.EQ.1)) GOTO 50	
C
C If /IGNORE=POLYGONS, don't report the closure points of the inner 
C rings of a nested polygon
	IF (HAD_IGN_POL.AND.NUMINV.GT.1) THEN
	    IF (IP.EQ.INVIS(1,ILIN).AND.IQ.EQ.INVIS(2,ILIN)-1) GOTO 50
	    IF (IP.EQ.INVIS(2,ILIN)-1.AND.IQ.EQ.INVIS(1,ILIN)) GOTO 50
C
C The point where the invisible lines join the nests to the outer
C ring is a special case. We can trap this if there is a single
C stalk between the outer ring and the nested polygons i.e.
C the polys were created automatically by IPOLYGON or POLMERGE.
	    IF (IP.EQ.INVIS(2,1)-1.AND.IQ.EQ.INVIS(1,NUMINV)) GOTO 50
	    IF (IP.EQ.INVIS(1,NUMINV).AND.IQ.EQ.INVIS(2,1)-1) GOTO 50
	ENDIF
C
C.......................................................................
C
	P1X = STBUF(1,IP)
	P1Y = STBUF(2,IP)
	P2X = STBUF(1,IP+1)
	P2Y = STBUF(2,IP+1)
C
	Q1X = STBUF(1,IQ)
	Q1Y = STBUF(2,IQ)
	Q2X = STBUF(1,IQ+1)
	Q2Y = STBUF(2,IQ+1)
C
C.......................................................................
C Check for edge-box intersection (most won't intersect)
C
	IF (MAX(P1X,P2X).LT.MIN(Q1X,Q2X)-TOUCH) GOTO 50
	IF (MIN(P1X,P2X).GT.MAX(Q1X,Q2X)+TOUCH) GOTO 50
	IF (MAX(P1Y,P2Y).LT.MIN(Q1Y,Q2Y)-TOUCH) GOTO 50
	IF (MIN(P1Y,P2Y).GT.MAX(Q1Y,Q2Y)+TOUCH) GOTO 50
C
C.......................................................................
C Check for both ends of edge P12 on same side of line of edge Q12
C (Colinear edges past box test must intersect in any case)
C
	DXQ = Q2X-Q1X
	DYQ = Q2Y-Q1Y
	LQ = ABS(DXQ)+ABS(DYQ)
	D1P = ((P1Y-Q1Y)*DXQ-(P1X-Q1X)*DYQ)/LQ
	D2P = ((P2Y-Q1Y)*DXQ-(P2X-Q1X)*DYQ)/LQ
	IF ((D1P.GT.TOUCH).AND.(D2P.GT.TOUCH)) GOTO 50	! both one side
	IF ((D1P.LT.-TOUCH).AND.(D2P.LT.-TOUCH)) GOTO 50! both othr side
C
C.......................................................................
C Here if edge P12 touches/crosses line through edge Q12
C Check for both ends of edge Q12 on same side of line of edge P12
C
	DXP = P2X-P1X
	DYP = P2Y-P1Y
	LP = ABS(DXP)+ABS(DYP)
	D1Q = ((Q1Y-P1Y)*DXP-(Q1X-P1X)*DYP)/LP
	D2Q = ((Q2Y-P1Y)*DXP-(Q2X-P1X)*DYP)/LP
	IF ((D1Q.GT.TOUCH).AND.(D2Q.GT.TOUCH)) GOTO 50	! both one side
	IF ((D1Q.LT.-TOUCH).AND.(D2Q.LT.-TOUCH)) GOTO 50! both othr side
C
C.......................................................................
C Here if there is intersection - now find it
C
	DET = DXQ*DYP-DYQ*DXP
C
C.......................................................................
C is touch distance realy less than TOUCH?
C
	RLQ = SQRT(DXQ**2+DYQ**2)
	D1P = D1P*LQ/RLQ
	D2P = D2P*LQ/RLQ
	IF ((D1P.GT.TOUCH).AND.(D2P.GT.TOUCH)) GOTO 50	! both one side
	IF ((D1P.LT.-TOUCH).AND.(D2P.LT.-TOUCH)) GOTO 50! both othr side
	RLP = SQRT(DXP**2+DYP**2)
	D1Q = D1Q*LP/RLP
	D2Q = D2Q*LP/RLP
	IF ((D1Q.GT.TOUCH).AND.(D2Q.GT.TOUCH)) GOTO 50	! both one side
	IF ((D1Q.LT.-TOUCH).AND.(D2Q.LT.-TOUCH)) GOTO 50! both othr side
C
C.......................................................................
C Find intersection point, unless sections are parallel
C
	IF (DET.NE.0) THEN
	   A = ((Q1Y-P1Y)*DXP-(Q1X-P1X)*DYP)/DET
	   X = Q1X+A*DXQ
	   Y = Q1Y+A*DYQ
C
C.......................................................................
C it IS a genuine intersection point, do the segs. just nearly touch? 
	   IF (D1P*D2P.GT.0.OR.D1Q*D2Q.GT.0) THEN
	      INTYP = 0
	   ELSE
C ...or cross
	      INTYP = 1
	   END IF
	ELSE
C
C.......................................................................
C If sections are parallel, ignore unless /PARALLEL qualifier given.
C If not ignoring, return centroid of line segments
C
	   IF (.NOT.HAD_PARA) GOTO 50
	   X = (P1X+P2X+Q1X+Q2X) / 4.0
	   Y = (P1Y+P2Y+Q1Y+Q2Y) / 4.0
	   INTYP = 2
	ENDIF
C
C.......................................................................
C add intersection found into list
C
	IF (NINTS.EQ.MAXNTS) THEN
	  CALL LSL_PUTMSG(ICHECK__TOOMNINTS,FSN,ISN)
	  GOTO 50
	END IF
C
	NINTS = NINTS+1
C
	INTS(NINTS,1) = IP
	INTS(NINTS,2) = IQ
	INTS(NINTS,3) = INTYP
	RINTS(NINTS,1) = X
	RINTS(NINTS,2) = Y
C
C Wasn't that easy !!!
C...................................................................
C
50	SEGCHK = SS$_NORMAL			! always ok
	RETURN
   	END
