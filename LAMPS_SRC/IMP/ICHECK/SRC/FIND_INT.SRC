	SUBROUTINE FIND_INT
C
***	MODULE FIND_INT
***	IDENT 13MR91
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
CMOD	Increase MAXBITS from 500 to 2000		 JB 13-Mar-1991
CMOD928 Invisible steps handled				TJH 19-Oct-1990
CMOD	Made SEGCHK a FUNCTION				ACM 25-Jul-1988
CMOD	Updated calls to QUADSCAN			ACM 06-Jul-1988
CMOD477 CROSSINGS argument added to REP_INT which, like
C	QUADSCAN, is called once for crossing and once
C	for touching segment tests			TJH 17-Jun-1987
C
C	Author  : A.T. Timms 				21 January 1987
C
C	Subroutine to find intersections and touching (or near touching)
C	segments in a string buffer STBUF between the START and STOP
C	points (inclusive)
C
C	Uses the ACM special QUADSCAN from COORDLIB to process using
C	a quad-tree structure.
C
C.......................................................................
C
	IMPLICIT NONE
C
C
C Common blocks
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK features
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKINT.CMN'	! ICHECK intersection 
C
C Workspace:
C
C For quadscan. Not used here but all must be present !!
C
	INTEGER		MAXLINES	! No. of lines (features)
	INTEGER		MAXFCS		! dummy CHECK dimension
	INTEGER		MAXBITS		! Max No. of line bits in qtree
	INTEGER		NEXTSIZ		! dummy NEXT dimension
C
	PARAMETER(	MAXLINES = 1, MAXFCS = 1, NEXTSIZ = 1)
	PARAMETER(	MAXBITS = 2000)
C
	INTEGER		WORKSPACE(12*MAXBITS)	! workspace
	INTEGER		NEXT			! Dummy linked list ptrs
	INTEGER		LINE(2,MAXLINES)	! line start end point 
C						! indices.
	INTEGER*2	LINE_FC(MAXLINES)	! line feature code
C						! indices.
C
	LOGICAL*1	SAFE			! SAFE from turns etc..
	LOGICAL*1	CHECK(MAXFCS,MAXFCS)	! FC pairs to check
	REAL		USER_TOUCH		! saves user touch tol
C
C Functions:
	LOGICAL*4	SEGCHK			! to check for crossing
	EXTERNAL	SEGCHK			! and/or touching.
C
C.......................................................................
C Set up the info required for intersection testing
C
	NINTS = 0			! no intersections yet
	CALL INT_INIT(SAFE)		! find polyline box etc...
C
C...................................................................
C
C Get to work looking for intersections
C
C...................................................................
C If there is not both an X and a Y turning point then the polyline 
C cannot possibly cross itself.
C
	IF (SAFE) GOTO 100	! return
C
C...................................................................
C Call QUADSCAN (gulp!) to set up quad-tree.
C
C First if /CROSS specified.
	IF (HAD_CROSS) THEN
C
C Save the touch tolerance that the user specified on the command line
C (or got by default) as the touch tolerance used for crossings is 0.0.
C
	  USER_TOUCH = TOUCH
	  TOUCH = 0.0
	  CALL QUADSCAN(SEGCHK,		! function to check segments
     &			MAXPTS,		! STBUF dimension
     &			STBUF(1,1),	! coordinate buffer
     &			TOT_NPTS,	! number of points in STBUF
     &			XMIN,XMAX,	! minimum and maximum X values
     &			YMIN,YMAX,	! minimum and maximum Y values
     &			.FALSE.,	! contig. array not linked list
     &			NEXTSIZ,	! NEXT dimension
     &			NEXT,		! linked list pointers (dummy)
     &			TOUCH,		! touch tolerance
     &			NUMINV,		! no. of lines
     &			INVIS(1,1),	! line start, end indices
     &			LINE_FC,	! line feature code (dummy)
     &			.FALSE.,	! vectors not points
     &			.FALSE.,	! don't check Feature codes
     &			CHECK,		! F Code pairs to check(we wont)
     &			MAXFCS,		! No. of fc pairs !
     &			.TRUE.,		! do check Feature with itself
     &			MAXBITS,	! Size of workspace array
     &			WORKSPACE,	! Workspace array
     &			.FALSE.)	! don't give % completion stats.
C
C...................................................................
C If we have had any crossings then we had better say so.
C
	  IF (NINTS.GE.1) CALL REP_INT(.TRUE.)
C
C Restore the user specified touch tolerance
	  TOUCH = USER_TOUCH
	ENDIF
C
C Now if /TOUCH specified. Touch tolerance as specified on command line.
	IF (HAD_TOUCH) THEN
	  NINTS = 0			! no intersections yet
	  CALL QUADSCAN(SEGCHK,		! function to check segments
     &			MAXPTS,		! max. possible no. of points
     &			STBUF(1,1),	! coordinate buffer
     &			TOT_NPTS,	! number of points in STBUF
     &			XMIN,XMAX,	! minimum and maximum X values
     &			YMIN,YMAX,	! minimum and maximum Y values
     &			.FALSE.,	! contig. array not linked list
     &			NEXTSIZ,	! NEXT dimension
     &			NEXT,		! linked list pointer (dummy)
     &			TOUCH,		! touch tolerance
     &			NUMINV,		! no. of lines
     &			INVIS,		! line start, end indices
     &			LINE_FC,	! line feature code (dummy)
     &			.FALSE.,	! vectors not points
     &			.FALSE.,	! don't check Feature codes
     &			CHECK,		! F Code pairs to check(we wont)
     &			MAXFCS,		! No. of fc pairs !
     &			.TRUE.,		! do check Feature with itself
     &			MAXBITS,	! Size of workspace array
     &			WORKSPACE,	! Workspace array
     &			.FALSE.)	! don't give % completion stats.
C
C Wasn't that easy !!!
C...................................................................
C If we have had any "touching" segments then we had better say so.
C
	  IF (NINTS.GE.1) CALL REP_INT(.FALSE.)
	ENDIF
C...................................................................
C
100	RETURN
   	END
C
