C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-12-03 16:36:26.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION GETCMD()
C
***	MODULE	GETCMD
***	IDENT	03DE97
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C
CMOD 1584 /PARALLEL added			       MJGW 03-Dec-1997
CMOD 928 /IGNORE added					TJH 19-Oct-1990
CMOD	 Stopped writing lines to out file twice	    07-Dec-1988
CMOD 652 Now gives output file ICHECK.LIS as default 
C        when /PRINTER is used				IJ  10-Aug-1988
CMOD 487 Now uses TRNALL to translate LSL$LITES2CMD.
C	/LITES2 now works as documented			TJH 17-Jun-1987
C	Author A.T. Timms				12 January 1987
C
C 	Command line decoding function for IMP utility ICHECK.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNICHECK:ICHECKMSG.PAR'
C
	INTEGER  SS$_NORMAL
	EXTERNAL SS$_NORMAL		! normal successful completion
C
C Common blocks
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
	INCLUDE 'LSL$CMNLSL:STATUS.CMN'
	INCLUDE 'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'
	INCLUDE 'LSL$CMNICHECK:ICHKFIL.CMN'
C
C Command language definitions
	EXTERNAL ICHECK_CLD
C
C workspace
	LOGICAL*4	ABSENT	! .T. if file param. not found
	LOGICAL		LOCAL	! .T. if qual. is local
	LOGICAL		LOCNEG	! set .T. if qual. locally negated
C
	INTEGER*2	I	! loop variable
C
	CHARACTER*220	LITES2DEF! default LITES2 filename
C
C
C functions called
        INTEGER*4       DCL_CML	   ! gets command line
	INTEGER*4	DCL_FILE   ! reads & parses file title 
	INTEGER*4	DCL_INT	   ! looks for integer string qualifier
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_REAL   ! looks for real string qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       PUTFLN	   ! put file into common
        INTEGER*4       TRNALL	   ! translate logical name
C
C...................................................................
C initialise the many logicals
C
	LOCAL     = .FALSE.     ! set .T. if qual. is local
        LOCNEG    = .FALSE.     ! set .T. if qual. locally negated
	HAD_BASE  = .FALSE.	!
	HAD_CROSS = .FALSE.	!
	HAD_DUPL  = .FALSE.	!
	HAD_FC    = .FALSE.	!
	HAD_FRT   = .FALSE.	!
	HAD_IGN	  = .FALSE.	!
	HAD_IGN_INV=.FALSE.	!
	HAD_IGN_POL=.FALSE.	!
	HAD_LAY   = .FALSE.	!
	HAD_LITES = .FALSE.	!
	HAD_LOG   = .FALSE.	!
	HAD_MARK  = .FALSE.	!
	HAD_NEAT  = .FALSE.	!	NO QUALIFIERS YET
	HAD_OUT   = .FALSE.	!
	HAD_PARA  = .FALSE.	!
	HAD_PRINT = .FALSE.	!
	HAD_TOUCH = .FALSE.	!
	HAD_BORDER= .FALSE.	!
	HAD_EXC	  = .FALSE.	!
	HAD_INT	  = .FALSE.	!
	HAD_E	  = .FALSE.	!
	HAD_N     = .FALSE.	!
	HAD_S	  = .FALSE.	!
	HAD_W	  = .FALSE.	!
C
C and a variable
	TOUCH = 0
C
C....................................................................
C Now for the real work ... get command line for ICHECK. 
C DCL_STARTUP will return set to SS$NORMAL if all is well.
C
C
	GETCMD = DCL_STARTUP('ICHECK',.FALSE.,ICHECK_CLD,.TRUE.)
        IF (.NOT.GETCMD) GOTO 999
C
C....................................................................
C We may want to write out the command line to an output file so
C
C
	GETCMD = DCL_CML(CMLSTR,CMLEN,.TRUE.) 
        IF (.NOT.GETCMD) GOTO 999
C
C....................................................................
C Now lets see what qualifiers we have. The possibilites are:
C
C /BASE_FC = int, /[NO]CROSS, /[NO]DUPLICATES, /FRT = file-spec, 
C /FC = int, /LAYER = int, /[NO]LITES2 = file-spec, /[NO]LOG,
C /MARKERS = file-spec, /NEATLINE, /OUTPUT = file-spec, /[NO]PRINTER, 
C /TOUCH [=real] and /BORDER = real
C
C...................................................................
C ... /BASE_FC
C
	GETCMD = DCL_QUAL('BASE_FC',HAD_BASE,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_BASE) THEN			! Lets get the FC's
	  GETCMD = DCL_INT('BASE_FC',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMINT.EQ.1) THEN			! put arguments into
	    BASE_FC = IARRAY(1)			! BASE_FC
	  ENDIF
	ENDIF
C
C...................................................................
C ... /CROSS
C
	GETCMD = DCL_QUAL('CROSS',HAD_CROSS,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /DUPLICATES
C
	GETCMD = DCL_QUAL('DUPLICATES',HAD_DUPL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C which of NINT or exact have we got ?
	IF (HAD_DUPL) THEN
	  GETCMD = DCL_QUAL('DUPLICATES.EXACT',HAD_EXC,LOCAL,LOCNEG,
     &		   .TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
C
	  GETCMD = DCL_QUAL('DUPLICATES.NINT',HAD_INT,LOCAL,LOCNEG,
     &		   .TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
	ENDIF
C
C...................................................................
C ... /FC
C
	GETCMD = DCL_QUAL('FC',HAD_FC,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_FC) THEN			! Lets get the FC's
	  GETCMD = DCL_INT('FC',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMINT.GE.1) THEN			! put arguments into
	    DO 10 I = 1,NUMINT
	      FC(I) = IARRAY(I)			! FC
10	    CONTINUE
	    FC_NUM = NUMINT			! remember no. of FCs
	  ENDIF
	ENDIF
C
C...................................................................
C ... /FRT
C
	GETCMD = DCL_QUAL('FRT',HAD_FRT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_FRT) THEN    	  
	  GETCMD = DCL_FILE('FRT','LSL$FRT:.FRT',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GETCMD) GOTO 999	! error return
C
	  IF (.NOT.ABSENT) THEN		! File specified so
            FRTFILE = FILARY(1)(1:FIL_LEN(1))
	    FRTLEN = FIL_LEN(1)
	  ENDIF
	ENDIF
C
C...................................................................
C ... /IGNORE
C
	GETCMD = DCL_QUAL('IGNORE',HAD_IGN,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C have we got INVISIBLE?
	IF (HAD_IGN) THEN
	  GETCMD = DCL_QUAL('IGNORE.INVISIBLE',HAD_IGN_INV,LOCAL,LOCNEG,
     &		   .TRUE.)
	  IF (.NOT.GETCMD) GOTO 999
	ENDIF
C
C have we got POLYGONS?
	IF (HAD_IGN) THEN
	  GETCMD = DCL_QUAL('IGNORE.POLYGONS',HAD_IGN_POL,LOCAL,LOCNEG,
     &		   .TRUE.)
	  IF (.NOT.GETCMD) GOTO 999
	  IF (HAD_IGN_POL) HAD_IGN_INV=.TRUE. ! polys ==> invisible moves
	ENDIF
C
C
C...................................................................
C ... /LAYER
C
	GETCMD = DCL_QUAL('LAYER',HAD_LAY,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_LAY) THEN			! Let's get the layers
	  GETCMD = DCL_INT('LAYER',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMINT.GE.1) THEN			! put arguments into
	    DO 20 I = 1,NUMINT			! feature code array
	      LAYNO(I) = IARRAY(I)
20	    CONTINUE
	    LAY_NUM = NUMINT
	  ENDIF
	ENDIF
C
C...................................................................
C ... /LOG
C
	GETCMD = DCL_QUAL('LOG',HAD_LOG,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /MARKERS
C
	GETCMD = DCL_QUAL('MARKERS',HAD_MARK,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
	IF (HAD_MARK) THEN    	  
	  GETCMD = 
     &    DCL_FILE('MARKERS','LSL$IF:ICHECK.IFF',ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GETCMD) GOTO 999	! error return
C
	  IF (.NOT.ABSENT) THEN		! File specified so
            MRKFILE = FILARY(1)(1:FIL_LEN(1))
	    MRKLEN = FIL_LEN(1)
	  ENDIF
	ENDIF
C
C...................................................................
C ... /NEATLINE
C
	GETCMD = DCL_QUAL('NEATLINE',HAD_NEAT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Now see which of the neatline qualifiers are present.
	IF (HAD_NEAT) THEN
C
C East ?
	  GETCMD = DCL_QUAL('NEATLINE.EAST',HAD_E,LOCAL,LOCNEG,.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
C
	  IF (HAD_E) THEN			! Lets get the distance
	    GETCMD = DCL_REAL('EAST',.TRUE.)
	    IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	    EAST = RARRAY(1)			! store arg in EAST
	  ENDIF
C
C North ?
	  GETCMD = DCL_QUAL('NEATLINE.NORTH',HAD_N,LOCAL,LOCNEG,.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
C
	  IF (HAD_N) THEN			! Lets get the distance
	    GETCMD = DCL_REAL('NEATLINE.NORTH',.TRUE.)
	    IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	    NORTH = RARRAY(1)			! store arg in NORTH
	  ENDIF
C
C South ?
	  GETCMD = DCL_QUAL('NEATLINE.SOUTH',HAD_S,LOCAL,LOCNEG,.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
C
	  IF (HAD_S) THEN			! Lets get the distance
	    GETCMD = DCL_REAL('NEATLINE.SOUTH',.TRUE.)
	    IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	    SOUTH = RARRAY(1)			! store arg in SOUTH
	  ENDIF
C
C West
	  GETCMD = DCL_QUAL('NEATLINE.WEST',HAD_W,LOCAL,LOCNEG,.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999
C
	  IF (HAD_W) THEN			! Lets get the distance
	    GETCMD = DCL_REAL('WEST',.TRUE.)
	    IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	    WEST = RARRAY(1)			! store arg in WEST
	  ENDIF
	ENDIF
C
C...................................................................
C ... /OUTPUT
C
	GETCMD = DCL_QUAL('OUTPUT',HAD_OUT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Set default OUTPUT filespec = SYS$DISK:ICHECK.LIS
C
	OUTFILE = 'SYS$DISK:ICHECK.LIS'
	OUTLEN = 19
C
C Check for /OUTPUT = file-spec
C
	IF (HAD_OUT) THEN    	  
	  GETCMD =
     &    DCL_FILE('OUTPUT','SYS$DISK:ICHECK.LIS',ABSENT,
     &						.FALSE.,.TRUE.)
	  IF (.NOT.GETCMD) GOTO 999	! error return
C
	  IF (.NOT.ABSENT) THEN		! File specified so
            OUTFILE = FILARY(1)(1:FIL_LEN(1))
	    OUTLEN = FIL_LEN(1)
	  ENDIF
	ENDIF
C
C...................................................................
C ... /PARALLEL
C
	GETCMD = DCL_QUAL('PARALLEL',HAD_PARA,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /PRINTER
C
	GETCMD = DCL_QUAL('PRINTER',HAD_PRINT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C...................................................................
C ... /TOUCH
C
	GETCMD = DCL_QUAL('TOUCH',HAD_TOUCH,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Lets see what we have
	IF (HAD_TOUCH) THEN			! Lets get the distance
	  GETCMD = DCL_REAL('TOUCH',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMREA.EQ.1) THEN			! got something?
	    IF (RARRAY(1).LE.1.0E-6) THEN	! greater than zero?
	       GETCMD=ICHECK__INVTOUCH		! no!
	       CALL LSL_PUTMSG(GETCMD,RARRAY(1))
	       GOTO 999
	    ELSE
	       TOUCH = RARRAY(1)		! store arg in TOUCH 
	       TCH_TOL = .TRUE.			! remember it
	    ENDIF
	  ELSE
	    IF (NUMREA.EQ.0) TOUCH = 0.5	! default TOUCH is 0.5
	    TCH_TOL = .TRUE.			! remember it
	  ENDIF
	ENDIF
C
C...................................................................
C ... /BORDER
C
	GETCMD = DCL_QUAL('BORDER',HAD_BORDER,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.GETCMD) GOTO 999
C
C Lets see what we have
	IF (HAD_BORDER) THEN			! Lets get the distance
	  GETCMD = DCL_REAL('BORDER',.TRUE.)
	  IF(.NOT.GETCMD) GOTO 999		! Error so return
C
	  IF (NUMREA.EQ.1) THEN			! got something?
	    IF (RARRAY(1).LE.1.0E-6) THEN	! greater than zero?
	       GETCMD = ICHECK__INVBORD		! no!
	       CALL LSL_PUTMSG(GETCMD,RARRAY(1))
	       GOTO 999
	    ELSE
	       BORDER = RARRAY(1)		! store arg in BORDER
	       BORD_TOL= .TRUE.			! remember it
	    ENDIF
	  ENDIF
	ENDIF
C
C...................................................................
C Now we can hunt for the input filename
C
	GETCMD=DCL_FILE
     &	('IN_FILESPEC','LSL$IF:IFF.IFF;',ABSENT,.FALSE.,.TRUE.)
C
C transfer file-spec to a common block
        IF (.NOT.GETCMD) GOTO 999
C
	INFILE = FILARY(1)(1:FIL_LEN(1))
	FILEN  = FIL_LEN(1)
C
C...................................................................
C ... and finally /LITES2. Put the input file into /FILENAME so we can 
C get at certain bits of it to create the default LITES2 filename
C
	GETCMD = DCL_QUAL('LITES2',HAD_LITES,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.GETCMD) GOTO 999
C
	IF (HAD_LITES) THEN    	  
	   GETCMD = PUTFLN(INFILE(1:FILEN))
	   IF (.NOT.GETCMD) GOTO 999
C
C Attempt to translate logical name LSL$LITES2CMD
	   GETCMD=TRNALL('LSL$LITES2CMD',LITES2DEF)
	   IF (.NOT.GETCMD) THEN
	      CALL LSL_PUTMSG(ICHECK__FAILTRLG,'LSL$LITES2CMD')
	      CALL LSL_ADDMSG(GETCMD)
	      GOTO 999
	   ENDIF
C
	   LITES2DEF = 'LSL$LITES2CMD:'//STR_NAM(1:LEN_NAM)//'.LCM'
           LITFILE = LITES2DEF
	   LITLEN = 18+LEN_NAM
C
	  GETCMD = DCL_FILE('LITES2',LITES2DEF,ABSENT,.FALSE.,.TRUE.)
	  IF (.NOT.GETCMD) GOTO 999	! error return
C
	  IF (.NOT.ABSENT) THEN
	    LITFILE = FILARY(1)(1:FIL_LEN(1))
	    LITLEN = FIL_LEN(1)
	  ENDIF
	ENDIF
C
C...................................................................
C
999     IF (GETCMD) GETCMD = %LOC(SS$_NORMAL)   ! normal completion
	RETURN
   	END
