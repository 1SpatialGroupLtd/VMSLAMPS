C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-10-22 14:17:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE LOAD_STBUF
C
***	MODULE LOAD_STBUF
***	IDENT 19OC90
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C	Author  : J.M. CADOGAN 				30  October 1989
C
C	Routine to load ST entry into buffer and set relevant flags.
C
C	Duplicate points are removed as they cause QUADSCAN problems.
C	IF /DUPLICATE has been specified then report duplicates.
C
C.......................................................................
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK features
	INCLUDE 'LSL$CMNICHECK:ICHKINT.CMN'	! ICHECK intersections
	INCLUDE 'LSL$CMNICHECK:ICHECKMSG.PAR'	! ICHECK features
C
C Workspace
	INTEGER		I,J,J1
	INTEGER		NREPS
C
	REAL		XDIFF,YDIFF	! Diff between consecutive pts.
C
C......................................................................
C
C
C There is always an invisible move to the start of a ftr
	IF (TOT_NPTS.EQ.0) THEN
	   INVIS(1,1)=1
C Assume this is the only invis move in ftr until proved otherwise
	   NUMINV=1
	ENDIF
C
C Build up list of invisible moves if we are to ignore them
	IF (HAD_IGN_INV) THEN
C
C Invisible move to the start of this ST?
            IF (IENDS.EQ.0.AND.TOT_NPTS.GT.0) THEN
	       INVIS(2,NUMINV)=TOT_NPTS	! last point before invis
	       NUMINV=NUMINV+1
	       IF (NUMINV.GT.MAXINV) THEN
		  CALL LSL_PUTMSG(ICHECK__TOOMNYINV,MAXINV,FSN)
	       ELSE
		  INVIS(1,NUMINV)=TOT_NPTS+1	! which steps to here
	       ENDIF
	    ENDIF
	 ENDIF
C
C Read the string into STBUF checking for duplicate points.
C If we have had /DUPLICATE = 'NINT' or 'EXACT' then give appropriate 
C messages
C
	J = TOT_NPTS 
	NREPS = 0
C
	J1 = J + 1
C
	DO 10 I = 1,NPTS
C
	  STBUF(1,J1) = ST(1,I)		! put next point into STBUF
	  STBUF(2,J1) = ST(2,I)
C
C Check that the is not the first point in the first ST in feature.
C (ok if LOAD_STBUF is being called an the 2nd or later ST in a feature)
	  IF (J.EQ.0) THEN
	     J=J1
	     J1=J+1
	  ELSE
C
C Check it isn't duplicate with the previous point
	     XDIFF = ABS(STBUF(1,J) - STBUF(1,J1))	  
	     YDIFF = ABS(STBUF(2,J) - STBUF(2,J1))
C
	     IF (HAD_INT) THEN
	        IF (XDIFF.LE.INT_TOL.AND.YDIFF.LE.INT_TOL) THEN
	           DUPL_ERR = DUPL_ERR + 1
	           CALL WRITE_ERR(ST(1,I),ST(2,I),6)
	           IF (HAD_MARK) CALL MARK_ERR(ST(1,I),ST(2,I),6)
	           IF (HAD_LITES) CALL LITES_ERR(ST(1,I),ST(2,I),6)
	        ENDIF
	     ENDIF
C
	     IF (XDIFF.LE.EXACT_TOL.AND.YDIFF.LE.EXACT_TOL) THEN
	       IF (HAD_EXC) THEN		! exact duplication
	          DUPL_ERR = DUPL_ERR + 1
	          CALL WRITE_ERR(ST(1,I),ST(2,I),6)
	          IF (HAD_MARK) CALL MARK_ERR(ST(1,I),ST(2,I),6)
	          IF (HAD_LITES) CALL LITES_ERR(ST(1,I),ST(2,I),6)
	        ENDIF
	        NREPS = NREPS + 1
C
C If there was an invisible move to the start of this ST, the first point
C of which has now been thrown away due to duplication, remove the
C invisible move from INVIS() too 
	        IF (HAD_IGN_INV) THEN
	           IF (J1.EQ.INVIS(1,NUMINV)) THEN
		      INVIS(1,NUMINV)=0
		      NUMINV=NUMINV-1
	           ENDIF
	        ENDIF
	      ELSE
	        J = J1
	        J1 = J + 1
	      END IF
	   END IF
C
10	CONTINUE
C
	TOT_NPTS = TOT_NPTS + NPTS - NREPS
C
C Just in case this is the last ST
	IF (HAD_IGN_INV) INVIS(2,NUMINV)=TOT_NPTS
C
C...................................................................
C
20	RETURN
   	END
