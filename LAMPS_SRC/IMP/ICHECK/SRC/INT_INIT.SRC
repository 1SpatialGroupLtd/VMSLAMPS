C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-06-18 13:53:22.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE INT_INIT(SAFE)
C
***	MODULE INT_INIT
***	IDENT 18JN87
C
C	Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
CMOD 2/477
C	Same SAFE calc used even if haven't had /TOUCH	TJH 17-Jun-1987
C
C	Author  : A.T. Timms 				21 January 1987
C	(from DFADVAL INICHK.SRC)
C
C Notes which points are X or Y turning points (maxima or minima), and 
C finds polyline box.
C
C Zero length segments must already have been removed.
C
C.......................................................................
C
	IMPLICIT NONE
C
C Common blocks
	INCLUDE 'LSL$CMNICHECK:ICHKCMD.CMN'	! ICHECK commands
	INCLUDE 'LSL$CMNICHECK:ICHKFT.CMN'	! ICHECK features
	INCLUDE 'LSL$CMNICHECK:ICHKINT.CMN'	! ICHECK intersection
C
C Workspace
	INTEGER		I		! 
	INTEGER		DX,DY,LDX,LDY	! edge vectors
	INTEGER		XSENSE,YSENSE	! increasing in X,Y ?
C
	LOGICAL		SAFE		! turning points ?
	LOGICAL		XTURN,YTURN	! turning point ?
C
C.......................................................................
C Initialise a few things ...... like the polyline box coordinates
C
	XMIN = 1E20
	XMAX = -1E20
	YMIN = 1E20
	YMAX = -1E20
C
C
	DO 10 I = 1,TOT_NPTS	! for every point 
	   IF (STBUF(1,I).GT.XMAX) XMAX = STBUF(1,I)
	   IF (STBUF(1,I).LT.XMIN) XMIN = STBUF(1,I)
	   IF (STBUF(2,I).GT.YMAX) YMAX = STBUF(2,I)
	   IF (STBUF(2,I).LT.YMIN) YMIN = STBUF(2,I)
10	CONTINUE
C
C.......................................................................
C Find first edge with significant length
C
	LDX = STBUF(1,2)-STBUF(1,1)
	LDY = STBUF(2,2)-STBUF(2,1)
C
	XSENSE = LDX
	YSENSE = LDY
C
C.......................................................................
C Find all other significant edges, noting which end points
C are local X or Y turning points, and find polyline box.
C
	XTURN = .FALSE.
	YTURN = .FALSE.
C
	DO 20 I = 2,TOT_NPTS-1	! for every point after the first
	  DX = STBUF(1,I+1)-STBUF(1,I)
	  DY = STBUF(2,I+1)-STBUF(2,I)
C
C Check for X turning point
	  IF (LDX.NE.0) XSENSE = LDX
	  IF (XSENSE.GE.0) THEN
	    IF (DX.LT.0) THEN
	      XTURN = .TRUE.
	    END IF
	  ELSE IF (DX.GT.0) THEN
	    XTURN = .TRUE.
	  END IF
C
C.......................................................................
C Check for Y turning point
C
	  IF (LDY.NE.0) YSENSE = LDY
	  IF (YSENSE.GE.0) THEN
	    IF (DY.LT.0) THEN
	      YTURN = .TRUE.
	    END IF
	  ELSE IF (DY.GT.0) THEN
	    YTURN = .TRUE.
	  END IF
C
C.......................................................................
C
	  LDX = DX
	  LDY = DY
20	CONTINUE		! end of loop for every point
C	
C.......................................................................
C If there is not both an X and a Y turning point then the polyline 
C cannot possibly cross itself, while if there is neither an X or Y 
C turning point then it cannot touch itself either
C
	SAFE = .NOT.(XTURN.OR.YTURN)
C
C.......................................................................
C
	RETURN
   	END
