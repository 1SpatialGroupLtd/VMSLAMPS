C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-03-29 14:21:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ADDNOD(X,Y,STPOSN,VERTEX)
C
***	MODULE	ADDNOD
***	IDENT	29MR84
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	COMMONs generalised, tidied		 DM	29-Mar-1984
CMOD	Adjusts X,Y to match the junction.	 RD	06-May-1983
C	Created. 				 RD	21-Apr-1983
C
C Routine to add a node to a junction (creating the junction and/or
C the JB entry if necessary). The address of the junction is
C returned in common block HIT (in HTPOSH,HTPOSJ). The position of
C the junction is returned in X,Y so that the segment end point
C can be adjusted.
C 
C Each element in the sector header (SH) entry points to a single
C junction block (JB) entry (or chain of JB entries) which contains
C all the junctions in that sector. Each of these junctions points
C to all the features (segments) connected to it. These pointers
C are the nodes.
C
	IMPLICIT NONE
C
	REAL X,Y		! end point of the line.
	INTEGER*4 STPOSN	! position in the IFF file of the line.
	INTEGER*2 VERTEX	! the vertex number of the end point.
C
***	COMMON/CMN:HIT/
***	COMMON/CMN:IFJ/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:IFFJUN/
***	COMMON/LSL$CMNVIO:EXPC/
C
	REAL POSX, POSY		! the junction in hand.
	INTEGER*2 NARMS		! number of arms (including empty arms).
	INTEGER*4 LSTPOS	! junction arm descriptor.
	INTEGER*2 NVTX		! ditto.
	INTEGER*2 ISN		! sector number.
	INTEGER*2 NPTS
	INTEGER*2 I,J
C
C Function:
	LOGICAL FINJNC
C
	EXTERNAL FINJNC
C
C ......................................................................
C
	HITPNT(1)=X		! need to pass X,Y to external function 
	HITPNT(2)=Y		! FINJNC via IFJSCN in common block.
C
C Which sector is the point in?
	CALL IFJSEC(X,Y,ISN)
	IF (TYPNO.GT.0) CALL WRITEF('%F0 %F0 %N',X,Y,ISN)
	IF (ISN.LT.1 .OR. ISN.GT.SECTX*SECTY)
     &	   CALL WRITEF('Unexpected sector %N found - check RAnge.',ISN)
	HTPOSH=0
	HITDST=HITTOL*HITTOL
C
C Scan the junctions in the sector's JB entry to see if this junction
C already exists. If it does then the best (nearest) match must be
C chosen since there could be more than 1 junction within the tolerance.
	CALL IFJSCN(ISN,FINJNC)
C
C Does the junction already exist?
	IF (HTPOSH.NE.0) GO TO 10
C
C No - create a new junction.
	CALL IFJCR(ISN,X,Y,MAXARM)	! create junction.
	HTPOSH=LPOSH			! remember position for ...
	HTPOSJ=IFPOSJ			! the JP entry.
	CALL JIHW(1,STPOSN,VERTEX)	! add arm to it.
	IF (TYPNO.GT.0) CALL WRITEF('New junction created')
	GO TO 40
C
C Yes - add arm to an existing junction.
10	CALL IFJPKJ(X,Y,NARMS,HTPOSH,HTPOSJ) ! get junction.
C
C Loop through each arm (node) of junction looking for empty one.
	DO 20 I=1,NARMS
	   CALL JIHR(I,LSTPOS,NVTX)	! read next arm.
	   IF (LSTPOS.EQ.0) GO TO 30	! is it empty?
20	CONTINUE
	CALL WRITEF(
     &	   'No room in junction at position (%F,%F) for new arm',X,Y)
	GO TO 40
C
C Add new arm.
30	CALL JIHW(I,STPOSN,VERTEX)
	IF (TYPNO.GT.0) CALL WRITEF('New arm %N',I)
C
40	RETURN
	END
C
	LOGICAL FUNCTION FINJNC(POSX,POSY,NARMS)
C
***	MODULE	FINJNC
***	IDENT	29MR84
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
CMOD	COMMONs generalised, tidied		 DM	29-Mar-1984
C
	IMPLICIT NONE
C
C Routine used to find if this node (junction) is within the given
C tolerance. If it is then is it the closest so far?
C Called from within the IFF library routine IFJSCN which calls this
C for every junction in the sector.
C Function always returns TRUE so as to continue scanning and
C consequently find the best hit.
C
	REAL POSX,POSY
	INTEGER*2 NARMS
C
***	COMMON/CMN:HIT/
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNIFF:IFFJUN/
C
	REAL D
C
C ......................................................................
C
	FINJNC=.TRUE.
	D=(POSX-HITPNT(1))**2 + (POSY-HITPNT(2))**2
	IF (D.GT.HITDST) GO TO 10
	HITDST=D
	HTPOSH=LPOSH
	HTPOSJ=IFPOSJ
C
10	RETURN
	END
