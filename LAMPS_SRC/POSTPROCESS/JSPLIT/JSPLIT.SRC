C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-05-27 17:32:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM JSPLIT
C
***	MODULE JSPLIT
***	IDENT  27MY86
C
C	Copyright, Laser-Scan Laboratories Ltd., Cambridge, England.
C
C	Author : J.M. Price Williams
C
C	Date   : 24-april-1986
C
C	descrpt: The program gets a command line using the LSLLIB
C		 routines and examines it for the RENUMBER switch.
C		 The IFJ file specified by the user is opened and
C		 an IFF file is opened for output. The IFJ file is
C		 processed and all features with junctions split to 
C		 sub-features. The feature number of the sub-features
C		 being the same as that of the parent feature unless
C		 RENUM is true. The SPLIT subroutine deals with the 
C		 actual feature processing. The JSPFIL subroutine
C		 deals with the opening and closing of the files.
C
CMOD	Alter the value of the flag OK so that
CMOD	when the program exits sucessfully OK
CMOD	contains the value 1 ie SS$_NORMAL		J M P W		27-05-86
C
	IMPLICIT NONE
C
C	Common blocks
C
***	COMMON/LSL$CMNIFF:IFFHAN/
***	COMMON/LSL$CMNLSL:CLD/
***	COMMON/LSL$CMNLSL:STATUS/
***	COMMON/LSL$CMNLSL:FILENAME/
C
C	External routines
C
	EXTERNAL	JSPLIT_CLD	!for command line
C
C	Functions called
C
	INTEGER*4	DCL_STARTUP	!init the lsl$lib common etc
	INTEGER*4	DCL_QUAL	!looks for qualifier
	INTEGER*4	DCL_FILE	!looks for filename
	INTEGER*4	JSPFIL		!opens & closes IFF files
	INTEGER*4	SPLIT		!splits ip file features & op's
C
C	Local variables
C
	LOGICAL*4	OK		!=.t. function sucessful
	LOGICAL*4	LOG		!=.t. produce log output
	LOGICAL*4	RENUM		!=.t. renumber =.f. don`t renumber
	LOGICAL*4	OPENFL		!=.t. means opening files else closing
	LOGICAL*4	PRESENT		!=.t. qualifier present (dummy)
	LOGICAL*4	NEGATIVE	!=.t. qualifier negative (dummy)
	LOGICAL*4	ABSENT		!=.t. name not present   (dummy)
	CHARACTER*128 	IPFILE		!File name of input file for processing
	CHARACTER*128 	OPFILE		!File name of output file from process
	CHARACTER*3	BEL		!Sounds bell 3 times
	INTEGER*4     	IPLEN 		!length of i\p file name
	INTEGER*4     	OPLEN 		!Length of o\p file name
	INTEGER*4     	IPLUN 		!logical unit number of i\p file
	INTEGER*4     	OPLUN 		!logical unit number of o\p file
	INTEGER*4	NUMIN		!No of the features from orig IFF file
	INTEGER*4	NUMOUT		!No of features on op IFF file
	INTEGER*4	I		!Loop counter
C
C	Init BEL
C
	DO 10, I = 1, 3
	   BEL(I:I) = CHAR(7)
10	CONTINUE
C
C	Initialise lsllib
C
	CALL LSL_INIT()
C
C	Main program
C
	RENUM = .FALSE.
	OK = DCL_STARTUP('JSPLIT',.FALSE.,JSPLIT_CLD,.TRUE.)
	IF (.NOT.OK) GO TO 9999
C
C	See if renumber true or not
C
	OK = DCL_QUAL('RENUMBER',RENUM,PRESENT,NEGATIVE,.TRUE.)
	IF (.NOT.OK) GO TO 9999
C
C	See if statistics required or not
C
	OK = DCL_QUAL('LOG',LOG,PRESENT,NEGATIVE,.TRUE.)
	IF (.NOT.OK) GO TO 9999
C
C	Get the input filename of file to be processed
C
	OK = DCL_FILE
	1    ('INPFILE','LSL$IF:IFF.IFF',ABSENT,.FALSE.,.TRUE.)
	IF (.NOT.OK) GO TO 9999
C
C	Store the filename into a local variable
C
	IPFILE = FILARY(1)(1:FIL_LEN(1))
	IPLEN  = FIL_LEN(1)
C
C	Get the output filename	for the processed data
C
	OK = DCL_FILE
	1    ('OUTFILE','LSL$IF:IFF.IFF',ABSENT,.FALSE.,.TRUE.)	
	IF (.NOT.OK) GO TO 9999
	OPFILE = FILARY(1)(1:FIL_LEN(1))
	OPLEN  = FIL_LEN(1)
C
C	Check for version number
C
	IF (HAD_VER) THEN
	   CALL WRITEF(
	1  '%SVersion numbers not allowed on output %S',BEL,OPFILE(1:OPLEN))
	   GO TO 9999
	ENDIF
C
C	If log is enabled then output file names trying to open
C
	IF (LOG) THEN
	   CALL WRITEF('Input file         %S',IPFILE(1:IPLEN))
	   CALL WRITEF('Output file        %S',OPFILE(1:OPLEN))
	END IF
C
C	Open relevant IFJ/F files
C
	OPENFL = .TRUE.
	OK = JSPFIL(OPENFL,IPFILE,OPFILE,IPLUN,OPLUN)
	IF (.NOT.OK) GO TO 9999
C
C	Split the features
C
	OK = SPLIT(RENUM,IPLUN,OPLUN,NUMIN,NUMOUT)
	IF (.NOT.OK) GO TO 9999
C
C	Check if log is  required
C
	IF (LOG) THEN
	   CALL WRITEF('Features in      = %I',NUMIN)
	   CALL WRITEF('Features out     = %I',NUMOUT)
	   NUMOUT = NUMOUT - NUMIN
	   CALL WRITEF('Features created = %I',NUMOUT)
	END IF
C
C	Close relevant IFJ/F files
C
	OPENFL = .FALSE.
	OK = JSPFIL(OPENFL,IPFILE,OPFILE,IPLUN,OPLUN)
	IF (.NOT.OK) GO TO 9999
	IF (LOG) CALL WRITEF('Process complete')
9999	IF (OK) OK = 1
	CALL EXIT(OK.OR.LSL_QUIET)
	END
