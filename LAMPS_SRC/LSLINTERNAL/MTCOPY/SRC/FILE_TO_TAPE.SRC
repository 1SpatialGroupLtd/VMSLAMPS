C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-13 23:30:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION FILE_TO_TAPE
C
***	IDENT	14SE90
***	MODULE	FILE_TO_TAPE

C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : Andrew C Morris			ACM	14-Apr-86
C
C	Allow more than 32767 blocks			WJJ	13-Mar-1992 
C	Allow block up to 64000 bytes			WJJ	14-Sep-1990
CMod	Allow tapes starting with a tape mark		PGH	26-Mar-1990
C 
C Description
C	Copies data from diskfile to magtape
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNMTCOPY:MTCOPYMSG.PAR'
C
C	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'
	INCLUDE 'LSL$CMNLSL:MTOVCM.CMN'
	INCLUDE 'LSL$CMNMTCOPY:MTCOPY.CMN'
C
C Workspace
	INTEGER*4	LBYTES,STATUS,I,IRECNO

	INTEGER*2	NBYTES
C
	LOGICAL*1	OUTPUT,EOTAPE,EOFILE
C
	EQUIVALENCE	(LBYTES, NBYTES)
C
C Functions
	INTEGER*4	MTONIT,MTOWRB,MTOEOV,MTOEOF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	FILE_TO_TAPE = .FALSE.
	EOFILE = .FALSE.
	NFILES = 0
	LBYTES = 0
C
C Set up magtape to receive output
C
	IF (APPEND) THEN
	   STATUS = MTONIT(OUTPUT_DEV_SPEC(:OUTPUT_DEV_LEN),,
     &	      .NOT.REWIND_OUTPUT)
	   IF (STATUS) THEN
	      IF (REWIND_OUTPUT) THEN
	         STATUS = MTOEOV()
	         IF (.NOT.STATUS) THEN
	            CALL LSL_PUTMSG(MTCOPY__EOVERR)
	            CALL LSL_ADDMSG(STATUS)
	            CALL LSL_ADDMSG(MTOERR)
	            GOTO 999
	         ENDIF
	      ENDIF
	   ENDIF
	ELSE
	   STATUS = MTONIT(OUTPUT_DEV_SPEC(:OUTPUT_DEV_LEN),
     &	      DENSITY,.FALSE.)
	ENDIF
C
	IF (.NOT.STATUS) THEN
	   CALL LSL_PUTMSG(MTCOPY__CANTOPNOUTPUT,
     &	      OUTPUT_DEV_SPEC(:OUTPUT_DEV_LEN))
	   CALL LSL_ADDMSG(STATUS)
	   CALL LSL_ADDMSG(MTOERR)
	   GOTO 999
	ENDIF
C
	IRECNO=0
C
C Open input file
C
	OPEN(UNIT=1,NAME=INPUT_DEV_SPEC(:INPUT_DEV_LEN),
     &	   TYPE='OLD',FORM='UNFORMATTED',ERR=10)
	GOTO 20
C
10	CALL LSL_PUTMSG(MTCOPY__CANTOPNINPUT,
     &	   INPUT_DEV_SPEC(:INPUT_DEV_LEN))
	GOTO 999
C
20	READ(1,ERR=25,END=70) NBYTES,(BUFF(I),I=1,LBYTES)
	GOTO 30
25	CALL LSL_PUTMSG(MTCOPY__READERR)
	GOTO 70
C
30	IF (LBYTES.GT.1) GOTO 40
	IF (LBYTES.EQ.1) THEN
	  IF (EOFILE) GOTO 70		! second EOF
	  NFILES = NFILES + 1
	  STATUS = MTOEOF()
	  IF (.NOT.STATUS) GOTO 60
	  EOFILE = .TRUE.
	ENDIF
	GOTO 20
C
40	STATUS = MTOWRB(BUFF(1),NBYTES)
	IF (.NOT.STATUS) GOTO 60
	EOFILE = .FALSE.
50	IRECNO = IRECNO+1
	GOTO 20
C
C Error on write
60	CALL LSL_PUTMSG(MTCOPY__WRITEERR)
	CALL LSL_ADDMSG(STATUS)
	CALL LSL_ADDMSG(MTOERR)
	GOTO 50
C
C End of file read
70	IF (.NOT.EOFILE) CALL MTOEOF
	CALL MTOEOF
C
C Back over last tape-mark
	CALL MTOBCK
C
C Close input file
	CLOSE(UNIT=1)
C
	FILE_TO_TAPE = .TRUE.
999	RETURN
	END
	        
