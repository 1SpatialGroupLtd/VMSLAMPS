C-----------------------------------------------------------------
C
C	LINE_OUT
C
C	OUTPUT A NODE TO STREAM 3
C-----------------------------------------------------------------
	SUBROUTINE LINE_OUT(I,NMX)
C
***	MODULE LINE_OUT
***	IDENT 23MR84
C
	IMPLICIT NONE
C
C arguments:
	INTEGER		I		! index (on ISHED) of reference
C					!  pin on node in question
	INTEGER		NMX		! limit of data in ISHED
C
	INCLUDE 'WIREWRAP.HDR'
C
C w/s:
	INTEGER		II, N		! loop indices
	INTEGER		IJ		! points to 'next pin to output'
	INTEGER		J		! output buffer pointer
	INTEGER		LENGTH		! length returned by FORM
C
	LOGICAL		DATA		! TRUE iff there's something
C					!  that MUST be output in LINE
	BYTE		LINB(9)		! buffer for FORMing pin names
	BYTE		LINE(80)	! buffer for output line
C
C function called
	INTEGER		FORM		! form pin name
C
C initialise
	IJ=I
	J=1
	DATA = .FALSE.
C
C look backwards for start of network
20	IJ=IJ-1
	IF (IJ.EQ.0) GOTO 30
	IF (ISHED(IJ).NE.-1) GOTO 20
C
C encode start pin
30	LENGTH = FORM(LINB,I)
	DATA = .TRUE.
	GOTO 50
C
C encode some other pin
40	LENGTH = FORM(LINB,IJ)
	DATA = .TRUE.
C
C copy stuff expanded in LINB to output buffer LINE
50	DO 60 II = 1,LENGTH
	   LINE(J)=LINB(II)
	   J=J+1
60	CONTINUE
	IF(J.GT.42)GOTO 80			! j if line full
C
C look for next pin to output
70	IJ=IJ+1
	IF(IJ.EQ.I)GOTO 70			! this was first done
	IF(ISHED(IJ).EQ.-1)GOTO 100		! last of node
	GOTO 40					! found another
C
C line getting a bit full: flush it
80	WRITE(3,110)(LINE(N),N=1,J-1)
	ENCODE(LENGTH,90,LINB)
90	FORMAT('    < ')
	J=1
	DATA = .FALSE.
	GOTO 50					! copy that into output
C
C end of node: write out anything remaining in line (trimming off
C							trailing space)
100	IF (DATA) WRITE(3,110)(LINE(N),N=1,J-2)
110	FORMAT(' ',80A1)
	J=1
	RETURN
C
	END
