C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-02-10 13:14:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM WIRENEW
C
***	MODULE WIRENEW
***	IDENT 10FE86
C
	IMPLICIT NONE
C
C-------------------------------------------------------
C	WIREWRAP TESTING PROGRAM
C	A=ADD to schedule
C	S=Output schedule to disc,named SCHED.DAT
C	P=Output schedult to disc in re-readable form
C	F=FAULT LIST
C	Q=QUIT
C	WW=WIREWRAP(IMPLIED UPDATE)
C	WC=WIREWRAP CHECK LIST(IMPLIED UPDATE)
C	R=READ schedule
C	L=List all references
C	B=Parts list
C	D=DIAGRAM
C	X=ALL (F,S,WW,WC,L,B and D)
C	UM=Undo multiple occurrences of IC pins, Gnd and Vcc.
C	CT=Create Magnetic Tape for Semi-Auto wrapping.
C
C-------------------------------------------------------
C-------------------------------------------------------
C
C  Wirewrap version 3.0
C
C  Modifications D R Griffiths for version 2.1:
C
C		altered MTAPES: edge-connectors now become
C		CON ( eg P1) and PIN (eg V2) (11-Feb-81)
C
C		altered CTAPES etc for output to magnetic
C		tape in Staveley format. (6-Feb-81)
C
C		added CT command, and routines CTAPES, PTAPES,
C		PUTIC, PUT, PTBINI, PTBUFL. (7-Jan-81)
C
C		altered R and A commands, so both accept input
C		from anywhere, and one replaces current data,
C		other adds to it.	(5-Jan-81)
C
C		improved layout of schedule output, and parts
C		list now contains IC socket sizes.  (5-Jan-81)
C
C		added subroutines UNMULT and MERGE,
C		and UM command. (23-Dec-80)
C
C Modifications by RF for version 3.0 (see WW.UPD)
C
C-------------------------------------------------------
C
***	COMMON/LSL$CMNVIO:CMDCOM/
C
	INCLUDE 'WIREWRAP.HDR'
C
C  For the meanings of COMMON variables, see subroutine INIT.
C
C functions called:
	LOGICAL		RDCHS		! read character from line
	INTEGER*2	RDCOMM		! read command from line
	INTEGER*2	RDFILT		! read file title from line
	INTEGER*2	TTRLIN		! read line from terminal
C
C workspace:
	BYTE		CH		! argument for RDCHS
	INTEGER*4	CMD		! return from RDCOMM
	CHARACTER*8	DEFAULT_TITLE	! deafult value for TITLE
	INTEGER*4	I		! loop variable
	INTEGER*2	IRC		! return from RDFILT
	INTEGER*4	J		! character of title
	INTEGER*4	N		! current index on ISHED
	INTEGER*2	NCHS		! number of characters read
	CHARACTER*60	OUTFIL		! output file title
C
C command table:
	EXTERNAL	WIREWRAP_CMD_TABLE
	INTEGER*4	WIREWRAP_CMD_TABLE
C
C announce ourselves
	CALL TTWSTR('Wirewrap list checking program V3.0')
	CALL WRITEF
C
C initialise other things
	CALL INIT(N)
	DEFAULT_TITLE = 'WIRE.SHD'
	DO 20 I=1,80
	   IF (I.LE.8) THEN
	      J = ICHAR(DEFAULT_TITLE(I:I))
	      TITLE(I) = J
	   ELSE
	      TITLE(I)=0
	   ENDIF
20	CONTINUE
	TITLEL = 8
C
C main command-read loop
30	NCHS = TTRLIN(,,, '* ')
	IF (NCHS.LT.0) THEN
	   IF (NCHS.NE.-10) THEN
	      CALL WRITEF('Error %N in terminal input', NCHS)
	   ENDIF
	   CALL EXIT
	ENDIF
	CALL BSLN
	IF (RDCHS(CH)) GOTO 30		! ignore null lines
	CALL BSCH			! un-read the probe character
	CMD = RDCOMM(WIREWRAP_CMD_TABLE)
	IF (CMD.EQ.0) GOTO 60
C
C despatch command
	GOTO (100,110,120,130,150, 160,180,190,200,240,
     &	      270,280,290,300,310, 330,340,350), CMD
C
C error - give an 'involuntary' command list
60	CALL TTWSTR(
     &	    'A=Add,S=Sched,D=Diagram,R=Read,P=Punch,F=Fault,L=List')
	CALL TTWSTR(
     &	    'Q=Quit,WW=Wirewrap list,WC=Wirewrap check list,X=All')
	CALL WRITEF('B=Parts list,UM=Undo multiple references,CT=%S',
     &      'Create Tape for Semi-Auto')
	IF (CMD.GT.0) THEN			! here from HELP cmd
	   GOTO 320
	ELSE
	   GOTO 30
	ENDIF
C
C DIAGRAM command
100	NCHS = RDFILT(OUTFIL, 60, 'DIAG.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Diagram')
	CALL DIAG
	CALL CLOSE(3)
	GOTO 30
C
C SCHEDULE command
110	NCHS = RDFILT(OUTFIL, 60, 'SCHED.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Schedule')
	CALL OUTPUT(3,N)
	CALL CLOSE(3)
	GOTO 30
C
C FAULT command
120	NCHS = RDFILT(OUTFIL, 60, 'FAULT.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Fault list')
	CALL FAULT(N)
	CALL CLOSE(3)
	CALL ORDER(N)
	GOTO 30
C
C UNDO-MULTIPLES (UM) command
130	CALL TTWSTR('Undo multiple occurrences')
	CALL UNMULT(N)
	GOTO 30
C
C CT command for semi-auto
150	CALL CTAPES(N)
	GOTO 30
C
C WIREWRAP - wirewrap list -
C		 first make 16-pin version
160	CALL UPDATE(N)
C
C output file for our output
	NCHS = RDFILT(OUTFIL, 60, 'WWRAP.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Wirewrap schedule')
	CALL WIRERP(3,N)
C
C  WIREWRAP/WIRECHECK - tidy up and restore to 14-pin version
170	CLOSE(UNIT=3)
	CALL DNDATE(N)
	GOTO 30
C
C WIRECHECK - output check list -
180	NCHS = RDFILT(OUTFIL, 60, 'WRPCH.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Wirewrap check list')
	CALL UPDATE(N)			! translate 14->16 pin ICs
	CALL OUTPUT(3,N)
	GOTO 170			! where we translate back 16->14
C
C READ - read, deleting previous data.
190	CALL INIT(N)
C
C ADD - read and append to previous data - joins
200	IF (.NOT.RDCHS(CH)) THEN	! still something on line
	   CALL BSCH			! un-read probe
	ELSE
	   CALL TTRLIN(,,, 'Input from file: ')
	   CALL BSLN
	ENDIF
	CALL NAME_INFILE
	OPEN (UNIT=4,NAME=TITLE,TYPE='OLD',READONLY,ERR=210)
	CALL INPUT(4,N)
	IF (STARLE.GT.0) THEN
	   CALL WRITEF('%S schedule: %^L%N entries', STARST, N)
	ELSE
	   CALL WRITEF('%^L%N Entries in schedule', N)
	ENDIF
	CALL ORDER(N)
	CALL CLOSE(4)
	CALL LIBSET
	OPEN (UNIT=3,NAME='SYS$ERROR',TYPE='NEW')
	CALL LIBSCN(N)
	CALL CLOSE(3)
	GOTO 30
C
C can't open the file
210	CALL WRITEF('Can''t open file %AZ', TITLE)
	GOTO 30
C
C P (or REOUTPUT) - make new schedule on disc
240	IF (.NOT.RDCHS(CH)) THEN	! still something on line
	   CALL BSCH			! un-read probe
	ELSE
	   CALL TTRLIN(,,, 'Output to file: ')
	   CALL BSLN
	ENDIF
	CALL NAME_INFILE
	OPEN(UNIT=4,NAME=TITLE,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL OUTPUT(4,N)
	WRITE(4,260)
260	FORMAT(' ','Z')
	CALL CLOSE(4)
	GOTO 30
C
C L - list all references
270	NCHS = RDFILT(OUTFIL, 60, 'PNDIC.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Reference list')
	CALL REFER(N)
	CALL CLOSE(3)
	GOTO 30
C
C B or PARTS_LIST - summarise what's needed
280	NCHS = RDFILT(OUTFIL, 60, 'PARTS.DAT',
     &			.TRUE.,.TRUE.,.TRUE.,
     &			IRC)
	IF (IRC.LT.0) THEN
	   CALL FLTERR(IRC)
	   GOTO 30
	ENDIF
	OPEN(UNIT=3,NAME=OUTFIL,TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL PARTS(N,3)
	CALL CLOSE(3)
	GOTO 30
C
C X (ALL) - do eevrything anyone could conceivably want
290	CALL INIT(N)
	IF (.NOT.RDCHS(CH)) THEN	! still something on line
	   CALL BSCH			! un-read probe
	ELSE
	   CALL TTRLIN(,,, 'Input from file: ')
	   CALL BSLN
	ENDIF
	CALL NAME_INFILE
	OPEN (UNIT=4,NAME=TITLE,TYPE='OLD',READONLY,ERR=210)
	CALL INPUT(4,N)
	CALL ORDER(N)
	CALL CLOSE(4)
	CALL LIBSET
C
C do fault list
	OPEN(UNIT=3,NAME='FAULT.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Fault list')
	CALL FAULT(N)
	CALL CLOSE(3)
	CALL ORDER(N)
C
C produce schedule
	OPEN(UNIT=3,NAME='SCHED.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Schedule')
	CALL OUTPUT(3,N)
	CALL CLOSE(3)
C
C wirewrap schedule
	CALL UPDATE(N)
	OPEN(UNIT=3,NAME='WWRAP.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Wirewrap schedule')
	CALL WIRERP(3,N)
	CALL CLOSE(3)
C
C check list
	OPEN(UNIT=3,NAME='WRPCH.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Wirewrap check list')
	CALL OUTPUT(3,N)
	CALL CLOSE(3)
	CALL DNDATE(N)
C
C pin dictionary
	OPEN(UNIT=3,NAME='PNDIC.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Reference list')
	CALL REFER(N)
	CALL CLOSE(3)
C
C parts list
	OPEN(UNIT=3,NAME='PARTS.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL PARTS(N,3)
	CALL CLOSE(3)
C
C diagram of board
	OPEN(UNIT=3,NAME='DIAG.DAT',TYPE='NEW',CARRIAGECONTROL='LIST')
	CALL HEAD ('Diagram')
	CALL DIAG
	CALL CLOSE(3)
	GOTO 30
C
C QUIT command
300	CALL EXIT
C
C HELP command
310	CALL TTWSTR('''Standard'' command names are:')
	GOTO 60					! join command err route
C
C back after command error listing
320	CALL WRITEF
	CALL TTWSTR('Complete table is:')
	CALL CMDPRT(WIREWRAP_CMD_TABLE)
	GOTO 30
C
C QUIET command
330	QUIET = .NOT.CMDNEG
	GOTO 30
C
C COMMENTS command: output list of comments in this file
340	IF (COMLIM.EQ.0) THEN
	   CALL TTWSTR('No comments read')
	ELSE
	   CALL TTWSTR('Comments are:')
	   I = 1
	   DO WHILE (I.LT.COMLIM)
	      CALL WRITEF('| %AC', COMBUF(I))
	      I = I+COMBUF(I)+1
	   ENDDO
C	   CALL WRITEF			!? finish off with blank line
	ENDIF
	GOTO 30
C
C OCCURS/WHERE command: finds where a pin lives
350	CALL OCCURS(N)
	GOTO 30
C
	END
