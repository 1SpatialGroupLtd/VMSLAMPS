
WIREWRAP GENERATING AND CHECKING PROGRAM
----------------------------------------

1.INTRODUCTION
--------------

	This program is intended to speed up logic design of
TTL circuits based on wirewrap techniques. 	
	The program will accept a schedule from the keyboard or from
a file on disc. The format of the schedule is described in section 3.
The schedule consists of two sections. The first section describes the
connections between pins of the I.C.s and the edge pins of the board
and the second section defines the I.C. types used on the board.
	A Library of I.C. types is contained on the file IC$LIB,
and this file is scanned by the program after the schedule is read.
If the library does not contain any of the types used, a self
explanatory message is typed. However, the default library is protected
against alteration; if you wish to insert the missing types, you may
define your own library by editing IC$LIB (see WIRE.COM). Requests to
the appropriate authority (BME-S) to update IC$LIB will be sympathetically
considered. The format for library entries is described in section 4.

2 OUTPUT FACILITIES
-------------------

	Output to disc creates new versions of the respective data files. In
general these should be examined/printed a.s.a.p. because purging the filespace
will delete old files.
	The program is controlled by one or two letter commands which
are typed in following the prompt *. Note that nothing should
be typed unless invited by the prompt *.
	The commands are as follows:

S	Output the current schedule to the disc in a form suitable for listing.
	A new version of SCHED.DAT is produced.

R	Read a schedule from the disc.
	The file name will be asked.
	Note that this command is additive. A previous
	schedule will be added to and not just replaced. Use CL (qv)
	to clear any pre-existing schedule.

A	Add to the current schedule (which may be none) from the
	keyboard. The format is as for a schedule read from disc.
	The input schedule is terminated by a Z.

P	Output the schedule to the disc in a form suitable
	for re-reading by R.
	The file name will be asked.

F	Produce a listing of faults found in the schedule.
	Any duplicated pins are noted.  Each pin in the
	schedule is checked for a legitimate function. All pins
	of I.C.s in the list of I.C.s  are checked, and
	if they have a legitimate function (i.e. are not just NC)
	then they are looked for in the schedule. If not found
	an appropriate message is output. In the case of pins which
	are not in the schedule and should be either VCC or GND, then
	this connection is added to the schedule by the program.

	Pins on ICs are classified as follows: NC, VCC, GND, Input, Output,
	Tristate, Undefined.  Edge connectors are precisely equivalent to 
	Undefined pins on ICs.

	The schedule is checked pin by pin, and the following rules are 
	applied:-

	  NC	ignored

	  VCC	must be connected to Vcc

	  GND	must be connected to Gnd

	  Input	pins must be connected to an Output, Tristate, VCC, GND
		or Undefined.

	  Output pins must not be connected to another Output, Tristate,
		VCC or GND. 

	  Tristate pins must not be connected to VCC or GND. 

	  Output and Tristate pins are checked for overloads (current 
		requirements of inputs connected must not exceed drive
		capability)

	  Undefined pins are ignored.

	In any of these cases an appropriate message is output
	if the rules are not obeyed. 
        A new version of FAULT.DAT is produced.

WW	Produce a wire-wrap type schedule and output it to the disc.
	References to 14 pin I.C.s will be updated so that 
	pin numbers over 7 are given +2 to conform with the
	numbering of sockets. A new version of WWRAP.DAT is produced.

WC	Produce a schedule for use in checking a wire-wrap board.
	The pin numbers are updated as described in WW.
	A new version of WRPCH.DAT is produced.

L	A pin node dictionary is produced in a form suitable for
	listing. Pin numbers are not updated so that the
	directory pin numbering conforms to the circuit diagram.
	A new version of PNDIC.DAT is produced.

B	Produce a parts list if I.C. types etc. from the schedule.
	A new version of PARTS.DAT is produced.

X	Equivalent to R,F,S,WW,WC,L,B,Q
	The file name is asked. Six new data files
	are produced.

D       Produce a layout diagram from the IC list.
        A new version of DIAG.DAT is produced.

CL	The current schedule if any is cleared
	from the store.

Q	Quit. 

	The WIRE PRINT command runs WIREWRAP with the X command. At the end
of the program, data files are printed, using MUL where possible for 
minimum paper usage. 





3 SCHEDULE FORMAT
------------------
	The format of the schedule is illustrated in the following
	example.


1.1-1.2-1.3-1.4
1.6,1.7,1.8
1.9-1.10-23.09-P1V2
IC LISTING
1=SN7400N
23=SN74LS195A
Z


	Note that between I.C. pins a comma or a dash can be used.
	Spaces are generally ignored.
	1.1 is equivalent to 1.01 is equivalent to 01.01.
	A line which is too long to fit on one printed line can
	overflow onto the next which should then begin
	with a  <.


1.1-1.2-1.3-            is the same as       1.1-1.2-1.3-1.4
<1.4

The I.C. listing section contains the I.C. type identifiers which
should correspond to the entries in the library.
The schedule may end with  Z.



4 LIBRARY FORMAT
-----------------
	The format of entries in the library is as follows:

		One line defines each I.C. type.

		The first 10 characters are the I.C. identifier.
		followed by a  /. Then each three characters
		define the function of each pin.  Each group of
		three characters is followed by a /.

		An input pin is represented as a negative number
		which is the low state input current in units of 0.1mA.
		e.g. /-16/ is a standard TTL input.

		An output is represented by a positive number which
		is the low state current sink capability in mA.
		eg. / 16/ is a standard TTL output

		A Tristate output is represented as a positive number
		(the sink capability in mA) preceded by an asterisk *.
		eg  a Tristate driver capable of sinking 48 mA would
		be represented by  /*48/

		A VCC pin is represented by /  V/

		A GND pin is represented by /  G/

		An NC pin is represented by /  0/

		An Undefined pin is represented by / . /

	If an I.C. has more than 16 pins then it may be continued on
	the next line with the name section replaced by   <.
	The following example illustrates the possibilities:


SN7400N   /-16/-16/ 16/-16/-16/ 16/  G/ 16/-16/-16/ 16/-16/-16/  V/
TMS9900JL / -1/  V/  4/ -1/  4/ -1/  4/ -1/ -1/ *4/ *4/ *4/ *4/ *4/ *4/ *4/
<         / *4/ *4/ *4/ *4/ *4/ *4/ *4/ *4/ -1/  G/ -1/ -1/ *4/  4/ -1/ -1/
<         / -1/ -1/ -1/ -1/  0/  0/  0/  G/ *4/ *4/ *4/ *4/ *4/ *4/ *4/ *4/
<         / *4/ *4/ *4/ *4/ *4/ *4/ *4/ *4/  0/  0/  V/ -1/  4/ -1/  4/ -1/

The library may end with a  Z.



5  RUNNING THE PROGRAM
----------------------

	The command file DRA1:[MICRO.WW]WIRE runs several Wirewrapping
programs, including the master WIREWRAP program. Type

	@DRA1:[MICRO.WW]WIRE HELP

for details.

				DRG    8 May  80
