// BCPL library header 01-Jun-1981

GLOBAL $(GLOB

                        //      convention for describing file manipulation
                        //      is:-
                        //      D = ddname, a bcpl string holding a file title
                        //      S = strpointer, a +ve value used by the library
                        //      E = error, a negative result
                        //      COS = current output stream
                        //      CIS = current input stream
                        //      [  ] = type of arguments and result
                        //      (   ) = environment used by call


start           : 1     // rt  entry point
stop            : 2     // rt  exit
exitstatus      : 3     //  v  exit status returned at finish
syscommand      : 4     //  v  channel for sys$command
syserror        : 5     //  v  channel for sys$error
readrec         : 6     // fn  (chan,ptr,siz,recno)
writerec        : 7     // fn  or of (ptr,siz)
binrdch         : 8     // fn  8 bit characters 
binwrch         : 9     // fn  8 bit character write

findinput       :10     // fn  creates input stream [d->s,e]
findoutput      :11     // fn  creates output stream [d->s,e]
setdef          :12     // rt sets attributes for next find
selectinput     :14     // fn  selects input stream as current
selectoutput    :15     // fn  selects output stream as current
sysin           :16     //  v  default input stream (kb:/ln:cmi)
sysout          :17     //  v  default output stream (kb:/ln:cmo)
endread         :18     // fn  terminate current input; unset selection [(cis)]
endwrite        :19     // fn  terminate current output stream [(cos)]

rewind          :20     // fn  rewinds current input if possible [(cis)->s,0,e]
endtoinput      :21     // fn  closes current output, and reopens for input [(cos)->s,0,e]
rdch            :22     // fn  read a character from current input [(cis) ?->ch,endstreamch]
wrch            :23     // fn  write a char to current output [(cos) ch->?,eom]
input           :24     // fn  returns currently selected input pointer (or 0)
output          :25     // fn  returns currently selected output pointer (or 0)
unrdch          :26     // rt  causes rdch to return same char as last time [(cis)]
stringio        :27     //  v  channel for string buffer output
stringbuffer    :28     //  v  integer pointer to buffer string
readvec		:29	// rt  reads a vector from input stream
writevec	:30	// rt  writes a vector (addr,#words) to output

changephase     :31     // fn  causes named program to be loaded and entered
getcommand      :32     // rt  routine to get command parsed
getvec		:33	// fn  getvec(n) returns a vector 0..n
freevec		:34	// rt  freevec(v) returns the vector ( from getvec)

statusfile      :40     // fn  return status of 'file [d->v,e]'
deletefile      :41     // fn  delete 'file'; no errors [d->?]
renamefile      :42     // fn  rename file1 as file2 [d1,d2->0,e]
parsefile	:43	// rt  parses filespec ->(S,V) vec is set to new fspec
date            :45     // fn  returns date as given bcpl string (v=vec 5) [v->s]
tod             :46     // fn  returns time of day, ditto. (v=vec 5) [v->s]

time            :50     // fn  returns number of clock half ticks since start
level           :51     // fn  returns p-pointer for use by longjump
longjump        :52     // rt  causes non-local jump
aptovec         :53     // rt  good old aptovec
rbyte           :54     // fn  takes m/c type address
wbyte           :55     // rt  ditto
packstring      :56     // fn  pack vec char into string
unpackstring    :57     // fn  unpack string into vector
comparestring   :58     // fn  compares strings a,b giving a<b->-1,a=b->0,1
stringlength    :59     // fn  returns length in chars of string

skiptoeol       :62     // fn  skip to end of line on cis
copytext        :63     // fn  copy text from cis to cos until char met
writedate       :66     // rt  write date on cos
writetime       :67     // rt  write time on cos

newline         :70     // rt  prints a newline on current output
writen          :71     // rt  writes a decimal number
writed          :72     // rt
writehex        :73     // rt  writes a hex number
writeoct        :74     // rt  writes in octal
writes          :75     // rt  write a string
writef          :76     // rt  general purpose format driven op rtn
readn           :77     // fn  read a decimal number
terminator      :78     //  v  terminating char from readn

getbyte         :80     // fn
putbyte         :81     // fn  

//
// 90-97 reserved for debug addresses
debugroutine	:98	// rt  a suitable user exit routine
userexit        :98     // rt  user routine called after stop/finish
exception       :99     // fn  user exception handler established outside start

$)GLOB

MANIFEST        $(man           // system manifest constants

endstreamch     = -1
endrecordch     = -2
bytesperword    = 4
maxint          =2147483647

$)man

.
