// BCPL library header 01-Jun-1981

GLOBAL $(GLOB

                        //      convention for describing file manipulation
                        //      is:-
                        //      D = ddname, a bcpl string holding a file title
                        //      S = strpointer, a +ve value used by the library
                        //      E = error, a negative result
                        //      COS = current output stream
                        //      CIS = current input stream
                        //      [  ] = type of arguments and result
                        //      (   ) = environment used by call


START           : 1     // rt  entry point
STOP            : 2     // rt  exit
EXITSTATUS      : 3     //  v  exit status returned at finish
SYSCOMMAND      : 4     //  v  channel for SYS$COMMAND
SYSERROR        : 5     //  v  channel for SYS$ERROR
READREC         : 6     // fn  (chan,ptr,siz,recno)
WRITEREC        : 7     // fn  or of (ptr,siz)
BINRDCH         : 8     // fn  8 bit characters 
BINWRCH         : 9     // fn  8 bit character write

FINDINPUT       :10     // fn  creates input stream [D->S,E]
FINDOUTPUT      :11     // fn  creates output stream [D->S,E]
SETDEF          :12     // rt sets attributes for next find
SELECTINPUT     :14     // fn  selects input stream as current
SELECTOUTPUT    :15     // fn  selects output stream as current
SYSIN           :16     //  v  default input stream (KB:/LN:CMI)
SYSOUT          :17     //  v  default output stream (KB:/LN:CMO)
ENDREAD         :18     // fn  terminate current input; unset selection [(CIS)]
ENDWRITE        :19     // fn  terminate current output stream [(COS)]

REWIND          :20     // fn  rewinds current input if possible [(CIS)->S,0,E]
ENDTOINPUT      :21     // fn  closes current output, and reopens for input [(COS)->S,0,E]
RDCH            :22     // fn  read a character from current input [(CIS) ?->CH,ENDSTREAMCH]
WRCH            :23     // fn  write a char to current output [(COS) CH->?,EOM]
INPUT           :24     // fn  returns currently selected input pointer (or 0)
OUTPUT          :25     // fn  returns currently selected output pointer (or 0)
UNRDCH          :26     // rt  causes RDCH to return same char as last time [(CIS)]
STRINGIO        :27     //  v  channel for string buffer output
STRINGBUFFER    :28     //  v  integer pointer to buffer string
READVEC		:29	// rt  reads a vector from input stream
WRITEVEC	:30	// rt  writes a vector (addr,#words) to output

CHANGEPHASE     :31     // fn  causes named program to be loaded and entered
GETCOMMAND      :32     // rt  routine to get command parsed
GETVEC		:33	// fn  GETVEC(N) returns a vector 0..n
FREEVEC		:34	// rt  FREEVEC(V) returns the vector ( from GETVEC)

STATUSFILE      :40     // fn  return status of 'file [D->V,E]'
DELETEFILE      :41     // fn  delete 'file'; no errors [D->?]
RENAMEFILE      :42     // fn  rename file1 as file2 [D1,D2->0,E]
PARSEFILE	:43	// rt  (S,V) returns expanded name in Vec
DATE            :45     // fn  returns date as given bcpl string (v=vec 5) [v->s]
TOD             :46     // fn  returns time of day, ditto. (v=vec 5) [v->s]

TIME            :50     // fn  returns number of clock half ticks since start
LEVEL           :51     // fn  returns P-pointer for use by longjump
LONGJUMP        :52     // rt  causes non-local jump
APTOVEC         :53     // rt  good old aptovec
RBYTE           :54     // fn  takes m/c type address
WBYTE           :55     // rt  ditto
PACKSTRING      :56     // fn  pack vec char into string
UNPACKSTRING    :57     // fn  unpack string into vector
COMPARESTRING   :58     // fn  compares strings a,b giving a<b->-1,a=b->0,1
STRINGLENGTH    :59     // fn  returns length in chars of string

SKIPTOEOL       :62     // fn  skip to end of line on CIS
COPYTEXT        :63     // fn  copy text from CIS to COS until char met
WRITEDATE       :66     // rt  write date on COS
WRITETIME       :67     // rt  write time on COS

NEWLINE         :70     // rt  prints a newline on current output
WRITEN          :71     // rt  writes a decimal number
WRITED          :72     // rt
WRITEHEX        :73     // rt  writes a hex number
WRITEOCT        :74     // rt  writes in octal
WRITES          :75     // rt  write a string
WRITEF          :76     // rt  general purpose format driven op rtn
READN           :77     // fn  read a decimal number
TERMINATOR      :78     //  v  terminating char from readn

GETBYTE         :80     // fn
PUTBYTE         :81     // fn  

//
// 90-97 reserved for DEBUG addresses
DEBUGROUTINE	:98	// rt  a suitable user exit routine
USEREXIT        :98     // rt  user routine called after stop/finish
EXCEPTION       :99     // fn  user exception handler established outside start

$)GLOB

MANIFEST        $(MAN           // SYSTEM MANIFEST CONSTANTS

ENDSTREAMCH     = -1
ENDRECORDCH     = -2
BYTESPERWORD    = 4
MAXINT          =2147483647

$)MAN

.
