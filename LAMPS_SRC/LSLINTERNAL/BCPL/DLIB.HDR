// BCPL library header 01-Jun-1981GLOBAL $(GLOB                        //      convention for describing file manipulation                        //      is:-                        //      D = ddname, a bcpl string holding a file title                        //      S = strpointer, a +ve value used by the library                        //      E = error, a negative result                        //      COS = current output stream                        //      CIS = current input stream                        //      [  ] = type of arguments and result                        //      (   ) = environment used by callSTART           : 1     // rt  entry pointSTOP            : 2     // rt  exitEXITSTATUS      : 3     //  v  exit status returned at finishSYSCOMMAND      : 4     //  v  channel for SYS$COMMANDSYSERROR        : 5     //  v  channel for SYS$ERRORREADREC         : 6     // fn  (chan,ptr,siz,recno)WRITEREC        : 7     // fn  or of (ptr,siz)BINRDCH         : 8     // fn  8 bit characters BINWRCH         : 9     // fn  8 bit character writeFINDINPUT       :10     // fn  creates input stream [D->S,E]FINDOUTPUT      :11     // fn  creates output stream [D->S,E]SETDEF          :12     // rt sets attributes for next findSELECTINPUT     :14     // fn  selects input stream as currentSELECTOUTPUT    :15     // fn  selects output stream as currentSYSIN           :16     //  v  default input stream (KB:/LN:CMI)SYSOUT          :17     //  v  default output stream (KB:/LN:CMO)ENDREAD         :18     // fn  terminate current input; unset selection [(CIS)]ENDWRITE        :19     // fn  terminate current output stream [(COS)]REWIND          :20     // fn  rewinds current input if possible [(CIS)->S,0,E]ENDTOINPUT      :21     // fn  closes current output, and reopens for input [(COS)->S,0,E]RDCH            :22     // fn  read a character from current input [(CIS) ?->CH,ENDSTREAMCH]WRCH            :23     // fn  write a char to current output [(COS) CH->?,EOM]INPUT           :24     // fn  returns currently selected input pointer (or 0)OUTPUT          :25     // fn  returns currently selected output pointer (or 0)UNRDCH          :26     // rt  causes RDCH to return same char as last time [(CIS)]STRINGIO        :27     //  v  channel for string buffer outputSTRINGBUFFER    :28     //  v  integer pointer to buffer stringREADVEC		:29	// rt  reads a vector from input streamWRITEVEC	:30	// rt  writes a vector (addr,#words) to outputCHANGEPHASE     :31     // fn  causes named program to be loaded and enteredGETCOMMAND      :32     // rt  routine to get command parsedGETVEC		:33	// fn  GETVEC(N) returns a vector 0..nFREEVEC		:34	// rt  FREEVEC(V) returns the vector ( from GETVEC)STATUSFILE      :40     // fn  return status of 'file [D->V,E]'DELETEFILE      :41     // fn  delete 'file'; no errors [D->?]RENAMEFILE      :42     // fn  rename file1 as file2 [D1,D2->0,E]PARSEFILE	:43	// rt  (S,V) returns expanded name in VecDATE            :45     // fn  returns date as given bcpl string (v=vec 5) [v->s]TOD             :46     // fn  returns time of day, ditto. (v=vec 5) [v->s]TIME            :50     // fn  returns number of clock half ticks since startLEVEL           :51     // fn  returns P-pointer for use by longjumpLONGJUMP        :52     // rt  causes non-local jumpAPTOVEC         :53     // rt  good old aptovecRBYTE           :54     // fn  takes m/c type addressWBYTE           :55     // rt  dittoPACKSTRING      :56     // fn  pack vec char into stringUNPACKSTRING    :57     // fn  unpack string into vectorCOMPARESTRING   :58     // fn  compares strings a,b giving a<b->-1,a=b->0,1STRINGLENGTH    :59     // fn  returns length in chars of stringSKIPTOEOL       :62     // fn  skip to end of line on CISCOPYTEXT        :63     // fn  copy text from CIS to COS until char metWRITEDATE       :66     // rt  write date on COSWRITETIME       :67     // rt  write time on COSNEWLINE         :70     // rt  prints a newline on current outputWRITEN          :71     // rt  writes a decimal numberWRITED          :72     // rtWRITEHEX        :73     // rt  writes a hex numberWRITEOCT        :74     // rt  writes in octalWRITES          :75     // rt  write a stringWRITEF          :76     // rt  general purpose format driven op rtnREADN           :77     // fn  read a decimal numberTERMINATOR      :78     //  v  terminating char from readnGETBYTE         :80     // fnPUTBYTE         :81     // fn  //// 90-97 reserved for DEBUG addressesDEBUGROUTINE	:98	// rt  a suitable user exit routineUSEREXIT        :98     // rt  user routine called after stop/finishEXCEPTION       :99     // fn  user exception handler established outside start$)GLOBMANIFEST        $(MAN           // SYSTEM MANIFEST CONSTANTSENDSTREAMCH     = -1ENDRECORDCH     = -2BYTESPERWORD    = 4MAXINT          =2147483647$)MAN.