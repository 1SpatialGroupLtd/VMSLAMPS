C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-02 16:23:52.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FLN_RETRIEVE_ALL_FLOWLINES(
     &	   FLOWLINE_ID,		! list of flowlines
     &	   FLOWLINE_PRIORITY,	! list of flowline priorities
     &	   START_ELEM_ID,	! first element in flowline
     &	   END_ELEM_ID,		! last element in flowline
     &	   FLOWLINE_COMPROC,	! flowline command procedure
     &	   COUNT_FLOWLINE)	! count of flowlines
C
***	MODULE FLN_RETRIEVE_ALL_FLOWLINES
***	IDENT 31AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				31 August 1988
C
C Routine to retrieve all (first 1000) FLOWLINEs in the flowline 
C database sorted by FLOWLINE identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	FLOWLINE_ID(FLN_MAX_FLOWLINE)	! FLOWLINEs 
	CHARACTER*(*)	START_ELEM_ID(FLN_MAX_FLOWLINE)	! dirst element
	CHARACTER*(*)	END_ELEM_ID(FLN_MAX_FLOWLINE)	! last element
	CHARACTER*(*)	FLOWLINE_COMPROC(FLN_MAX_FLOWLINE)! com proced's
	INTEGER		FLOWLINE_PRIORITY(FLN_MAX_FLOWLINE)! priority
	INTEGER		COUNT_FLOWLINE		   	! count of flns
C
C Local Variables
	INTEGER		NUM_ERR
C
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_ALL_FLOWLINES = SS$_NORMAL
C
C Initialise counts of errors and FLOWLINEs
C
	NUM_ERR = 0
20	CONTINUE
	COUNT_FLOWLINE = 0
C
C Start transaction to read FLOWLINE information
C
&RDB&	START_TRANSACTION READ_ONLY RESERVING FLOWLINE
&RDB&	FOR SHARED
&RDB&	READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_FLOWLINES = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C Retrieve all the FLOWLINEs
C Only retrieve the first FLN_MAX_FLOWLINE - 1 of them
C Sort by flowline and FLOWLINE id (in that order)
C
&RDB&	FOR FIRST (FLN_MAX_FLOWLINE - 1) F IN FLOWLINE
&RDB&	   SORTED BY F.FLOWLINE_ID
C
C Deal with errors in starting transaction
C
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_RETRIEVE_ALL_FLOWLINES = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C wait and try again - probably deadlock
C
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C Increment count of number of FLOWLINEs
C
	   COUNT_FLOWLINE = COUNT_FLOWLINE + 1
C
C Start retrieving the things we are interested in
C
&RDB&	   GET
C
C Deal with errors in starting GET
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_FLOWLINES = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C And store the FLOWLINE id, priority, start element, end element 
C and command procedure in host variables
C
&RDB&	      FLOWLINE_ID(COUNT_FLOWLINE) = F.FLOWLINE_ID;
&RDB&	      FLOWLINE_COMPROC(COUNT_FLOWLINE) = F.COMMAND_PROC;
&RDB&	      START_ELEM_ID(COUNT_FLOWLINE) = F.START_ELEMENT;
&RDB&	      END_ELEM_ID(COUNT_FLOWLINE) = F.END_ELEMENT;
&RDB&	      FLOWLINE_PRIORITY(COUNT_FLOWLINE) = F.PRIORITY;
&RDB&	   END_GET
&RDB&	END_FOR   
C
C Finish the transaction
C
&RDB&	COMMIT
C
C Exit
C
999	RETURN
	END
