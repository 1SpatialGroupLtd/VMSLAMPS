C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-29 17:13:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_SET_LOCALS(TASK_ID,NUM_PAR,PARAMETERS)
C
***	MODULE	FLN_SET_LOCALS
***	IDENT	29SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Sep-1988
C
C sets up local parameters for a task.
C Applies only to setting local parameters up for the current task - not
C for subsequent tasks - ie it is not called from SESS_COMPLETE.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	TASK_ID			! IN - task	
	INTEGER*4	NUM_PAR			! IN - number of params
	CHARACTER*(*) 	PARAMETERS(FLN_MAX_PAR)	! IN - the parameters
C
C Function
	INTEGER*4	FLN_GET_PARAMETER_ID
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C Local
	INTEGER*4	I
	INTEGER*4	COUNT_TASK
	INTEGER*4	PARAMETER_ID
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_SET_LOCALS  = %LOC(SS$_NORMAL)
C
	COUNT_TASK = 0
C
C first retrieve the parameterid for the tasks in this job 
&RDB&   FOR T IN TASK WITH T.TASK_ID  = TASK_ID
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_LOCALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
	   COUNT_TASK = COUNT_TASK+1
&RDB&      GET
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_LOCALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         PARAMETER_ID = T.PARAMETER_ID;
&RDB&       END_GET
&RDB&   END_FOR
C
	IF (COUNT_TASK .EQ. 0) THEN
	   FLN_SET_LOCALS = FLN__NOSUCHTASK
	ENDIF
	IF (PARAMETER_ID .EQ. -1) THEN		! -1 is missing value
C 
C if the parameterid is missing then it means there are no parameters
C for this task yet - so we need a parameter_id
	    FLN_SET_LOCALS = FLN_GET_PARAMETER_ID(PARAMETER_ID)
	    IF (.NOT. FLN_SET_LOCALS) GOTO 999
C
C modify the task record to put in the parameter_id
&RDB&       FOR T IN TASK WITH T.TASK_ID =TASK_ID
C
&RDB&         ON ERROR
	         FLN_SET_LOCALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         MODIFY T USING
&RDB&            ON ERROR
	            FLN_SET_LOCALS = RDB$STATUS
	            GOTO 999
&RDB&            END_ERROR
&RDB&            T.PARAMETER_ID  = PARAMETER_ID;
&RDB&         END_MODIFY
&RDB&      END_FOR
	ENDIF
C
C now store the parameters in PARAMETER 
	DO 30 I = 1,NUM_PAR
C
&RDB&      STORE PA IN PARAMETER USING
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_LOCALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         PA.PARAMETER_ID = PARAMETER_ID;
&RDB&         PA.PARAMETER_STRING = PARAMETERS(I);
&RDB&       END_STORE
30	CONTINUE
C
	FLN_SET_LOCALS  = RDB$STATUS
999	RETURN
	END
