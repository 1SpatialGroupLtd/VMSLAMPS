C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-18 21:18:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_RESET_JOB_INT(NUM_ELMNT,ELMNT,JOB_ID,
     &                                       NEW_TASK)
C
***	MODULE	FLN_RESET_JOB_INT
***	IDENT	18JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    22-Apr-1988
C
C Routine to reset a job at a particular position(s) in a flowline.
C Positions are defined by elements
C We build up a list of elements for which all corresponding tasks in
C the specified job are deleted, and a list of wires which 
C are all deactivated( ie deleted from WIRE_ACTIVE)
C If NEW_TASK true then set up new tasks for
C the specified elements, and delete the old ones
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	INTEGER*4	NUM_ELMNT		!IN - number of below
	CHARACTER*(*)	ELMNT(FLN_MAX_ELEMENT)	!IN - restart elements
	INTEGER*4	JOB_ID			!IN - the job
	LOGICAL		NEW_TASK		!IN
C
C Common Blocks
C
C Functions
	INTEGER*4	FLN_HAD_TASK	! checks task on element
	INTEGER*4	FLN_GET_FLOWLN	! gets flowline from job
	INTEGER*4	FLN_GET_ALL_WIRES ! gets wires out of element
	INTEGER*4	FLN_GET_WIRE_STATUS !gets status of a wire
	INTEGER*4	FLN_GET_WIRE_ENDS ! gets elements at end of
C					  ! wires
	INTEGER*4	FLN_RESET_UPDATE  !  updates database for reset 
	INTEGER*4	FLN_GET_TASKS	  ! gets task list
	INTEGER*4	FLN_GET_TASKS_JOB ! gets tasks for a job
	INTEGER*4	FLN_GET_SUB_JOBS  ! gets sub jobs of tasks
CCC	INTEGER*4	FLN_HOLD_JOB	  ! hold a job
C
C Local Variables
	INTEGER*4 	COUNT_ELMNT	! count of elements
C					! for which tasks have to be
C					! deleted
	INTEGER*4 	COUNT_WIRE	! count of active wires
C					! which should be deleted
	CHARACTER*20	DEL_ELMNT(FLN_MAX_ELEMENT)
C					! elements for which tasks
C					! must be deleted
	CHARACTER*20	DEL_WIRE(FLN_MAXWIRE)
C					! wires which must be deleted
	INTEGER*4	TASK_DONE       ! count of tasks processed
	INTEGER*4	DEL_JOB(FLN_MAX_JOB) 	! jobs to be deleted
	INTEGER*4	COUNT_JOB	! count of jobs 
	INTEGER*4	DEL_TASK(FLN_MAX_TASK)	! taks to be deleted
	INTEGER*4	COUNT_TASK	
	CHARACTER*20	FLOWLINE_ID	! flowline_id
	CHARACTER*20	WIRE(FLN_MAXWIRE) ! wire array		
	INTEGER*4	NUM_WIRE
	CHARACTER*20	LOC_WIRE(FLN_MAXWIRE) !another wire array
	INTEGER*4	LOC_WIRE_COUNT  ! a local wire count
	INTEGER*4	LOC_JOB(FLN_MAX_JOB) !local job array
	INTEGER*4	LOC_JOB_COUNT  ! a local job count
	INTEGER*4	LOC_TASK(FLN_MAX_TASK)	! local task array
	INTEGER*4	LOC_TASK_COUNT
	CHARACTER*20	LOC_ELEMENT(FLN_MAX_ELEMENT) ! element array
	INTEGER*4	LOC_ELEMENT_COUNT ! local element count
	CHARACTER*20	LOC_DEL_ELMNT(FLN_MAX_ELEMENT) ! element array
	INTEGER*4	LOC_COUNT_ELMNT	! count of elements to delete
C					! for each specified element
	INTEGER*4	LOC_NUM_DONE	! count of elements dealt with
C					! for each specified element
	INTEGER*4	I,J,K,L		! counters
	LOGICAL		HAD_A_TASK	! true if had a task for ele
	LOGICAL		ACTIVE		! true if a wire is active
	LOGICAL		VALID		! true if valid wire
	CHARACTER*20	SUSPECT(2,FLN_MAX_ELEMENT) 
C					! suspect element pairs
	INTEGER*4	COUNT_SUSPECT	! count of suspect elements
C
	COUNT_ELMNT = 0
	COUNT_SUSPECT = 0
C
	DO 10 I = 1,NUM_ELMNT
C
C need to check if we've had a task for this element 
C don't allow resetting operation if we haven't
	   FLN_RESET_JOB_INT = FLN_HAD_TASK(JOB_ID,ELMNT(I),HAD_A_TASK)
	   IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
	   IF (.NOT. HAD_A_TASK) THEN
	      FLN_RESET_JOB_INT = FLN__NOPREVTASK
	      GOTO 140
	   ENDIF
10	CONTINUE
C
C hold the job
C	FLN_RESET_JOB_INT = FLN_HOLD_JOB(JOB_ID)
C	IF (.NOT. FLN_RESET_JOB_INT) GOTO 999
C
C pain in the neck - but have to get the flowline_id from JOB
	FLN_RESET_JOB_INT = FLN_GET_FLOWLN(JOB_ID,FLOWLINE_ID)
	IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
C
	COUNT_WIRE = 0			! no wires yet
C
C now the main loop
C deal with each of the elements specified separately
C 
	DO 70 K = 1, NUM_ELMNT
C
	   LOC_NUM_DONE = 0			! no elements processed
	   LOC_COUNT_ELMNT = 1
	   LOC_DEL_ELMNT(LOC_COUNT_ELMNT) = ELMNT(K)
 
20	   IF (LOC_NUM_DONE .LT. LOC_COUNT_ELMNT) THEN	
	      LOC_NUM_DONE  = LOC_NUM_DONE+1
C
C get the outgoing wires for this element
	      FLN_RESET_JOB_INT = FLN_GET_ALL_WIRES
     &	      (FLOWLINE_ID,LOC_DEL_ELMNT(LOC_NUM_DONE),WIRE,NUM_WIRE)
	      IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
C
C loop for each wire
	      LOC_WIRE_COUNT = 0
	      DO 30 I = 1, NUM_WIRE
C
C see if its active 
	         FLN_RESET_JOB_INT = FLN_GET_WIRE_STATUS
     &	                    (WIRE(I),JOB_ID,FLOWLINE_ID,ACTIVE,VALID)
	         IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
	         IF (ACTIVE) THEN
C
C add to list
C since WIRE(I) are unique, add straight to LOC_WIRE, but prevent
C duplication in DEL_WIRE
	            LOC_WIRE_COUNT = LOC_WIRE_COUNT +1
		    LOC_WIRE(LOC_WIRE_COUNT) = WIRE(I)
		    CALL FLN_ADD_STRING(DEL_WIRE,COUNT_WIRE,WIRE(I))
	         ENDIF
30	      CONTINUE
C
C get the elements at the end of the active wires
	      IF (LOC_WIRE_COUNT .GT. 0) THEN
	         FLN_RESET_JOB_INT = FLN_GET_WIRE_ENDS
     &	        (FLOWLINE_ID,LOC_WIRE,LOC_WIRE_COUNT,
     &	        LOC_ELEMENT,LOC_ELEMENT_COUNT)
C
	         IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
C
	         DO 60 I = 1,LOC_ELEMENT_COUNT
C
C check that element found isn't one of the other ones that 
C have been specified. This indicates that two elements on 
C the same flowline path have been specified. These element 
C pairs are flagged as "suspect" and are checked at the end to
C see if they are really invalid.
		    DO 40 L = 1,NUM_ELMNT
		       IF (L .EQ. K) GOTO 40	!ignore this one
		       IF (LOC_ELEMENT(I) .EQ. ELMNT(L)) THEN
C
C flag this element pair as suspect
			  COUNT_SUSPECT = COUNT_SUSPECT+1
			  SUSPECT(1,COUNT_SUSPECT) = ELMNT(L)
			  SUSPECT(2,COUNT_SUSPECT) = ELMNT(K)
		       ENDIF
40		    CONTINUE
C
C check its not one of the designated elements (if it is, then it will
C be processed in its own right)
		    DO 55 J = 1,NUM_ELMNT
		       IF (LOC_ELEMENT(I) .EQ. ELMNT(J)) GOTO 60
55		    CONTINUE
C
C add to list if not already in it
C this will cover the case of a loop, when we arrive back at the
C one (LOC_DEL_ELMNT(LOC_NUM_DONE), that we are currently working on)
		    CALL FLN_ADD_STRING(
     &			LOC_DEL_ELMNT,LOC_COUNT_ELMNT,LOC_ELEMENT(I))
C
60	         CONTINUE
	      ENDIF
C loop back
	      GOTO 20    
	   ENDIF
C
C append the local list of implicated elements to the list to be deleted
C avoiding any duplicates
C
	   DO 65 I = 1,LOC_COUNT_ELMNT
	      CALL FLN_ADD_STRING(
     &			DEL_ELMNT,COUNT_ELMNT,LOC_DEL_ELMNT(I))
65	   CONTINUE
C
70	CONTINUE
C
C check all the "suspect" element pairs. 
C If any suspect element pairs exist ie. elements which lie on the 
C same flowline path, they are only deemed valid if a path exists
C in both directions. This occurrs in multiple wire loops in flowlines.
C
	DO 90 I = 1,COUNT_SUSPECT
	   DO 80 K = 1,COUNT_SUSPECT
C
C don't check against itself
	      IF (I .EQ. K) GOTO 80
	      IF ((SUSPECT(1,I) .EQ. SUSPECT(2,K)) .AND.
     &            (SUSPECT(1,K) .EQ. SUSPECT(2,I))) GOTO 90
80	   CONTINUE
C
C if we get here then a corresponding pair has not been found so it
C is an invalid reset
	   FLN_RESET_JOB_INT = FLN__BADRESET
	   GOTO 140
90	CONTINUE
C		 
C now get the tasks which are associated with the elments 
	FLN_RESET_JOB_INT = FLN_GET_TASKS(JOB_ID,
     &		COUNT_ELMNT,DEL_ELMNT,DEL_TASK,COUNT_TASK)
C 
C painfully have check for sub-jobs
	TASK_DONE = 0
110	IF (TASK_DONE.LT.COUNT_TASK ) THEN
C
	   TASK_DONE  = TASK_DONE+1
	   FLN_RESET_JOB_INT = FLN_GET_SUB_JOBS
     &	   (DEL_TASK(TASK_DONE),LOC_JOB,LOC_JOB_COUNT)	
	   IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
	   IF (LOC_JOB_COUNT .GT. 0) THEN
	      DO 120 I = 1,LOC_JOB_COUNT
	         COUNT_JOB = COUNT_JOB +1
	         DEL_JOB(COUNT_JOB) =  LOC_JOB(I)
120	      CONTINUE
C
C get all the tasks in the sub-jobS
	      FLN_RESET_JOB_INT = FLN_GET_TASKS_JOB(LOC_JOB_COUNT,LOC_JOB,
     &        LOC_TASK,LOC_TASK_COUNT)
	      DO 130 I = 1,LOC_TASK_COUNT
	         COUNT_TASK= COUNT_TASK+1
	         DEL_TASK(COUNT_TASK) = LOC_TASK(I)
130	      CONTINUE
C
	   ENDIF 
C	
	   GOTO 110
	ENDIF
C
C delete all the tasks, jobs and active wires and setup new tasks
C if necessary
	FLN_RESET_JOB_INT = FLN_RESET_UPDATE(COUNT_TASK,DEL_TASK,
     &  COUNT_JOB,DEL_JOB,COUNT_WIRE,DEL_WIRE,JOB_ID,ELMNT,NUM_ELMNT,
     &	NEW_TASK)
	IF (.NOT. FLN_RESET_JOB_INT) GOTO 140
C
140	RETURN
	END
