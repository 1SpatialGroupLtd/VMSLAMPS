C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-17 18:26:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_COMPLETE_TASK(TASK_ID,SESSION_ID,OUTCOME,
     &				CPU_TIME,NUM_PAR,PARAMETERS,
     &  			NUM_GLOBAL,GLOBALS,NUM_EXT,EXTERNALS)
C
***	MODULE	FLN_COMPLETE_TASK
***	IDENT	17JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Mar-1988
C
C completes a task
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	INTEGER*4	TASK_ID		!IN - task identifier
	INTEGER*4	SESSION_ID	!IN - session identifier
	INTEGER*4	OUTCOME		!IN - task outcome val
	INTEGER*4	CPU_TIME	!IN - CPU time
	INTEGER*4	NUM_PAR		!IN - number of parameters
	CHARACTER*(*)   PARAMETERS(FLN_MAX_PAR) !IN - parameters
	INTEGER*4	NUM_GLOBAL	!IN - number of global params
	CHARACTER*(*)	GLOBALS(FLN_MAX_GLOBAL) !IN - global params
	INTEGER*4	NUM_EXT		!IN - number of external params
	CHARACTER*(*)	EXTERNALS(FLN_MAX_EXT) !IN - external params
C
C
C Functions
	INTEGER*4	FLN_PROCESS_OUTCOME
	INTEGER*4	FLN_GET_TASK_INFO
	INTEGER*4	FLN_COMPLETE_UPDATE
	INTEGER*4	FLN_HAD_TASK
	INTEGER*4	FLN_RESET_JOB_INT
	INTEGER*4	FLN_GET_EXTERNALS
	INTEGER*4	FLN_GET_LOCALS
	INTEGER*4	FLN_SET_LOCALS_TR
C
C Local Variables
	INTEGER*4	TEMP_TASK		
	CHARACTER*20    FLN_ID	
	CHARACTER*20	ELMNT_ID
	INTEGER*4	JOB_ID	
	INTEGER*4	OUTER_TASK
	INTEGER*4	OUT_TASK(FLN_MAX_TASK)! tasks to finish
	INTEGER*4	OUT_OUTCOME(FLN_MAX_TASK)! outcomes
	INTEGER*4	COUNT_TASK	! 
	CHARACTER*20	OUT_ELEMENT(FLN_MAX_ELEMENT)!elements for tasks
	INTEGER*4	COUNT_ELEMENT	! 
	CHARACTER*20	OUT_WIRE(FLN_MAXWIRE) ! wires to set active
	INTEGER*4	COUNT_WIRE	!
	INTEGER*4	OUT_JOB(FLN_MAX_JOB)	!- jobs completed
	INTEGER*4	COUNT_JOB	!
	INTEGER*4	LOC_WIRE_COUNT
	INTEGER*4	LOC_ELEMENT_COUNT
	CHARACTER*20	LOC_ELEMENT(FLN_MAX_ELEMENT)
	CHARACTER*20	LOC_WIRE(FLN_MAXWIRE)
	LOGICAL		JOB_END
	INTEGER*4	I
	INTEGER*4	LOC_NUM_PAR
	CHARACTER*255	LOC_PARAMETERS(FLN_MAX_PAR)
	INTEGER*4	LOC_NUM_OUT
	CHARACTER*20	LOC_OUT(FLN_MAX_PAR)
	INTEGER*4	NUM_ELMNT,NUM_RESET
	CHARACTER*20	RESET_ELMNT(FLN_MAX_ELEMENT)
	CHARACTER*20	NORMAL_ELMNT(FLN_MAX_ELEMENT)
	LOGICAL		HAD_A_TASK
	LOGICAL		NOSESS		! is there a session to finish?
	LOGICAL		FIRST_TIME
	LOGICAL		OUTER_TASK_END
C
C initialise various stuff
	COUNT_ELEMENT =0
	COUNT_JOB = 0
	COUNT_WIRE = 0
	COUNT_TASK = 1
	OUT_TASK(COUNT_TASK) = TASK_ID
	OUT_OUTCOME(COUNT_TASK) = OUTCOME
	NOSESS = (SESSION_ID .EQ. 0 ) 
	LOC_NUM_PAR = NUM_PAR
	LOC_NUM_OUT = 0
	OUTER_TASK_END = .FALSE.
	DO 5 I = 1,LOC_NUM_PAR
	   LOC_PARAMETERS(I) = PARAMETERS(I)
5	CONTINUE
	FIRST_TIME  = .TRUE.
C 
C Start of loop.
C Get various bits of necessary information about the completing task
10	FLN_COMPLETE_TASK = 
     &  FLN_GET_TASK_INFO(OUT_TASK(COUNT_TASK),FLN_ID,ELMNT_ID,JOB_ID)
	IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C Use the outcome value to work out the consequences of this
C task completion
	FLN_COMPLETE_TASK =
     &     FLN_PROCESS_OUTCOME
     &	           (FLN_ID,ELMNT_ID,JOB_ID,OUT_OUTCOME(COUNT_TASK)
     &		   ,OUTER_TASK
     &		   ,LOC_WIRE,LOC_WIRE_COUNT,JOB_END,LOC_ELEMENT,
     &              LOC_ELEMENT_COUNT,OUTER_TASK_END)
	IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C transfer jobs, elements and wires to output arrays
C All this information is stored for the database updating 
C which is carried out later.
	IF (JOB_END) THEN
	   COUNT_JOB = COUNT_JOB+1
	   OUT_JOB(COUNT_JOB) = JOB_ID
C
C if its a sub-job then add external parameters to local parameter list
C of the outer task. The case of the outer task completion is dealt 
C with later
	   IF  ((OUTER_TASK .NE. 0) .AND. (.NOT. OUTER_TASK_END)) THEN 
C
C retrieve external parameters for the sub-job
	      FLN_COMPLETE_TASK= FLN_GET_EXTERNALS
     &        (JOB_ID,LOC_NUM_PAR,LOC_PARAMETERS)
	      IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C 
C if its first time round the loop then add external parameters
C to local parameters of outer task
	      IF (FIRST_TIME) THEN
	         DO 15 I = 1,NUM_EXT
		    LOC_NUM_PAR  = LOC_NUM_PAR + 1
		    LOC_PARAMETERS(LOC_NUM_PAR) = EXTERNALS(I)
15	         CONTINUE
	      ENDIF
C
C set up local parameters for the outer task
C NB - this is a bit naughty - we should really do all
C write transactions within FLN_COMPLETE_UPDATE  to ensure 
C consistency
	      FLN_COMPLETE_TASK =  FLN_SET_LOCALS_TR
     &        (OUTER_TASK,LOC_NUM_PAR,LOC_PARAMETERS)
	      IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C no external parameters now
	      NUM_EXT = 0
C
C no local parameters now
	      LOC_NUM_PAR = 0
	   ENDIF
	ENDIF
	DO 20 I = 1,LOC_WIRE_COUNT
	   COUNT_WIRE = COUNT_WIRE+1
	   OUT_WIRE(COUNT_WIRE) = LOC_WIRE(I)
20	CONTINUE
	DO 30 I = 1,LOC_ELEMENT_COUNT
	   COUNT_ELEMENT = COUNT_ELEMENT+1
	   OUT_ELEMENT(COUNT_ELEMENT) = LOC_ELEMENT(I)
30	CONTINUE
C
	IF ((OUTER_TASK .NE. 0) .AND. (OUTER_TASK_END))THEN
C
C Deal with the situation when the completion of a 
C sub-task(TASKID)  within a sub-job causes the completion of that
C sub-job, which in turn  may require the completion of the main outer
C task (OUTER_TASK).
C
	   COUNT_TASK = COUNT_TASK+1 
	   OUT_TASK(COUNT_TASK)= OUTER_TASK
C
C outcome of tasks which are sub-jobs is always 1
	   OUT_OUTCOME(COUNT_TASK) = 1
C
C Retrieve the external parameters from the inner job.
C These become local parameters of the outer task. 
C Note that we lose any local parameters that may have been passed 
C to this  routine. (or previous external parameters from a previous
C trip round this loop). 
C This doesn't matter because they would be local 
C parameters passed from the last element of the inner job 
C and hence would be meaningless. 
C
	   FLN_COMPLETE_TASK= FLN_GET_EXTERNALS
     &     (JOB_ID,LOC_NUM_PAR,LOC_PARAMETERS)
	   IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C Because this is an outer task - also retrieve the local parameters
C which are associated with it. This is done to allow the sub-job 
C launching element command procedure to set up local parameters
C which are passed on to subsequent elements in the outer job.
	   FLN_COMPLETE_TASK = FLN_GET_LOCALS
     &     (OUTER_TASK,LOC_NUM_OUT,LOC_OUT)
	   IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
C add these to the local parameter list
	   DO 33 I = 1,LOC_NUM_OUT
	      LOC_NUM_PAR = LOC_NUM_PAR+1
	      LOC_PARAMETERS(LOC_NUM_PAR) = LOC_OUT(I)
33	   CONTINUE 
C
	   IF (FIRST_TIME) THEN
C
C If its the first time round this loop then also add any 
C external parameters for this task finishing to the 
C local parameter list of the outer task.
C
	      DO 35 I = 1,NUM_EXT
		 LOC_NUM_PAR  = LOC_NUM_PAR + 1
		 LOC_PARAMETERS(LOC_NUM_PAR) = EXTERNALS(I)
35	      CONTINUE
C
	      FIRST_TIME  = .FALSE.
	   ENDIF
C
C there are now no external parameters 
	   NUM_EXT = 0
C
C loop back to deal with completion of outer task
	   GOTO 10
	ENDIF
C
C Split up the elements into elements which have been done  before and
C therefore require a resetting operation to  ensure that all wires
C which emanate from them are deactivated and  elements which haven't
C been done before.  In practice I don't think you should ever have the
C case when  you get some in one category and some in the other - but
C don't bet  on it.
C
	NUM_RESET = 0
	NUM_ELMNT = 0
	DO 40 I = 1,COUNT_ELEMENT
C
	   FLN_COMPLETE_TASK = FLN_HAD_TASK(JOB_ID,OUT_ELEMENT(I),
     &	   HAD_A_TASK)
           IF (HAD_A_TASK) THEN
	      NUM_RESET= NUM_RESET+1
	      RESET_ELMNT(NUM_RESET) = OUT_ELEMENT(I)
	   ELSE
	      NUM_ELMNT = NUM_ELMNT+1
	      NORMAL_ELMNT(NUM_ELMNT) = OUT_ELEMENT(I)
	   ENDIF
40	CONTINUE	      
C
C now do the necessary database updating in one go
	   FLN_COMPLETE_TASK = FLN_COMPLETE_UPDATE
     &	                    (OUT_TASK,OUT_OUTCOME,COUNT_TASK,
     &			     NORMAL_ELMNT,NUM_ELMNT,
     &			     OUT_WIRE,COUNT_WIRE,
     &			     OUT_JOB,COUNT_JOB,
     &			     SESSION_ID,
     &			     JOB_ID,
     &			     CPU_TIME,
     &			     NOSESS,
     &                       LOC_NUM_PAR,LOC_PARAMETERS,
     &  		     NUM_GLOBAL,GLOBALS,
     &                       NUM_EXT,EXTERNALS)
	   IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
	IF (NUM_RESET .GT. 0) THEN
	   FLN_COMPLETE_TASK=FLN_RESET_JOB_INT(NUM_RESET,RESET_ELMNT,
     &                              JOB_ID ,.TRUE.)
	   IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
	ENDIF
	IF (.NOT. FLN_COMPLETE_TASK) GOTO 999
C
999	RETURN
	END
