	INTEGER*4  FUNCTION FLN_RETRIEVE_SESSION_TIMINGS
     &             (JOB_ID,ELEMENT_ID,COUNT_SESSION,INSTANCE,
     &              OPERATOR,WORKSTATION,CPU_TIME,
     &              START_TIME,START_DAY,FINISH_TIME,FINISH_DAY)
C
***	MODULE	FLN_RETRIEVE_SESSION_TIMINGS
***	IDENT	23SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    14-Sept-1988
C
C Retrieves for specified job/element database timing statistics for all
C SESSIONs within it. 
C Note that information is gathered using SESSION and SESSION_HISTORY
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER*4	NUM_HUNSEC_INDAY ! number of1/100 secs in a day
	PARAMETER	(NUM_HUNSEC_INDAY = 8640000)
	
C
C Arguments
	INTEGER*4	JOB_ID			      ! IN  - project 
	CHARACTER*(*)	ELEMENT_ID		      ! IN  - element
	INTEGER*4	COUNT_SESSION		      ! OUT -
	INTEGER*4	INSTANCE(FLN_MAX_SESS)     ! OUT - index
C						      ! of session
	CHARACTER*(*)	OPERATOR(FLN_MAX_SESS)     ! OUT
	CHARACTER*(*)	WORKSTATION(FLN_MAX_SESS)  ! OUT 
	INTEGER*4	CPU_TIME(FLN_MAX_SESS)     ! OUT - CPU
	INTEGER*4	START_TIME(FLN_MAX_SESS)   ! OUT - SESSION start
	INTEGER*4	START_DAY(FLN_MAX_SESS)    ! OUT 
	INTEGER*4	FINISH_TIME(FLN_MAX_SESS)  ! OUT - SESSION fin
	INTEGER*4	FINISH_DAY(FLN_MAX_SESS)       ! OUT 
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	COUNT_TASK
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_SESSION_TIMINGS = %LOC(SS$_NORMAL)
C
C retrieve all the active PROJECTs with the given project
	NUM_ERR = 0
20	CONTINUE
	COUNT_SESSION=0
	COUNT_TASK=0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING 
&RDB&   SESSION_HISTORY,TASK_HISTORY
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_SESSION_TIMINGS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the SESSIONs - both from SESSION and SESSION_HISTORY
C use nested for loop 
&RDB&   FOR FIRST FLN_MAX_TASK T IN TASK_HISTORY WITH 
&RDB&   T.ELEMENT_ID = ELEMENT_ID AND
&RDB&   T.JOB_ID  = JOB_ID SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_SESSION_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK = COUNT_TASK+1
&RDB&      FOR  FIRST FLN_MAX_SESS S IN SESSION_HISTORY 
&RDB&      WITH S.TASK_ID  = T.TASK_ID
&RDB&      SORTED BY S.SESSION_ID
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_SESSION_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
	      COUNT_SESSION = COUNT_SESSION+1
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_SESSION_TIMINGS = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
C
&RDB&            OPERATOR(COUNT_SESSION) = S.OPERATOR_ID;
&RDB&            WORKSTATION(COUNT_SESSION) = S.WORKSTATION_ID;
&RDB&            START_TIME(COUNT_SESSION) = S.START_TIME;
&RDB&            FINISH_TIME(COUNT_SESSION) = S.FINISH_TIME;
&RDB&            START_DAY(COUNT_SESSION)   = S.START_DATE;
&RDB&            FINISH_DAY(COUNT_SESSION)   = S.FINISH_DATE;
&RDB&            CPU_TIME(COUNT_SESSION) = S.CPU_TIME;
&RDB&         END_GET
	      INSTANCE(COUNT_SESSION) = COUNT_TASK
&RDB&      END_FOR
&RDB&   END_FOR
C
&RDB&   COMMIT
C
999	RETURN
	END
