C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-22 11:10:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION FLN_RETRIEVE_OUTER_INFO_JOB_ID(
     &		INNER_JOB_ID,
     &		FLOWLINE_ID,
     &		FLOWLINE_COMPROC,
     &		ELEMENT_ID,
     &		ELEMENT_COMPROC,
     &		PROC_ID,
     &		PROC_COMPROC,
     &		PROJECT_ID,
     &		PROJECT_COMPROC,
     &		JOB_NAME,
     &		JOB_COMPROC)
C
***	MODULE	FLN_RETRIEVE_OUTER_INFO_JOB_ID
***	IDENT	22SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author JM Billing
C
C 	Created					JMB	21-Sep-1988
C
C Retrieve information from database relating to enclosing flowline,
C element, procedure, project, job etc. for job with job id passed as
C argument.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER		INNER_JOB_ID		! inner job id
	CHARACTER*20	FLOWLINE_ID
	CHARACTER*255	FLOWLINE_COMPROC
	CHARACTER*20	ELEMENT_ID
	CHARACTER*255	ELEMENT_COMPROC
	CHARACTER*20	PROC_ID
	CHARACTER*255	PROC_COMPROC
	CHARACTER*20	PROJECT_ID
	CHARACTER*255	PROJECT_COMPROC
	CHARACTER*20	JOB_NAME
	CHARACTER*255	JOB_COMPROC
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	COUNT_JOB
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_OUTER_INFO_JOB_ID = %LOC(SS$_NORMAL)
C
C Initialise outer info variables to be nulls
C
	FLOWLINE_ID = ' '
	FLOWLINE_COMPROC = ' '
	ELEMENT_ID = ' '
	ELEMENT_COMPROC = ' '
	PROC_ID = ' '
	PROC_COMPROC = ' '
	PROJECT_ID = ' '
	PROJECT_COMPROC = ' '
	JOB_NAME = ' '
	JOB_COMPROC = ' '
C
C Initialise count of errors
C
	NUM_ERR = 0
20	CONTINUE
C
&RDB&   START_TRANSACTION READ_ONLY 
&RDB&	RESERVING TASK,JOB,PROJECT,ELEMENT,FLOWLINE,PROCEDURE
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_OUTER_INFO_JOB_ID = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&      GET
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_OUTER_INFO_JOB_ID = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      COUNT_JOB= COUNT OF J IN JOB
&RDB&      WITH J.JOB_ID = INNER_JOB_ID
&RDB&      END_GET	
	   IF (COUNT_JOB .EQ. 0) THEN
	      FLN_RETRIEVE_OUTER_INFO_JOB_ID = FLN__NOSUCHJOB
&RDB&         ROLLBACK
	      GOTO 999
	   ENDIF
C
C Retrieve the information in which we are interested
C
&RDB&   FOR IJ IN JOB WITH IJ.JOB_ID = INNER_JOB_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_OUTER_INFO_JOB_ID = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C
&RDB&	   FOR FIRST 1
&RDB&	       T  IN TASK CROSS
&RDB&	       E  IN ELEMENT OVER ELEMENT_ID CROSS
&RDB&	       PC IN PROCEDURE OVER PROCEDURE_ID CROSS
&RDB&	       F  IN FLOWLINE OVER FLOWLINE_ID CROSS
&RDB&	       J  IN JOB OVER JOB_ID CROSS
&RDB&	       PJ IN PROJECT OVER PROJECT_ID
&RDB&	   WITH IJ.OUTER_TASK_ID = T.TASK_ID 
C
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_OUTER_INFO_JOB_ID = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
	   	       FLN_RETRIEVE_OUTER_INFO_JOB_ID = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
C
C
&RDB&	         FLOWLINE_ID = F.FLOWLINE_ID;
&RDB&	         FLOWLINE_COMPROC = F.COMMAND_PROC;
&RDB&	         ELEMENT_ID = E.ELEMENT_ID;
&RDB&	         ELEMENT_COMPROC = E.COMMAND_PROC;
&RDB&	         PROC_ID = PC.PROCEDURE_ID;
&RDB&	         PROC_COMPROC = PC.COMMAND_PROC;
&RDB&	         PROJECT_ID = PJ.PROJECT_ID;
&RDB&	         PROJECT_COMPROC = PJ.COMMAND_PROC;
&RDB&	         JOB_NAME = J.JOB_NAME;
&RDB&	         JOB_COMPROC = J.COMMAND_PROC
C
C
&RDB&         END_GET
&RDB&      END_FOR   
&RDB&   END_FOR   
&RDB&   COMMIT
C
999	RETURN
	END
