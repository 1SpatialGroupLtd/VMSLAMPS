C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-19 11:17:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM FLN_TEST
C
***	MODULE	FLN_TEST
***	IDENT	06MY88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    08-Mar-1988
C
C Tests operation of low-level software interface to flowline database
C
	IMPLICIT NONE
C
C Parameters
C
C Arguments
C
C Common Blocks
	INCLUDE	'LSL$CMNLSL:TXTC.CMN'
	INCLUDE	'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE	'LSL$CMNLSL:READSTR.PAR'
	INCLUDE	'LSL$CMNLSL:LSLLIBMSG.PAR'
C
C Functions
	INTEGER*4	TTRSTR
	INTEGER*4	RDCOMM
	INTEGER*4	READSTR
	INTEGER*4	FLN_CREATE_JOB
	INTEGER*4	FLN_START_JOB
	INTEGER*4	FLN_BEGIN_TASK
	INTEGER*4	FLN_SESS_COMPLETE
	INTEGER*4	FLN_SESS_CONTINUE
	INTEGER*4	FLN_SESS_ERROR
	INTEGER*4	FLN_SESS_RESTART
	INTEGER*4	FLN_SESS_OFFLINE
	INTEGER*4	FLN_LIST_AUTHORISED_TASKS
	INTEGER*4	FLN_LIST_OP_AUTH
	INTEGER*4	FLN_HOLD_JOB	
	INTEGER*4	FLN_HOLD_PROJECT	
	INTEGER*4	FLN_HOLD_TASK	
	INTEGER*4	FLN_RELEASE_JOB
	INTEGER*4	FLN_RELEASE_PROJECT
	INTEGER*4	FLN_RELEASE_TASK
	INTEGER*4	FLN_RESET_JOB
	INTEGER*4	FLN_SKIP_TASK
	INTEGER*4	FLN_DELETE_JOB
	INTEGER*4	FLN_DELETE_PROJECT
C
C Local Variables
	EXTERNAL	FLNTST_CMD_TABLE
	INTEGER*4	FLNTST_CMD_TABLE
	INTEGER*4	NCHS(10)		! no characters
	INTEGER*2	PTR			! decoding pointer
	INTEGER*4	CMD			! command number
	INTEGER*4	ERRCOD			! error code
	INTEGER*4	RET
	CHARACTER*20	STR(10)
	INTEGER*4	I
	INTEGER*4	TASK_ID
	INTEGER*4	SESS_ID
	INTEGER*4	JOB_ID
	CHARACTER*20	ELMNT(20)	
	CHARACTER*50    FLOWLINE_COM    ! OUT - project com proc
	CHARACTER*50    PROJECT_COM     ! OUT - project com proc
	CHARACTER*50	JOB_COM		! OUT - job com proc
	CHARACTER*50	ELEMENT_COM	! OUT - element com proc
	CHARACTER*50	PROC_COM	! OUT - procedure com proc
	LOGICAL		STARTED		! OUT - is it started?
	LOGICAL		OFFLINE		! OUT - is it offline task? 
C
C Initialisation
C
	CALL LSL_INIT
	CALL FLN_INIT
C
C get input from terminal
10	TXTPTR = 80
	RET = TTRSTR(,NCHS(1),'FLN_TEST> ',ERRCOD)
	IF(RET) THEN
	   IF(NCHS(1) .EQ. 0) GOTO 10	! blank
	ELSE
	   IF (RET .EQ. LSL__EOF) THEN	! ^Z
	      RET = LSL__NORMAL
	   ELSE
	      CALL LSL_PUTMSG(ERRCOD)
	   ENDIF
	   GOTO 999
	ENDIF
C
	TXTPTR = NCHS(1)
12	CALL BSLN
	CMD = RDCOMM(FLNTST_CMD_TABLE)
	IF (CMD .LE. 0) THEN
	   CALL WRITEF('Bad command')
	   GOTO 10
	ENDIF
C
	GOTO (20,30,40,50,60,70,80,90,100,110,120,130,
     &	      140,150,160,170,180,190,200,210,220,230,240,
     &        250, 260, 270) CMD
C
C ______________________________________________________________________
C CREATE outer_task flowline proj job operator
20	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	NCHS(2) = READSTR(STR(2),,ON_SPACE,,)
	NCHS(3) = READSTR(STR(3),,ON_SPACE,,)
        NCHS(4) = READSTR(STR(4),,ON_SPACE,,)
	RET = FLN_CREATE_JOB
     &  (STR(1)(:NCHS(1)),STR(2)(:NCHS(2)),STR(3)(:NCHS(3)),
     &  INTARG(1),STR(4)(:NCHS(4)),1,JOB_ID,FLOWLINE_COM)
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C LIST_SESSIONS
30	CALL FLN_LIST_SESSION
	GOTO 10
C
C ______________________________________________________________________
C LIST_TASKS job_id
40	CALL FLN_LIST_TASK(INTARG(1))
	GOTO 10
C
C ______________________________________________________________________
C LIST_JOBS project_id
50	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	CALL FLN_LIST_JOB(STR(1)(:NCHS(1)))
	GOTO 10
C
C ______________________________________________________________________
C START  a task operator workstation
60	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	NCHS(2) = READSTR(STR(2),,ON_SPACE,,)
	RET = FLN_BEGIN_TASK
     &  (INTARG(1),STR(1)(:NCHS(1)),STR(2)(:NCHS(2)),SESS_ID,PROJECT_COM
     &   ,PROJECT_COM,JOB_COM,ELEMENT_COM
     &	,PROC_COM,STARTED,OFFLINE)
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C END_COMPLETE
C ends a session with task complete - session outcome cputime
70	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_SESS_COMPLETE(INTARG(1),INTARG(2),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C END_CONTINUE session cpu
C ends a session to be continued
80	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_SESS_CONTINUE
     &	(INTARG(1),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C END_ERROR session cpu
C ends a session to be continued
90	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_SESS_ERROR
     &	(INTARG(1),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C END_RESTART session cpu
C ends a session to be continued
100	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_SESS_RESTART
     &	(INTARG(1),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C START_JOB job_id command proc
110     NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_START_JOB(INTARG(1),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C AUTH_TASK job operator workstation 
120	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	NCHS(2) = READSTR(STR(2),,ON_SPACE,,)
	RET = FLN_LIST_AUTHORISED_TASKS
     &	(STR(1)(:NCHS(1)),STR(2)(:NCHS(2)),INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C END_OFFLINE session cpu
130	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_SESS_OFFLINE
     &	(INTARG(1),STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C LIST_OP_AUTH
140     NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_LIST_OP_AUTH(STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C HOLD_JOB
150	RET = FLN_HOLD_JOB(INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C HOLD_PROJECT
160     NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_HOLD_PROJECT(STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C HOLD_TASK
170	RET = FLN_HOLD_TASK(INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C RELEASE_JOB
180	RET = FLN_RELEASE_JOB(INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C RELEASE_PROJECT
190     NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_RELEASE_PROJECT(STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C RELEASE_TASK
200	RET = FLN_RELEASE_TASK(INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	   GOTO 10
	ENDIF
	GOTO 10
C ______________________________________________________________________
C LIST_SESSION_HISTORY
210	CALL FLN_LIST_SESSION_HIS
	GOTO 10
C
C ______________________________________________________________________
C LIST_TASK_HISTORY
220	CALL FLN_LIST_TASK_HIS
	GOTO 10
C
C ______________________________________________________________________
C LIST_JOB_HISTORY
230	CALL FLN_LIST_JOB_HIS
	GOTO 10
C
C ______________________________________________________________________
C RESET_JOB no_pos job_id element_ids...
240	DO 245 I = 1,INTARG(1)
           NCHS(I) = READSTR(STR(I),,ON_SPACE,,)
	   ELMNT(I) = STR(I)(:NCHS(I))
245	CONTINUE
C
	RET = FLN_RESET_JOB(INTARG(1),ELMNT,INTARG(2))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C SKIP a task task_id outcome
250	RET = FLN_SKIP_TASK(INTARG(1),INTARG(2))	   
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C
C ______________________________________________________________________
C DELETE  a project
260	NCHS(1) = READSTR(STR(1),,ON_SPACE,,)
	RET = FLN_DELETE_PROJECT(STR(1)(:NCHS(1)))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C ______________________________________________________________________
C DELETE  a JOB
270	RET = FLN_DELETE_JOB(INTARG(1))
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(RET)
	ENDIF
	GOTO 10
C
C	
999	CONTINUE
	END
