C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-26 13:29:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION FLN_RETRIEVE_WORK_OPER_TIMINGS
     &             (WORKSTATION_ID,OPERATOR,CPU_TIME,
     &              CONNECT_TIME,
     &              NUM_SESSION,
     &              QUOTIENT,
     &		    NUM_OPERATOR)
C
***	MODULE	FLN_RETRIEVE_WORK_OPER_TIMINGS
***	IDENT	26SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    16-Sep-1988
C
C Retrieves for specified flowline database timing statistics for a
C workstation for all OPERATORs 
C Note that information is gathered using JOB and JOB_HISTORY
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER*4	NUM_HUNSEC_INDAY ! number of1/100 secs in a day
	PARAMETER	(NUM_HUNSEC_INDAY = 8640000)
	
C
C Arguments
	CHARACTER*(*)	WORKSTATION_ID		   ! IN - WORKSTATION
	CHARACTER*(*)	OPERATOR(FLN_MAX_OPER)     ! OUT 
	INTEGER*4	CPU_TIME(FLN_MAX_OPER)     ! OUT - total CPU
	INTEGER*4	CONNECT_TIME(FLN_MAX_OPER) ! OUT - elapsed
	INTEGER*4	NUM_SESSION(FLN_MAX_OPER)  ! OUT - num sess
	INTEGER*4	QUOTIENT(FLN_MAX_OPER)     ! OUT - efficiency
	INTEGER*4	NUM_OPERATOR		      ! OUT 
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	CONTIME(FLN_MAX_OPER) ! OPERATOR 
	INTEGER*4	CONDAY(FLN_MAX_OPER)  ! OPERATOR start/fin
	INTEGER*4	CPU(FLN_MAX_OPER)
	INTEGER*4	COUNT_OPERATOR,I
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_WORK_OPER_TIMINGS = %LOC(SS$_NORMAL)
C
C retrieve all the active PROJECTs with the given project
	NUM_ERR = 0
20	CONTINUE
	NUM_OPERATOR= 0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING 
&RDB&   SESSION_HISTORY,OPERATOR
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the OPERATORs
	COUNT_OPERATOR= 0
&RDB&   FOR  FIRST FLN_MAX_OPER O IN OPERATOR 
&RDB&   SORTED BY O.OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_OPERATOR = NUM_OPERATOR+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         OPERATOR(NUM_OPERATOR) = O.OPERATOR_ID;
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_OPERATOR = 0
C
C CPU statistics
&RDB&   FOR FIRST FLN_MAX_OPER  O IN OPERATOR 
&RDB&   SORTED BY O.OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_OPERATOR =COUNT_OPERATOR+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CPU_TIME(COUNT_OPERATOR) = TOTAL S.CPU_TIME OF S IN 
&RDB&         SESSION_HISTORY 
&RDB&         WITH 
&RDB&         S.OPERATOR_ID = O.OPERATOR_ID 
&RDB&         AND S.WORKSTATION_ID= WORKSTATION_ID AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING AND 
&RDB&         S.FINISH_DATE NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_OPERATOR=0
C
C number of sessions
&RDB&   FOR  FIRST FLN_MAX_OPER O IN OPERATOR 
&RDB&   SORTED BY O.OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_OPERATOR = COUNT_OPERATOR+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the number of sessions
&RDB&         NUM_SESSION(COUNT_OPERATOR) = COUNT OF S IN 
&RDB&         SESSION_HISTORY
&RDB&         WITH S.OPERATOR_ID = O.OPERATOR_ID
&RDB&         AND S.WORKSTATION_ID= WORKSTATION_ID AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING AND 
&RDB&         S.FINISH_DATE NOT MISSING;
C
&RDB&      END_GET
&RDB&   END_FOR
C
C connect time
	COUNT_OPERATOR= 0
&RDB&   FOR FIRST FLN_MAX_OPER  O IN OPERATOR 
&RDB&   SORTED BY O.OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_OPERATOR = COUNT_OPERATOR+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect days
&RDB&         CONDAY(COUNT_OPERATOR) = 
&RDB&         TOTAL (S.FINISH_DATE - S.START_DATE) OF S IN
&RDB&         SESSION_HISTORY 
&RDB&         WITH 
&RDB&         S.OPERATOR_ID = O.OPERATOR_ID AND
&RDB&         S.WORKSTATION_ID = WORKSTATION_ID AND
&RDB&         S.START_TIME NOT MISSING AND S.FINISH_DATE NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.FINISH_TIME
&RDB&         NOT MISSING AND (S.FINISH_TIME GT S.START_TIME OR
&RDB&         S.FINISH_DATE GT S.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_OPERATOR = 0
&RDB&   FOR FIRST FLN_MAX_OPER  O IN OPERATOR 
&RDB&   SORTED BY O.OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_OPERATOR = COUNT_OPERATOR+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WORK_OPER_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME(COUNT_OPERATOR) = 
&RDB&         TOTAL (S.FINISH_TIME - S.START_TIME) OF S IN
&RDB&         SESSION_HISTORY 
&RDB&         WITH 
&RDB&         S.OPERATOR_ID = O.OPERATOR_ID AND 
&RDB&         S.WORKSTATION_ID = WORKSTATION_ID AND
&RDB&         S.START_TIME NOT MISSING AND S.FINISH_DATE NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.FINISH_TIME
&RDB&         NOT MISSING AND (S.FINISH_TIME GT S.START_TIME OR
&RDB&         S.FINISH_DATE GT S.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
&RDB&   COMMIT
C
C collate all the information 
	COUNT_OPERATOR = 0
	DO 30 I = 1,NUM_OPERATOR
C
	   IF (NUM_SESSION(I) .NE. 0) THEN
	      COUNT_OPERATOR = COUNT_OPERATOR+1
C
C work out the connect time in hundredths of seconds
	      CONNECT_TIME(COUNT_OPERATOR) = CONTIME(I)
     &        + (CONDAY(I))
     &        * NUM_HUNSEC_INDAY
	      CPU_TIME(COUNT_OPERATOR) = CPU_TIME(I)
	      NUM_SESSION(COUNT_OPERATOR) = NUM_SESSION(I)
	      OPERATOR(COUNT_OPERATOR) = OPERATOR(I)
	   ENDIF
C 
30	CONTINUE
	NUM_OPERATOR = COUNT_OPERATOR
C
999	RETURN
	END

