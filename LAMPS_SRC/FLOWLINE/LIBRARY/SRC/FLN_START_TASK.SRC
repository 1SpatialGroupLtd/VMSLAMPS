C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-08-02 14:00:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_START_TASK(TASK_ID,STARTED,OFFLINE,
     &	SESSIONID)
C
***	MODULE	FLN_START_TASK
***	IDENT	02AU91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Feb-1988
C
C flags the specified task as active
C NB *** calling routine should have transaction open
C
	IMPLICIT NONE
C
C Parameters
C
C Arguments
	INTEGER*4	TASK_ID		! IN
	LOGICAL		STARTED		! OUT - has this task already 
C					! been started ?
	LOGICAL		OFFLINE		! OUT - is it an offline task
	INTEGER*4	SESSIONID	! OUT - sessionid if offline
C
C Common Blocks
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C function
	INTEGER*4	SIGCHS
C
C Local Variables
	INTEGER*4	RET
	INTEGER*4	NUM_TASK
	INTEGER*4	LEN
	CHARACTER*11	PROGRESS
	CHARACTER*8	TSTAT
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
	STARTED = .FALSE.
	OFFLINE = .FALSE.
	SESSIONID = 0
	NUM_TASK = 0
&RDB&   FOR T IN TASK 
&RDB&   WITH T.TASK_ID = TASK_ID AND
&RDB&   (T.TASK_STATUS ="Inactive" OR T.TASK_STATUS = "Offline") 
&RDB&	   ON ERROR
	      FLN_START_TASK = RDB$STATUS
	      GOTO 999
&RDB&	   END_ERROR
&RDB&      FOR J IN JOB CROSS P IN PROJECT OVER PROJECT_ID
&RDB&      WITH T.JOB_ID  = J.JOB_ID
&RDB&      AND J.JOB_STATUS = "Active" AND P.PROJECT_STATUS ="Active"
&RDB&	      ON ERROR
	         FLN_START_TASK = RDB$STATUS
	         GOTO 999
&RDB&	      END_ERROR
&RDB&         GET 
C if its a deadlock then retry after waiting
&RDB&	         ON ERROR
	            FLN_START_TASK = RDB$STATUS
	            GOTO 999
&RDB&	         END_ERROR
&RDB&            PROGRESS = T.PROGRESS_STATUS;
&RDB&            TSTAT = T.TASK_STATUS
&RDB&         END_GET
	      LEN = SIGCHS(PROGRESS)
	      IF (PROGRESS(:LEN) .EQ. 'Started') THEN
	         STARTED  = .TRUE.
	      ENDIF
	      LEN = SIGCHS(TSTAT)
	      IF (TSTAT(:LEN) .EQ. 'Offline') THEN
	         OFFLINE = .TRUE.
	      ENDIF
C	
	      NUM_TASK = NUM_TASK+1
&RDB&         MODIFY T USING
C
C if its a deadlock then retry after waiting
&RDB&	         ON ERROR
	            FLN_START_TASK = RDB$STATUS
	            GOTO 999
&RDB&	         END_ERROR
&RDB&            T.TASK_STATUS  = "Active";
&RDB&            T.PROGRESS_STATUS = "Started";
&RDB&         END_MODIFY
&RDB&      END_FOR
&RDB&   END_FOR
C
	IF(NUM_TASK .EQ. 0) THEN
	   FLN_START_TASK = FLN__NOTSKAVLBLE
	ELSE
	   FLN_START_TASK = RDB$STATUS
	ENDIF
C
	IF (.NOT. OFFLINE) GOTO 999
C
C get the sessionid of offline task
&RDB&   FOR S IN SESSION
&RDB&   WITH S.TASK_ID = TASK_ID AND S.SESS_STATUS MISSING
&RDB&	   ON ERROR
	      FLN_START_TASK = RDB$STATUS
	      GOTO 999
&RDB&	   END_ERROR
&RDB&      GET
&RDB&	      ON ERROR
	         FLN_START_TASK = RDB$STATUS
	         GOTO 999
&RDB&	      END_ERROR
&RDB&         SESSIONID  = S.SESSION_ID
&RDB&      END_GET
&RDB&   END_FOR
999	RETURN
	END
