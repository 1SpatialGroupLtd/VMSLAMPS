C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-26 19:15:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C

	INTEGER*4  FUNCTION FLN_RETRIEVE_PROJECT_TIMINGS
     &             (PROJECT,NUM_PROJECT,CPU_TIME,CONNECT_TIME,
     &              START_TIME,START_DAY,NUM_JOB)
C
***	MODULE	FLN_RETRIEVE_PROJECT_TIMINGS
***	IDENT	26SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    13-Sep-1988
C
C Retrieves for all projects in the database timing statistics for all
C jobs and tasks carried out within it
C This routine appears far more complex than it might have been because
C of an rdb "exceeded context quota" error, and because of speed 
C considerations.
C Note that information is gathered using JOB and JOB_HISTORY
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER*4	NUM_HUNSEC_INDAY ! number of1/100 secs in a day
	PARAMETER	(NUM_HUNSEC_INDAY = 8640000)
C
C Arguments
	CHARACTER*(*)	PROJECT(FLN_MAX_PROJECT)      ! OUT - projects 
	INTEGER*4	NUM_PROJECT		      ! OUT - count
	INTEGER*4	CPU_TIME(FLN_MAX_PROJECT)     ! OUT - total CPU
	INTEGER*4	CONNECT_TIME(FLN_MAX_PROJECT) ! OUT - elapsed
	INTEGER*4	START_TIME(FLN_MAX_PROJECT)   ! OUT - proj start
	INTEGER*4	START_DAY(FLN_MAX_PROJECT)    ! OUT 
	INTEGER*4	NUM_JOB(FLN_MAX_PROJECT)      ! OUT - num jobs 
C						      !       in project
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	CONTIME_H(FLN_MAX_PROJECT) ! JOB_HISTORY 
	INTEGER*4	CONDAY_H(FLN_MAX_PROJECT)  ! JOB_HISTORY 
	INTEGER*4	CONTIME_J(FLN_MAX_PROJECT) ! JOB 
	INTEGER*4	CONDAY_J(FLN_MAX_PROJECT)  ! JOB start/fin
	INTEGER*4	CPU_J(FLN_MAX_PROJECT),CPU_H(FLN_MAX_PROJECT)
	INTEGER*4	NJOB_H(FLN_MAX_PROJECT),NJOB_J(FLN_MAX_PROJECT)	
	INTEGER*4	COUNT_PROJECT,I
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_PROJECT_TIMINGS = %LOC(SS$_NORMAL)
C
C retrieve all the active PROJECTs with the given project
	NUM_ERR = 0
20	CONTINUE
	NUM_PROJECT  = 0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING PROJECT,
&RDB&   JOB,JOB_HISTORY,TASK,TASK_HISTORY,SESSION,SESSION_HISTORY
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the PROJECTs and timings 
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_PROJECT= NUM_PROJECT+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         PROJECT(NUM_PROJECT) = P.PROJECT_ID;
&RDB&      END_GET
&RDB&   END_FOR
C
C Use JOB_HISTORY
C CPU time
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT=COUNT_PROJECT+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CPU_H(COUNT_PROJECT) = TOTAL S.CPU_TIME OF S IN 
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB_HISTORY OVER 
&RDB&         JOB_ID WITH J.PROJECT_ID  = P.PROJECT_ID AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
C get all the same stuff but using JOB instead of JOB_HISTORY
C still using TASK_HISTORY and SESSION_HISTORY ie we don't use 
C current tasks or sessions
C CPU time
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT=COUNT_PROJECT+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CPU_J(COUNT_PROJECT) = TOTAL S.CPU_TIME OF S IN 
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB OVER 
&RDB&         JOB_ID WITH 
&RDB&         J.PROJECT_ID = P.PROJECT_ID AND S.CPU_TIME NOT MISSING
&RDB&         AND S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
C start and finish times
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT=COUNT_PROJECT+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the starting time and day of the PROJECT
&RDB&         START_TIME(COUNT_PROJECT) = P.START_TIME;
&RDB&         START_DAY(COUNT_PROJECT) = P.START_DATE;
&RDB&     END_GET
&RDB&   END_FOR
C
C number of jobs
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT= COUNT_PROJECT+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the number of jobs in JOB_HISTORY
&RDB&         NJOB_H(COUNT_PROJECT) =  COUNT OF J IN JOB_HISTORY 
&RDB&         WITH J.PROJECT_ID  = 
&RDB&         P.PROJECT_ID;
C
C get the number of jobs in JOB
&RDB&         NJOB_J(COUNT_PROJECT)=COUNT OF J IN JOB WITH J.PROJECT_ID 
&RDB&         =P.PROJECT_ID;
&RDB&      END_GET
&RDB&   END_FOR
C
C connect time
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT= COUNT_PROJECT+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect days
&RDB&         CONDAY_H(COUNT_PROJECT) = 
&RDB&         TOTAL (S.FINISH_DATE - S.START_DATE) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB_HISTORY OVER 
&RDB&         JOB_ID WITH 
&RDB&         J.PROJECT_ID = P.PROJECT_ID AND S.FINISH_TIME NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.START_TIME 
&RDB&         NOT MISSING AND S.FINISH_DATE NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT= COUNT_PROJECT+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME_H(COUNT_PROJECT) = 
&RDB&         TOTAL (S.FINISH_TIME - S.START_TIME) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB_HISTORY OVER 
&RDB&         JOB_ID WITH
&RDB&         J.PROJECT_ID = P.PROJECT_ID AND S.FINISH_DATE NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.START_TIME 
&RDB&         NOT MISSING AND S.FINISH_TIME NOT MISSING AND 
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
C connect days
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT= COUNT_PROJECT+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CONDAY_J(COUNT_PROJECT) = 
&RDB&         TOTAL (S.FINISH_DATE - S.START_DATE) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB OVER 
&RDB&         JOB_ID WITH 
&RDB&         J.PROJECT_ID = P.PROJECT_ID AND S.FINISH_TIME NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.START_TIME 
&RDB&         NOT MISSING AND S.FINISH_DATE NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_PROJECT  = 0
&RDB&   FOR  FIRST FLN_MAX_PROJECT P IN PROJECT SORTED BY P.PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_PROJECT= COUNT_PROJECT+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_PROJECT_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME_J(COUNT_PROJECT) = 
&RDB&         TOTAL (S.FINISH_TIME - S.START_TIME) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID CROSS J IN JOB OVER 
&RDB&         JOB_ID WITH 
&RDB&         J.PROJECT_ID = P.PROJECT_ID AND S.FINISH_DATE NOT
&RDB&         MISSING AND S.START_DATE NOT MISSING AND S.START_TIME 
&RDB&         NOT MISSING AND S.FINISH_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE);
C
&RDB&      END_GET
&RDB&   END_FOR
C
C
&RDB&   COMMIT
C
C collate all the information 
	DO 30 I = 1,NUM_PROJECT
C
C CPU
	   CPU_TIME(I) = CPU_H(I) + CPU_J(I)
C
C number of jobs
	   NUM_JOB(I) = NJOB_J(I) + NJOB_H(I)
C
C work out the connect time in hundredths of seconds
	   CONNECT_TIME(I) = CONTIME_H(I) + CONTIME_J(I)
     &        + (CONDAY_H(I) + CONDAY_J(I))
     &        * NUM_HUNSEC_INDAY
C 
30	CONTINUE
999	RETURN
	END
