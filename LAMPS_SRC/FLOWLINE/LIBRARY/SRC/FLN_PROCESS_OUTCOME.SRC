	INTEGER*4 FUNCTION FLN_PROCESS_OUTCOME
     &	           (FLN_ID,ELMNT_ID,JOB_ID,OUTCOME,OUTER_TASK
     &		   ,WIRE,NUM_WIRE,JOB_END,READYS,NUM_READY,
     &              OUTER_TASK_END)
C
***	MODULE	FLN_PROCESS_OUTCOME
***	IDENT	06OC88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Feb-1988
C
C deals with the ramifications of a task being completed
C will return normal successful completion if OK
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	CHARACTER*(*)	FLN_ID		! IN - flowline
	INTEGER*4	JOB_ID		! IN - job
	CHARACTER*(*)   ELMNT_ID	! IN - element
	INTEGER*4	OUTCOME		! IN - outcome value
	INTEGER*4	OUTER_TASK	! OUT - calling task
	CHARACTER*20	WIRE(FLN_MAXWIRE) ! OUT - wires to activate
	INTEGER*4	NUM_WIRE	  ! OUT - number of them
	LOGICAL		JOB_END		  ! OUT -true if job complete
	CHARACTER*20	READYS(FLN_MAX_ELEMENT) ! OUT - ready elements
	INTEGER*4	NUM_READY	  ! OUT - number of them
	LOGICAL		OUTER_TASK_END	  ! OUT - is the outer
C					  !       task finished
C
C
C Common Blocks
	INCLUDE	'LSL$CMNFLOWLINE:WIRE.CMN'
C
C Functions
	INTEGER*4	FLN_END_FLOWLINE
	INTEGER*4	FLN_END_SUB_JOB
	INTEGER*4	FLN_GET_WIRE_ENDS
	INTEGER*4	FLN_GET_READYS
	INTEGER*4	FLN_GET_WIRES
C
C Local Variables
	CHARACTER*20	NEXT_ELEMENT(FLN_MAXWIRE)
	INTEGER*4	NUM_NEXT
	INTEGER*4	I
	LOGICAL		IS_END
C
	FLN_PROCESS_OUTCOME = %LOC(SS$_NORMAL)
	OUTER_TASK = 0
	JOB_END = .FALSE.
C 
C get the wires which are affected by the completion of the element
	FLN_PROCESS_OUTCOME = 
     &  FLN_GET_WIRES(FLN_ID,ELMNT_ID,OUTCOME,WIRE,NUM_WIRE)
	IF (.NOT. FLN_PROCESS_OUTCOME) GOTO 999
C
C set these wires as active in the WIRE common block so that 
C GET_WIRE_STATUS will see them even altho' they are not yet 
C active in the database
	NUM_CWIRE = NUM_WIRE
	DO 10 I = 1,NUM_WIRE
	   C_WIRE(I) = WIRE(I)
10	CONTINUE
C
C get the elements at the end of our wires
	FLN_PROCESS_OUTCOME  = FLN_GET_WIRE_ENDS
     &     (FLN_ID,WIRE,NUM_WIRE,NEXT_ELEMENT,NUM_NEXT)
	IF (.NOT. FLN_PROCESS_OUTCOME) GOTO 999
C
C look at these elements and see if initial conditions are such that 
C a task may be created in the TASK relation
        FLN_PROCESS_OUTCOME = 
     &	FLN_GET_READYS(NEXT_ELEMENT,NUM_NEXT,FLN_ID,JOB_ID,
     &  READYS,NUM_READY)
	IF (.NOT. FLN_PROCESS_OUTCOME) GOTO 999
C
C check if the final element in the flowline has been reached
	DO 20 I = 1,NUM_READY
	   FLN_PROCESS_OUTCOME = 
     &      FLN_END_FLOWLINE(READYS(I),FLN_ID,IS_END)
	   IF (.NOT. FLN_PROCESS_OUTCOME) GOTO 999 
	   IF(IS_END) JOB_END = .TRUE.
20	CONTINUE
	IF (JOB_END ) THEN
	   IF( NUM_READY .GT.1) THEN
C
C there should only be one final element
	      FLN_PROCESS_OUTCOME = FLN__INVALEND
	      GOTO 999
	   ELSE
C
C check for it being a sub-job
C OUTER_TASK non-zero if it is 
	      FLN_PROCESS_OUTCOME = FLN_END_SUB_JOB
     &        (JOB_ID,OUTER_TASK,OUTER_TASK_END)
	       IF (.NOT. FLN_PROCESS_OUTCOME) GOTO 999
	       NUM_READY = 0
	   ENDIF
	ENDIF
C
999	RETURN
	END
