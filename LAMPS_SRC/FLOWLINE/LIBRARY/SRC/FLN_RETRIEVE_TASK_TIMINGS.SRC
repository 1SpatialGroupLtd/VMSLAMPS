C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-26 19:16:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION FLN_RETRIEVE_TASK_TIMINGS
     &             (JOB_ID,ELEMENT,NUM_TASK,CPU_TIME,CONNECT_TIME,
     &              START_TIME,START_DAY,FINISH_TIME,FINISH_DAY,
     &		    NUM_SESS)
C
***	MODULE	FLN_RETRIEVE_TASK_TIMINGS
***	IDENT	26SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    13-Sept-1988
C
C Retrieves for specified job database timing statistics for all
C tasks  in TASK_HISTORY. Timing statistics are obtained from 
C SESSION_HISTORY. Cumulative times (CPU and connect) 
C only use those session records  which are complete. 
C NUM_SESS also includes those sessions which are not complete.
C Start and finish dates and times also include session records
C which may be incomplete. These will then manifest themselves as
C "unset" on the output report.
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER*4	NUM_HUNSEC_INDAY ! number of1/100 secs in a day
	PARAMETER	(NUM_HUNSEC_INDAY = 8640000)
	
C
C Arguments
	INTEGER*4	JOB_ID			      ! IN  - project 
	CHARACTER*(*)	ELEMENT(FLN_MAX_TASK)	      ! OUT - TASKs
	INTEGER*4	NUM_TASK		      	      ! OUT - 
	integer*4	CPU_H(FLN_MAX_TASK)
	INTEGER*4	CPU_TIME(FLN_MAX_TASK)         ! OUT - total CPU
	INTEGER*4	CONNECT_TIME(FLN_MAX_TASK)     ! OUT - elapsed
	INTEGER*4	START_TIME(FLN_MAX_TASK)       ! OUT - TASK start
	INTEGER*4	START_DAY(FLN_MAX_TASK)        ! OUT 
	INTEGER*4	FINISH_TIME(FLN_MAX_TASK)      ! OUT - TASK finish
	INTEGER*4	FINISH_DAY(FLN_MAX_TASK)       ! OUT 
	INTEGER*4	NUM_SESS(FLN_MAX_TASK)         ! OUT - num sess
C						      !  in TASK
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	CONTIME_H(FLN_MAX_TASK) ! TASK_HISTORY 
	INTEGER*4	CONDAY_H(FLN_MAX_TASK)  ! TASK_HISTORY 
	INTEGER*4	NSESS_H(FLN_MAX_TASK),NSESS_J(FLN_MAX_TASK)	
	INTEGER*4	COUNT_TASK,I
	INTEGER*4	TASK_T(FLN_MAX_TASK)
	INTEGER*4	TASK_H(FLN_MAX_TASK)
	INTEGER*4	NUM_TASK_H,NUM_TASK_T
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_TASK_TIMINGS = %LOC(SS$_NORMAL)
C
C retrieve all the active PROJECTs with the given project
	NUM_ERR = 0
20	CONTINUE
	NUM_TASK_H = 0
	NUM_TASK_T = 0
	NUM_TASK=0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING 
&RDB&   TASK_HISTORY,SESSION_HISTORY
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the tasks - both from TASK and TASK_HISTORY
	COUNT_TASK= 0
C
C cross with SESSION_HISTORY to ensure that we don't get any skipped 
C tasks - ie those with no sessions - need REDUCED TO clause so that 
C we only get the tasks once if they have more than one session
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID  = JOB_ID REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_TASK_H= NUM_TASK_H+1
	   NUM_TASK = NUM_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         ELEMENT(NUM_TASK) = T.ELEMENT_ID;
&RDB&         TASK_H(NUM_TASK_H) = T.TASK_ID
&RDB&      END_GET
&RDB&   END_FOR
C
C
	COUNT_TASK= 0
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID = JOB_ID REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK=COUNT_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C only include completed session records in totals
&RDB&         CPU_H(COUNT_TASK) = TOTAL SE.CPU_TIME OF SE IN 
&RDB&         SESSION_HISTORY CROSS TA IN
&RDB&         TASK_HISTORY OVER
&RDB&         TASK_ID WITH 
&RDB&         TA.TASK_ID = T.TASK_ID AND 
&RDB&         SE.CPU_TIME NOT MISSING AND
&RDB&         SE.START_TIME NOT MISSING AND
&RDB&         SE.START_DATE NOT MISSING AND
&RDB&         SE.FINISH_TIME NOT MISSING AND 
&RDB&         SE.FINISH_DATE NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
C start and finish times
	COUNT_TASK = 0
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID =  JOB_ID  REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK=COUNT_TASK+1
&RDB&      FOR FIRST 1 SE IN SESSION_HISTORY WITH SE.TASK_ID = T.TASK_ID
&RDB&         SORTED BY SE.SESSION_ID
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&            START_TIME(COUNT_TASK) = SE.START_TIME;
&RDB&            START_DAY(COUNT_TASK) = SE.START_DATE;
&RDB&        END_GET
&RDB&      END_FOR
&RDB&      FOR FIRST 1 SE IN SESSION_HISTORY WITH SE.TASK_ID = T.TASK_ID
&RDB&         SORTED BY DESCENDING SE.SESSION_ID
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&            FINISH_TIME(COUNT_TASK) = SE.FINISH_TIME;
&RDB&            FINISH_DAY(COUNT_TASK) = SE.FINISH_DATE;
&RDB&        END_GET
&RDB&      END_FOR
&RDB&   END_FOR
C
C number of sessions
	COUNT_TASK= 0
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID = JOB_ID REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK= COUNT_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the number of sessions
&RDB&         NSESS_H(COUNT_TASK) =  COUNT OF SE IN SESSION_HISTORY 
&RDB&         WITH SE.TASK_ID  = T.TASK_ID; 
C
&RDB&      END_GET
&RDB&   END_FOR
C
C connect time
	COUNT_TASK= 0
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID = JOB_ID  REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK= COUNT_TASK+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect days
&RDB&         CONDAY_H(COUNT_TASK) = 
&RDB&         TOTAL (SE.FINISH_DATE - SE.START_DATE) OF SE IN
&RDB&         SESSION_HISTORY CROSS TA IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         WITH 
&RDB&         TA.TASK_ID = T.TASK_ID AND 
&RDB&         SE.FINISH_DATE NOT MISSING AND
&RDB&         SE.CPU_TIME NOT MISSING AND 
&RDB&         SE.START_TIME NOT MISSING AND 
&RDB&         SE.START_DATE NOT MISSING AND 
&RDB&         SE.FINISH_TIME NOT MISSING AND 
&RDB&         (SE.FINISH_TIME GT SE.START_TIME OR
&RDB&         SE.FINISH_DATE GT SE.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
C
	COUNT_TASK= 0
&RDB&   FOR  FIRST FLN_MAX_TASK T IN TASK_HISTORY 
&RDB&   CROSS S IN SESSION_HISTORY OVER TASK_ID
&RDB&   WITH T.JOB_ID = JOB_ID  REDUCED TO T.TASK_ID
&RDB&      SORTED BY T.TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK = COUNT_TASK+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME_H(COUNT_TASK)
&RDB&          = TOTAL (SE.FINISH_TIME - SE.START_TIME)  OF SE 
&RDB&         IN SESSION_HISTORY CROSS TA IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         WITH 
&RDB&         TA.TASK_ID = T.TASK_ID AND 
&RDB&         SE.FINISH_DATE NOT MISSING AND
&RDB&         SE.CPU_TIME NOT MISSING AND 
&RDB&         SE.START_TIME NOT MISSING AND 
&RDB&         SE.START_DATE NOT MISSING AND 
&RDB&         SE.FINISH_TIME NOT MISSING AND 
&RDB&         (SE.FINISH_TIME GT SE.START_TIME OR SE.FINISH_DATE 
&RDB&          GT SE.START_DATE);
&RDB&      END_GET
&RDB&   END_FOR
C
&RDB&   COMMIT
C
C collate all the information 
C CPU
	DO 130 I = 1,NUM_TASK
	   CPU_TIME(I) = CPU_H(I) 
C
C number of TASKs
	   NUM_SESS(I) = NSESS_H(I)
C
C work out the connect time in hundredths of seconds
	   CONNECT_TIME(I) = CONTIME_H(I) 
     &        + (CONDAY_H(I))
     &        * NUM_HUNSEC_INDAY
C 
130	CONTINUE
999	RETURN
	END
