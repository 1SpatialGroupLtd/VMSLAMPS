C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-06 17:11:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_DEFINE_FLOWLINE
     &	(FLOWLINE_ID,START_ELEMENT,
     &  END_ELEMENT,COMMAND_PROC,PRIORITY,DELETE_ONLY)
C
***	MODULE	FLN_DEFINE_FLOWLINE
***	IDENT	06OC88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    06-Sep-1988
C
C defines the flowline in the database
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	CHARACTER*(*)   FLOWLINE_ID	! IN - flowline id
	CHARACTER*(*)	START_ELEMENT	! IN - starting element
	CHARACTER*(*)	END_ELEMENT	! IN - ending element
	CHARACTER*(*)	COMMAND_PROC	! IN - command file spec
	INTEGER*4	PRIORITY	! IN - priority
	LOGICAL		DELETE_ONLY	! IN - true if only to delete
C
C function
	INTEGER*4	FLN_REMOVE_SPACES
C locals
	CHARACTER*20	NEW_FLOWLINE_ID
	CHARACTER*20	NEW_START_ELEMENT
	CHARACTER*20	NEW_END_ELEMENT
	INTEGER*4	NUM_ERR
	INTEGER*4	S_LENGTH,E_LENGTH,F_LENGTH	! string lengths
	INTEGER*4	I
	INTEGER*4	NUM_FLOWLINE
C 
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C
C check for spaces in names
	FLN_DEFINE_FLOWLINE= 
     &  FLN_REMOVE_SPACES(FLOWLINE_ID,NEW_FLOWLINE_ID,F_LENGTH)
	IF(.NOT. FLN_DEFINE_FLOWLINE) GOTO 999 
	IF(DELETE_ONLY) GOTO 20
	FLN_DEFINE_FLOWLINE= 
     &  FLN_REMOVE_SPACES(START_ELEMENT,NEW_START_ELEMENT,S_LENGTH)
	IF(.NOT. FLN_DEFINE_FLOWLINE) GOTO 999 
	FLN_DEFINE_FLOWLINE= 
     &  FLN_REMOVE_SPACES(END_ELEMENT,NEW_END_ELEMENT,E_LENGTH)
	IF(.NOT. FLN_DEFINE_FLOWLINE) GOTO 999 
C validate priority
	IF (PRIORITY .LT. 1 .OR. PRIORITY .GT. 16) THEN
	    FLN_DEFINE_FLOWLINE= FLN__ILLEGPRI
	    GOTO 999
	ENDIF
C
	NUM_ERR = 0
20	CONTINUE
	NUM_FLOWLINE = 0
C	
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING FLOWLINE FOR 
&RDB&   PROTECTED WRITE
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_DEFINE_FLOWLINE = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
C
C delete any existing elements with the given spec
&RDB&   FOR F IN FLOWLINE WITH
&RDB&   F.FLOWLINE_ID = NEW_FLOWLINE_ID(1:F_LENGTH) 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_FLOWLINE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
	   NUM_FLOWLINE = NUM_FLOWLINE+1
&RDB&      ERASE F
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_FLOWLINE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&   END_FOR
C
	IF (DELETE_ONLY) THEN
	   IF (NUM_FLOWLINE .LT. 1) THEN
	      FLN_DEFINE_FLOWLINE = FLN__NOSUCHFLN
&RDB&         COMMIT
	      GOTO 999
	   ENDIF
	   GOTO 990
	ENDIF
C
C define the element
&RDB&   STORE F IN FLOWLINE USING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_FLOWLINE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&      F.FLOWLINE_ID = NEW_FLOWLINE_ID(1:F_LENGTH);
&RDB&      F.START_ELEMENT = NEW_START_ELEMENT(1:S_LENGTH);
&RDB&      F.END_ELEMENT = NEW_END_ELEMENT(1:E_LENGTH);
&RDB&      F.PRIORITY = PRIORITY;
&RDB&      F.COMMAND_PROC = COMMAND_PROC;
&RDB&   END_STORE
C
990	CONTINUE
&RDB&   COMMIT
	FLN_DEFINE_FLOWLINE = RDB$STATUS
999	RETURN
	END
