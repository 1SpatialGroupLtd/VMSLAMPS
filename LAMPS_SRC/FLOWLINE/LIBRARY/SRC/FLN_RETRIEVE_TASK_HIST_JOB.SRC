	INTEGER*4  FUNCTION FLN_RETRIEVE_TASK_HIST_JOB
     &             (JOB_ID,ELEMENT,COUNT_TASK)
C
***	MODULE	FLN_RETRIEVE_TASK_HIST_JOB
***	IDENT	27SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    17-May-1988
C
C Retrieves all TASKS in a JOB from the database - 
C together with associated information
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	JOB_ID			! IN - job
	CHARACTER*(*)	ELEMENT(FLN_MAX_TASK)	! elements 
	INTEGER*4	COUNT_TASK		! count of JOBS
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	COUNT_JOB_H,COUNT_JOB_J
	LOGICAL		FOUND
	CHARACTER*20	TEMP
	INTEGER*4	I
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_TASK_HIST_JOB = %LOC(SS$_NORMAL)
C
C retrieve all the active TASKS with the given JOB
	NUM_ERR = 0
20	CONTINUE
	COUNT_TASK  = 0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING JOB,TASK_HISTORY,
&RDB&   JOB_HISTORY,SESSION_HISTORY FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_HIST_JOB = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&      GET
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_HIST_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      COUNT_JOB_H = COUNT OF J IN JOB
&RDB&      WITH J.JOB_ID =JOB_ID;
&RDB&      COUNT_JOB_J = COUNT OF J IN JOB_HISTORY
&RDB&      WITH J.JOB_ID = JOB_ID
&RDB&      END_GET	
	   IF ((COUNT_JOB_H .EQ. 0) .AND. (COUNT_JOB_J .EQ. 0)) THEN
	      FLN_RETRIEVE_TASK_HIST_JOB = FLN__NOSUCHJOB
&RDB&         ROLLBACK
	      GOTO 999
	   ENDIF
C
C retrieve all the TASKS that have sessions
&RDB&   FOR T IN TASK_HISTORY  WITH T.JOB_ID = JOB_ID
&RDB&      AND ANY S IN SESSION_HISTORY
&RDB&      WITH S.TASK_ID  = T.TASK_ID
&RDB&      REDUCED TO T.ELEMENT_ID 
&RDB&      SORTED BY T.ELEMENT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASK_HIST_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASK_HIST_JOB = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         TEMP = T.ELEMENT_ID;
&RDB&      END_GET
C
C make sure we have no duplicates
	   FOUND  = .FALSE.
	   DO 30 I = 1,COUNT_TASK
	      IF (TEMP .EQ. ELEMENT(I))THEN
		 FOUND = .TRUE.
		 GOTO 35
	      ENDIF
30	   CONTINUE 
35	   IF (.NOT.FOUND) THEN
	      COUNT_TASK = COUNT_TASK+1
	      ELEMENT(COUNT_TASK) = TEMP
	   ENDIF
&RDB&   END_FOR   
&RDB&   COMMIT
C
999	RETURN
	END
