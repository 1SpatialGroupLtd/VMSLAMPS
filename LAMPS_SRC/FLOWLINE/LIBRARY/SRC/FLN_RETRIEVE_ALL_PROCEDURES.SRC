C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-02 13:42:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FLN_RETRIEVE_ALL_PROCEDURES(
     &		PROCEDURE_ID,
     &		PROCEDURE_COMPROC,
     &		PROCEDURE_PRIORITY,
     &		COUNT_PROCEDURE)
C
***	MODULE FLN_RETRIEVE_ALL_PROCEDURES
***	IDENT 31AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				31 August 1988
C
C Routine to retrieve all (first 1000) procedures in the flowline 
C database sorted by procedure identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	PROCEDURE_ID(FLN_MAX_PROC)	! procedures 
	CHARACTER*(*)	PROCEDURE_COMPROC(FLN_MAX_PROC)	! com proced's
	INTEGER		PROCEDURE_PRIORITY(FLN_MAX_PROC)! priority
	INTEGER		COUNT_PROCEDURE		   	! count of procs
C
C Local Variables
	INTEGER		NUM_ERR
C
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_ALL_PROCEDURES = SS$_NORMAL
C
C Initialise counts of errors and PROCEDUREs
C
	NUM_ERR = 0
20	CONTINUE
	COUNT_PROCEDURE = 0
C
C Start transaction to read PROCEDURE information
C
&RDB&	START_TRANSACTION READ_ONLY RESERVING PROCEDURE
&RDB&	FOR SHARED
&RDB&	READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_PROCEDURES = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C Retrieve all the PROCEDUREs
C Only retrieve the first FLN_MAX_PROC - 1 of them
C Sort by flowline and PROCEDURE id (in that order)
C
&RDB&	FOR FIRST (FLN_MAX_PROC - 1) P IN PROCEDURE
&RDB&	   WITH P.PROCEDURE_ID <> "NO_PROCEDURE"
&RDB&	   SORTED BY P.PROCEDURE_ID
C
C Deal with errors in starting transaction
C
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_RETRIEVE_ALL_PROCEDURES = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C wait and try again - probably deadlock
C
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C Increment count of number of PROCEDUREs
C
	   COUNT_PROCEDURE = COUNT_PROCEDURE + 1
C
C Start retrieving the things we are interested in
C
&RDB&	   GET
C
C Deal with errors in starting GET
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_PROCEDURES = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C And store the procedure id, command procedure and priority in host 
C variables
C
&RDB&	      PROCEDURE_ID(COUNT_PROCEDURE) = P.PROCEDURE_ID;
&RDB&	      PROCEDURE_COMPROC(COUNT_PROCEDURE) = P.COMMAND_PROC;
&RDB&	      PROCEDURE_PRIORITY(COUNT_PROCEDURE) = P.PRIORITY;
&RDB&	   END_GET
&RDB&	END_FOR   
C
C Finish the transaction
C
&RDB&	COMMIT
C
C Exit
C
999	RETURN
	END
