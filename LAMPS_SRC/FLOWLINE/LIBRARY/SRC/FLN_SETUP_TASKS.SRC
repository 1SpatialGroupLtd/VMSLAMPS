C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-12 09:55:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_SETUP_TASKS(ELEMENTS,NUM_ELMNT,JOB_ID)
C
***	MODULE	FLN_SETUP_TASKS
***	IDENT	12JL88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Feb-1988
C
C sets up tasks for the given elements,flowline and job
C returns RDB status code for the database operation
C calling routine should have tha transaction open
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	NUM_ELMNT		! no of elements
	CHARACTER*(*)	ELEMENTS(FLN_MAX_ELEMENT) ! elements
	INTEGER*4	JOB_ID			! job	
C
C Function
	INTEGER*4	FLN_GET_TASK_ID	
	INTEGER*4	FLN_GET_PARAMETER_ID	
	INTEGER*4	FLN_GET_INPUT_PAR
	INTEGER*4	FLN_CHANGE_PAR
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C Local Variables
	INTEGER*4	TASKID
	INTEGER*4	I
	INTEGER*4	NUM_PAR
	INTEGER*4	PARAMETERS(FLN_MAX_PAR)
	INTEGER*4	PARAMETER_ID
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_SETUP_TASKS  = %LOC(SS$_NORMAL)
	DO 30 I = 1,NUM_ELMNT
C
	   PARAMETER_ID  = -1
C get a unique task number
	   FLN_SETUP_TASKS = FLN_GET_TASK_ID(TASKID,JOB_ID)
	   IF (.NOT. FLN_SETUP_TASKS) GOTO 999
C
C get any input parameters
	   FLN_SETUP_TASKS = FLN_GET_INPUT_PAR(ELEMENTS(I),JOB_ID,
     &     NUM_PAR,PARAMETERS)
	   IF (.NOT. FLN_SETUP_TASKS) GOTO 999
C
	   IF (NUM_PAR .GT. 0) THEN	
C
C get a new parameter id
	
	      FLN_SETUP_TASKS = FLN_GET_PARAMETER_ID(PARAMETER_ID)
	      IF (.NOT. FLN_SETUP_TASKS) GOTO 999
C
C change the ids of all input parameters
	      FLN_SETUP_TASKS = FLN_CHANGE_PAR
     &        (PARAMETERS,NUM_PAR,PARAMETER_ID)
C
	    ENDIF
C
&RDB&      STORE T IN TASK USING
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SETUP_TASKS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         T.TASK_ID = TASKID;
&RDB&         T.JOB_ID  = JOB_ID;
&RDB&         T.ELEMENT_ID = ELEMENTS(I);
&RDB&         T.TASK_STATUS  = "Inactive";
&RDB&         T.PROGRESS_STATUS = "Not Started";
&RDB&         T.PARAMETER_ID = PARAMETER_ID;
&RDB&       END_STORE
30	CONTINUE
C
	FLN_SETUP_TASKS  = RDB$STATUS
999	RETURN
	END
