C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-05 16:35:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_SKIP_TASK(TASK_ID,OUTCOME,
     &  NUM_PAR,PARAMETERS,NUM_GLOBAL,GLOBALS,
     &  NUM_EXT,EXTERNALS)
C
***	MODULE	FLN_SKIP_TASK
***	IDENT	29SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    2-May-1988
C
C skips the specified task in the flowline with the specified outcome
C doesn't allow active task to be skipped
C then processes as if the task has been completed
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C Arguments
	INTEGER*4	TASK_ID	! The TASK to be skipped
	INTEGER*4	OUTCOME ! outcome value
	INTEGER*4	NUM_PAR		!IN - number of parameters
	CHARACTER*(*)   PARAMETERS(FLN_MAX_PAR) !IN - parameters
	INTEGER*4	NUM_GLOBAL	!IN - number of global params
	CHARACTER*(*)	GLOBALS(FLN_MAX_GLOBAL) !IN - global params
	INTEGER*4	NUM_EXT		!In - number of external params
	CHARACTER*(*)	EXTERNALS(FLN_MAX_EXT)	!IN - external params
C
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C function
	INTEGER*4	FLN_COMPLETE_TASK
C
C Local Variables
	INTEGER*4	TEMP_TASK		
	CHARACTER*20    FLN_ID	
	CHARACTER*20	ELMNT_ID
	INTEGER*4	JOB_ID	
	INTEGER*4	OUTER_TASK
	INTEGER*4	OUT_TASK(FLN_MAX_TASK)! tasks to finish
	INTEGER*4	OUT_OUTCOME(FLN_MAX_TASK)! outcomes
	INTEGER*4	COUNT_TASK	! 
	CHARACTER*20	OUT_ELEMENT(FLN_MAX_ELEMENT)!elements for tasks
	INTEGER*4	COUNT_ELEMENT	! 
	CHARACTER*20	OUT_WIRE(FLN_MAXWIRE) ! wires to set active
	INTEGER*4	COUNT_WIRE	!
	INTEGER*4	OUT_JOB(FLN_MAX_JOB)	!- jobs completed
	INTEGER*4	COUNT_JOB	!
	INTEGER*4	LOC_WIRE_COUNT
	INTEGER*4	LOC_ELEMENT_COUNT
	CHARACTER*20	LOC_ELEMENT(FLN_MAX_ELEMENT)
	CHARACTER*20	LOC_WIRE(FLN_MAXWIRE)
	LOGICAL		JOB_END
	INTEGER*4	I
	INTEGER*4	NUM_TASK
	INTEGER*4	NUM_ERR
	CHARACTER*10	STATUS
	INTEGER*4	DUMSESS,DUMCPU	! dummies
	INTEGER*4	NUM_ELMNT,NUM_RESET
	CHARACTER*20	RESET_ELMNT(FLN_MAX_ELEMENT)
	CHARACTER*20	NORMAL_ELMNT(FLN_MAX_ELEMENT)
	LOGICAL		HAD_A_TASK
C
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
	NUM_ERR = 0
	DUMSESS = 0
	DUMCPU = -1

20	CONTINUE
	NUM_TASK = 0
C
C first check that the task is not active
&RDB&   START_TRANSACTION READ_ONLY WAIT RESERVING TASK FOR
&RDB&   SHARED READ 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_SKIP_TASK= RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&   FOR T IN TASK WITH T.TASK_ID = TASK_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_SKIP_TASK= RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_TASK= NUM_TASK+1
&RDB&      GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_SKIP_TASK= RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         STATUS = T.TASK_STATUS
&RDB&      END_GET
C
C don't allow active tasks to be held
	   IF (STATUS .EQ.  'Active') THEN
	      FLN_SKIP_TASK = FLN__TASKACTIVE
	      GOTO 500
	   ENDIF
&RDB&   END_FOR
&RDB&   COMMIT
	GOTO 550
C
C precompiler doesn't like this inside the IF statement from whence it
C comes
500	CONTINUE
&RDB&   ROLLBACK
	GOTO 999
C
C now do all the stuff that we do when a task completes
550	IF (NUM_TASK.EQ. 0) THEN
C
C no TASK with supplied id
	   FLN_SKIP_TASK= FLN__NOSUCHTASK
	   GOTO 999
	ENDIF
C
C complete the task
	FLN_SKIP_TASK = FLN_COMPLETE_TASK
     &	                    (TASK_ID,DUMSESS,OUTCOME,DUMCPU,
     &			    NUM_PAR,PARAMETERS,
     &  		    NUM_GLOBAL,GLOBALS,
     &  		    NUM_EXT,EXTERNALS)
	IF (.NOT. FLN_SKIP_TASK) GOTO 999
C
999	RETURN
	END
