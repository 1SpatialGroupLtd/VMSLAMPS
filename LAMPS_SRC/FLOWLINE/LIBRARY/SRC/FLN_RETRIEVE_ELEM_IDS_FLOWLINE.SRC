	INTEGER FUNCTION FLN_RETRIEVE_ELEM_IDS_FLOWLINE(
     &		FLOWLINE_ID,		! flowline wanted
     &		ELEMENT_ID,		! ids of elements found
     &		COUNT_ELEMENT)		! count of elements found
C
***	MODULE FLN_RETRIEVE_ELEM_IDS_FLOWLINE
***	IDENT 13SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				13 September 1988
C
C Routine to retrieve the first 'FLN_MAX_ELEMENT' element identifiers, 
C for elements in a particular flowline, sorted by element identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	FLOWLINE_ID		   ! reqd flowline
	CHARACTER*(*)	ELEMENT_ID(FLN_MAX_ELEMENT)! elements found
	INTEGER		COUNT_ELEMENT		   ! count of elements
C
C Local Variables
	INTEGER		NUM_ERR		! number of errors
	INTEGER		COUNT_FLN	! number of flowlines
C
C Functions
	INTEGER		FLN_RETRIEVE_OUTCOMES_ELEMENT
C
C Specify database
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_ELEM_IDS_FLOWLINE = SS$_NORMAL
C
C Initialise counts of errors and ELEMENTs
C
	NUM_ERR = 0
10	CONTINUE
	COUNT_ELEMENT = 0
C
C Start transaction to read ELEMENT information
C
&RDB&   START_TRANSACTION READ_ONLY 
&RDB&	RESERVING ELEMENT, FLOWLINE
&RDB&   FOR SHARED
&RDB&   READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ELEM_IDS_FLOWLINE = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Check whether the flowline actually exists
C
&RDB&	   GET
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ELEM_IDS_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Count how many times the required flowline is present in flowline
C relation
C
&RDB&	      COUNT_FLN = COUNT OF F IN FLOWLINE
&RDB&				WITH F.FLOWLINE_ID = FLOWLINE_ID
&RDB&	   END_GET
C
C If there is no such flowline, exit with error
C
	   IF (COUNT_FLN.EQ.0) THEN
	      FLN_RETRIEVE_ELEM_IDS_FLOWLINE = FLN__NOSUCHFLN
&RDB&	      ROLLBACK
	      GOTO 999
	   ENDIF
C
C Retrieve the elements in the flowline, 
C Only retrieve the next FLN_MAX_ELEMENT of them
C Sort by element id 
C
&RDB&	   FOR
&RDB&	      FIRST FLN_MAX_ELEMENT
&RDB&	      E IN ELEMENT
&RDB&	      WITH E.FLOWLINE_ID = FLOWLINE_ID
&RDB&	      SORTED BY E.ELEMENT_ID
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ELEM_IDS_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Increment count of number of elements
C
	      COUNT_ELEMENT = COUNT_ELEMENT + 1
C
C Start retrieving the things we are interested in
C
&RDB&	      GET
C
C Deal with errors in starting GET
C
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
	      	       FLN_RETRIEVE_ELEM_IDS_FLOWLINE = RDB$STATUS
&RDB&	               ROLLBACK
	               GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C wait and try again - probably deadlock
C
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 10
&RDB&	         END_ERROR
C
C And store the element id, procedure id, command procedure, priority,
C and activation conditions in host variables
C
&RDB&	         ELEMENT_ID(COUNT_ELEMENT) = E.ELEMENT_ID;
&RDB&         END_GET
C
&RDB&      END_FOR   
C
C Finish the transaction
C
&RDB&   COMMIT
C
C Exit
C
999	RETURN
	END
