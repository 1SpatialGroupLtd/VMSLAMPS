	INTEGER FUNCTION FLN_RETRIEVE_WIRES_FLOWLINE(
     &		FLOWLINE_ID,WIRE_ID,END_ELEMENT_ID,COUNT_WIRE)
C
***	MODULE FLN_RETRIEVE_WIRES_FLOWLINE
***	IDENT 31AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				31 August 1988
C
C Routine to retrieve all (first 1000) wires in the flowline database, 
C sorted by flowline and wire identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	FLOWLINE_ID		   ! reqd flowline
	CHARACTER*(*)	WIRE_ID(FLN_MAXWIRE)	   ! wires found
	CHARACTER*(*)	END_ELEMENT_ID(FLN_MAXWIRE)! end elements
	INTEGER		COUNT_WIRE		   ! count of wires
C
C Local Variables
	INTEGER		NUM_ERR
	INTEGER		COUNT_FLN
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_WIRES_FLOWLINE = SS$_NORMAL
C
C Initialise counts of errors and wires
C
	NUM_ERR = 0
10	CONTINUE
	COUNT_WIRE = 0
C
C Start transaction to read wire information
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING WIRE, FLOWLINE
&RDB&   FOR SHARED
&RDB&   READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_WIRES_FLOWLINE = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Check whether the flowline actually exists
C
&RDB&	   GET
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_WIRES_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Count how many times the required flowline is present in flowline
C relation
C
&RDB&	      COUNT_FLN = COUNT OF F IN FLOWLINE
&RDB&				WITH F.FLOWLINE_ID = FLOWLINE_ID
&RDB&	   END_GET
C
C If there is no such flowline, exit with error
C
	   IF (COUNT_FLN.EQ.0) THEN
	      FLN_RETRIEVE_WIRES_FLOWLINE = FLN__NOSUCHFLN
&RDB&	      ROLLBACK
	      GOTO 999
	   ENDIF
C
C Retrieve all the wires in the flowline
C Only retrieve the first FLN_MAXWIRE - 1 of them
C Sort by wire id 
C
&RDB&	   FOR FIRST (FLN_MAXWIRE - 1) W IN WIRE
&RDB&	      WITH W.FLOWLINE_ID = FLOWLINE_ID
&RDB&	      SORTED BY W.WIRE_ID
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_WIRES_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Increment count of number of wires
C
	      COUNT_WIRE = COUNT_WIRE + 1
C
C Start retrieving the things we are interested in
C
&RDB&	      GET
C
C Deal with errors in starting GET
C
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_WIRES_FLOWLINE = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C wait and try again - probably deadlock
C
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 10
&RDB&	         END_ERROR
C
C And store the wire id, flowline id, and end element in host variables
C
&RDB&	         WIRE_ID(COUNT_WIRE) = W.WIRE_ID;
&RDB&	         END_ELEMENT_ID(COUNT_WIRE) = W.WIRE_END;
&RDB&         END_GET
&RDB&      END_FOR   
C
C Finish the transaction
C
&RDB&   COMMIT
C
C Exit
C
999	RETURN
	END
