	INTEGER*4 FUNCTION FLN_RETRIEVE_CURRENT_TASK
     &  (OPERATOR_ID,JOB_ID,TASK_ID,ELMNT_ID,PROC_ID,TSTAT,IS_CURRENT)
C
***	MODULE	FLN_RETRIEVE_CURRENT_TASK
***	IDENT	05MY88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    18-Apr-1988
C
C for the given job - retrieves the current task being worked on.
C returns IS_CURRENT false if the specified job is not the current 
C job, or if
C the task doesn't exist or isn't inactive
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	CHARACTER*(*)	OPERATOR_ID	! IN
	INTEGER*4	JOB_ID		! IN
	INTEGER*4	TASK_ID		! OUT 
	CHARACTER*(*)	ELMNT_ID	! OUT
	CHARACTER*(*)	PROC_ID		! OUT		
	CHARACTER*(*)	TSTAT		! OUT  task stat
	LOGICAL		IS_CURRENT	! OUT
C
C Local Variables
	INTEGER*4	NUM_JOB
	INTEGER*4	NUM_TASK
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C assume success
	FLN_RETRIEVE_CURRENT_TASK= %LOC(SS$_NORMAL)
	IS_CURRENT = .TRUE.
C
	NUM_ERR = 0
20	CONTINUE
&RDB&   START_TRANSACTION READ_ONLY RESERVING OPERATOR,TASK,JOB,
&RDB&   PROCEDURE,ELEMENT FOR
&RDB&   SHARED READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_CURRENT_TASK = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&   GET 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_CURRENT_TASK = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&      NUM_JOB= COUNT OF J IN OPERATOR WITH J.CURRENT_JOB = JOB_ID
&RDB&   END_GET 
	IF (NUM_JOB .EQ. 0) THEN
	   IS_CURRENT = .FALSE.
	   GOTO 900
	ENDIF
C
	NUM_TASK = 0
C
&RDB&   FOR O IN OPERATOR WITH O.OPERATOR_ID = OPERATOR_ID AND
&RDB&   O.CURRENT_ELEMENT  NOT MISSING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_CURRENT_TASK = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_TASK = NUM_TASK+1
&RDB&      GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_CURRENT_TASK = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         ELMNT_ID = O.CURRENT_ELEMENT;
&RDB&      END_GET 
&RDB&   END_FOR   
	IF (NUM_TASK .EQ. 0) THEN
	   IS_CURRENT = .FALSE.
	   GOTO 900
	ENDIF
C
C now look in the TASK relation to see if the TASK exists
C and get the relevant data
	NUM_TASK = 0
&RDB&   FOR T IN TASK 
&RDB&   CROSS J IN JOB
&RDB&   CROSS E IN ELEMENT OVER ELEMENT_ID 
&RDB&   CROSS P IN PROCEDURE OVER PROCEDURE_ID
&RDB&   WITH T.JOB_ID = JOB_ID AND (T.TASK_STATUS= 'Inactive'
&RDB&   OR T.TASK_STATUS = 'Offline')
&RDB&   AND T.ELEMENT_ID= ELMNT_ID
&RDB&   AND E.FLOWLINE_ID = J.FLOWLINE_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_RETRIEVE_CURRENT_TASK= RDB$STATUS
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&      END_ERROR
	   NUM_TASK = NUM_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_CURRENT_TASK = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         TASK_ID = T.TASK_ID;
&RDB&         PROC_ID = P.PROCEDURE_ID;
&RDB&         TSTAT = T.TASK_STATUS;
&RDB&      END_GET
&RDB&   END_FOR   
C
	IF (NUM_TASK .EQ. 0) THEN
	   IS_CURRENT = .FALSE.
	ENDIF
C 
900	CONTINUE
&RDB&   COMMIT
C
999	RETURN
	END
