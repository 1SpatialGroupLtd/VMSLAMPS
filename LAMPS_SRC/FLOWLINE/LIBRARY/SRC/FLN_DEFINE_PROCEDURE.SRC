	INTEGER*4 FUNCTION FLN_DEFINE_PROCEDURE
     &	(PROCEDURE_ID,COMMAND_PROC,PRIORITY,DELETE_ONLY)
C
***	MODULE	FLN_DEFINE_PROCEDURE
***	IDENT	06OC88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    06-Sep-1988
C
C defines the PROCEDURE in the database
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	CHARACTER*(*)   PROCEDURE_ID	! IN - PROCEDURE id
	CHARACTER*(*)	COMMAND_PROC	! IN - command file spec
	INTEGER*4	PRIORITY	! IN - priority
	LOGICAL		DELETE_ONLY	! IN - true if only to delete
C
C function
	INTEGER*4	FLN_REMOVE_SPACES
C locals
	CHARACTER*20	NEW_PROCEDURE_ID
	INTEGER*4	NUM_ERR
	INTEGER*4	LENGTH
	INTEGER*4	I
	INTEGER*4	NUM_PROCEDURE
C 
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C
C check for spaces in names
	FLN_DEFINE_PROCEDURE= 
     &  FLN_REMOVE_SPACES(PROCEDURE_ID,NEW_PROCEDURE_ID,LENGTH)
	IF(.NOT. FLN_DEFINE_PROCEDURE) GOTO 999 
	IF (DELETE_ONLY) GOTO 20
C validate priority
	IF (PRIORITY .LT. 1 .OR. PRIORITY .GT. 16) THEN
	    FLN_DEFINE_PROCEDURE= FLN__ILLEGPRI
	    GOTO 999
	ENDIF
C
	NUM_ERR = 0
20	CONTINUE
	NUM_PROCEDURE=0
C	
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING PROCEDURE FOR 
&RDB&   PROTECTED WRITE
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_DEFINE_PROCEDURE = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
C
C delete any existing elements with the given spec
&RDB&   FOR P IN PROCEDURE WITH 
&RDB&     P.PROCEDURE_ID = NEW_PROCEDURE_ID(1:LENGTH) 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_PROCEDURE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
	   NUM_PROCEDURE = NUM_PROCEDURE+1
&RDB&      ERASE P
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_PROCEDURE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&   END_FOR
C
	IF (DELETE_ONLY) THEN
	   IF (NUM_PROCEDURE .LT. 1) THEN
	      FLN_DEFINE_PROCEDURE=FLN__NOSUCHPROC
&RDB&         COMMIT
	      GOTO 999
	   ENDIF  
	   GOTO 990
	ENDIF
C
C define the element
&RDB&   STORE P IN PROCEDURE USING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_PROCEDURE = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&      P.PROCEDURE_ID = NEW_PROCEDURE_ID(1:LENGTH);
&RDB&      P.PRIORITY = PRIORITY;
&RDB&      P.COMMAND_PROC = COMMAND_PROC;
&RDB&   END_STORE
C
990	CONTINUE
&RDB&   COMMIT
	FLN_DEFINE_PROCEDURE = RDB$STATUS
999	RETURN
	END
