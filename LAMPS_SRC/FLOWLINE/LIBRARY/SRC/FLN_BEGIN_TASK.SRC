C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-07-28 13:52:02.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_BEGIN_TASK(TASKID,OPERATOR_ID,
     &	WORKSTATION_ID,SESSIONID,PROJECT_COM,JOB_COM,ELEMENT_COM
     &	,PROC_COM,STARTED,OFFLINE,NUM_PAR,PARAMETERS)
C
***	MODULE	FLN_BEGIN_TASK
***	IDENT	28JL88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    24-Feb-1988
C
C begins the task by flagging it active and creating a session
C also returns progress-status of task - ie true if it has already
C had work done on it
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	TASKID		! IN - task to start
	CHARACTER*(*)   OPERATOR_ID	! IN - operator identity
	CHARACTER*(*)   WORKSTATION_ID  ! IN - workstation id
	INTEGER*4	SESSIONID	! OUT - session id found
	CHARACTER*(*)   PROJECT_COM     ! OUT - project com proc
	CHARACTER*(*)	JOB_COM		! OUT - job com proc
	CHARACTER*(*)	ELEMENT_COM	! OUT - element com proc
	CHARACTER*(*)	PROC_COM	! OUT - procedure com proc
	LOGICAL		STARTED		! OUT - is it started?
	LOGICAL		OFFLINE		! OUT - is it offline task? 
	INTEGER*4	NUM_PAR		! OUT - number of parameters
	CHARACTER*(*)	PARAMETERS(FLN_MAX_PAR)	! OUT - parameters
C
C Common Blocks
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C Functions
	INTEGER*4	FLN_START_TASK
	INTEGER*4	FLN_START_SESSION
	INTEGER*4	FLN_SET_CURRENT
	INTEGER*4	FLN_GET_COMPROC
	INTEGER*4	FLN_GET_SESSION_TASK
C
C Local Variables
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
	NUM_ERR = 0
20	CONTINUE
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING 
&RDB&   TASK, SESSION, SESSIONID, OPERATOR FOR PROTECTED WRITE, 
&RDB&   JOB, PROJECT FOR SHARED READ
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_BEGIN_TASK = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C set the task active
	FLN_BEGIN_TASK = 
     &	FLN_START_TASK(TASKID,STARTED,OFFLINE,SESSIONID)
C
C NB SESSIONID only comes out if task is offline
	IF (.NOT. FLN_BEGIN_TASK) THEN
	   NUM_ERR = NUM_ERR+1
	   IF(FLN_BEGIN_TASK .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	    ELSE
&RDB&	       ROLLBACK
	       GOTO 999
	    ENDIF
	ENDIF
C
C create the session - if its an offline task the session already exists
	IF (.NOT. OFFLINE) THEN
	   FLN_BEGIN_TASK = FLN_START_SESSION(TASKID,OPERATOR_ID,
     &     WORKSTATION_ID,SESSIONID)
	   IF (.NOT. FLN_BEGIN_TASK) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_BEGIN_TASK .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	       ELSE
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C set up current details for operator
	FLN_BEGIN_TASK = FLN_SET_CURRENT(OPERATOR_ID,TASKID)
	IF (.NOT. FLN_BEGIN_TASK) THEN
	   NUM_ERR = NUM_ERR+1
	   IF(FLN_BEGIN_TASK .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	    ELSE
&RDB&	       ROLLBACK
	       GOTO 999
	    ENDIF
	ENDIF
&RDB&   COMMIT	
C 
C get the command procedures and parameters for this task
	FLN_BEGIN_TASK = FLN_GET_COMPROC(TASKID,PROJECT_COM,JOB_COM,
     &  ELEMENT_COM,PROC_COM,NUM_PAR,PARAMETERS)
	IF (.NOT. FLN_BEGIN_TASK) GOTO 999
C
999	RETURN
	END
