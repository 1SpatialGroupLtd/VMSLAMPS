C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-02-22 12:35:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_IS_READY(ELEMENT,FLN_ID,JOB_ID,READY)
C
***	MODULE	FLN_IS_READY
***	IDENT	22FE90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Feb-1988
C
C finds out if the given element is ready to start
C 
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	CHARACTER*(*)	ELEMENT			! IN - element
	CHARACTER*(*)	FLN_ID			! IN - flowline	
	INTEGER*4	JOB_ID			! IN - job
	LOGICAL		READY			! OUT - true if ready 
C
C Common Blocks
C
C Functions
	INTEGER*4	FLN_EVAL
C
C Local Variables
	CHARACTER*255	CONDITIONS		! string containing 
C						! initial conditions
	LOGICAL		RESULT
	LOGICAL		RET			! return code
	INTEGER*4	NUM_COND
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_IS_READY= %LOC(SS$_NORMAL)
	NUM_ERR = 0
20	CONTINUE
	NUM_COND = 0
&RDB&   START_TRANSACTION READ_ONLY  WAIT RESERVING ELEMENT
&RDB&   FOR SHARED READ 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_IS_READY = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&   FOR E IN ELEMENT WITH E.FLOWLINE_ID = FLN_ID AND
&RDB&   E.ELEMENT_ID = ELEMENT AND E.CONDITIONS NOT MISSING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_IS_READY= RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_COND = NUM_COND+1
&RDB&	   GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_IS_READY= RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&	      CONDITIONS = E.CONDITIONS;	      
&RDB&	   END_GET
&RDB&   END_FOR
&RDB&   COMMIT
C
C no conditions present mens don't have to evaluate them
	IF (NUM_COND .NE. 0 ) THEN
C now evaluate the conditions
	   FLN_IS_READY = FLN_EVAL(JOB_ID,FLN_ID,CONDITIONS,RESULT)
	   IF (.NOT. FLN_IS_READY) GOTO 999
	   READY = RESULT
	ELSE
	   READY = .TRUE.
	ENDIF
C		
999	RETURN
	END
