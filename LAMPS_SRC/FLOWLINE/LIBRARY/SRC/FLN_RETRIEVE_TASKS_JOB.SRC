C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-06 20:04:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4  FUNCTION FLN_RETRIEVE_TASKS_JOB
     &             (JOB_ID,TASK,ELEMENT,STATUS,COUNT_TASK)
C
***	MODULE	FLN_RETRIEVE_TASKS_JOB
***	IDENT	06JN88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    17-May-1988
C
C Retrieves all TASKS in a JOB from the database - 
C together with associated information
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	JOB_ID			! IN - job
	INTEGER*4	TASK(FLN_MAX_TASK)	! TASKS retrieved
	CHARACTER*(*)	ELEMENT(FLN_MAX_TASK)	! elements 
	CHARACTER*(*)	STATUS(FLN_MAX_TASK)	! status's
	INTEGER*4	COUNT_TASK		! count of JOBS
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	COUNT_JOB
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_TASKS_JOB = %LOC(SS$_NORMAL)
C
C retrieve all the active TASKS with the given JOB
	NUM_ERR = 0
20	CONTINUE
	COUNT_TASK  = 0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING TASK,JOB
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASKS_JOB = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&      GET
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASKS_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      COUNT_JOB= COUNT OF J IN JOB
&RDB&      WITH J.JOB_ID =JOB_ID
&RDB&      END_GET	
	   IF (COUNT_JOB .EQ. 0) THEN
	      FLN_RETRIEVE_TASKS_JOB = FLN__NOSUCHJOB
&RDB&         ROLLBACK
	      GOTO 999
	   ENDIF
C
C retrieve all the TASKS
C only retrieve the first FLN_MAX_JOB - 1 of them
&RDB&   FOR FIRST 999 T IN TASK  WITH T.JOB_ID = JOB_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_TASKS_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK= COUNT_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_TASKS_JOB = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         TASK(COUNT_TASK)	 = T.TASK_ID;
&RDB&         STATUS(COUNT_TASK)  = T.TASK_STATUS;
&RDB&         ELEMENT(COUNT_TASK) = T.ELEMENT_ID;
&RDB&      END_GET
&RDB&   END_FOR   
&RDB&   COMMIT
C
999	RETURN
	END
