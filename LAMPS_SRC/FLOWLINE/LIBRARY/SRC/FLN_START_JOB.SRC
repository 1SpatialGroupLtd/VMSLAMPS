	INTEGER*4 FUNCTION FLN_START_JOB(JOB_ID,COMMAND_PROC)
C
***	MODULE	FLN_START_JOB
***	IDENT	17JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    30-Mar-1988
C
C starts the specified job on the system
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	INTEGER*4	JOB_ID		! job id
	CHARACTER*(*)	COMMAND_PROC	! job wide command procedure
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C Common Blocks
C
C Functions
	INTEGER*4	FLN_PROCESS_OUTCOME
	INTEGER*4	FLN_GET_FLOWLN
	INTEGER*4	FLN_JOBSTART_UPDATE
C
C Local Variables
	INTEGER*4	DAY
	INTEGER*4	TIME
	INTEGER*4	NUM_ELMNT	! number of them
	INTEGER*4	DUMMY
	CHARACTER*20	FLN_ID,ELMNT_ID
	CHARACTER*20	ELEMENT(FLN_MAX_ELEMENT)
	INTEGER*4	NUM_ELEMENT
	CHARACTER*20	WIRE(FLN_MAXWIRE)
	INTEGER*4	NUM_WIRE
	LOGICAL		DUMLOG		! dummy
	LOGICAL		OUTER_TASK_END
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
C get the current time
	CALL FLN_GET_DAY_TIME(DAY,TIME)
20	CONTINUE
C
	FLN_START_JOB = FLN_GET_FLOWLN(JOB_ID,FLN_ID)
	IF (.NOT. FLN_START_JOB) GOTO 999
C
C find the starting element of the flowline
	NUM_ERR = 0
30	CONTINUE
	NUM_ELMNT = 0
&RDB&   START_TRANSACTION READ_WRITE RESERVING FLOWLINE FOR 
&RDB&   SHARED READ WAIT
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_START_JOB= RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 30
&RDB&	END_ERROR
C
C extract the start element from the database
&RDB&   FOR F IN FLOWLINE WITH F.FLOWLINE_ID = FLN_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_START_JOB = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 30
&RDB&	   END_ERROR
&RDB&      GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_START_JOB = RDB$STATUS
&RDB&               ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 30
&RDB&	      END_ERROR
&RDB&         ELMNT_ID = F.START_ELEMENT; 
&RDB&      END_GET
	   NUM_ELMNT = NUM_ELMNT+1
&RDB&   END_FOR
&RDB&   COMMIT
C
	IF (NUM_ELMNT .NE. 1) THEN
	   FLN_START_JOB = FLN__NOSUCHFLN
	   GOTO 999
	ENDIF
C
C to get the ball rolling we assume the start element is completed
C outcome is 1
	FLN_START_JOB= 
     &  FLN_PROCESS_OUTCOME(FLN_ID,ELMNT_ID,JOB_ID,1,DUMMY,WIRE,
     &  NUM_WIRE,DUMLOG,ELEMENT,NUM_ELEMENT,OUTER_TASK_END)
C
C do all the database updating in one go
	FLN_START_JOB = FLN_JOBSTART_UPDATE
     &	                    (ELEMENT,NUM_ELEMENT,WIRE,NUM_WIRE,
     &			     JOB_ID,COMMAND_PROC,DAY,TIME)
	IF (.NOT. FLN_START_JOB) GOTO 999
C
999	RETURN
	END
