C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-17 12:54:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_GET_WIRES
     &	(FLN_ID,ELMNT_ID,OUTCOME,WIRE,NUM_WIRE)
C
***	MODULE	FLN_GET_WIRES
***	IDENT	28AP88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    24-Feb-1988
C
C flowline library routine 
C Extracts from the flowline database the wires affected by the 
C completion of the given element with the given outcome value
C returns warning if no wires found
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	CHARACTER*(*) FLN_ID		! IN  - the flowline
	CHARACTER*(*) ELMNT_ID		! IN  - the element
	INTEGER*4     OUTCOME		! IN  - the outcome value
	CHARACTER*20  WIRE(FLN_MAXWIRE)	! OUT - wire ids
	INTEGER*4     NUM_WIRE		! OUT - number of above
C
C locals
	INTEGER*4	NUM_ERR
C
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_GET_WIRES  = %LOC(SS$_NORMAL)
	NUM_ERR =0
20	CONTINUE
	NUM_WIRE = 0
&RDB&   START_TRANSACTION READ_ONLY WAIT RESERVING OUTCOME FOR
&RDB&	SHARED READ 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_GET_WIRES = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&	FOR O IN OUTCOME WITH O.FLOWLINE_ID = FLN_ID AND
&RDB&   O.ELEMENT_ID = ELMNT_ID AND O.OUTCOME_VALUE = OUTCOME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_GET_WIRES = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
           NUM_WIRE = NUM_WIRE+1
&RDB&	   GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_GET_WIRES = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&	      WIRE(NUM_WIRE) = O.WIRE_ID;
&RDB&	   END_GET
&RDB&   END_FOR
&RDB&	COMMIT
C
	IF (NUM_WIRE .EQ. 0) THEN
C 
C if we find nothing then return warning
	   FLN_GET_WIRES  = FLN__NOSUCHOUT
	ENDIF
C
999	RETURN
	END
