
	INTEGER*4  FUNCTION FLN_RETRIEVE_JOB_TIMINGS
     &             (PROJECT_ID,JOB_NAME,NUM_JOB,CPU_TIME,CONNECT_TIME,
     &              START_TIME,START_DAY,FINISH_TIME,FINISH_DAY,
     &		    NUM_TASK,NUM_UNSET)
C
***	MODULE	FLN_RETRIEVE_JOB_TIMINGS
***	IDENT	26SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-July-1988
C
C Retrieves for specified project database timing statistics for all
C jobs within it. 
C Note that information is gathered using JOB and JOB_HISTORY
C Cumulative timing information uses completed session records only
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
	INTEGER*4	NUM_HUNSEC_INDAY ! number of1/100 secs in a day
	PARAMETER	(NUM_HUNSEC_INDAY = 8640000)
	
C
C Arguments
	CHARACTER*(*)	PROJECT_ID		      ! IN  - project 
	CHARACTER*(*)	JOB_NAME(FLN_MAX_JOB)	      ! OUT - jobs
	INTEGER*4	NUM_JOB		      	      ! OUT - 
	INTEGER*4	CPU_TIME(FLN_MAX_JOB)         ! OUT - total CPU
	INTEGER*4	CONNECT_TIME(FLN_MAX_JOB)     ! OUT - elapsed
	INTEGER*4	START_TIME(FLN_MAX_JOB)       ! OUT - job start
	INTEGER*4	START_DAY(FLN_MAX_JOB)        ! OUT 
	INTEGER*4	FINISH_TIME(FLN_MAX_JOB)      ! OUT - job finish
	INTEGER*4	FINISH_DAY(FLN_MAX_JOB)       ! OUT 
	INTEGER*4	NUM_TASK(FLN_MAX_JOB)         ! OUT - num tasks
C						      !  in job
	INTEGER*4	NUM_UNSET(FLN_MAX_JOB)	      ! OUT - num unset 
C						      ! tasks
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	CONTIME_H(FLN_MAX_JOB) ! JOB_HISTORY 
	INTEGER*4	CONDAY_H(FLN_MAX_JOB)  ! JOB_HISTORY 
	INTEGER*4	CONTIME_J(FLN_MAX_JOB) ! JOB 
	INTEGER*4	CONDAY_J(FLN_MAX_JOB)  ! JOB start/fin
	INTEGER*4	CPU_J(FLN_MAX_JOB),CPU_H(FLN_MAX_JOB)
	INTEGER*4	NTASK_H(FLN_MAX_JOB),NTASK_J(FLN_MAX_JOB)	
	INTEGER*4	NUNS_TASK_H(FLN_MAX_JOB),NUNS_TASK_J(FLN_MAX_JOB)	
	INTEGER*4	COUNT_JOB,I
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_JOB_TIMINGS = %LOC(SS$_NORMAL)
C
C retrieve all the active jobs with the given project
	NUM_ERR = 0
20	CONTINUE
	NUM_JOB = 0
C
&RDB&   START_TRANSACTION READ_ONLY RESERVING JOB,
&RDB&   JOB_HISTORY,TASK_HISTORY,SESSION_HISTORY
&RDB&   FOR SHARED
&RDB&   READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the tasks
	COUNT_JOB= 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY
&RDB&   WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_JOB= NUM_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         JOB_NAME(NUM_JOB) = J.JOB_NAME;
&RDB&      END_GET
&RDB&   END_FOR
C
C
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_JOB= NUM_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&         JOB_NAME(NUM_JOB) = J.JOB_NAME;
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_JOB= 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY WITH 
&RDB&   J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB=COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CPU_H(COUNT_JOB) = TOTAL S.CPU_TIME OF S IN 
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB_HISTORY OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
C
C get all the same stuff but using JOB instead of JOB_HISTORY
C still using TASK_HISTORY and SESSION_HISTORY ie we don't use 
C current tasks or sessions
C CPU time
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB=COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         CPU_J(COUNT_JOB) = TOTAL S.CPU_TIME OF S IN 
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.CPU_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.FINISH_TIME NOT MISSING;
&RDB&      END_GET
&RDB&   END_FOR
C
C start and finish times
	COUNT_JOB = 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY 
&RDB&   WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB=COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C get the starting and time and day of the JOB
&RDB&         START_TIME(COUNT_JOB) = J.START_TIME;
&RDB&         START_DAY(COUNT_JOB) = J.START_DATE;
&RDB&         FINISH_TIME(COUNT_JOB) = J.FINISH_TIME;
&RDB&         FINISH_DAY(COUNT_JOB) = J.FINISH_DATE;
&RDB&     END_GET
&RDB&   END_FOR
C
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB=COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C get the starting time and day of the PROJECT
&RDB&         START_TIME(COUNT_JOB) = J.START_TIME;
&RDB&         START_DAY(COUNT_JOB) = J.START_DATE;
&RDB&         FINISH_TIME(COUNT_JOB) = J.FINISH_TIME;
&RDB&         FINISH_DAY(COUNT_JOB) = J.FINISH_DATE;
&RDB&     END_GET
&RDB&   END_FOR
C
C number of TASKS
	COUNT_JOB= 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY
&RDB&    WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB= COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the number of tasks 
&RDB&         NTASK_H(COUNT_JOB) =  COUNT OF T IN TASK_HISTORY 
&RDB&         WITH T.JOB_ID  = J.JOB_ID AND ANY S IN SESSION_HISTORY
&RDB&         WITH S.TASK_ID  = T.TASK_ID; 
C
&RDB&      END_GET
&RDB&   END_FOR
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB= COUNT_JOB+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C get the number of tasks 
&RDB&         NTASK_J(COUNT_JOB) =  COUNT OF T IN TASK_HISTORY 
&RDB&         WITH T.JOB_ID  = J.JOB_ID AND ANY S IN SESSION_HISTORY
&RDB&         WITH S.TASK_ID  = T.TASK_ID; 
C
&RDB&      END_GET
&RDB&   END_FOR
C
C connect time
	COUNT_JOB= 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY 
&RDB&   WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB= COUNT_JOB+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect days
&RDB&         CONDAY_H(COUNT_JOB) = 
&RDB&         TOTAL (S.FINISH_DATE - S.START_DATE) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB_HISTORY OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND 
&RDB&         S.FINISH_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING
&RDB&         AND (S.FINISH_TIME GT S.START_TIME OR
&RDB&         S.FINISH_DATE GT S.START_DATE)
&RDB&      END_GET
&RDB&   END_FOR
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB= COUNT_JOB+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect days
&RDB&         CONDAY_J(COUNT_JOB) = 
&RDB&         TOTAL (S.FINISH_DATE - S.START_DATE) OF S IN
&RDB&         SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND 
&RDB&         S.FINISH_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING
&RDB&         AND (S.FINISH_TIME GT S.START_TIME OR
&RDB&         S.FINISH_DATE GT S.START_DATE)
&RDB&      END_GET
&RDB&   END_FOR
C
	COUNT_JOB = 0
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB_HISTORY WITH 
&RDB&   J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB = COUNT_JOB+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME_H(COUNT_JOB)
&RDB&          = TOTAL (S.FINISH_TIME - S.START_TIME)  OF S 
&RDB&         IN SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB_HISTORY OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND 
&RDB&         S.FINISH_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING
&RDB&         AND (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE)
&RDB&      END_GET
&RDB&   END_FOR
&RDB&   FOR  FIRST FLN_MAX_JOB J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&      SORTED BY J.JOB_NAME
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_JOB = COUNT_JOB+1
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_JOB_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C connect time
&RDB&         CONTIME_J(COUNT_JOB)
&RDB&          = TOTAL (S.FINISH_TIME - S.START_TIME)  OF S 
&RDB&         IN SESSION_HISTORY CROSS T IN
&RDB&         TASK_HISTORY OVER TASK_ID 
&RDB&         CROSS JO IN JOB OVER JOB_ID
&RDB&         WITH 
&RDB&         JO.JOB_ID = J.JOB_ID AND 
&RDB&         S.FINISH_DATE NOT MISSING AND
&RDB&         S.START_DATE NOT MISSING AND 
&RDB&         S.FINISH_TIME NOT MISSING AND
&RDB&         S.START_TIME NOT MISSING AND
&RDB&         S.CPU_TIME NOT MISSING
&RDB&         AND (S.FINISH_TIME GT S.START_TIME OR S.FINISH_DATE 
&RDB&          GT S.START_DATE)
&RDB&      END_GET
&RDB&   END_FOR
C
&RDB&   COMMIT
C
C collate all the information 
C CPU
	DO 30 I = 1,NUM_JOB
	   CPU_TIME(I) = CPU_H(I) + CPU_J(I)
C
C number of jobs
	   NUM_TASK(I) = NTASK_J(I) + NTASK_H(I)
C	   NUM_UNSET(I) = NUNS_TASK_H(I) + NUNS_TASK_J(I)
	   NUM_UNSET(I) = -1
C
C work out the connect time in hundredths of seconds
	   CONNECT_TIME(I) = CONTIME_H(I) + CONTIME_J(I)
     &        + (CONDAY_H(I) + CONDAY_J(I))
     &        * NUM_HUNSEC_INDAY
C 
30	CONTINUE
999	RETURN
	END
