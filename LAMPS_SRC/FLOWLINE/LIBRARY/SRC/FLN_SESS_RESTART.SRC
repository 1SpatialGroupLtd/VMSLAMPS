	INTEGER*4 FUNCTION FLN_SESS_RESTART(SESSION_ID,
     &	CPU_TIME,NUM_PAR,PARAMETERS,NUM_GLOBAL,GLOBALS,
     &  NUM_EXT,EXTERNALS)
C
***	MODULE	FLN_SESS_RESTART
***	IDENT	29AP92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    30-Mar-1988
C
C Ends a session with Restart status.
C It does NOT restart a session 
C This effectively means that an entire task needs to be restarted
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	SESSION_ID	!IN - completed session
	INTEGER*4	CPU_TIME	!IN - session CPU
	INTEGER*4	NUM_PAR		! IN - number parameters
	CHARACTER*(*)   PARAMETERS(FLN_MAX_PAR) !IN - parameters
	INTEGER*4	NUM_GLOBAL	!IN - number of global params
	CHARACTER*(*)	GLOBALS(FLN_MAX_GLOBAL) !IN - global params
	INTEGER*4	NUM_EXT		!In - number of external params
	CHARACTER*(*)	EXTERNALS(FLN_MAX_EXT) !IN - external parameters
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C Functions
	INTEGER*4	FLN_END_SESSION
	INTEGER*4	FLN_SET_TASK
	INTEGER*4	FLN_SET_LOCALS
	INTEGER*4	FLN_SET_GLOBALS
C
C Local Variables
	INTEGER*4	TASK_ID
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
C notify the database of session completion
C
	NUM_ERR = 0
20	CONTINUE
C
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING SESSION, TASK,
&RDB&   PARAMETER, GLOBAL_PARAMETER,PARAMETERID FOR PROTECTED WRITE
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_SESS_RESTART = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
	FLN_SESS_RESTART= FLN_END_SESSION(SESSION_ID,
     &	CPU_TIME,'Restart',TASK_ID)
	IF (.NOT. FLN_SESS_RESTART) THEN
	   NUM_ERR = NUM_ERR+1
	   IF(FLN_SESS_RESTART .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	    ELSE
&RDB&	       ROLLBACK
	       GOTO 999
	    ENDIF
	ENDIF
C
C Flag task as inactive and not yet started
	FLN_SESS_RESTART= FLN_SET_TASK(TASK_ID,'Not Started','Inactive')
	IF (.NOT. FLN_SESS_RESTART) THEN
	   NUM_ERR = NUM_ERR+1
	   IF(FLN_SESS_RESTART .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	    ELSE
&RDB&	       ROLLBACK
	       GOTO 999
	    ENDIF
	ENDIF
C set up any local parameters if there are any 
	IF (NUM_PAR .GT. 0)THEN
	   FLN_SESS_RESTART = FLN_SET_LOCALS
     &                        (TASK_ID,NUM_PAR,PARAMETERS)
	   IF (.NOT. FLN_SESS_RESTART) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_SESS_RESTART .EQ. %LOC(RDB$_DEADLOCK)
     &	            .AND. NUM_ERR .LT. 10)THEN
	            CALL LIB$WAIT(FLN_PSE)
&RDB&	            ROLLBACK
	            GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	  ENDIF
	ENDIF
C
C set up any global or external parameters if there are any
	IF (NUM_GLOBAL.GT. 0 .OR. NUM_EXT .GT. 0)THEN
	   FLN_SESS_RESTART = FLN_SET_GLOBALS
     &                  (TASK_ID,NUM_GLOBAL,GLOBALS,NUM_EXT,
     &                   EXTERNALS,.TRUE.)
	   IF (.NOT. FLN_SESS_RESTART) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_SESS_RESTART .EQ. %LOC(RDB$_DEADLOCK)
     &	            .AND. NUM_ERR .LT. 10)THEN
	            CALL LIB$WAIT(FLN_PSE)
&RDB&	            ROLLBACK
	            GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	   ENDIF
	ENDIF
&RDB&   COMMIT
C
999	RETURN
	END
