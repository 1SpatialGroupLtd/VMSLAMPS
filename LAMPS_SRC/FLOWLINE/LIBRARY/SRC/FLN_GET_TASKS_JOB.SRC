C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-18 21:54:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_GET_TASKS_JOB(NUM_JOB,JOB_ID,
     &  TASKS,NUM_TASK)
C
***	MODULE	FLN_GET_TASKS_JOB
***	IDENT	18JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    25-Apr-1988
C
C
	IMPLICIT NONE
C
C retrieves list of task ids from TASK and TASK_HISTORY for the 
C specified jobS 
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	NUM_JOB
	INTEGER*4	JOB_ID(NUM_JOB)
	INTEGER*4	TASKS(FLN_MAX_TASK)
	INTEGER*4	NUM_TASK	
	INTEGER*4	I
C
C
C Local Variables
	INTEGER*4	NUM_ERR
	LOGICAL  	FOUND
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
C assume success
	FLN_GET_TASKS_JOB= %LOC(SS$_NORMAL)
C
C
	NUM_ERR = 0
20	CONTINUE
	NUM_TASK = 0
&RDB&   START_TRANSACTION READ_ONLY RESERVING TASK, TASK_HISTORY
&RDB&   FOR SHARED READ WAIT
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_GET_TASKS_JOB = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
	DO 40 I = 1,NUM_JOB
C
	   FOUND = .FALSE.
&RDB&      FOR T IN TASK WITH T.JOB_ID = JOB_ID(I) 
&RDB&         AND T.TASK_STATUS NE 'Void'
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_GET_TASKS_JOB = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
	      NUM_TASK = NUM_TASK+1
	      FOUND = .TRUE.
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_GET_TASKS_JOB = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&            TASKS(NUM_TASK) = T.TASK_ID;
&RDB&         END_GET
C
&RDB&      END_FOR
C
	   IF (FOUND) GOTO 40
C
C look in task history if can't find it in task
&RDB&      FOR T IN TASK_HISTORY  WITH T.JOB_ID = JOB_ID(I) 
&RDB&         AND T.TASK_STATUS NE 'Void'
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_GET_TASKS_JOB = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
	      NUM_TASK = NUM_TASK+1
	      FOUND = .TRUE.
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_GET_TASKS_JOB = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C try again - probably deadlock
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&            TASKS(NUM_TASK) = T.TASK_ID;
&RDB&         END_GET
C
&RDB&      END_FOR
&RDB&      	
40	CONTINUE
C
&RDB&   COMMIT
C
999	RETURN
	END
