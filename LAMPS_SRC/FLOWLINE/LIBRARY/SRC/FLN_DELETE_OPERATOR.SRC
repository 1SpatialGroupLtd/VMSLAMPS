C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-23 11:04:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_DELETE_OPERATOR(OPERATOR_ID)
C
***	MODULE	FLN_DELETE_OPERATOR
***	IDENT	23SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author JM Billing
C
C 	DELETEd					JMB	23-Sep-1988
C
C deletes an operator
C moans if does not exist
C
	IMPLICIT NONE
C
C Arguments
	CHARACTER*(*)	OPERATOR_ID	! The operator to be DELETEd
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
	INTEGER*4	RDB$_NO_DUP
	EXTERNAL	RDB$_NO_DUP
C
C function
	INTEGER*4	FLN_REMOVE_SPACES
C
	INTEGER*4	NUM_ERR
C 
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	NUM_ERR = 0
20	CONTINUE
C	
&RDB&   START_TRANSACTION 
&RDB&	READ_WRITE WAIT 
&RDB&	RESERVING OPERATOR, OPERATOR_AUTHORISATION 
&RDB&   FOR PROTECTED WRITE
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_DELETE_OPERATOR = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
C
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
C
C Select the operator you want
C
&RDB&	FOR O IN OPERATOR WITH O.OPERATOR_ID = OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DELETE_OPERATOR = RDB$STATUS
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
C
	      CALL LIB$WAIT(FLN_PSE)
&RDB&	      ROLLBACK
	      GOTO 20
&RDB&	   END_ERROR
C
C DELETE the operator
C
&RDB&      ERASE O 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_DELETE_OPERATOR = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
&RDB&	      END_ERROR
&RDB&	END_FOR
C
C Delete entries from operator authorisation
C
&RDB&	FOR A IN OPERATOR_AUTHORISATION 
&RDB&	WITH A.OPERATOR_ID = OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DELETE_OPERATOR = RDB$STATUS
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
C
	      CALL LIB$WAIT(FLN_PSE)
&RDB&	      ROLLBACK
	      GOTO 20
&RDB&	   END_ERROR
C
C Erase authorisation entry
C
&RDB&	   ERASE A
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_DELETE_OPERATOR = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
&RDB&	      END_ERROR
C
&RDB&	END_FOR
C
&RDB&   COMMIT
C
	FLN_DELETE_OPERATOR = RDB$STATUS
999	RETURN
	END
