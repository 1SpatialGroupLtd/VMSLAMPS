C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-06-16 17:45:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_DELETE_PROJECT(PROJECT_ID)
C
***	MODULE	FLN_DELETE_PROJECT
***	IDENT	16JN88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    13-May-1988
C
C deletes a project in the database
C also delete all history records relating to this project
C fails if there are any current jobs in the project
C or if the project doesn't exist
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	CHARACTER*(*)	PROJECT_ID	! PROJECT id
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C
	INTEGER*4	LIB$DELETE_FILE
	INTEGER*4	SIGCHS
	INTEGER*4	PARFILN
C
C Local Variables
	INTEGER*4	NUM_PROJ
	INTEGER*4	NUM_ERR
	INTEGER*4	NUM_JOB
	CHARACTER*255	COMMAND_PROC
	CHARACTER*255   PARSED_COMMAND_PROC
	INTEGER*4	PARLEN		! length of parsed file
	INTEGER*4	LENGTH
C
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	NUM_JOB = 0
	NUM_ERR = 0
20	CONTINUE
	NUM_PROJ = 0
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING PROJECT,JOB_HISTORY,
&RDB&   TASK_HISTORY, SESSION_HISTORY FOR 
&RDB&   PROTECTED WRITE, JOB FOR SHARED READ
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_DELETE_PROJECT = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C check no jobs still in project
&RDB&   GET
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      NUM_JOB = COUNT OF J IN JOB WITH J.PROJECT_ID  = PROJECT_ID
&RDB&   END_GET
C
	IF (NUM_JOB .GT. 0) THEN
	   FLN_DELETE_PROJECT= FLN__JOBSPRESENT
&RDB&      ROLLBACK
	   GOTO 999
	ENDIF
C
C do the deletion
&RDB&   FOR P IN PROJECT WITH P.PROJECT_ID = PROJECT_ID 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_PROJ = NUM_PROJ +1
C
C get the project command file spec
&RDB&      GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         COMMAND_PROC = P.COMMAND_PROC;
&RDB&      END_GET
&RDB&      ERASE P
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
	         IF(RDB$STATUS .EQ. %LOC(RDB$_DEADLOCK))THEN
	            CALL LIB$WAIT(FLN_PSE)
&RDB&	            ROLLBACK
	            GOTO 20
	         ELSE
	            FLN_DELETE_PROJECT= RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
&RDB&	      END_ERROR
&RDB&   END_FOR
C
	IF (NUM_PROJ .EQ. 0) THEN
C
C no project with supplied id
	   FLN_DELETE_PROJECT = FLN__NOSUCHPROJ
	ELSE
	   FLN_DELETE_PROJECT = RDB$STATUS
	ENDIF
C
C now delete all jobs and for each job all tasks and for each task all
C the sessions in the history records 
C for this project
C
&RDB&   FOR J IN JOB_HISTORY WITH J.PROJECT_ID = PROJECT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C erase the job records
&RDB&      ERASE  J
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C
&RDB&      FOR T IN TASK_HISTORY WITH T.JOB_ID = J.JOB_ID
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
C erase the task records
&RDB&         ERASE T
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C only possible error is deadlock 
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
C
C
&RDB&         FOR S IN SESSION_HISTORY WITH S.TASK_ID  = T.TASK_ID
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C only possible error is deadlock 
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
C
C erase the session records
&RDB&            ERASE S
&RDB&	            ON ERROR
	               NUM_ERR = NUM_ERR+1
	               IF (NUM_ERR .GT. 5) THEN
		          FLN_DELETE_PROJECT = RDB$STATUS
&RDB&	                  ROLLBACK
		          GOTO 999
	               ENDIF
&RDB&	               ROLLBACK
C
C only possible error is deadlock 
	               CALL LIB$WAIT(FLN_PSE)
	               GOTO 20
&RDB&	            END_ERROR
&RDB&         END_FOR
&RDB&      END_FOR
&RDB&   END_FOR
&RDB&   COMMIT
C
C delete the command file
C add on * version number to make sure we delete all versions
C
C and delete it
	LENGTH = SIGCHS(COMMAND_PROC)
	IF (LENGTH .GT. 0) THEN
C parse job command file name to make sure we delete all versions
	      CALL PARFILN(PARSED_COMMAND_PROC,
     &	      PARLEN,COMMAND_PROC(:LENGTH),
     &	     'LSL$FLN_WORK:JOB.COM;0',.TRUE.)
C
	      PARSED_COMMAND_PROC(PARLEN:PARLEN) = '*'
C
C and delete it
	   CALL
     &	   LIB$DELETE_FILE(PARSED_COMMAND_PROC(:PARLEN),,,,,,,,)
	ENDIF
C
999	RETURN
	END
