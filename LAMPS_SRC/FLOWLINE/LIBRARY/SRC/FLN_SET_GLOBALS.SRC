C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-29 18:18:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_SET_GLOBALS(ID,NUM_GLOBAL,GLOBALS,
     &  				   NUM_EXT,EXTERNALS,IS_TASK)
C
***	MODULE	FLN_SET_GLOBALS
***	IDENT	29AP92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Sep-1988
C
C sets up global and external parameters for the specified job
C Definitions - a global parameter is global to the job.
C	     - an external parameter is set up in a sub-job and
C	       becomes a local parameter in the outer task
C Both are stored in the GLOBAL_PARAMETER relation
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	ID			! IN 	
	INTEGER*4	NUM_GLOBAL		! IN - num global params
	CHARACTER*(*)	GLOBALS(FLN_MAX_GLOBAL)	! IN - Global params
	INTEGER*4	NUM_EXT		!IN - number of external params
	CHARACTER*(*)	EXTERNALS(FLN_MAX_EXT) !IN - external params
	LOGICAL		IS_TASK			!IN .T. if task id 
C						! assume jobid otherwise
C
C Function
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C Local
	INTEGER*4	JOB_ID			! IN - job	
	INTEGER*4	I
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_SET_GLOBALS  = %LOC(SS$_NORMAL)
C
C find out the job id if necessary
	IF (IS_TASK) THEN
&RDB&      FOR  T IN TASK WITH T.TASK_ID  = ID
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_GLOBALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         GET
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_GLOBALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         JOB_ID  = T.JOB_ID
&RDB&         END_GET
&RDB&     END_FOR
	ELSE
	   JOB_ID  = ID
	ENDIF

	DO 30 I = 1,NUM_GLOBAL
C
C store globals
&RDB&      STORE G IN GLOBAL_PARAMETER USING
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_GLOBALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         G.JOB_ID = JOB_ID;
&RDB&         G.PARAMETER_STRING = GLOBALS(I);
&RDB&         G.PARAMETER_TYPE = 1;
&RDB&       END_STORE
30	CONTINUE
C
	DO 40 I = 1,NUM_EXT
C
C
C store externals
&RDB&      STORE G IN GLOBAL_PARAMETER USING
C
C if its a deadlock then retry after waiting
&RDB&         ON ERROR
	         FLN_SET_GLOBALS = RDB$STATUS
	         GOTO 999
&RDB&         END_ERROR
&RDB&         G.JOB_ID = JOB_ID;
&RDB&         G.PARAMETER_STRING = EXTERNALS(I);
&RDB&         G.PARAMETER_TYPE = 2;
&RDB&       END_STORE
40	CONTINUE
C
	FLN_SET_GLOBALS  = RDB$STATUS
999	RETURN
	END
