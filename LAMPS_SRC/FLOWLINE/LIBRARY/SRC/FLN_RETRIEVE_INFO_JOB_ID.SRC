C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-22 10:16:12.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FLN_RETRIEVE_INFO_JOB_ID(
     &		JOB_ID, JOB_NAME, PROJECT_ID)
C
***	MODULE FLN_RETRIEVE_INFO_JOB_ID
***	IDENT 22SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				13 September 1988
C
C Routine to retrieve the job name and containing project for
C the supplied job identifier
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	INTEGER		JOB_ID		! input  job id
	CHARACTER*(*)	JOB_NAME	! output job name
	CHARACTER*(*)	PROJECT_ID	! output project id
C
C Local Variables
	INTEGER		NUM_ERR		! number of errors
	INTEGER		COUNT_JOB	! number of jobs
C
C Specify database
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_INFO_JOB_ID = SS$_NORMAL
C
C Initialise counts of errors
C
	NUM_ERR = 0
10	CONTINUE
C
C Start transaction to read information
C
&RDB&   START_TRANSACTION READ_ONLY 
&RDB&	RESERVING JOB
&RDB&   FOR SHARED
&RDB&   READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_INFO_JOB_ID = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Check whether job exists
C
&RDB&      GET
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_INFO_JOB_ID = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 10
&RDB&	   END_ERROR
&RDB&      COUNT_JOB= COUNT OF J IN JOB
&RDB&      WITH J.JOB_ID = JOB_ID
&RDB&      END_GET	
	   IF (COUNT_JOB .EQ. 0) THEN
	      FLN_RETRIEVE_INFO_JOB_ID = FLN__NOSUCHJOB
&RDB&         ROLLBACK
	      GOTO 999
	   ENDIF
C
C Retrieve the job info
C
&RDB&	   FOR
&RDB&	      J IN JOB WITH J.JOB_ID = JOB_ID
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_INFO_JOB_ID = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Start retrieving the things we are interested in
C
&RDB&	      GET
C
C Deal with errors in starting GET
C
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
	      	       FLN_RETRIEVE_INFO_JOB_ID = RDB$STATUS
&RDB&	               ROLLBACK
	               GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C wait and try again - probably deadlock
C
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 10
&RDB&	         END_ERROR
C
C And store the job name and project idin host variables
C
&RDB&	         PROJECT_ID = J.PROJECT_ID;
&RDB&	         JOB_NAME = J.JOB_NAME
&RDB&         END_GET
C
&RDB&      END_FOR   
C
C Finish the transaction
C
&RDB&   COMMIT
C
C Exit
C
999	RETURN
	END
