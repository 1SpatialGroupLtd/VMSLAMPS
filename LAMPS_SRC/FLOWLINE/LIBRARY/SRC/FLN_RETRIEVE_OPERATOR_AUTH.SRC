C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-20 17:24:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_RETRIEVE_OPERATOR_AUTH
     &	(OPERATOR_ID,AUTH_REC,NUM_AUTH)
C
***	MODULE	FLN_RETRIEVE_OPERATOR_AUTH
***	IDENT	20SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    21-Apr-1988
C
C retrieves from the database all the authorisation records for the 
C specified operator
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.STR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL

C
C Arguments
	CHARACTER*(*)	OPERATOR_ID		! IN - the operator
	RECORD/FLN_AUTH/AUTH_REC(FLN_MAX_AUTH)	! OUT - authorise recs
	INTEGER*4	NUM_AUTH		! OUT - number of above
C
C Functions
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	YES_NO
	CHARACTER*2	TYPE
	CHARACTER*20	ID
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_OPERATOR_AUTH = %LOC(SS$_NORMAL)
	NUM_ERR = 0
20	CONTINUE
	NUM_AUTH = 0
&RDB&   START_TRANSACTION READ_ONLY RESERVING OPERATOR_AUTHORISATION
&RDB&   FOR SHARED READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_OPERATOR_AUTH = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&   FOR O IN OPERATOR_AUTHORISATION 
&RDB&   WITH O.OPERATOR_ID = OPERATOR_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_OPERATOR_AUTH = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
	   NUM_AUTH = NUM_AUTH+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_OPERATOR_AUTH = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         YES_NO = O.YES_NO;
&RDB&         TYPE= O.AUTHORISATION_TYPE;
&RDB&         ID  = O.ID;
&RDB&      END_GET
C
C translate the YES_NO field from integer to character
	   IF(YES_NO .EQ. 1) THEN
	      AUTH_REC(NUM_AUTH).YES_NO = 'Y'
	   ELSEIF (YES_NO .EQ. 2) THEN
	      AUTH_REC(NUM_AUTH).YES_NO = 'N'
	   ELSE
	      AUTH_REC(NUM_AUTH).YES_NO = 'E'
	   ENDIF
	   AUTH_REC(NUM_AUTH).TYPE = TYPE
	   AUTH_REC(NUM_AUTH).ID = ID
	   AUTH_REC(NUM_AUTH).OP_WORK = OPERATOR_ID
&RDB&   END_FOR
&RDB&   COMMIT	 
C
999	RETURN
	END
