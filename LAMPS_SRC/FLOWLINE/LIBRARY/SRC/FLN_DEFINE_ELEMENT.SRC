C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-06-22 16:24:26.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_DEFINE_ELEMENT
     &	(FLOWLINE_ID,ELEMENT_ID,COMMAND_PROC,PRIORITY,PROCEDURE_ID,
     &  CONDITIONS,NUM_OUTCOME,OUTCOMES,WIRES,DELETE_ONLY)
C
***	MODULE	FLN_DEFINE_ELEMENT
***	IDENT	22JN90
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    05-Sep-1988
C
C defines the element in the database
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C Arguments
	CHARACTER*(*)   FLOWLINE_ID	! IN - flowline id
	CHARACTER*(*)   ELEMENT_ID	! IN - element id
	CHARACTER*(*)	COMMAND_PROC	! IN - command file spec
	INTEGER*4	PRIORITY	! IN - priority
	CHARACTER*(*)	PROCEDURE_ID	! IN - procedure
	CHARACTER*(*)	CONDITIONS	! IN - initial conditions
	INTEGER*4	NUM_OUTCOME	! IN - num of outcomes
	INTEGER*4	OUTCOMES(FLN_MAX_OUTCOME)
C					! IN - the outcome values
	CHARACTER*(*)	WIRES(FLN_MAX_OUTCOME)
C					! IN - the wires
	LOGICAL		DELETE_ONLY	! IN - true if only to delete
C functions
	INTEGER*4	FLN_REMOVE_SPACES
	INTEGER*4	FLN_CONDITIONS_SYNTAX
	INTEGER*4	SIGCHS
C
C locals
	CHARACTER*20	NEW_ELEMENT_ID
	INTEGER*4	NUM_ERR
	CHARACTER*20	NEW_PROCEDURE_ID,NEW_FLOWLINE_ID
	CHARACTER*20	NEW_WIRES(FLN_MAX_OUTCOME)	! IN - the wires
	INTEGER*4	E_LENGTH,F_LENGTH,P_LENGTH	! string lengths
	INTEGER*4	W_LENGTH(FLN_MAX_OUTCOME)
	INTEGER*4	I
	INTEGER*4	NUM_ELEMENT
C 
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C
C check for spaces in names
	FLN_DEFINE_ELEMENT = 
     &     FLN_REMOVE_SPACES(ELEMENT_ID,NEW_ELEMENT_ID,E_LENGTH)
	IF(.NOT. FLN_DEFINE_ELEMENT) GOTO 999 
C
	FLN_DEFINE_ELEMENT = 
     &     FLN_REMOVE_SPACES(FLOWLINE_ID,NEW_FLOWLINE_ID,F_LENGTH)
	IF(.NOT. FLN_DEFINE_ELEMENT) GOTO 999 
C
C don't check anything else if deleting the element
	IF (DELETE_ONLY) GOTO 20
C
	FLN_DEFINE_ELEMENT = 
     &     FLN_REMOVE_SPACES(PROCEDURE_ID,NEW_PROCEDURE_ID,P_LENGTH)
	IF(.NOT. FLN_DEFINE_ELEMENT) GOTO 999 
C
	DO 5 I = 1,NUM_OUTCOME
	   FLN_DEFINE_ELEMENT = 
     &        FLN_REMOVE_SPACES(WIRES(I),NEW_WIRES(I),W_LENGTH(I))
	   IF(.NOT. FLN_DEFINE_ELEMENT) GOTO 999 
5	CONTINUE
C
C validate priority
	IF (PRIORITY .LT. 1 .OR. PRIORITY .GT. 16) THEN
	    FLN_DEFINE_ELEMENT= FLN__ILLEGPRI
	    GOTO 999
	ENDIF
C check the syntax of the conditions
	FLN_DEFINE_ELEMENT = FLN_CONDITIONS_SYNTAX(CONDITIONS)
	IF(.NOT. FLN_DEFINE_ELEMENT) GOTO 999 
C 
	IF (PROCEDURE_ID  .EQ. ' ') THEN
C
C special procedure name indicates non-existant procedure
	   NEW_PROCEDURE_ID  = 'NO_PROCEDURE'
	   P_LENGTH = SIGCHS(NEW_PROCEDURE_ID)
	ENDIF
C	
	NUM_ERR = 0
20	CONTINUE
	NUM_ELEMENT=0
C	
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING ELEMENT,OUTCOME FOR 
&RDB&   PROTECTED WRITE
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_DEFINE_ELEMENT = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
C
C delete any existing elements with the given spec
&RDB&   FOR E IN ELEMENT WITH E.ELEMENT_ID  = NEW_ELEMENT_ID(1:E_LENGTH)
&RDB&   AND E.FLOWLINE_ID  = NEW_FLOWLINE_ID(1:F_LENGTH)
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
	   NUM_ELEMENT = NUM_ELEMENT+1
&RDB&      ERASE E
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&   END_FOR
C
&RDB&   FOR O IN OUTCOME WITH O.ELEMENT_ID  = NEW_ELEMENT_ID(1:E_LENGTH)
&RDB&   AND O.FLOWLINE_ID  = NEW_FLOWLINE_ID(1:F_LENGTH)
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&      ERASE O
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&   END_FOR
C
	IF (DELETE_ONLY) THEN
	   IF (NUM_ELEMENT .LT. 1) THEN
	      FLN_DEFINE_ELEMENT = FLN__NOSUCHELMNT
&RDB&         COMMIT
	      GOTO 999
	   ENDIF
	   GOTO 30
	ENDIF
C define the element
&RDB&   STORE E IN ELEMENT USING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&            ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&         ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
&RDB&      E.ELEMENT_ID = NEW_ELEMENT_ID(1:E_LENGTH);
&RDB&      E.FLOWLINE_ID = NEW_FLOWLINE_ID(1:F_LENGTH);
&RDB&      E.CONDITIONS = CONDITIONS;
&RDB&      E.PROCEDURE_ID = NEW_PROCEDURE_ID(1:P_LENGTH);
&RDB&      E.PRIORITY = PRIORITY;
&RDB&      E.COMMAND_PROC = COMMAND_PROC;
&RDB&   END_STORE
C
C store each of the outcomes
C
	DO 30 I = 1,NUM_OUTCOME
C
&RDB&      STORE O IN OUTCOME USING
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_DEFINE_ELEMENT = RDB$STATUS
&RDB&               ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
&RDB&            ROLLBACK
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
C
&RDB&	      END_ERROR
&RDB&         O.ELEMENT_ID  = NEW_ELEMENT_ID(1:E_LENGTH);
&RDB&         O.FLOWLINE_ID = NEW_FLOWLINE_ID(1:F_LENGTH);
&RDB&         O.OUTCOME_VALUE = OUTCOMES(I);
&RDB&         O.WIRE_ID = NEW_WIRES(I)(1:W_LENGTH(I));
&RDB&      END_STORE
30	CONTINUE
&RDB&   COMMIT
	FLN_DEFINE_ELEMENT = RDB$STATUS
C
999	RETURN
	END
C
