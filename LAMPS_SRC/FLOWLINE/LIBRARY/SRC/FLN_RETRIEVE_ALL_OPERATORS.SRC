C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-21 09:56:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_RETRIEVE_ALL_OPERATORS
     &	(OPERATOR_ID,CURR_PROJ,CURR_JOB,CURR_ELEMENT,CURR_WORK,AUTH_REC,
     &	 NUM_OPER,NUM_WORK,NUM_AUTH)
C
***	MODULE	FLN_RETRIEVE_ALL_OPERATORS
***	IDENT	21SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    23-May-1988
C
C retrieves from the database information about all the 
C operators in the system
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.STR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL

C
C Arguments
	CHARACTER*(*)	OPERATOR_ID(FLN_MAX_OPER)  ! operators
	CHARACTER*(*)	CURR_PROJ(FLN_MAX_OPER)    ! current projects
	CHARACTER*(*)	CURR_JOB(FLN_MAX_OPER)	   ! current jobs
	CHARACTER*(*)	CURR_ELEMENT(FLN_MAX_OPER) ! current elements
	CHARACTER*(*)   CURR_WORK(FLN_MAX_OPER,10) ! current operators
	RECORD/FLN_AUTH/AUTH_REC(FLN_MAX_OPER,FLN_MAX_AUTH) 
C						   ! authorisation recs
	INTEGER*4	NUM_OPER		   ! number of operators
	INTEGER*4	NUM_WORK(FLN_MAX_OPER)	   ! number of 
C						   ! workstations
	INTEGER*4	NUM_AUTH(FLN_MAX_AUTH)	   ! number of 
C						   ! authorisations
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	YES_NO
	INTEGER*4	CURR_JOB_ID
	CHARACTER*2	TYPE
	CHARACTER*20	ID
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_ALL_OPERATORS = %LOC(SS$_NORMAL)
	NUM_ERR = 0
20	CONTINUE
	NUM_OPER= 0
&RDB&   START_TRANSACTION READ_ONLY RESERVING OPERATOR,SESSION, 
&RDB&   OPERATOR_AUTHORISATION,JOB
&RDB&   FOR SHARED READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&   FOR O IN OPERATOR 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C only possible error is deadlock 
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
	   NUM_OPER = NUM_OPER+1
	   CURR_JOB(NUM_OPER) = ' '
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         OPERATOR_ID(NUM_OPER) = O.OPERATOR_ID;
&RDB&         CURR_PROJ(NUM_OPER) = O.CURRENT_PROJECT;
&RDB&         CURR_JOB_ID= O.CURRENT_JOB;
&RDB&         CURR_ELEMENT(NUM_OPER) = O.CURRENT_ELEMENT;
&RDB&      END_GET
C
C get the job name
&RDB&      	   
&RDB&      FOR J IN JOB WITH J.JOB_ID  = CURR_JOB_ID
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ALL_OPERATORS= RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&         END_ERROR
&RDB&         GET 
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
	               FLN_RETRIEVE_ALL_OPERATORS= RDB$STATUS
&RDB&	               ROLLBACK
	               GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C only possible error is deadlock 
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&            END_ERROR
&RDB&            CURR_JOB(NUM_OPER) = J.JOB_NAME;
&RDB&         END_GET
&RDB&      END_FOR   
C
C get all workstations for this operator
	   NUM_WORK(NUM_OPER) = 0
&RDB&      FOR FIRST 9 S  IN SESSION 
&RDB&      WITH S.OPERATOR_ID  = OPERATOR_ID(NUM_OPER)
&RDB&      AND S.SESS_STATUS MISSING
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
	      NUM_WORK(NUM_OPER)=NUM_WORK(NUM_OPER)+1
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C only possible error is deadlock 
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&           CURR_WORK(NUM_OPER,NUM_WORK(NUM_OPER))=S.WORKSTATION_ID;
&RDB&         END_GET
&RDB&      END_FOR
C
C all the authorisation records 
	   NUM_AUTH(NUM_OPER) = 0
&RDB&      FOR OA IN OPERATOR_AUTHORISATION 
&RDB&      WITH OA.OPERATOR_ID = OPERATOR_ID(NUM_OPER)
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C only possible error is deadlock 
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
C
	      NUM_AUTH(NUM_OPER) = NUM_AUTH(NUM_OPER)+1
&RDB&         GET
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
		       FLN_RETRIEVE_ALL_OPERATORS = RDB$STATUS
&RDB&	               ROLLBACK
		       GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C only possible error is deadlock 
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 20
&RDB&	         END_ERROR
&RDB&            YES_NO = OA.YES_NO;
&RDB&            TYPE= OA.AUTHORISATION_TYPE;
&RDB&            ID  = OA.ID;
&RDB&         END_GET
C
C translate the YES_NO field from logical to integer
	      IF(YES_NO .EQ. 1) THEN
	         AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).YES_NO = 'Y'
	      ELSEIF(YES_NO .EQ. 3) THEN
	         AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).YES_NO = 'E'
	      ELSE
	         AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).YES_NO = 'N'
	      ENDIF
	      AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).TYPE = TYPE
	      AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).ID = ID
	      AUTH_REC(NUM_OPER,NUM_AUTH(NUM_OPER)).OP_WORK =
     &        OPERATOR_ID(NUM_OPER)
&RDB&      END_FOR
&RDB&   END_FOR
C
&RDB&   COMMIT	 
C
999	RETURN
	END
