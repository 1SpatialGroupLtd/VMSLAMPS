	INTEGER FUNCTION FLN_RETRIEVE_ELEMENTS_FLOWLINE(
     &		FLOWLINE_ID,		! flowline wanted
     &		NEXT_ELEMENT,		! element to start details from
     &		ELEMENT_ID,		! ids of elements found
     &		ELEMENT_COMPROC,	! command procedures of elements
     &		ELEMENT_PRIORITY,	! priorities of elements
     &		PROCEDURE_ID,		! ids of procedures for elements
     &		ACTIVE_COND,		! element activation conditions
     &		OUTCOME,		! possible outcomes
     &		WIRE_ID,		! wires sent active by outcomes
     &		COUNT_OUTCOME,		! count of outcomes found
     &		COUNT_ELEMENT)		! count of elements found
C
***	MODULE FLN_RETRIEVE_ELEMENTS_FLOWLINE
***	IDENT 31AU88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				31 August 1988
C
C Routine to retrieve the 'FLN_FEW_ELEMENT' elements, starting from 
C the next element specified with the 'NEXT_ELEMENT' argument, in 
C the database, for a particular flowline, sorted by element identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	FLOWLINE_ID		   ! reqd flowline
	INTEGER		NEXT_ELEMENT		   ! next element
	CHARACTER*(*)	ELEMENT_ID(FLN_FEW_ELEMENT)! elements found
	CHARACTER*(*)	ELEMENT_COMPROC(FLN_FEW_ELEMENT)! commnd prcdrs
	INTEGER		ELEMENT_PRIORITY(FLN_FEW_ELEMENT)! priorities
	CHARACTER*(*)	PROCEDURE_ID(FLN_FEW_ELEMENT)! procedures
	CHARACTER*(*)	ACTIVE_COND(FLN_FEW_ELEMENT)! activation condtns
	INTEGER		OUTCOME(FLN_MAX_OUTCOME,FLN_FEW_ELEMENT)
	CHARACTER*(*)	WIRE_ID(FLN_MAX_OUTCOME,FLN_FEW_ELEMENT)
	INTEGER		COUNT_OUTCOME(FLN_FEW_ELEMENT)! outcome count 
	INTEGER		COUNT_ELEMENT		   ! count of elements
C
C Local Variables
	INTEGER		NUM_ERR		! number of errors
	INTEGER		COUNT_FLN	! number of flowlines
	INTEGER		I		! temporary index
	INTEGER		TOTAL_ELEMENT	! total number of elements 
					! present
	INTEGER		NUM_REQUIRED	! number of elements to retrieve
C
C Functions
	INTEGER		FLN_RETRIEVE_OUTCOMES_ELEMENT
C
C Specify database
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_ELEMENTS_FLOWLINE = SS$_NORMAL
C
C Initialise counts of errors and ELEMENTs
C
	NUM_ERR = 0
10	CONTINUE
	COUNT_ELEMENT = 0
C
C Start transaction to read ELEMENT information
C
&RDB&   START_TRANSACTION READ_ONLY 
&RDB&	RESERVING ELEMENT, FLOWLINE, OUTCOME
&RDB&   FOR SHARED
&RDB&   READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Check whether the flowline actually exists
C
&RDB&	   GET
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Count how many times the required flowline is present in flowline
C relation
C
&RDB&	      COUNT_FLN = COUNT OF F IN FLOWLINE
&RDB&				WITH F.FLOWLINE_ID = FLOWLINE_ID
&RDB&	   END_GET
C
C If there is no such flowline, exit with error
C
	   IF (COUNT_FLN.EQ.0) THEN
	      FLN_RETRIEVE_ELEMENTS_FLOWLINE = FLN__NOSUCHFLN
&RDB&	      ROLLBACK
	      GOTO 999
	   ENDIF
C
C Decide how many of the elements we want to recover
C This will be the number already recovered (NEXT_ELEMENT) plus
C the maximum number we can recover in one go (FLN_FEW_ELEMENT)
C
	   NUM_REQUIRED = ((FLN_FEW_ELEMENT-1) + (NEXT_ELEMENT-1))
C
C Retrieve the ELEMENTs in the flowline, starting from NEXT_ELEMENT
C Only retrieve the next FLN_FEW_ELEMENT of them
C Sort by ELEMENT id 
C
&RDB&	   FOR
&RDB&	      FIRST NUM_REQUIRED
&RDB&	      E IN ELEMENT
&RDB&	      WITH E.FLOWLINE_ID = FLOWLINE_ID
&RDB&	      SORTED BY E.ELEMENT_ID
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Increment count of number of ELEMENTs
C
	      COUNT_ELEMENT = COUNT_ELEMENT + 1
C
C Determine if this is one of the elements in which we are interested
C ie does it come on/after NEXT_ELEMENT
C
	      IF (COUNT_ELEMENT.GE.NEXT_ELEMENT) THEN
	         I = COUNT_ELEMENT - NEXT_ELEMENT + 1
C
C Start retrieving the things we are interested in
C
&RDB&	         GET
C
C Deal with errors in starting GET
C
&RDB&	            ON ERROR
	               NUM_ERR = NUM_ERR+1
	               IF (NUM_ERR .GT. 5) THEN
	      	          FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	                  ROLLBACK
	                  GOTO 999
	               ENDIF
&RDB&	               ROLLBACK
C
C wait and try again - probably deadlock
C
	               CALL LIB$WAIT(FLN_PSE)
	               GOTO 10
&RDB&	            END_ERROR
C
C And store the element id, procedure id, command procedure, priority,
C and activation conditions in host variables
C
&RDB&	            ELEMENT_ID(I) = E.ELEMENT_ID;
&RDB&	            ELEMENT_COMPROC(I) = E.COMMAND_PROC;
&RDB&	            ELEMENT_PRIORITY(I) = E.PRIORITY;
&RDB&	            PROCEDURE_ID(I) = E.PROCEDURE_ID;
&RDB&	            ACTIVE_COND(I) = E.CONDITIONS;
&RDB&            END_GET
C
C Now retrieve all the outcomes and corresonding wires activated
C for this element in this flowline.
C
	         COUNT_OUTCOME(I) = 0
C
&RDB&	         FOR FIRST (FLN_MAX_OUTCOME - 1) O IN OUTCOME
&RDB&	            WITH O.ELEMENT_ID  = ELEMENT_ID(I)
&RDB&	            AND  O.FLOWLINE_ID = FLOWLINE_ID
&RDB&	            SORTED BY O.OUTCOME_VALUE, O.WIRE_ID
C
C Deal with errors 
C
&RDB&	            ON ERROR
	               NUM_ERR = NUM_ERR+1
	               IF (NUM_ERR .GT. 5) THEN
	                  FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	                  ROLLBACK
	                  GOTO 999
	               ENDIF
&RDB&	               ROLLBACK
C
C wait and try again - probably deadlock
C
	               CALL LIB$WAIT(FLN_PSE)
	               GOTO 10
&RDB&	            END_ERROR
C
C Increment count of outcomes for current element
C
	            COUNT_OUTCOME(I) = 
     &				COUNT_OUTCOME(I) + 1
C
C Get the outcomes and wire ids
C
&RDB&	            GET
C
C Deal with errors 
C
&RDB&	               ON ERROR
	                  NUM_ERR = NUM_ERR+1
	                  IF (NUM_ERR .GT. 5) THEN
	                     FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	                     ROLLBACK
		             GOTO 999
	                  ENDIF
&RDB&	                  ROLLBACK
C
C wait and try again - probably deadlock
C
	                  CALL LIB$WAIT(FLN_PSE)
	                  GOTO 10
&RDB&	               END_ERROR
C
C Transfer the outcome value and wire id to local variable
C
&RDB&	               OUTCOME
&RDB&		        (COUNT_OUTCOME(I),I) = 
&RDB&				O.OUTCOME_VALUE;
&RDB&	               WIRE_ID
&RDB&			(COUNT_OUTCOME(I),I) =
&RDB&				O.WIRE_ID;
&RDB&	            END_GET
&RDB&	         END_FOR
C
C End of getting of current element if it is of interest
C
	      ENDIF
C
&RDB&      END_FOR   
C
C Count how many elements there are in total
C
&RDB&	   GET
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_ELEMENTS_FLOWLINE = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Count how many elements are present in the element relation
C
&RDB&	      TOTAL_ELEMENT = COUNT OF E IN ELEMENT
&RDB&				WITH E.FLOWLINE_ID = FLOWLINE_ID
&RDB&	   END_GET
C
C Finish the transaction
C
&RDB&   COMMIT
C
C Set up index to next element to retrieve
C
	I = NEXT_ELEMENT
	IF ((TOTAL_ELEMENT.LE.COUNT_ELEMENT).OR.
     &	    (TOTAL_ELEMENT.LE.NEXT_ELEMENT)) THEN
	   NEXT_ELEMENT = 0
	ELSE
	   NEXT_ELEMENT = NEXT_ELEMENT + (FLN_FEW_ELEMENT - 1)
	ENDIF
C
	IF (TOTAL_ELEMENT.LT.NEXT_ELEMENT) NEXT_ELEMENT = 0
C
C Set up count of number of elements retreived here
C
	COUNT_ELEMENT = COUNT_ELEMENT - (I - 1)
C
C Exit
C
999	RETURN
	END
