	INTEGER FUNCTION FLN_RETRIEVE_OPER_TOTAL_TIMINGS(
     &		OPER_ID,		! ids of operators found
     &		TOTAL_CPU,		! total cpu time 100ths seconds
     &		TOTAL_CONNECT,		! total connect 100ths seconds
     &		NUM_SESS,		! number of session by operator
     &		QUOTIENT,		! efficiency quotients
     &		COUNT_OPER)		! count of operators found
C
***	MODULE FLN_RETRIEVE_OPER_TOTAL_TIMINGS
***	IDENT 15SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England.
C Author: J.M. Billing				13 September 1988
C
C Routine to retrieve the first 'FLN_MAX_OPER' sets of operator 
C timing statistics, sorted by operator identifier.
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE '($SSDEF)'
C
C Arguments
	CHARACTER*(*)	OPER_ID(FLN_MAX_OPER)	! operators found
	INTEGER		TOTAL_CPU(FLN_MAX_OPER)	! total cpu time 
	INTEGER		TOTAL_CONNECT(FLN_MAX_OPER)! total connect time
	INTEGER		NUM_SESS(FLN_MAX_OPER)	! number of sessions
	REAL		QUOTIENT(FLN_MAX_OPER)	! efficiency quotients
	INTEGER		COUNT_OPER		! count of operators
C
C Local Variables
	INTEGER		NUM_ERR		! number of errors
C
C Specify database
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C Assume success
C
	FLN_RETRIEVE_OPER_TOTAL_TIMINGS = SS$_NORMAL
C
C Initialise counts of errors and operators
C
	NUM_ERR = 0
10	CONTINUE
	COUNT_OPER = 0
C
C Start transaction to read operator information
C
&RDB&   START_TRANSACTION READ_ONLY 
&RDB&	RESERVING OPERATOR, SESSION_HISTORY
&RDB&   FOR SHARED
&RDB&   READ WAIT
C
C Deal with errors
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_OPER_TOTAL_TIMINGS = RDB$STATUS
		    GOTO 999
	         ENDIF
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Retrieve the operator timings, 
C Only retrieve the next FLN_MAX_OPER of them
C Sort by operator id 
C
&RDB&	   FOR
&RDB&	      FIRST FLN_MAX_OPER
&RDB&	      O IN OPERATOR
&RDB&	      SORTED BY O.OPERATOR_ID
C
C Deal with errors 
C
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_RETRIEVE_OPER_TOTAL_TIMINGS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C wait and try again - probably deadlock
C
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 10
&RDB&	      END_ERROR
C
C Increment count of number of operators
C
	      COUNT_OPER = COUNT_OPER + 1
C
C Calculate the operator efficiency quotient
C
	      QUOTIENT(COUNT_OPER) = 0
C
C Start retrieving the things we are interested in
C
&RDB&	      GET
C
C Deal with errors in starting GET
C
&RDB&	         ON ERROR
	            NUM_ERR = NUM_ERR+1
	            IF (NUM_ERR .GT. 5) THEN
	      	       FLN_RETRIEVE_OPER_TOTAL_TIMINGS = RDB$STATUS
&RDB&	               ROLLBACK
	               GOTO 999
	            ENDIF
&RDB&	            ROLLBACK
C
C wait and try again - probably deadlock
C
	            CALL LIB$WAIT(FLN_PSE)
	            GOTO 10
&RDB&	         END_ERROR
C
C And store the operator id in host variables
C
&RDB&	         OPER_ID(COUNT_OPER) = O.OPERATOR_ID;
C
C Count the number of sessions for this operator
C
&RDB&	         NUM_SESS(COUNT_OPER) = COUNT 
&RDB&			OF SH IN SESSION_HISTORY WITH 
&RDB&			SH.OPERATOR_ID = O.OPERATOR_ID AND
&RDB&			SH.CPU_TIME    NOT MISSING AND
&RDB&			SH.FINISH_TIME NOT MISSING AND
&RDB&			SH.FINISH_DATE NOT MISSING AND
&RDB&			SH.START_TIME  NOT MISSING AND
&RDB&			SH.START_DATE  NOT MISSING;
C
C Total the cpu time
C
&RDB&	         TOTAL_CPU(COUNT_OPER) = TOTAL SH.CPU_TIME OF
&RDB&			SH IN SESSION_HISTORY WITH 
&RDB&			SH.OPERATOR_ID = O.OPERATOR_ID AND
&RDB&			SH.CPU_TIME NOT MISSING AND
&RDB&			SH.FINISH_TIME NOT MISSING AND
&RDB&			SH.FINISH_DATE NOT MISSING AND
&RDB&			SH.START_TIME  NOT MISSING AND
&RDB&			SH.START_DATE  NOT MISSING;
C
C Total the connect time
C
&RDB&	         TOTAL_CONNECT(COUNT_OPER) = TOTAL
&RDB&			((SH.FINISH_TIME - SH.START_TIME) + 
&RDB&			 (SH.FINISH_DATE - SH.START_DATE) * 
&RDB&			 (24*3600*100)) OF
&RDB&			SH IN SESSION_HISTORY WITH 
&RDB&			SH.OPERATOR_ID = O.OPERATOR_ID AND
&RDB&			((SH.FINISH_TIME >= SH.START_TIME) OR
&RDB&			 (SH.FINISH_DATE >  SH.START_DATE)) AND
&RDB&			SH.FINISH_TIME NOT MISSING AND
&RDB&			SH.FINISH_DATE NOT MISSING AND
&RDB&			SH.START_TIME  NOT MISSING AND
&RDB&			SH.START_DATE  NOT MISSING AND
&RDB&			SH.CPU_TIME    NOT MISSING;
C
&RDB&         END_GET
C
&RDB&      END_FOR   
C
C Finish the transaction
C
&RDB&   COMMIT
C
C Exit
C
999	RETURN
	END
