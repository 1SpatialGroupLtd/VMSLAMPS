C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-17 17:26:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
		INTEGER*4 FUNCTION FLN_COMPLETE_UPDATE
     &	                    (TASKS,OUTCOMES,NUM_TASK,
     &			     ELEMENTS,NUM_ELEMENT,
     &			     WIRES,NUM_WIRE,
     &			     JOBS,NUM_JOB,
     &			     SESSION_ID,
     &			     JOB_ID,
     &			     CPU_TIME,
     &  		     TASK_DEL,
     &  		     NUM_PAR,
     &  		     PARAMETERS,
     &  		     NUM_GLOBAL,
     &  		     GLOBALS,
     &  		     NUM_EXT,
     &  		     EXTERNALS)
C
***	MODULE	FLN_COMPLETE_UPDATE
***	IDENT	17JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    26-Apr-1988
C
C  does all the updating necessary for task completion
C calls routines that operate within the transaction started in this
C routine
C its not nice doing it this way - but it ensures database consistency
C if all database updating for one task completeion is done in 
C a single transaction
C returns SS$_NORMAL if all is well - otherwise an RDB return code
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	TASKS(FLN_MAX_TASK)
	INTEGER*4	OUTCOMES(FLN_MAX_TASK)
	INTEGER*4	NUM_TASK
	CHARACTER*(*)	ELEMENTS(FLN_MAX_ELEMENT)
	INTEGER*4	NUM_ELEMENT
	INTEGER*4	JOBS(FLN_MAX_JOB)
	INTEGER*4	NUM_JOB
	CHARACTER*(*)	WIRES(FLN_MAXWIRE)
	INTEGER*4	NUM_WIRE
	INTEGER*4	JOB_ID
	INTEGER*4	SESSION_ID
	INTEGER*4	CPU_TIME
	INTEGER*4	TASK_DEL	! 
C					! don't do anything 
C					! with session
	INTEGER*4	NUM_PAR		!IN - number of parameters
	CHARACTER*(*)   PARAMETERS(FLN_MAX_PAR) !IN - parameters
	INTEGER*4	NUM_GLOBAL	!IN - number of global params
	CHARACTER*(*)	GLOBALS(FLN_MAX_GLOBAL) !IN - global params
	INTEGER*4	NUM_EXT		!IN - number of external params
	CHARACTER*(*)	EXTERNALS(FLN_MAX_EXT) !IN - external params
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C Functions
	INTEGER*4	FLN_SET_GLOBALS
	INTEGER*4	FLN_SET_WIRES
	INTEGER*4	FLN_ARCHIVE_JOB
	INTEGER*4	FLN_ARCHIVE_SESSION
	INTEGER*4	FLN_ARCHIVE_TASK
	INTEGER*4	FLN_SETUP_TASKS
	INTEGER*4	FLN_END_SESSION
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	I
	INTEGER*4	DUMMY
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
C assume success
	FLN_COMPLETE_UPDATE= %LOC(SS$_NORMAL)
C
C start the giant transaction
	NUM_ERR = 0
20	CONTINUE
C	
&RDB&   START_TRANSACTION READ_WRITE WAIT RESERVING SESSION,TASK,
&RDB&   WIRE_ACTIVE,JOB,JOB_HISTORY,TASK,TASK_HISTORY,TASKID,
&RDB&   SESSION_HISTORY, PARAMETER,PARAMETERID,GLOBAL_PARAMETER, 
&RDB&   WORKSTATION_AUTHORISATION,OPERATOR_AUTHORISATION FOR 
&RDB&   PROTECTED WRITE,
&RDB&    WIRE FOR SHARED READ 
C
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_COMPLETE_UPDATE = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
C
&RDB&	   END_ERROR
C
C set the wires active
	FLN_COMPLETE_UPDATE = FLN_SET_WIRES
     &			      (JOB_ID,WIRES,NUM_WIRE,
     &  		       NUM_PAR,PARAMETERS)
	IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	   NUM_ERR = NUM_ERR+1
	   IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	    ELSE
&RDB&	       ROLLBACK
	       GOTO 999
	    ENDIF
	ENDIF
C
C setup the new tasks
	IF (NUM_ELEMENT .GT. 0) THEN
	   FLN_COMPLETE_UPDATE = 
     &          FLN_SETUP_TASKS(ELEMENTS,NUM_ELEMENT,JOB_ID)
C	
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	            .AND. NUM_ERR .LT. 10)THEN
	           CALL LIB$WAIT(FLN_PSE)
&RDB&	            ROLLBACK
	            GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	   ENDIF
	ENDIF
C
C flag the session as complete
	IF (.NOT. TASK_DEL) THEN
	   FLN_COMPLETE_UPDATE= FLN_END_SESSION(SESSION_ID,
     &	   CPU_TIME,'Complete',DUMMY)
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	      ELSE
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C setup global and external parameters
	IF (NUM_GLOBAL .GT. 0) THEN
	   FLN_COMPLETE_UPDATE= FLN_SET_GLOBALS
     &     (JOB_ID,NUM_GLOBAL,GLOBALS,NUM_EXT,EXTERNALS,.FALSE.)
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	      ELSE
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
	   ENDIF
	ENDIF
C
C archive all the tasks and related sessions
	DO 30 I = 1,NUM_TASK
C
C	   IF (I. EQ. 1 .AND. TASK_DEL) THEN
C
C void the task which has been skipped
C	      FLN_COMPLETE_UPDATE = FLN_ARCHIVE_TASK
C     &	      (TASKS(I),OUTCOMES(I),'Void')
C	   ELSE
	      FLN_COMPLETE_UPDATE=FLN_ARCHIVE_TASK(TASKS(I),OUTCOMES(I)
     &	      ,'Inactive')
C	   ENDIF
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	   ENDIF
	   FLN_COMPLETE_UPDATE = FLN_ARCHIVE_SESSION(TASKS(I))
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	   ENDIF
30	CONTINUE
C 
C and archive any jobs
	DO 40 I = 1,NUM_JOB
	   FLN_COMPLETE_UPDATE  = FLN_ARCHIVE_JOB(JOBS(I))
	   IF (.NOT. FLN_COMPLETE_UPDATE) THEN
	      NUM_ERR = NUM_ERR+1
	      IF(FLN_COMPLETE_UPDATE .EQ. %LOC(RDB$_DEADLOCK)
     &	         .AND. NUM_ERR .LT. 10)THEN
	         CALL LIB$WAIT(FLN_PSE)
&RDB&	         ROLLBACK
	         GOTO 20
	       ELSE
&RDB&	          ROLLBACK
	          GOTO 999
	       ENDIF
	   ENDIF
40	CONTINUE
C
&RDB&   COMMIT
C
999	RETURN
	END
