C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-17 17:26:04.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_SET_WIRES(JOB_ID,WIRE,NUM_WIRE
     &                                   ,NUM_PAR,PARAMETERS)
C
***	MODULE	FLN_SET_WIRES
***	IDENT	17JL91
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    24-Feb-1988
C
C  sets the given wires active for the given job and flowline ids
C returns the status of the database operation 
C NB *** A transaction should opened in the calling routine
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
C
C Arguments
	INTEGER*4	JOB_ID		! IN - job_id
	INTEGER*4	NUM_WIRE	! number of wire ids
	CHARACTER*(*)	WIRE(FLN_MAXWIRE)  ! IN - wire ids
	INTEGER*4	NUM_PAR		! IN - number of parameters
	CHARACTER*(*)   PARAMETERS(FLN_MAX_PAR) !IN - parameters
C
C RDB return codes
	INTEGER*4	RDB$_DEADLOCK
	EXTERNAL	RDB$_DEADLOCK
C
C function
	INTEGER*4	FLN_GET_PARAMETER_ID
C Local Variables
	INTEGER*4	I,J		! counter
	INTEGER*4	NUM_ACTIVE	! active wires
	INTEGER*4	PARAMETER_ID
C
&RDB&	DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
20	CONTINUE
	DO 30 I = 1,NUM_WIRE
C
C it is possible that we may have wires that are already active
C eg from a loop
C so don't try and reactivate them
&RDB&      GET 
&RDB&         ON ERROR
		 FLN_SET_WIRES = RDB$STATUS
		 GOTO 999
&RDB&	      END_ERROR
C	         
&RDB&     NUM_ACTIVE = COUNT OF W IN WIRE_ACTIVE WITH
&RDB&      W.JOB_ID = JOB_ID AND
&RDB&      W.WIRE_ID  = WIRE(I) END_GET
C
	   IF (NUM_ACTIVE .EQ. 0) THEN
&RDB&         STORE W IN WIRE_ACTIVE USING
C
C if its a deadlock then retry after waiting
&RDB&            ON ERROR
		    FLN_SET_WIRES = RDB$STATUS
		    GOTO 999
&RDB&	         END_ERROR
&RDB&            W.JOB_ID = JOB_ID;
&RDB&            W.WIRE_ID = WIRE(I);
&RDB&         END_STORE
C
	      IF (NUM_PAR .GT. 0) THEN
	         FLN_SET_WIRES= FLN_GET_PARAMETER_ID(PARAMETER_ID)
	         IF (.NOT. FLN_SET_WIRES) GOTO 999
	      ENDIF		 
	      DO 25 J = 1,NUM_PAR
&RDB&            STORE P IN PARAMETER USING
&RDB&               ON ERROR
		       FLN_SET_WIRES = RDB$STATUS
		       GOTO 999
&RDB&	            END_ERROR
&RDB&               P.PARAMETER_ID  = PARAMETER_ID;
&RDB&   	    P.PARAMETER_STRING = PARAMETERS(J);
&RDB&             END_STORE
&RDB&   	  FOR W IN WIRE_ACTIVE WITH
&RDB&      	    W.JOB_ID = JOB_ID AND
&RDB&      	    W.WIRE_ID  = WIRE(I) 
&RDB&   	    MODIFY W USING
&RDB&                  ON ERROR
		          FLN_SET_WIRES = RDB$STATUS
		          GOTO 999
&RDB&	               END_ERROR
&RDB&   	       W.PARAMETER_ID = PARAMETER_ID;
&RDB&   	    END_MODIFY
&RDB&             END_FOR
25	      CONTINUE
	   ENDIF
30	CONTINUE
C
	FLN_SET_WIRES  = RDB$STATUS	
C		   
999	RETURN
	END
