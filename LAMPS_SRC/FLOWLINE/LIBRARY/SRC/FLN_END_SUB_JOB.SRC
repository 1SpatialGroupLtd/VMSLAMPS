	INTEGER*4 FUNCTION FLN_END_SUB_JOB(JOB_ID,OUTER_TASK,
     &                                     OUTER_TASK_END)
C
***	MODULE	FLN_END_SUB_JOB
***	IDENT	06OC88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    29-Mar-1988
C
C Checks to see if the specified job is a sub-job. If its not do nothing
C If it is a sub-job then look for other jobs in the same outer task. If
C there aren't any it means this is the last of the sub-jobs.
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER		SS$_NORMAL
	EXTERNAL	SS$_NORMAL	! normal successful completion
C
C Arguments
	INTEGER*4	JOB_ID		! IN
	INTEGER*4	OUTER_TASK	! OUT
	LOGICAL		OUTER_TASK_END	! OUT - is the outer task fin
C
C
C Local Variables
	LOGICAL		SUB_JOB
	INTEGER*4	NUM_OTHERS
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME  'LSL$FLN_DATABASE:FLOWLINE'
C
C assume success
	FLN_END_SUB_JOB = %LOC(SS$_NORMAL)
C
	OUTER_TASK = 0
	OUTER_TASK_END = .FALSE.
C
C assume its not a sub-job
	SUB_JOB = .FALSE.
C
C work out if its a sub-job by checking that relevant fields
C are present in the JOB relation
	NUM_ERR = 0
20	CONTINUE
&RDB&   START_TRANSACTION READ_ONLY WAIT RESERVING JOB FOR SHARED 
&RDB&   READ 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_END_SUB_JOB = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&   FOR J IN JOB WITH J.JOB_ID = JOB_ID AND J.OUTER_TASK_ID 
&RDB&   NOT MISSING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_END_SUB_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_END_SUB_JOB = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         OUTER_TASK = J.OUTER_TASK_ID;
&RDB&      END_GET
	   SUB_JOB = .TRUE.
&RDB&   END_FOR
C
C  is it  a sub-flowline ?
	IF (.NOT. SUB_JOB) THEN
&RDB&      COMMIT
	   GOTO 999
	ENDIF
C
C now check the JOB relation for any other jobs which are also 
C part of the same outer task
30	CONTINUE
&RDB&   GET 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_END_SUB_JOB = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      NUM_OTHERS = COUNT OF J IN JOB WITH J.OUTER_TASK_ID = 
&RDB&      OUTER_TASK AND NOT (J.JOB_ID = JOB_ID)
&RDB&   END_GET
&RDB&   COMMIT
C 
	IF (NUM_OTHERS .GT. 0) THEN
C
C presence of sub-jobs in the same outer task shows that it is not
C finished
	   OUTER_TASK_END = .FALSE.
	ELSE
	   OUTER_TASK_END  = .TRUE.
	ENDIF
C
999	RETURN
	END
