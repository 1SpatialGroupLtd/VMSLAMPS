C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-04-28 14:52:18.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_EVAL(JOB_ID,FLN_ID,CONDITIONS,RESULT)
C
***	MODULE	FLN_EVAL
***	IDENT	28AP88
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Created					MWSR  1-Mar-1987
C from LITES2 code by CCB
C
C
C To evaluate logical expression 
C Returns SS$_NORMAL if succeeds.
C
	IMPLICIT NONE
C
C
C arguments
	CHARACTER*(*)   FLN_ID		! IN - flowline id
	INTEGER*4	JOB_ID		! IN - job_id
	CHARACTER*(*)   CONDITIONS      ! IN - string of initial 
C					!      conditions
	LOGICAL		RESULT		! OUT - logical result
C
C
	INCLUDE 'LSL$CMNLSL:READSTR.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C
C functions called
	LOGICAL		RDCH,RDCHS,RDLONG,RDREAL
	INTEGER		RDCOMM,READSTR
	INTEGER		FLN_GET_WIRE_STATUS
	INTEGER		LIB$LEN	
C
C workspace
	BYTE	CH,CHX
	INTEGER	LEV		! stack level
	INTEGER	MAXLEV		! stack size
	PARAMETER (MAXLEV=10)
	INTEGER	LVAL(MAXLEV)	! stack of logicals
	INTEGER	OPS(MAXLEV)	! and operators
	INTEGER	BRAS(MAXLEV)
	INTEGER	MAXOP		! number of operators
	PARAMETER (MAXOP=5)
	INTEGER TOTOP		! total number of operators
	INTEGER	OP		! current operator
	INTEGER	I
	INTEGER		RET,RETVAL
	INTEGER*2	SAVDP
	LOGICAL*1	EOL
	LOGICAL*1	ERROR
	INTEGER		LENSTR
	INTEGER		NCHS
	CHARACTER*60	STR
	LOGICAL		ACTIVE	! wire is active ?
	LOGICAL		VALID	! valid wire?
	BYTE		BRACK
	PARAMETER	(BRACK = 41)
C
C initialise
	FLN_EVAL = %LOC(SS$_NORMAL) ! assume success
	LEV = 1			! nothing on stack
	EOL = .FALSE.		! not had end of line
C
C set buffer to conditions clause
	LENSTR = LIB$LEN(CONDITIONS)
	CALL SETAUX(%REF(CONDITIONS),LENSTR)
C
50	BRAS(LEV) = 0		! no ( at this level
	OP = 0			! no operator yet
C
C now looking for opening (, a wire_id  or a .NOT.
100	IF (RDCHS(CH)) THEN
	   FLN_EVAL = FLN__BADCOND
	   GOTO 999
	ENDIF
C
C Is it a (. If so then count it and repeat.
	IF (CH.EQ.'(') THEN
	   BRAS(LEV) = BRAS(LEV)+1
	   GOTO 100
	ENDIF
C
C
C Try for a wire_id
	CALL BSCH
	CALL DCPSAV(SAVDP)
	NCHS = READSTR(STR,BRACK,ON_SPACE,,RETVAL)
C
	IF (RETVAL) THEN
	   IF(RETVAL .EQ. LSL__STRCHAR) THEN
C
C backspace if we've terminated on the closing bracket)
	      CALL BSCH
	   ENDIF
	ELSE
	   FLN_EVAL = FLN__BADCOND
	   GOTO 999
	ENDIF
C
	FLN_EVAL = 
     &  FLN_GET_WIRE_STATUS(STR(:NCHS),JOB_ID,FLN_ID,ACTIVE,VALID)
	IF (.NOT. FLN_EVAL) GOTO 999
	IF (VALID) THEN
C
C its a valid wire_id
	   LVAL(LEV) = ACTIVE
	   GOTO 200
	ENDIF
C
C failed as a wire_id , was it a NOT
	IF (NCHS .GE. 3) THEN
	   IF(STR(:NCHS).EQ. 'NOT')THEN
	      OP = 3
	      IF (NCHS .GT. 3) THEN 
C
C if we've read more than the NOT then backspace to the end of it
		 DO 150 I = NCHS,4,-1
		    CALL BSCH
150		 CONTINUE
	      ENDIF
	      GOTO 500
	   ENDIF			! stack it up
	ENDIF
C
C total rubbish
	FLN_EVAL = FLN__BADCOND
	GOTO 999
C
C now looking for an AND or OR , or )
200	CALL DCPSAV(SAVDP)
	IF (.NOT.RDCHS(CH)) GOTO 205
C
	EOL = .TRUE.				! had end of line
C
C here to process end of line
202	IF (BRAS(LEV).EQ.0) THEN
	   IF (LEV.EQ.1) GOTO 900		! finished
	   GOTO 400				! try to evaluate
	ENDIF
	FLN_EVAL = FLN__BADCOND
	GOTO 999
C
205	IF (CH.NE.')') GOTO 300
C
C here to process )
210	IF (BRAS(LEV).GT.0) THEN
	   BRAS(LEV) = BRAS(LEV)-1
	   GOTO 200
	ENDIF
	IF (LEV.EQ.1) THEN
	   FLN_EVAL = FLN__BADCOND
	   GOTO 999
	ENDIF
	GOTO 400
C
C have we got an operator?
300	CALL DCPSET(SAVDP)
	NCHS = READSTR(STR,,ON_SPACE,,RETVAL)
	IF (.NOT. RETVAL) THEN
	   FLN_EVAL = FLN__BADCOND
	   GOTO 999
	ENDIF
	IF (NCHS .GE.2) THEN
	   IF (STR(:2) .EQ. 'OR') THEN
	      OP = 1
	      IF (NCHS .GT. 2) THEN 
C
C if we've read more than the OR then backspace to the end of it
		 DO 305 I = NCHS,3,-1
		    CALL BSCH
305		 CONTINUE
	      ENDIF
	      GOTO 320
	   ELSEIF (STR(:3) .EQ. 'AND') THEN
	      OP = 2
	      IF (NCHS .GT. 3) THEN 
C
C if we've read more than the AND then backspace to the end of it
		 DO 310I = NCHS,4,-1
		    CALL BSCH
310		 CONTINUE
	      ENDIF
	      GOTO 320
	   ENDIF
	ENDIF
	FLN_EVAL = FLN__BADCOND
	GOTO 999
C
C check operator level
320	IF (LEV.EQ.1) GOTO 500				! stack it
	IF (BRAS(LEV).GT.0) GOTO 500			! stack it
C
C pop stack and evaluate expression
400	GOTO (401,402,403)OPS(LEV-1)
C
C OR
401	LVAL(LEV-1) = LVAL(LEV-1).OR.LVAL(LEV)
	GOTO 499
C
C AND
402	LVAL(LEV-1) = LVAL(LEV-1).AND.LVAL(LEV)
	GOTO 499
C
C NOT
403	LVAL(LEV-1) = .NOT.(LVAL(1))
	GOTO 499
C
C drop down operator (if any) from current level
C
499	LEV = LEV-1			! unstack
C
C If we haven't got an operator, then must be doing ) or end of line
	IF (OP.EQ.0) THEN		! no operator
	   IF (EOL) THEN
	      GOTO 202			! process end of line
	   ELSE
	      GOTO 210			! continue to process )
	   ENDIF
	ENDIF
C
C We have got an operator, so back to check it out
	GOTO 320
C
C Stack an operator
500	IF (LEV.EQ.MAXLEV) THEN
	   FLN_EVAL = FLN__CONDNEST
C	   CALL WRITEF('Exceeded maximum nesting level')
	   GOTO 999
	ENDIF
	OPS(LEV) = OP			! save operator at this level
	LEV = LEV+1			! and step on to next
	GOTO 50
C
C Finished - return the answer
900	RESULT = LVAL(1)
C
999	RETURN
	END
