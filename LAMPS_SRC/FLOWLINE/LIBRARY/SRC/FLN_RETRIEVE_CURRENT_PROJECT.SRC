C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-17 12:56:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_RETRIEVE_CURRENT_PROJECT
     &  (OPERATOR_ID,PROJECT_ID,IS_CURRENT)
C
***	MODULE	FLN_RETRIEVE_CURRENT_PROJECT
***	IDENT	23AP88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    18-Apr-1988
C
C - retrieves the current PROJECT  being worked on.
C returns IS_CURRENT false
C if the PROJECT  doesn't exist or isn't active
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	CHARACTER*(*)	OPERATOR_ID	! IN
	CHARACTER*(*)	PROJECT_ID	! OUT
	LOGICAL		IS_CURRENT	! OUT
C
C Local Variables
	INTEGER*4	NUM_PROJECT
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
C assume success
	FLN_RETRIEVE_CURRENT_PROJECT= %LOC(SS$_NORMAL)
	IS_CURRENT = .TRUE.
C
	NUM_ERR = 0
20	CONTINUE
&RDB&   START_TRANSACTION READ_ONLY RESERVING OPERATOR,PROJECT
&RDB&   FOR SHARED READ WAIT
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_CURRENT_PROJECT = RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
	NUM_PROJECT = 0
C
&RDB&   FOR O IN OPERATOR WITH O.OPERATOR_ID = OPERATOR_ID AND
&RDB&   O.CURRENT_PROJECT  NOT MISSING
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_CURRENT_PROJECT = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_PROJECT = NUM_PROJECT+1
&RDB&      GET 
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_CURRENT_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         PROJECT_ID = O.CURRENT_PROJECT
&RDB&      END_GET 
&RDB&   END_FOR   
	IF (NUM_PROJECT .EQ. 0) THEN
	   IS_CURRENT = .FALSE.
	   GOTO 900
	ENDIF
C
C now look in the PROJECT relation to see if the PROJECT exists
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_CURRENT_PROJECT = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&       NUM_PROJECT  = COUNT OF P IN PROJECT
&RDB&       WITH P.PROJECT_ID= PROJECT_ID AND P.PROJECT_STATUS= 'Active'
&RDB&      END_GET
C
	IF (NUM_PROJECT.EQ. 0) THEN
	   IS_CURRENT = .FALSE.
	ENDIF
C 
900	CONTINUE
&RDB&   COMMIT
C
999	RETURN
	END
