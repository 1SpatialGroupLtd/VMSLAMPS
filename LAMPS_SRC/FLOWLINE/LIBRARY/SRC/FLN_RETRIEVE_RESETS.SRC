	INTEGER*4 FUNCTION FLN_RETRIEVE_RESETS(JOB_ID,
     &  ELMNTS,NUM_ELMNT)
C
***	MODULE	FLN_RETRIEVE_RESETS
***	IDENT	12MY88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    11-May-1988
C
C retrieves the elements in a job to which it is legal to reset a job
C
C
	IMPLICIT NONE
C
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	JOB_ID		! IN
	CHARACTER*(*)   ELMNTS(FLN_MAX_TASK) ! OUT - array of elements
	INTEGER*4	NUM_ELMNT	! OUT - number of elements
C
C Functions
C
C Local Variables
	INTEGER*4	I
	INTEGER*4	COUNT_TASK
	CHARACTER*8	TSTATUS(FLN_MAX_TASK)
	INTEGER*4	NUM_ERR
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_RETRIEVE_RESETS = %LOC(SS$_NORMAL)
C 
C retrieve all the tasks with the given job_ID
C
	NUM_ERR = 0
20	CONTINUE
	COUNT_TASK = 0
&RDB&   START_TRANSACTION READ_ONLY WAIT RESERVING TASK,TASK_HISTORY
&RDB&   FOR SHARED READ 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_RESETS= RDB$STATUS
		 GOTO 999
	      ENDIF
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
C
C retrieve all the elements with the given job_id
&RDB&   FOR T IN TASK WITH T.JOB_ID  = JOB_ID
&RDB&      SORTED BY T.ELEMENT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_RESETS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK = COUNT_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_RESETS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         ELMNTS(COUNT_TASK) = T.ELEMENT_ID;
&RDB&         TSTATUS(COUNT_TASK) = T.TASK_STATUS
&RDB&      END_GET
&RDB&   END_FOR   
C
C for each of the tasks check that its not active
C
	DO 30 I = 1, COUNT_TASK
	   IF (TSTATUS(I) .EQ. 'Active')THEN
	      FLN_RETRIEVE_RESETS = FLN__TASKACTIVE
&RDB&	      ROLLBACK
	      GOTO 999
	   ENDIF
30	CONTINUE
C
C retrieve from task history also  - this time ignoring all voided
C entries
C retrieve all the elements with the given job_id
&RDB&   FOR T IN TASK_HISTORY WITH T.JOB_ID  = JOB_ID
&RDB&      AND T.TASK_STATUS NE "Void"
&RDB&      SORTED BY T.ELEMENT_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
		 FLN_RETRIEVE_RESETS = RDB$STATUS
&RDB&	         ROLLBACK
		 GOTO 999
	      ENDIF
&RDB&	      ROLLBACK
C
C try again - probably deadlock
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   COUNT_TASK = COUNT_TASK+1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
		    FLN_RETRIEVE_RESETS = RDB$STATUS
&RDB&	            ROLLBACK
		    GOTO 999
	         ENDIF
&RDB&	         ROLLBACK
C
C try again - probably deadlock
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         ELMNTS(COUNT_TASK) = T.ELEMENT_ID;
&RDB&         TSTATUS(COUNT_TASK) = T.TASK_STATUS
&RDB&      END_GET
&RDB&   END_FOR   
&RDB&   COMMIT
C
	NUM_ELMNT = COUNT_TASK
C
999	RETURN
	END
