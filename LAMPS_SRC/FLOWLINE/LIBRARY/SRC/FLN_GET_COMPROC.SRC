C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-29 18:19:32.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FLN_GET_COMPROC(TASKID,PROJECT_COM,JOB_COM,
     &  ELEMENT_COM,PROC_COM,NUM_PAR,PARAMETERS)
C
***	MODULE	FLN_GET_COMPROC
***	IDENT	29SE88
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    19-Apr-1988
C
C gets from the database all the command files which are necessary 
C to run a task
C
	IMPLICIT NONE
C Parameters
	INCLUDE	'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE	'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INTEGER*4	SS$_NORMAL
	EXTERNAL	SS$_NORMAL
C
C Arguments
	INTEGER*4	TASKID		! IN - task
	CHARACTER*(*)	PROJECT_COM	! OUT - project com proc
	CHARACTER*(*)	JOB_COM		! OUT - job com proc
	CHARACTER*(*)	ELEMENT_COM	! OUT - element com proc
	CHARACTER*(*)	PROC_COM	! OUT - procedure com proc
	INTEGER*4	NUM_PAR		! OUT - number of parameters
	CHARACTER*(*)	PARAMETERS(FLN_MAX_PAR) !OUT - parameters
C
C Local Variables
	INTEGER*4	NUM_ERR
	INTEGER*4	JOB_ID
C
&RDB&   DATABASE FILENAME 'LSL$FLN_DATABASE:FLOWLINE'
C
	FLN_GET_COMPROC = %LOC(SS$_NORMAL)
C
	NUM_ERR = 0
20 	CONTINUE
	NUM_PAR = 0
&RDB&   START_TRANSACTION READ_ONLY RESERVING TASK,ELEMENT,JOB,PROCEDURE
&RDB&   ,PROJECT,PARAMETER,GLOBAL_PARAMETER
&RDB&   FOR SHARED READ WAIT
&RDB&	ON ERROR
	   NUM_ERR = NUM_ERR+1
	   IF (NUM_ERR .GT. 5) THEN
	      FLN_GET_COMPROC = RDB$STATUS
	      GOTO 999
	   ENDIF
C
C try again - probably deadlock
	   CALL LIB$WAIT(FLN_PSE)
	   GOTO 20
&RDB&	END_ERROR
C
&RDB&   FOR T IN TASK 
&RDB&   CROSS E IN ELEMENT OVER ELEMENT_ID 
&RDB&   CROSS P IN PROCEDURE OVER PROCEDURE_ID
&RDB&   CROSS J IN JOB OVER JOB_ID
&RDB&   CROSS PJ IN PROJECT OVER PROJECT_ID
&RDB&   WITH T.TASK_ID  = TASKID AND
&RDB&   E.FLOWLINE_ID = J.FLOWLINE_ID
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_GET_COMPROC = RDB$STATUS
&RDB&	      ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&	      ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_GET_COMPROC = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
&RDB&	         ROLLBACK
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         ELEMENT_COM = E.COMMAND_PROC;
&RDB&         PROC_COM = P.COMMAND_PROC;
&RDB&         JOB_COM = J.COMMAND_PROC;
&RDB&         JOB_ID  = J.JOB_ID;
&RDB&         PROJECT_COM = PJ.COMMAND_PROC;
&RDB&      END_GET
&RDB&   END_FOR
C
C get  the parameters
&RDB&   FOR T IN TASK CROSS PA IN PARAMETER OVER PARAMETER_ID
&RDB&      WITH T.TASK_ID  = TASKID 
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_GET_COMPROC = RDB$STATUS
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&	      ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_PAR = NUM_PAR +1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_GET_COMPROC = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
&RDB&	         ROLLBACK
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         PARAMETERS(NUM_PAR) = PA.PARAMETER_STRING;
&RDB&      END_GET
&RDB&   END_FOR
C
C get the global parameters and add them to the same parameter list 
C they don't have to be distinguished at this stage. Don't retrieve
C the external parameters
&RDB&   FOR G IN GLOBAL_PARAMETER WITH G.JOB_ID  = JOB_ID
&RDB&   AND G.PARAMETER_TYPE = 1
&RDB&	   ON ERROR
	      NUM_ERR = NUM_ERR+1
	      IF (NUM_ERR .GT. 5) THEN
	         FLN_GET_COMPROC = RDB$STATUS
&RDB&	         ROLLBACK
	         GOTO 999
	      ENDIF
C
C try again - probably deadlock
&RDB&	      ROLLBACK
	      CALL LIB$WAIT(FLN_PSE)
	      GOTO 20
&RDB&	   END_ERROR
	   NUM_PAR = NUM_PAR +1
&RDB&      GET
&RDB&	      ON ERROR
	         NUM_ERR = NUM_ERR+1
	         IF (NUM_ERR .GT. 5) THEN
	            FLN_GET_COMPROC = RDB$STATUS
&RDB&	            ROLLBACK
	            GOTO 999
	         ENDIF
C
C try again - probably deadlock
&RDB&	         ROLLBACK
	         CALL LIB$WAIT(FLN_PSE)
	         GOTO 20
&RDB&	      END_ERROR
&RDB&         PARAMETERS(NUM_PAR) = G.PARAMETER_STRING;
&RDB&      END_GET
&RDB&   END_FOR
C
&RDB&   COMMIT
999	RETURN
	END
