$	verification_status=f$verify(0)
%SET-E-NOTSET, error modifying process name
-SYSTEM-F-DUPLNAM, duplicate name
%DCL-I-DEFKEY, DEFAULT key DO has been defined
%DCL-I-DEFKEY, DEFAULT key F17 has been defined
%DCL-I-DEFKEY, DEFAULT key F18 has been defined
%DCL-I-DEFKEY, DEFAULT key F19 has been defined
%DCL-I-DEFKEY, DEFAULT key F20 has been defined
%TEST-I-SETUPSEALS, Setting up search lists ...
%TEST-I-SEALSSETUP, Search lists set up
%TEST-I-SETUPSEALS, Setting up search lists ...
%TEST-I-SEALSSETUP, Search lists set up
  LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$	newmsg/number=1711/name=fln/prefix=fln__ /parameter=for flowline.mes /runoff
Message file:     FLOWLINE.MES
Facility number:  1711
Facility name:    FLN
Facility prefix:  FLN__
Generating output for FORTRAN RUNOFF
Generating output for message object module
$ @flowline.temp_com
$!
$! Temporary command file generated by NEWMSG
$!
$	on error then continue
$!
$	adc  SYS$DISK:[]FLOWLINE.PROMSG_TEMP/co=SYS$DISK:[]FLOWLINE.PROMSG
$	message/nolist/obj=SYS$DISK:[]FLOWLINE.PROMSG_OBJ  SYS$DISK:[]FLOWLINE.PROMSG_TEMP
$	if .not.$status then goto had_an_error
$	pvv  SYS$DISK:[]FLOWLINE.PROMSG_OBJ
$	purge/nolog  SYS$DISK:[]FLOWLINE.PROMSG_OBJ
$	delete/noconfirm  SYS$DISK:[]FLOWLINE.PROMSG;*
$	delete/noconfirm  SYS$DISK:[]FLOWLINE.PROMSG_TEMP;*
$	delete/noconfirm  ADC.IDE;*
$!
$	fortran/nolist  GENPAR
$	if .not.$status then goto had_an_error
$	link/nomap	GENPAR,SYS$DISK:[]FLOWLINE.PROMSG_OBJ
$	if .not.$status then goto had_an_error
$	run  GENPAR
$!
$	purge/nolog  SYS$DISK:[]FLOWLINEMSG.PAR
$!
$	delete/noconfirm  GENPAR.FOR;*
$	delete/noconfirm  GENPAR.OBJ;*
$	delete/noconfirm  GENPAR.EXE;*
$!
$! ****************************************************
$!
$	delete/noconfirm  LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.TEMP_COM;1
$	exit 1	! SS$_NORMAL
$ if $status then libr flowline.promsg_obj
%LIBRAR-S-INSERTED, module FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_ARCHIVE_JOB.rfo/co=FLN_ARCHIVE_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_ARCHIVE_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_ARCHIVE_JOB
'RDB$FLN_ARCHIVE_JOB' not in module table
$ 	purge/nolog FLN_ARCHIVE_JOB.obj
$ 	purge/nolog FLN_ARCHIVE_JOB.for
$ 	purge/nolog FLN_ARCHIVE_JOB.rfo
$ 	if ok then delete/nolog FLN_ARCHIVE_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_ARCHIVE_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_ARCHIVE_JOB
%LIBRAR-S-INSERTED, module FLN_ARCHIVE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_ARCHIVE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_ARCHIVE_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_ARCHIVE_SESSION.rfo/co=FLN_ARCHIVE_SESSION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_ARCHIVE_SESSION
$ 	ok=$status
$ 	if ok then pvv FLN_ARCHIVE_SESSION
'RDB$FLN_ARCHIVE_SESSION' not in module table
$ 	purge/nolog FLN_ARCHIVE_SESSION.obj
$ 	purge/nolog FLN_ARCHIVE_SESSION.for
$ 	purge/nolog FLN_ARCHIVE_SESSION.rfo
$ 	if ok then delete/nolog FLN_ARCHIVE_SESSION.lis;*
$	if .not.ok then emsg=emsg+" FLN_ARCHIVE_SESSION"
$ 	delete adc.ide;*
$	if ok then libr FLN_ARCHIVE_SESSION
%LIBRAR-S-INSERTED, module FLN_ARCHIVE_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_ARCHIVE_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_ARCHIVE_SESSION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_ARCHIVE_TASK.rfo/co=FLN_ARCHIVE_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_ARCHIVE_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_ARCHIVE_TASK
'RDB$FLN_ARCHIVE_TASK' not in module table
$ 	purge/nolog FLN_ARCHIVE_TASK.obj
$ 	purge/nolog FLN_ARCHIVE_TASK.for
$ 	purge/nolog FLN_ARCHIVE_TASK.rfo
$ 	if ok then delete/nolog FLN_ARCHIVE_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_ARCHIVE_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_ARCHIVE_TASK
%LIBRAR-S-INSERTED, module FLN_ARCHIVE_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_ARCHIVE_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_ARCHIVE_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_AUTHORISE_OPERATOR/co=FLN_AUTHORISE_OPERATOR
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_AUTHORISE_OPERATOR
$ 	ok=$status
$ 	if ok then pvv FLN_AUTHORISE_OPERATOR
$ 	purge/nolog FLN_AUTHORISE_OPERATOR.obj
$ 	purge/nolog FLN_AUTHORISE_OPERATOR.for
$ 	if ok then delete/nolog FLN_AUTHORISE_OPERATOR.lis;*
$	if .not.ok then emsg=emsg+" FLN_AUTHORISE_OPERATOR"
$ 	delete adc.ide;*
$	if ok then libr FLN_AUTHORISE_OPERATOR
%LIBRAR-S-INSERTED, module FLN_AUTHORISE_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_AUTHORISE_OPERATOR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_AUTHORISE_WORKSTATION/co=FLN_AUTHORISE_WORKSTATION
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_AUTHORISE_WORKSTATION
$ 	ok=$status
$ 	if ok then pvv FLN_AUTHORISE_WORKSTATION
$ 	purge/nolog FLN_AUTHORISE_WORKSTATION.obj
$ 	purge/nolog FLN_AUTHORISE_WORKSTATION.for
$ 	if ok then delete/nolog FLN_AUTHORISE_WORKSTATION.lis;*
$	if .not.ok then emsg=emsg+" FLN_AUTHORISE_WORKSTATION"
$ 	delete adc.ide;*
$	if ok then libr FLN_AUTHORISE_WORKSTATION
%LIBRAR-S-INSERTED, module FLN_AUTHORISE_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_AUTHORISE_WORKSTATION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_BEGIN_TASK.rfo/co=FLN_BEGIN_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_BEGIN_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_BEGIN_TASK
'RDB$FLN_BEGIN_TASK' not in module table
$ 	purge/nolog FLN_BEGIN_TASK.obj
$ 	purge/nolog FLN_BEGIN_TASK.for
$ 	purge/nolog FLN_BEGIN_TASK.rfo
$ 	if ok then delete/nolog FLN_BEGIN_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_BEGIN_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_BEGIN_TASK
%LIBRAR-S-INSERTED, module FLN_BEGIN_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_BEGIN_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_BEGIN_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHANGE_PAR.rfo/co=FLN_CHANGE_PAR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHANGE_PAR
$ 	ok=$status
$ 	if ok then pvv FLN_CHANGE_PAR
'RDB$FLN_CHANGE_PAR' not in module table
$ 	purge/nolog FLN_CHANGE_PAR.obj
$ 	purge/nolog FLN_CHANGE_PAR.for
$ 	purge/nolog FLN_CHANGE_PAR.rfo
$ 	if ok then delete/nolog FLN_CHANGE_PAR.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHANGE_PAR"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHANGE_PAR
%LIBRAR-S-INSERTED, module FLN_CHANGE_PAR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHANGE_PAR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHANGE_PAR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHANGE_PROJ_PRI.rfo/co=FLN_CHANGE_PROJ_PRI
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHANGE_PROJ_PRI
$ 	ok=$status
$ 	if ok then pvv FLN_CHANGE_PROJ_PRI
'RDB$FLN_CHANGE_PROJ_PRI' not in module table
$ 	purge/nolog FLN_CHANGE_PROJ_PRI.obj
$ 	purge/nolog FLN_CHANGE_PROJ_PRI.for
$ 	purge/nolog FLN_CHANGE_PROJ_PRI.rfo
$ 	if ok then delete/nolog FLN_CHANGE_PROJ_PRI.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHANGE_PROJ_PRI"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHANGE_PROJ_PRI
%LIBRAR-S-INSERTED, module FLN_CHANGE_PROJ_PRI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHANGE_PROJ_PRI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHANGE_PROJ_PRI.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHANGE_JOB_PRI.rfo/co=FLN_CHANGE_JOB_PRI
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHANGE_JOB_PRI
$ 	ok=$status
$ 	if ok then pvv FLN_CHANGE_JOB_PRI
'RDB$FLN_CHANGE_JOB_PRI' not in module table
$ 	purge/nolog FLN_CHANGE_JOB_PRI.obj
$ 	purge/nolog FLN_CHANGE_JOB_PRI.for
$ 	purge/nolog FLN_CHANGE_JOB_PRI.rfo
$ 	if ok then delete/nolog FLN_CHANGE_JOB_PRI.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHANGE_JOB_PRI"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHANGE_JOB_PRI
%LIBRAR-S-INSERTED, module FLN_CHANGE_JOB_PRI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHANGE_JOB_PRI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHANGE_JOB_PRI.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_ELEMENT.rfo/co=FLN_CHECK_ELEMENT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_ELEMENT
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_ELEMENT
'RDB$FLN_CHECK_ELEMENT' not in module table
$ 	purge/nolog FLN_CHECK_ELEMENT.obj
$ 	purge/nolog FLN_CHECK_ELEMENT.for
$ 	purge/nolog FLN_CHECK_ELEMENT.rfo
$ 	if ok then delete/nolog FLN_CHECK_ELEMENT.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_ELEMENT"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_ELEMENT
%LIBRAR-S-INSERTED, module FLN_CHECK_ELEMENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_ELEMENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_ELEMENT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_ELEMENT_FLOW.rfo/co=FLN_CHECK_ELEMENT_FLOW
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_ELEMENT_FLOW
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_ELEMENT_FLOW
'RDB$FLN_CHECK_ELEMENT_FLOW' not in module table
$ 	purge/nolog FLN_CHECK_ELEMENT_FLOW.obj
$ 	purge/nolog FLN_CHECK_ELEMENT_FLOW.for
$ 	purge/nolog FLN_CHECK_ELEMENT_FLOW.rfo
$ 	if ok then delete/nolog FLN_CHECK_ELEMENT_FLOW.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_ELEMENT_FLOW"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_ELEMENT_FLOW
%LIBRAR-S-INSERTED, module FLN_CHECK_ELEMENT_FLOW inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_ELEMENT_FLOW inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_ELEMENT_FLOW.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_FLOWLINE.rfo/co=FLN_CHECK_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_FLOWLINE
'RDB$FLN_CHECK_FLOWLINE' not in module table
$ 	purge/nolog FLN_CHECK_FLOWLINE.obj
$ 	purge/nolog FLN_CHECK_FLOWLINE.for
$ 	purge/nolog FLN_CHECK_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_CHECK_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_CHECK_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_JOB.rfo/co=FLN_CHECK_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_JOB
'RDB$FLN_CHECK_JOB' not in module table
$ 	purge/nolog FLN_CHECK_JOB.obj
$ 	purge/nolog FLN_CHECK_JOB.for
$ 	purge/nolog FLN_CHECK_JOB.rfo
$ 	if ok then delete/nolog FLN_CHECK_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_JOB
%LIBRAR-S-INSERTED, module FLN_CHECK_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_LAMPSAUTH/co=FLN_CHECK_LAMPSAUTH
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_LAMPSAUTH
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_LAMPSAUTH
$ 	purge/nolog FLN_CHECK_LAMPSAUTH.obj
$ 	purge/nolog FLN_CHECK_LAMPSAUTH.for
$ 	if ok then delete/nolog FLN_CHECK_LAMPSAUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_LAMPSAUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_LAMPSAUTH
%LIBRAR-S-INSERTED, module FLN_CHECK_LAMPSAUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_LAMPSAUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_OFFLINE.rfo/co=FLN_CHECK_OFFLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_OFFLINE
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_OFFLINE
'RDB$FLN_CHECK_OFFLINE' not in module table
$ 	purge/nolog FLN_CHECK_OFFLINE.obj
$ 	purge/nolog FLN_CHECK_OFFLINE.for
$ 	purge/nolog FLN_CHECK_OFFLINE.rfo
$ 	if ok then delete/nolog FLN_CHECK_OFFLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_OFFLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_OFFLINE
%LIBRAR-S-INSERTED, module FLN_CHECK_OFFLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_OFFLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_OFFLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_OPERATOR.rfo/co=FLN_CHECK_OPERATOR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_OPERATOR
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_OPERATOR
'RDB$FLN_CHECK_OPERATOR' not in module table
$ 	purge/nolog FLN_CHECK_OPERATOR.obj
$ 	purge/nolog FLN_CHECK_OPERATOR.for
$ 	purge/nolog FLN_CHECK_OPERATOR.rfo
$ 	if ok then delete/nolog FLN_CHECK_OPERATOR.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_OPERATOR"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_OPERATOR
%LIBRAR-S-INSERTED, module FLN_CHECK_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_OPERATOR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_PROCEDURE.rfo/co=FLN_CHECK_PROCEDURE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_PROCEDURE
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_PROCEDURE
'RDB$FLN_CHECK_PROCEDURE' not in module table
$ 	purge/nolog FLN_CHECK_PROCEDURE.obj
$ 	purge/nolog FLN_CHECK_PROCEDURE.for
$ 	purge/nolog FLN_CHECK_PROCEDURE.rfo
$ 	if ok then delete/nolog FLN_CHECK_PROCEDURE.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_PROCEDURE"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_PROCEDURE
%LIBRAR-S-INSERTED, module FLN_CHECK_PROCEDURE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_PROCEDURE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_PROCEDURE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_PROJECT.rfo/co=FLN_CHECK_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_PROJECT
'RDB$FLN_CHECK_PROJECT' not in module table
$ 	purge/nolog FLN_CHECK_PROJECT.obj
$ 	purge/nolog FLN_CHECK_PROJECT.for
$ 	purge/nolog FLN_CHECK_PROJECT.rfo
$ 	if ok then delete/nolog FLN_CHECK_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_PROJECT
%LIBRAR-S-INSERTED, module FLN_CHECK_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_OPERATOR_AUTH.rfo/co=FLN_CHECK_OPERATOR_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_OPERATOR_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_OPERATOR_AUTH
'RDB$FLN_CHECK_OPERATOR_AUTH' not in module table
$ 	purge/nolog FLN_CHECK_OPERATOR_AUTH.obj
$ 	purge/nolog FLN_CHECK_OPERATOR_AUTH.for
$ 	purge/nolog FLN_CHECK_OPERATOR_AUTH.rfo
$ 	if ok then delete/nolog FLN_CHECK_OPERATOR_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_OPERATOR_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_OPERATOR_AUTH
%LIBRAR-S-INSERTED, module FLN_CHECK_OPERATOR_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_OPERATOR_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_OPERATOR_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_WORKSTATION.rfo/co=FLN_CHECK_WORKSTATION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_WORKSTATION
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_WORKSTATION
'RDB$FLN_CHECK_WORKSTATION' not in module table
$ 	purge/nolog FLN_CHECK_WORKSTATION.obj
$ 	purge/nolog FLN_CHECK_WORKSTATION.for
$ 	purge/nolog FLN_CHECK_WORKSTATION.rfo
$ 	if ok then delete/nolog FLN_CHECK_WORKSTATION.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_WORKSTATION"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_WORKSTATION
%LIBRAR-S-INSERTED, module FLN_CHECK_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_WORKSTATION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CHECK_WORKSTATION_AUTH.rfo/co=FLN_CHECK_WORKSTATION_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CHECK_WORKSTATION_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_CHECK_WORKSTATION_AUTH
'RDB$FLN_CHECK_WORKSTATION_AUTH' not in module table
$ 	purge/nolog FLN_CHECK_WORKSTATION_AUTH.obj
$ 	purge/nolog FLN_CHECK_WORKSTATION_AUTH.for
$ 	purge/nolog FLN_CHECK_WORKSTATION_AUTH.rfo
$ 	if ok then delete/nolog FLN_CHECK_WORKSTATION_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_CHECK_WORKSTATION_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_CHECK_WORKSTATION_AUTH
%LIBRAR-S-INSERTED, module FLN_CHECK_WORKSTATION_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CHECK_WORKSTATION_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CHECK_WORKSTATION_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_COMPLETE_TASK/co=FLN_COMPLETE_TASK
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_COMPLETE_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_COMPLETE_TASK
$ 	purge/nolog FLN_COMPLETE_TASK.obj
$ 	purge/nolog FLN_COMPLETE_TASK.for
$ 	if ok then delete/nolog FLN_COMPLETE_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_COMPLETE_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_COMPLETE_TASK
%LIBRAR-S-INSERTED, module FLN_COMPLETE_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_COMPLETE_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_COMPLETE_UPDATE.rfo/co=FLN_COMPLETE_UPDATE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_COMPLETE_UPDATE
$ 	ok=$status
$ 	if ok then pvv FLN_COMPLETE_UPDATE
'RDB$FLN_COMPLETE_UPDATE' not in module table
$ 	purge/nolog FLN_COMPLETE_UPDATE.obj
$ 	purge/nolog FLN_COMPLETE_UPDATE.for
$ 	purge/nolog FLN_COMPLETE_UPDATE.rfo
$ 	if ok then delete/nolog FLN_COMPLETE_UPDATE.lis;*
$	if .not.ok then emsg=emsg+" FLN_COMPLETE_UPDATE"
$ 	delete adc.ide;*
$	if ok then libr FLN_COMPLETE_UPDATE
%LIBRAR-S-INSERTED, module FLN_COMPLETE_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_COMPLETE_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_COMPLETE_UPDATE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CONDITIONS_SYNTAX/co=FLN_CONDITIONS_SYNTAX
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_CONDITIONS_SYNTAX
$ 	ok=$status
$ 	if ok then pvv FLN_CONDITIONS_SYNTAX
$ 	purge/nolog FLN_CONDITIONS_SYNTAX.obj
$ 	purge/nolog FLN_CONDITIONS_SYNTAX.for
$ 	if ok then delete/nolog FLN_CONDITIONS_SYNTAX.lis;*
$	if .not.ok then emsg=emsg+" FLN_CONDITIONS_SYNTAX"
$ 	delete adc.ide;*
$	if ok then libr FLN_CONDITIONS_SYNTAX
%LIBRAR-S-INSERTED, module FLN_CONDITIONS_SYNTAX inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CONDITIONS_SYNTAX.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CREATE_JOB.rfo/co=FLN_CREATE_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CREATE_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_CREATE_JOB
'RDB$FLN_CREATE_JOB' not in module table
$ 	purge/nolog FLN_CREATE_JOB.obj
$ 	purge/nolog FLN_CREATE_JOB.for
$ 	purge/nolog FLN_CREATE_JOB.rfo
$ 	if ok then delete/nolog FLN_CREATE_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_CREATE_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_CREATE_JOB
%LIBRAR-S-INSERTED, module FLN_CREATE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CREATE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CREATE_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CREATE_PROJECT.rfo/co=FLN_CREATE_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CREATE_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_CREATE_PROJECT
'RDB$FLN_CREATE_PROJECT' not in module table
$ 	purge/nolog FLN_CREATE_PROJECT.obj
$ 	purge/nolog FLN_CREATE_PROJECT.for
$ 	purge/nolog FLN_CREATE_PROJECT.rfo
$ 	if ok then delete/nolog FLN_CREATE_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_CREATE_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_CREATE_PROJECT
%LIBRAR-S-INSERTED, module FLN_CREATE_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CREATE_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CREATE_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CREATE_OPERATOR.rfo/co=FLN_CREATE_OPERATOR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CREATE_OPERATOR
$ 	ok=$status
$ 	if ok then pvv FLN_CREATE_OPERATOR
'RDB$FLN_CREATE_OPERATOR' not in module table
$ 	purge/nolog FLN_CREATE_OPERATOR.obj
$ 	purge/nolog FLN_CREATE_OPERATOR.for
$ 	purge/nolog FLN_CREATE_OPERATOR.rfo
$ 	if ok then delete/nolog FLN_CREATE_OPERATOR.lis;*
$	if .not.ok then emsg=emsg+" FLN_CREATE_OPERATOR"
$ 	delete adc.ide;*
$	if ok then libr FLN_CREATE_OPERATOR
%LIBRAR-S-INSERTED, module FLN_CREATE_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CREATE_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CREATE_OPERATOR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_CREATE_WORKSTATION.rfo/co=FLN_CREATE_WORKSTATION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_CREATE_WORKSTATION
$ 	ok=$status
$ 	if ok then pvv FLN_CREATE_WORKSTATION
'RDB$FLN_CREATE_WORKSTATION' not in module table
$ 	purge/nolog FLN_CREATE_WORKSTATION.obj
$ 	purge/nolog FLN_CREATE_WORKSTATION.for
$ 	purge/nolog FLN_CREATE_WORKSTATION.rfo
$ 	if ok then delete/nolog FLN_CREATE_WORKSTATION.lis;*
$	if .not.ok then emsg=emsg+" FLN_CREATE_WORKSTATION"
$ 	delete adc.ide;*
$	if ok then libr FLN_CREATE_WORKSTATION
%LIBRAR-S-INSERTED, module FLN_CREATE_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_CREATE_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_CREATE_WORKSTATION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DEFINE_ELEMENT.rfo/co=FLN_DEFINE_ELEMENT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DEFINE_ELEMENT
$ 	ok=$status
$ 	if ok then pvv FLN_DEFINE_ELEMENT
'RDB$FLN_DEFINE_ELEMENT' not in module table
$ 	purge/nolog FLN_DEFINE_ELEMENT.obj
$ 	purge/nolog FLN_DEFINE_ELEMENT.for
$ 	purge/nolog FLN_DEFINE_ELEMENT.rfo
$ 	if ok then delete/nolog FLN_DEFINE_ELEMENT.lis;*
$	if .not.ok then emsg=emsg+" FLN_DEFINE_ELEMENT"
$ 	delete adc.ide;*
$	if ok then libr FLN_DEFINE_ELEMENT
%LIBRAR-S-INSERTED, module FLN_DEFINE_ELEMENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DEFINE_ELEMENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DEFINE_ELEMENT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DEFINE_FLOWLINE.rfo/co=FLN_DEFINE_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DEFINE_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_DEFINE_FLOWLINE
'RDB$FLN_DEFINE_FLOWLINE' not in module table
$ 	purge/nolog FLN_DEFINE_FLOWLINE.obj
$ 	purge/nolog FLN_DEFINE_FLOWLINE.for
$ 	purge/nolog FLN_DEFINE_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_DEFINE_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_DEFINE_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_DEFINE_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_DEFINE_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DEFINE_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DEFINE_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DEFINE_PROCEDURE.rfo/co=FLN_DEFINE_PROCEDURE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DEFINE_PROCEDURE
$ 	ok=$status
$ 	if ok then pvv FLN_DEFINE_PROCEDURE
'RDB$FLN_DEFINE_PROCEDURE' not in module table
$ 	purge/nolog FLN_DEFINE_PROCEDURE.obj
$ 	purge/nolog FLN_DEFINE_PROCEDURE.for
$ 	purge/nolog FLN_DEFINE_PROCEDURE.rfo
$ 	if ok then delete/nolog FLN_DEFINE_PROCEDURE.lis;*
$	if .not.ok then emsg=emsg+" FLN_DEFINE_PROCEDURE"
$ 	delete adc.ide;*
$	if ok then libr FLN_DEFINE_PROCEDURE
%LIBRAR-S-INSERTED, module FLN_DEFINE_PROCEDURE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DEFINE_PROCEDURE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DEFINE_PROCEDURE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DEFINE_SYSTEM.rfo/co=FLN_DEFINE_SYSTEM
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DEFINE_SYSTEM
$ 	ok=$status
$ 	if ok then pvv FLN_DEFINE_SYSTEM
'RDB$FLN_DEFINE_SYSTEM' not in module table
$ 	purge/nolog FLN_DEFINE_SYSTEM.obj
$ 	purge/nolog FLN_DEFINE_SYSTEM.for
$ 	purge/nolog FLN_DEFINE_SYSTEM.rfo
$ 	if ok then delete/nolog FLN_DEFINE_SYSTEM.lis;*
$	if .not.ok then emsg=emsg+" FLN_DEFINE_SYSTEM"
$ 	delete adc.ide;*
$	if ok then libr FLN_DEFINE_SYSTEM
%LIBRAR-S-INSERTED, module FLN_DEFINE_SYSTEM inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DEFINE_SYSTEM inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DEFINE_SYSTEM.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DEFINE_WIRE.rfo/co=FLN_DEFINE_WIRE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DEFINE_WIRE
$ 	ok=$status
$ 	if ok then pvv FLN_DEFINE_WIRE
'RDB$FLN_DEFINE_WIRE' not in module table
$ 	purge/nolog FLN_DEFINE_WIRE.obj
$ 	purge/nolog FLN_DEFINE_WIRE.for
$ 	purge/nolog FLN_DEFINE_WIRE.rfo
$ 	if ok then delete/nolog FLN_DEFINE_WIRE.lis;*
$	if .not.ok then emsg=emsg+" FLN_DEFINE_WIRE"
$ 	delete adc.ide;*
$	if ok then libr FLN_DEFINE_WIRE
%LIBRAR-S-INSERTED, module FLN_DEFINE_WIRE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DEFINE_WIRE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DEFINE_WIRE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DELETE_JOB.rfo/co=FLN_DELETE_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DELETE_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_DELETE_JOB
'RDB$FLN_DELETE_JOB' not in module table
$ 	purge/nolog FLN_DELETE_JOB.obj
$ 	purge/nolog FLN_DELETE_JOB.for
$ 	purge/nolog FLN_DELETE_JOB.rfo
$ 	if ok then delete/nolog FLN_DELETE_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_DELETE_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_DELETE_JOB
%LIBRAR-S-INSERTED, module FLN_DELETE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DELETE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DELETE_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DELETE_LOCALS.rfo/co=FLN_DELETE_LOCALS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DELETE_LOCALS
$ 	ok=$status
$ 	if ok then pvv FLN_DELETE_LOCALS
'RDB$FLN_DELETE_LOCALS' not in module table
$ 	purge/nolog FLN_DELETE_LOCALS.obj
$ 	purge/nolog FLN_DELETE_LOCALS.for
$ 	purge/nolog FLN_DELETE_LOCALS.rfo
$ 	if ok then delete/nolog FLN_DELETE_LOCALS.lis;*
$	if .not.ok then emsg=emsg+" FLN_DELETE_LOCALS"
$ 	delete adc.ide;*
$	if ok then libr FLN_DELETE_LOCALS
%LIBRAR-S-INSERTED, module FLN_DELETE_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DELETE_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DELETE_LOCALS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DELETE_OPERATOR.rfo/co=FLN_DELETE_OPERATOR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DELETE_OPERATOR
$ 	ok=$status
$ 	if ok then pvv FLN_DELETE_OPERATOR
'RDB$FLN_DELETE_OPERATOR' not in module table
$ 	purge/nolog FLN_DELETE_OPERATOR.obj
$ 	purge/nolog FLN_DELETE_OPERATOR.for
$ 	purge/nolog FLN_DELETE_OPERATOR.rfo
$ 	if ok then delete/nolog FLN_DELETE_OPERATOR.lis;*
$	if .not.ok then emsg=emsg+" FLN_DELETE_OPERATOR"
$ 	delete adc.ide;*
$	if ok then libr FLN_DELETE_OPERATOR
%LIBRAR-S-INSERTED, module FLN_DELETE_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DELETE_OPERATOR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DELETE_OPERATOR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DELETE_PROJECT.rfo/co=FLN_DELETE_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DELETE_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_DELETE_PROJECT
'RDB$FLN_DELETE_PROJECT' not in module table
$ 	purge/nolog FLN_DELETE_PROJECT.obj
$ 	purge/nolog FLN_DELETE_PROJECT.for
$ 	purge/nolog FLN_DELETE_PROJECT.rfo
$ 	if ok then delete/nolog FLN_DELETE_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_DELETE_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_DELETE_PROJECT
%LIBRAR-S-INSERTED, module FLN_DELETE_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DELETE_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DELETE_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_DELETE_WORKSTATION.rfo/co=FLN_DELETE_WORKSTATION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_DELETE_WORKSTATION
$ 	ok=$status
$ 	if ok then pvv FLN_DELETE_WORKSTATION
'RDB$FLN_DELETE_WORKSTATION' not in module table
$ 	purge/nolog FLN_DELETE_WORKSTATION.obj
$ 	purge/nolog FLN_DELETE_WORKSTATION.for
$ 	purge/nolog FLN_DELETE_WORKSTATION.rfo
$ 	if ok then delete/nolog FLN_DELETE_WORKSTATION.lis;*
$	if .not.ok then emsg=emsg+" FLN_DELETE_WORKSTATION"
$ 	delete adc.ide;*
$	if ok then libr FLN_DELETE_WORKSTATION
%LIBRAR-S-INSERTED, module FLN_DELETE_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_DELETE_WORKSTATION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_DELETE_WORKSTATION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_END_FLOWLINE.rfo/co=FLN_END_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_END_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_END_FLOWLINE
'RDB$FLN_END_FLOWLINE' not in module table
$ 	purge/nolog FLN_END_FLOWLINE.obj
$ 	purge/nolog FLN_END_FLOWLINE.for
$ 	purge/nolog FLN_END_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_END_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_END_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_END_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_END_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_END_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_END_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_END_SESSION.rfo/co=FLN_END_SESSION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_END_SESSION
$ 	ok=$status
$ 	if ok then pvv FLN_END_SESSION
'RDB$FLN_END_SESSION' not in module table
$ 	purge/nolog FLN_END_SESSION.obj
$ 	purge/nolog FLN_END_SESSION.for
$ 	purge/nolog FLN_END_SESSION.rfo
$ 	if ok then delete/nolog FLN_END_SESSION.lis;*
$	if .not.ok then emsg=emsg+" FLN_END_SESSION"
$ 	delete adc.ide;*
$	if ok then libr FLN_END_SESSION
%LIBRAR-S-INSERTED, module FLN_END_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_END_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_END_SESSION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_END_SUB_JOB.rfo/co=FLN_END_SUB_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_END_SUB_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_END_SUB_JOB
'RDB$FLN_END_SUB_JOB' not in module table
$ 	purge/nolog FLN_END_SUB_JOB.obj
$ 	purge/nolog FLN_END_SUB_JOB.for
$ 	purge/nolog FLN_END_SUB_JOB.rfo
$ 	if ok then delete/nolog FLN_END_SUB_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_END_SUB_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_END_SUB_JOB
%LIBRAR-S-INSERTED, module FLN_END_SUB_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_END_SUB_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_END_SUB_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_EVAL/co=FLN_EVAL
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_EVAL
$ 	ok=$status
$ 	if ok then pvv FLN_EVAL
$ 	purge/nolog FLN_EVAL.obj
$ 	purge/nolog FLN_EVAL.for
$ 	if ok then delete/nolog FLN_EVAL.lis;*
$	if .not.ok then emsg=emsg+" FLN_EVAL"
$ 	delete adc.ide;*
$	if ok then libr FLN_EVAL
%LIBRAR-S-INSERTED, module FLN_EVAL inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_EVAL.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_ALL_WIRES.rfo/co=FLN_GET_ALL_WIRES
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_ALL_WIRES
$ 	ok=$status
$ 	if ok then pvv FLN_GET_ALL_WIRES
'RDB$FLN_GET_ALL_WIRES' not in module table
$ 	purge/nolog FLN_GET_ALL_WIRES.obj
$ 	purge/nolog FLN_GET_ALL_WIRES.for
$ 	purge/nolog FLN_GET_ALL_WIRES.rfo
$ 	if ok then delete/nolog FLN_GET_ALL_WIRES.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_ALL_WIRES"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_ALL_WIRES
%LIBRAR-S-INSERTED, module FLN_GET_ALL_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_ALL_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_ALL_WIRES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_COMPROC.rfo/co=FLN_GET_COMPROC
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_COMPROC
$ 	ok=$status
$ 	if ok then pvv FLN_GET_COMPROC
'RDB$FLN_GET_COMPROC' not in module table
$ 	purge/nolog FLN_GET_COMPROC.obj
$ 	purge/nolog FLN_GET_COMPROC.for
$ 	purge/nolog FLN_GET_COMPROC.rfo
$ 	if ok then delete/nolog FLN_GET_COMPROC.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_COMPROC"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_COMPROC
%LIBRAR-S-INSERTED, module FLN_GET_COMPROC inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_COMPROC inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_COMPROC.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_DAY_TIME.rfo/co=FLN_GET_DAY_TIME
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_DAY_TIME
$ 	ok=$status
$ 	if ok then pvv FLN_GET_DAY_TIME
$ 	purge/nolog FLN_GET_DAY_TIME.obj
$ 	purge/nolog FLN_GET_DAY_TIME.for
$ 	purge/nolog FLN_GET_DAY_TIME.rfo
$ 	if ok then delete/nolog FLN_GET_DAY_TIME.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_DAY_TIME"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_DAY_TIME
%LIBRAR-S-INSERTED, module FLN_GET_DAY_TIME inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_DAY_TIME.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_EXTERNALS.rfo/co=FLN_GET_EXTERNALS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_EXTERNALS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_EXTERNALS
'RDB$FLN_GET_EXTERNALS' not in module table
$ 	purge/nolog FLN_GET_EXTERNALS.obj
$ 	purge/nolog FLN_GET_EXTERNALS.for
$ 	purge/nolog FLN_GET_EXTERNALS.rfo
$ 	if ok then delete/nolog FLN_GET_EXTERNALS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_EXTERNALS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_EXTERNALS
%LIBRAR-S-INSERTED, module FLN_GET_EXTERNALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_EXTERNALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_EXTERNALS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_FLOWLN.rfo/co=FLN_GET_FLOWLN
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_FLOWLN
$ 	ok=$status
$ 	if ok then pvv FLN_GET_FLOWLN
'RDB$FLN_GET_FLOWLN' not in module table
$ 	purge/nolog FLN_GET_FLOWLN.obj
$ 	purge/nolog FLN_GET_FLOWLN.for
$ 	purge/nolog FLN_GET_FLOWLN.rfo
$ 	if ok then delete/nolog FLN_GET_FLOWLN.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_FLOWLN"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_FLOWLN
%LIBRAR-S-INSERTED, module FLN_GET_FLOWLN inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_FLOWLN inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_FLOWLN.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_READYS.rfo/co=FLN_GET_READYS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_READYS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_READYS
$ 	purge/nolog FLN_GET_READYS.obj
$ 	purge/nolog FLN_GET_READYS.for
$ 	purge/nolog FLN_GET_READYS.rfo
$ 	if ok then delete/nolog FLN_GET_READYS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_READYS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_READYS
%LIBRAR-S-INSERTED, module FLN_GET_READYS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_READYS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_INPUT_PAR.rfo/co=FLN_GET_INPUT_PAR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_INPUT_PAR
$ 	ok=$status
$ 	if ok then pvv FLN_GET_INPUT_PAR
'RDB$FLN_GET_INPUT_PAR' not in module table
$ 	purge/nolog FLN_GET_INPUT_PAR.obj
$ 	purge/nolog FLN_GET_INPUT_PAR.for
$ 	purge/nolog FLN_GET_INPUT_PAR.rfo
$ 	if ok then delete/nolog FLN_GET_INPUT_PAR.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_INPUT_PAR"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_INPUT_PAR
%LIBRAR-S-INSERTED, module FLN_GET_INPUT_PAR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_INPUT_PAR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_INPUT_PAR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_LOCALS.rfo/co=FLN_GET_LOCALS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_LOCALS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_LOCALS
'RDB$FLN_GET_LOCALS' not in module table
$ 	purge/nolog FLN_GET_LOCALS.obj
$ 	purge/nolog FLN_GET_LOCALS.for
$ 	purge/nolog FLN_GET_LOCALS.rfo
$ 	if ok then delete/nolog FLN_GET_LOCALS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_LOCALS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_LOCALS
%LIBRAR-S-INSERTED, module FLN_GET_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_LOCALS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_JOB.rfo/co=FLN_GET_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_GET_JOB
'RDB$FLN_GET_JOB' not in module table
$ 	purge/nolog FLN_GET_JOB.obj
$ 	purge/nolog FLN_GET_JOB.for
$ 	purge/nolog FLN_GET_JOB.rfo
$ 	if ok then delete/nolog FLN_GET_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_JOB
%LIBRAR-S-INSERTED, module FLN_GET_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_JOB_ID.rfo/co=FLN_GET_JOB_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_JOB_ID
$ 	ok=$status
$ 	if ok then pvv FLN_GET_JOB_ID
'RDB$FLN_GET_JOB_ID' not in module table
$ 	purge/nolog FLN_GET_JOB_ID.obj
$ 	purge/nolog FLN_GET_JOB_ID.for
$ 	purge/nolog FLN_GET_JOB_ID.rfo
$ 	if ok then delete/nolog FLN_GET_JOB_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_JOB_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_JOB_ID
%LIBRAR-S-INSERTED, module FLN_GET_JOB_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_JOB_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_JOB_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_PARAMETER_ID.rfo/co=FLN_GET_PARAMETER_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_PARAMETER_ID
$ 	ok=$status
$ 	if ok then pvv FLN_GET_PARAMETER_ID
'RDB$FLN_GET_PARAMETER_ID' not in module table
$ 	purge/nolog FLN_GET_PARAMETER_ID.obj
$ 	purge/nolog FLN_GET_PARAMETER_ID.for
$ 	purge/nolog FLN_GET_PARAMETER_ID.rfo
$ 	if ok then delete/nolog FLN_GET_PARAMETER_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_PARAMETER_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_PARAMETER_ID
%LIBRAR-S-INSERTED, module FLN_GET_PARAMETER_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_PARAMETER_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_PARAMETER_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_SESSION_ID.rfo/co=FLN_GET_SESSION_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_SESSION_ID
$ 	ok=$status
$ 	if ok then pvv FLN_GET_SESSION_ID
'RDB$FLN_GET_SESSION_ID' not in module table
$ 	purge/nolog FLN_GET_SESSION_ID.obj
$ 	purge/nolog FLN_GET_SESSION_ID.for
$ 	purge/nolog FLN_GET_SESSION_ID.rfo
$ 	if ok then delete/nolog FLN_GET_SESSION_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_SESSION_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_SESSION_ID
%LIBRAR-S-INSERTED, module FLN_GET_SESSION_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_SESSION_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_SESSION_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_SUB_JOBS.rfo/co=FLN_GET_SUB_JOBS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_SUB_JOBS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_SUB_JOBS
'RDB$FLN_GET_SUB_JOBS' not in module table
$ 	purge/nolog FLN_GET_SUB_JOBS.obj
$ 	purge/nolog FLN_GET_SUB_JOBS.for
$ 	purge/nolog FLN_GET_SUB_JOBS.rfo
$ 	if ok then delete/nolog FLN_GET_SUB_JOBS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_SUB_JOBS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_SUB_JOBS
%LIBRAR-S-INSERTED, module FLN_GET_SUB_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_SUB_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_SUB_JOBS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_TASKS.rfo/co=FLN_GET_TASKS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_TASKS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_TASKS
'RDB$FLN_GET_TASKS' not in module table
$ 	purge/nolog FLN_GET_TASKS.obj
$ 	purge/nolog FLN_GET_TASKS.for
$ 	purge/nolog FLN_GET_TASKS.rfo
$ 	if ok then delete/nolog FLN_GET_TASKS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_TASKS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_TASKS
%LIBRAR-S-INSERTED, module FLN_GET_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_TASKS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_TASKS_JOB.rfo/co=FLN_GET_TASKS_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_TASKS_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_GET_TASKS_JOB
'RDB$FLN_GET_TASKS_JOB' not in module table
$ 	purge/nolog FLN_GET_TASKS_JOB.obj
$ 	purge/nolog FLN_GET_TASKS_JOB.for
$ 	purge/nolog FLN_GET_TASKS_JOB.rfo
$ 	if ok then delete/nolog FLN_GET_TASKS_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_TASKS_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_TASKS_JOB
%LIBRAR-S-INSERTED, module FLN_GET_TASKS_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_TASKS_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_TASKS_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_TASK_ID.rfo/co=FLN_GET_TASK_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_TASK_ID
$ 	ok=$status
$ 	if ok then pvv FLN_GET_TASK_ID
'RDB$FLN_GET_TASK_ID' not in module table
$ 	purge/nolog FLN_GET_TASK_ID.obj
$ 	purge/nolog FLN_GET_TASK_ID.for
$ 	purge/nolog FLN_GET_TASK_ID.rfo
$ 	if ok then delete/nolog FLN_GET_TASK_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_TASK_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_TASK_ID
%LIBRAR-S-INSERTED, module FLN_GET_TASK_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_TASK_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_TASK_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_TASK_SESSION.rfo/co=FLN_GET_TASK_SESSION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_TASK_SESSION
$ 	ok=$status
$ 	if ok then pvv FLN_GET_TASK_SESSION
'RDB$FLN_GET_TASK_SESSION' not in module table
$ 	purge/nolog FLN_GET_TASK_SESSION.obj
$ 	purge/nolog FLN_GET_TASK_SESSION.for
$ 	purge/nolog FLN_GET_TASK_SESSION.rfo
$ 	if ok then delete/nolog FLN_GET_TASK_SESSION.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_TASK_SESSION"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_TASK_SESSION
%LIBRAR-S-INSERTED, module FLN_GET_TASK_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_TASK_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_TASK_SESSION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_TASK_INFO.rfo/co=FLN_GET_TASK_INFO
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_TASK_INFO
$ 	ok=$status
$ 	if ok then pvv FLN_GET_TASK_INFO
'RDB$FLN_GET_TASK_INFO' not in module table
$ 	purge/nolog FLN_GET_TASK_INFO.obj
$ 	purge/nolog FLN_GET_TASK_INFO.for
$ 	purge/nolog FLN_GET_TASK_INFO.rfo
$ 	if ok then delete/nolog FLN_GET_TASK_INFO.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_TASK_INFO"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_TASK_INFO
%LIBRAR-S-INSERTED, module FLN_GET_TASK_INFO inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_TASK_INFO inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_TASK_INFO.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_WIRE_ENDS.rfo/co=FLN_GET_WIRE_ENDS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_WIRE_ENDS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_WIRE_ENDS
'RDB$FLN_GET_WIRE_ENDS' not in module table
$ 	purge/nolog FLN_GET_WIRE_ENDS.obj
$ 	purge/nolog FLN_GET_WIRE_ENDS.for
$ 	purge/nolog FLN_GET_WIRE_ENDS.rfo
$ 	if ok then delete/nolog FLN_GET_WIRE_ENDS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_WIRE_ENDS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_WIRE_ENDS
%LIBRAR-S-INSERTED, module FLN_GET_WIRE_ENDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_WIRE_ENDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_WIRE_ENDS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_WIRES.rfo/co=FLN_GET_WIRES
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_WIRES
$ 	ok=$status
$ 	if ok then pvv FLN_GET_WIRES
'RDB$FLN_GET_WIRES' not in module table
$ 	purge/nolog FLN_GET_WIRES.obj
$ 	purge/nolog FLN_GET_WIRES.for
$ 	purge/nolog FLN_GET_WIRES.rfo
$ 	if ok then delete/nolog FLN_GET_WIRES.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_WIRES"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_WIRES
%LIBRAR-S-INSERTED, module FLN_GET_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_WIRES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_GET_WIRE_STATUS.rfo/co=FLN_GET_WIRE_STATUS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_GET_WIRE_STATUS
$ 	ok=$status
$ 	if ok then pvv FLN_GET_WIRE_STATUS
'RDB$FLN_GET_WIRE_STATUS' not in module table
$ 	purge/nolog FLN_GET_WIRE_STATUS.obj
$ 	purge/nolog FLN_GET_WIRE_STATUS.for
$ 	purge/nolog FLN_GET_WIRE_STATUS.rfo
$ 	if ok then delete/nolog FLN_GET_WIRE_STATUS.lis;*
$	if .not.ok then emsg=emsg+" FLN_GET_WIRE_STATUS"
$ 	delete adc.ide;*
$	if ok then libr FLN_GET_WIRE_STATUS
%LIBRAR-S-INSERTED, module FLN_GET_WIRE_STATUS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_GET_WIRE_STATUS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_GET_WIRE_STATUS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_HAD_TASK.rfo/co=FLN_HAD_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_HAD_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_HAD_TASK
'RDB$FLN_HAD_TASK' not in module table
$ 	purge/nolog FLN_HAD_TASK.obj
$ 	purge/nolog FLN_HAD_TASK.for
$ 	purge/nolog FLN_HAD_TASK.rfo
$ 	if ok then delete/nolog FLN_HAD_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_HAD_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_HAD_TASK
%LIBRAR-S-INSERTED, module FLN_HAD_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_HAD_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_HAD_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_HOLD_JOB/co=FLN_HOLD_JOB
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_HOLD_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_HOLD_JOB
$ 	purge/nolog FLN_HOLD_JOB.obj
$ 	purge/nolog FLN_HOLD_JOB.for
$ 	if ok then delete/nolog FLN_HOLD_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_HOLD_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_HOLD_JOB
%LIBRAR-S-INSERTED, module FLN_HOLD_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_HOLD_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_HOLD_PROJECT/co=FLN_HOLD_PROJECT
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_HOLD_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_HOLD_PROJECT
$ 	purge/nolog FLN_HOLD_PROJECT.obj
$ 	purge/nolog FLN_HOLD_PROJECT.for
$ 	if ok then delete/nolog FLN_HOLD_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_HOLD_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_HOLD_PROJECT
%LIBRAR-S-INSERTED, module FLN_HOLD_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_HOLD_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_HOLD_TASK.rfo/co=FLN_HOLD_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_HOLD_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_HOLD_TASK
'RDB$FLN_HOLD_TASK' not in module table
$ 	purge/nolog FLN_HOLD_TASK.obj
$ 	purge/nolog FLN_HOLD_TASK.for
$ 	purge/nolog FLN_HOLD_TASK.rfo
$ 	if ok then delete/nolog FLN_HOLD_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_HOLD_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_HOLD_TASK
%LIBRAR-S-INSERTED, module FLN_HOLD_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_HOLD_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_HOLD_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_INIT/co=FLN_INIT
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_INIT
$ 	ok=$status
$ 	if ok then pvv FLN_INIT
$ 	purge/nolog FLN_INIT.obj
$ 	purge/nolog FLN_INIT.for
$ 	if ok then delete/nolog FLN_INIT.lis;*
$	if .not.ok then emsg=emsg+" FLN_INIT"
$ 	delete adc.ide;*
$	if ok then libr FLN_INIT
%LIBRAR-S-INSERTED, module FLN_INIT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_INIT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_IS_READY.rfo/co=FLN_IS_READY
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_IS_READY
$ 	ok=$status
$ 	if ok then pvv FLN_IS_READY
'RDB$FLN_IS_READY' not in module table
$ 	purge/nolog FLN_IS_READY.obj
$ 	purge/nolog FLN_IS_READY.for
$ 	purge/nolog FLN_IS_READY.rfo
$ 	if ok then delete/nolog FLN_IS_READY.lis;*
$	if .not.ok then emsg=emsg+" FLN_IS_READY"
$ 	delete adc.ide;*
$	if ok then libr FLN_IS_READY
%LIBRAR-S-INSERTED, module FLN_IS_READY inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_IS_READY inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_IS_READY.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_JOBSTART_UPDATE.rfo/co=FLN_JOBSTART_UPDATE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_JOBSTART_UPDATE
$ 	ok=$status
$ 	if ok then pvv FLN_JOBSTART_UPDATE
'RDB$FLN_JOBSTART_UPDATE' not in module table
$ 	purge/nolog FLN_JOBSTART_UPDATE.obj
$ 	purge/nolog FLN_JOBSTART_UPDATE.for
$ 	purge/nolog FLN_JOBSTART_UPDATE.rfo
$ 	if ok then delete/nolog FLN_JOBSTART_UPDATE.lis;*
$	if .not.ok then emsg=emsg+" FLN_JOBSTART_UPDATE"
$ 	delete adc.ide;*
$	if ok then libr FLN_JOBSTART_UPDATE
%LIBRAR-S-INSERTED, module FLN_JOBSTART_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_JOBSTART_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_JOBSTART_UPDATE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_OP_AUTH/co=FLN_LIST_OP_AUTH
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_OP_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_OP_AUTH
$ 	purge/nolog FLN_LIST_OP_AUTH.obj
$ 	purge/nolog FLN_LIST_OP_AUTH.for
$ 	if ok then delete/nolog FLN_LIST_OP_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_OP_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_OP_AUTH
%LIBRAR-S-INSERTED, module FLN_LIST_OP_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_OP_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_AUTHORISED_TASKS/co=FLN_LIST_AUTHORISED_TASKS
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_AUTHORISED_TASKS
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_AUTHORISED_TASKS
$ 	purge/nolog FLN_LIST_AUTHORISED_TASKS.obj
$ 	purge/nolog FLN_LIST_AUTHORISED_TASKS.for
$ 	if ok then delete/nolog FLN_LIST_AUTHORISED_TASKS.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_AUTHORISED_TASKS"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_AUTHORISED_TASKS
%LIBRAR-S-INSERTED, module FLN_LIST_AUTHORISED_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_AUTHORISED_TASKS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_JOB.rfo/co=FLN_LIST_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_JOB
'RDB$FLN_LIST_JOB' not in module table
$ 	purge/nolog FLN_LIST_JOB.obj
$ 	purge/nolog FLN_LIST_JOB.for
$ 	purge/nolog FLN_LIST_JOB.rfo
$ 	if ok then delete/nolog FLN_LIST_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_JOB
%LIBRAR-S-INSERTED, module FLN_LIST_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_TASK.rfo/co=FLN_LIST_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_TASK
'RDB$FLN_LIST_TASK' not in module table
$ 	purge/nolog FLN_LIST_TASK.obj
$ 	purge/nolog FLN_LIST_TASK.for
$ 	purge/nolog FLN_LIST_TASK.rfo
$ 	if ok then delete/nolog FLN_LIST_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_TASK
%LIBRAR-S-INSERTED, module FLN_LIST_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_SESSION.rfo/co=FLN_LIST_SESSION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_SESSION
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_SESSION
'RDB$FLN_LIST_SESSION' not in module table
$ 	purge/nolog FLN_LIST_SESSION.obj
$ 	purge/nolog FLN_LIST_SESSION.for
$ 	purge/nolog FLN_LIST_SESSION.rfo
$ 	if ok then delete/nolog FLN_LIST_SESSION.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_SESSION"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_SESSION
%LIBRAR-S-INSERTED, module FLN_LIST_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_SESSION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_JOB_HIS.rfo/co=FLN_LIST_JOB_HIS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_JOB_HIS
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_JOB_HIS
'RDB$FLN_LIST_JOB_HIS' not in module table
$ 	purge/nolog FLN_LIST_JOB_HIS.obj
$ 	purge/nolog FLN_LIST_JOB_HIS.for
$ 	purge/nolog FLN_LIST_JOB_HIS.rfo
$ 	if ok then delete/nolog FLN_LIST_JOB_HIS.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_JOB_HIS"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_JOB_HIS
%LIBRAR-S-INSERTED, module FLN_LIST_JOB_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_JOB_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_JOB_HIS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_TASK_HIS.rfo/co=FLN_LIST_TASK_HIS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_TASK_HIS
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_TASK_HIS
'RDB$FLN_LIST_TASK_HIS' not in module table
$ 	purge/nolog FLN_LIST_TASK_HIS.obj
$ 	purge/nolog FLN_LIST_TASK_HIS.for
$ 	purge/nolog FLN_LIST_TASK_HIS.rfo
$ 	if ok then delete/nolog FLN_LIST_TASK_HIS.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_TASK_HIS"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_TASK_HIS
%LIBRAR-S-INSERTED, module FLN_LIST_TASK_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_TASK_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_TASK_HIS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_LIST_SESSION_HIS.rfo/co=FLN_LIST_SESSION_HIS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_LIST_SESSION_HIS
$ 	ok=$status
$ 	if ok then pvv FLN_LIST_SESSION_HIS
'RDB$FLN_LIST_SESSION_HIS' not in module table
$ 	purge/nolog FLN_LIST_SESSION_HIS.obj
$ 	purge/nolog FLN_LIST_SESSION_HIS.for
$ 	purge/nolog FLN_LIST_SESSION_HIS.rfo
$ 	if ok then delete/nolog FLN_LIST_SESSION_HIS.lis;*
$	if .not.ok then emsg=emsg+" FLN_LIST_SESSION_HIS"
$ 	delete adc.ide;*
$	if ok then libr FLN_LIST_SESSION_HIS
%LIBRAR-S-INSERTED, module FLN_LIST_SESSION_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_LIST_SESSION_HIS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_LIST_SESSION_HIS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_PROCESS_OUTCOME/co=FLN_PROCESS_OUTCOME
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_PROCESS_OUTCOME
$ 	ok=$status
$ 	if ok then pvv FLN_PROCESS_OUTCOME
$ 	purge/nolog FLN_PROCESS_OUTCOME.obj
$ 	purge/nolog FLN_PROCESS_OUTCOME.for
$ 	if ok then delete/nolog FLN_PROCESS_OUTCOME.lis;*
$	if .not.ok then emsg=emsg+" FLN_PROCESS_OUTCOME"
$ 	delete adc.ide;*
$	if ok then libr FLN_PROCESS_OUTCOME
%LIBRAR-S-INSERTED, module FLN_PROCESS_OUTCOME inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_PROCESS_OUTCOME.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RELEASE_JOB/co=FLN_RELEASE_JOB
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_RELEASE_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_RELEASE_JOB
$ 	purge/nolog FLN_RELEASE_JOB.obj
$ 	purge/nolog FLN_RELEASE_JOB.for
$ 	if ok then delete/nolog FLN_RELEASE_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_RELEASE_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_RELEASE_JOB
%LIBRAR-S-INSERTED, module FLN_RELEASE_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RELEASE_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RELEASE_PROJECT/co=FLN_RELEASE_PROJECT
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_RELEASE_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_RELEASE_PROJECT
$ 	purge/nolog FLN_RELEASE_PROJECT.obj
$ 	purge/nolog FLN_RELEASE_PROJECT.for
$ 	if ok then delete/nolog FLN_RELEASE_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RELEASE_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RELEASE_PROJECT
%LIBRAR-S-INSERTED, module FLN_RELEASE_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RELEASE_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RELEASE_TASK.rfo/co=FLN_RELEASE_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RELEASE_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_RELEASE_TASK
'RDB$FLN_RELEASE_TASK' not in module table
$ 	purge/nolog FLN_RELEASE_TASK.obj
$ 	purge/nolog FLN_RELEASE_TASK.for
$ 	purge/nolog FLN_RELEASE_TASK.rfo
$ 	if ok then delete/nolog FLN_RELEASE_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_RELEASE_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_RELEASE_TASK
%LIBRAR-S-INSERTED, module FLN_RELEASE_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RELEASE_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RELEASE_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_REMOVE_SPACES/co=FLN_REMOVE_SPACES
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_REMOVE_SPACES
$ 	ok=$status
$ 	if ok then pvv FLN_REMOVE_SPACES
$ 	purge/nolog FLN_REMOVE_SPACES.obj
$ 	purge/nolog FLN_REMOVE_SPACES.for
$ 	if ok then delete/nolog FLN_REMOVE_SPACES.lis;*
$	if .not.ok then emsg=emsg+" FLN_REMOVE_SPACES"
$ 	delete adc.ide;*
$	if ok then libr FLN_REMOVE_SPACES
%LIBRAR-S-INSERTED, module FLN_REMOVE_SPACES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_REMOVE_SPACES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RESET_JOB/co=FLN_RESET_JOB
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_RESET_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_RESET_JOB
$ 	purge/nolog FLN_RESET_JOB.obj
$ 	purge/nolog FLN_RESET_JOB.for
$ 	if ok then delete/nolog FLN_RESET_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_RESET_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_RESET_JOB
%LIBRAR-S-INSERTED, module FLN_RESET_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RESET_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RESET_JOB_INT/co=FLN_RESET_JOB_INT
$	fort/debug/noopt/check=(bounds,overflow)/list FLN_RESET_JOB_INT
$ 	ok=$status
$ 	if ok then pvv FLN_RESET_JOB_INT
$ 	purge/nolog FLN_RESET_JOB_INT.obj
$ 	purge/nolog FLN_RESET_JOB_INT.for
$ 	if ok then delete/nolog FLN_RESET_JOB_INT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RESET_JOB_INT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RESET_JOB_INT
%LIBRAR-S-INSERTED, module FLN_RESET_JOB_INT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RESET_JOB_INT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RESET_OP_AUTH.rfo/co=FLN_RESET_OP_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RESET_OP_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_RESET_OP_AUTH
'RDB$FLN_RESET_OP_AUTH' not in module table
$ 	purge/nolog FLN_RESET_OP_AUTH.obj
$ 	purge/nolog FLN_RESET_OP_AUTH.for
$ 	purge/nolog FLN_RESET_OP_AUTH.rfo
$ 	if ok then delete/nolog FLN_RESET_OP_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_RESET_OP_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_RESET_OP_AUTH
%LIBRAR-S-INSERTED, module FLN_RESET_OP_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RESET_OP_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RESET_OP_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RESET_UPDATE.rfo/co=FLN_RESET_UPDATE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RESET_UPDATE
$ 	ok=$status
$ 	if ok then pvv FLN_RESET_UPDATE
'RDB$FLN_RESET_UPDATE' not in module table
$ 	purge/nolog FLN_RESET_UPDATE.obj
$ 	purge/nolog FLN_RESET_UPDATE.for
$ 	purge/nolog FLN_RESET_UPDATE.rfo
$ 	if ok then delete/nolog FLN_RESET_UPDATE.lis;*
$	if .not.ok then emsg=emsg+" FLN_RESET_UPDATE"
$ 	delete adc.ide;*
$	if ok then libr FLN_RESET_UPDATE
%LIBRAR-S-INSERTED, module FLN_RESET_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RESET_UPDATE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RESET_UPDATE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RESET_WORK_AUTH.rfo/co=FLN_RESET_WORK_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RESET_WORK_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_RESET_WORK_AUTH
'RDB$FLN_RESET_WORK_AUTH' not in module table
$ 	purge/nolog FLN_RESET_WORK_AUTH.obj
$ 	purge/nolog FLN_RESET_WORK_AUTH.for
$ 	purge/nolog FLN_RESET_WORK_AUTH.rfo
$ 	if ok then delete/nolog FLN_RESET_WORK_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_RESET_WORK_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_RESET_WORK_AUTH
%LIBRAR-S-INSERTED, module FLN_RESET_WORK_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RESET_WORK_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RESET_WORK_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ACTIVE_SESSIONS.rfo/co=FLN_RETRIEVE_ACTIVE_SESSIONS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ACTIVE_SESSIONS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ACTIVE_SESSIONS
'RDB$FLN_RETRIEVE_ACTIVE_SESSION' not in module table
$ 	purge/nolog FLN_RETRIEVE_ACTIVE_SESSIONS.obj
$ 	purge/nolog FLN_RETRIEVE_ACTIVE_SESSIONS.for
$ 	purge/nolog FLN_RETRIEVE_ACTIVE_SESSIONS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ACTIVE_SESSIONS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ACTIVE_SESSIONS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ACTIVE_SESSIONS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ACTIVE_SESSIONS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ACTIVE_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ACTIVE_SESSIONS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WIRES_FLOWLINE.rfo/co=FLN_RETRIEVE_WIRES_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WIRES_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WIRES_FLOWLINE
'RDB$FLN_RETRIEVE_WIRES_FLOWLINE' not in module table
$ 	purge/nolog FLN_RETRIEVE_WIRES_FLOWLINE.obj
$ 	purge/nolog FLN_RETRIEVE_WIRES_FLOWLINE.for
$ 	purge/nolog FLN_RETRIEVE_WIRES_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WIRES_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WIRES_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WIRES_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WIRES_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WIRES_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WIRES_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEMENTS_FLOWLINE.rfo/co=FLN_RETRIEVE_ELEMENTS_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEMENTS_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEMENTS_FLOWLINE
'RDB$FLN_RETRIEVE_ELEMENTS_FLOWL' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEMENTS_FLOWLINE.obj
$ 	purge/nolog FLN_RETRIEVE_ELEMENTS_FLOWLINE.for
$ 	purge/nolog FLN_RETRIEVE_ELEMENTS_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEMENTS_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEMENTS_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEMENTS_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEMENTS_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEMENTS_FLOWL inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEMENTS_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEM_IDS_FLOWLINE.rfo/co=FLN_RETRIEVE_ELEM_IDS_FLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEM_IDS_FLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEM_IDS_FLOWLINE
'RDB$FLN_RETRIEVE_ELEM_IDS_FLOWL' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEM_IDS_FLOWLINE.obj
$ 	purge/nolog FLN_RETRIEVE_ELEM_IDS_FLOWLINE.for
$ 	purge/nolog FLN_RETRIEVE_ELEM_IDS_FLOWLINE.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEM_IDS_FLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEM_IDS_FLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEM_IDS_FLOWLINE
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEM_IDS_FLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEM_IDS_FLOWL inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEM_IDS_FLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_PROCEDURES.rfo/co=FLN_RETRIEVE_ALL_PROCEDURES
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_PROCEDURES
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_PROCEDURES
'RDB$FLN_RETRIEVE_ALL_PROCEDURES' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_PROCEDURES.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_PROCEDURES.for
$ 	purge/nolog FLN_RETRIEVE_ALL_PROCEDURES.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_PROCEDURES.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_PROCEDURES"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_PROCEDURES
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_PROCEDURES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_PROCEDURES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_PROCEDURES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_FLOWLINES.rfo/co=FLN_RETRIEVE_ALL_FLOWLINES
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_FLOWLINES
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_FLOWLINES
'RDB$FLN_RETRIEVE_ALL_FLOWLINES' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINES.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINES.for
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINES.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_FLOWLINES.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_FLOWLINES"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_FLOWLINES
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_FLOWLINES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_FLOWLINES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_FLOWLINES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_FLOWLINE_IDS.rfo/co=FLN_RETRIEVE_ALL_FLOWLINE_IDS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_FLOWLINE_IDS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_FLOWLINE_IDS
'RDB$FLN_RETRIEVE_ALL_FLOWLINE_I' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINE_IDS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINE_IDS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_FLOWLINE_IDS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_FLOWLINE_IDS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_FLOWLINE_IDS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_FLOWLINE_IDS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_FLOWLINE_IDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_FLOWLINE_I inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_FLOWLINE_IDS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_JOBS.rfo/co=FLN_RETRIEVE_ALL_JOBS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_JOBS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_JOBS
'RDB$FLN_RETRIEVE_ALL_JOBS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_JOBS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_JOBS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_JOBS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_JOBS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_JOBS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_JOBS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_JOBS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_OPERATORS.rfo/co=FLN_RETRIEVE_ALL_OPERATORS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_OPERATORS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_OPERATORS
'RDB$FLN_RETRIEVE_ALL_OPERATORS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_OPERATORS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_OPERATORS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_OPERATORS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_OPERATORS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_OPERATORS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_OPERATORS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_OPERATORS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_OPERATORS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_OPERATORS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_OPER_IDS.rfo/co=FLN_RETRIEVE_ALL_OPER_IDS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_OPER_IDS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_OPER_IDS
'RDB$FLN_RETRIEVE_ALL_OPER_IDS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_OPER_IDS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_OPER_IDS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_OPER_IDS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_OPER_IDS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_OPER_IDS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_OPER_IDS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_OPER_IDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_OPER_IDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_OPER_IDS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_PROJECTS.rfo/co=FLN_RETRIEVE_ALL_PROJECTS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_PROJECTS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_PROJECTS
'RDB$FLN_RETRIEVE_ALL_PROJECTS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_PROJECTS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_PROJECTS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_PROJECTS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_PROJECTS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_PROJECTS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_PROJECTS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_PROJECTS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_PROJECTS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_PROJECTS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_SESSIONS.rfo/co=FLN_RETRIEVE_ALL_SESSIONS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_SESSIONS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_SESSIONS
'RDB$FLN_RETRIEVE_ALL_SESSIONS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_SESSIONS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_SESSIONS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_SESSIONS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_SESSIONS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_SESSIONS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_SESSIONS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_SESSIONS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_SESSIONS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_SESSIONS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_TASKS.rfo/co=FLN_RETRIEVE_ALL_TASKS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_TASKS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_TASKS
'RDB$FLN_RETRIEVE_ALL_TASKS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_TASKS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_TASKS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_TASKS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_TASKS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_TASKS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_TASKS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_TASKS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_WORKSTATIONS.rfo/co=FLN_RETRIEVE_ALL_WORKSTATIONS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_WORKSTATIONS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_WORKSTATIONS
'RDB$FLN_RETRIEVE_ALL_WORKSTATIO' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_WORKSTATIONS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_WORKSTATIONS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_WORKSTATIONS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_WORKSTATIONS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_WORKSTATIONS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_WORKSTATIONS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_WORKSTATIONS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_WORKSTATIO inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_WORKSTATIONS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ALL_WORK_IDS.rfo/co=FLN_RETRIEVE_ALL_WORK_IDS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ALL_WORK_IDS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ALL_WORK_IDS
'RDB$FLN_RETRIEVE_ALL_WORK_IDS' not in module table
$ 	purge/nolog FLN_RETRIEVE_ALL_WORK_IDS.obj
$ 	purge/nolog FLN_RETRIEVE_ALL_WORK_IDS.for
$ 	purge/nolog FLN_RETRIEVE_ALL_WORK_IDS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ALL_WORK_IDS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ALL_WORK_IDS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ALL_WORK_IDS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ALL_WORK_IDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ALL_WORK_IDS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ALL_WORK_IDS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CREATED_JOBS.rfo/co=FLN_RETRIEVE_CREATED_JOBS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CREATED_JOBS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CREATED_JOBS
'RDB$FLN_RETRIEVE_CREATED_JOBS' not in module table
$ 	purge/nolog FLN_RETRIEVE_CREATED_JOBS.obj
$ 	purge/nolog FLN_RETRIEVE_CREATED_JOBS.for
$ 	purge/nolog FLN_RETRIEVE_CREATED_JOBS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CREATED_JOBS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CREATED_JOBS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CREATED_JOBS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CREATED_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CREATED_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CREATED_JOBS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CREATED_PROJECTS.rfo/co=FLN_RETRIEVE_CREATED_PROJECTS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CREATED_PROJECTS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CREATED_PROJECTS
'RDB$FLN_RETRIEVE_CREATED_PROJEC' not in module table
$ 	purge/nolog FLN_RETRIEVE_CREATED_PROJECTS.obj
$ 	purge/nolog FLN_RETRIEVE_CREATED_PROJECTS.for
$ 	purge/nolog FLN_RETRIEVE_CREATED_PROJECTS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CREATED_PROJECTS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CREATED_PROJECTS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CREATED_PROJECTS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CREATED_PROJECTS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CREATED_PROJEC inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CREATED_PROJECTS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CURRENT.rfo/co=FLN_RETRIEVE_CURRENT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CURRENT
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CURRENT
'RDB$FLN_RETRIEVE_CURRENT' not in module table
$ 	purge/nolog FLN_RETRIEVE_CURRENT.obj
$ 	purge/nolog FLN_RETRIEVE_CURRENT.for
$ 	purge/nolog FLN_RETRIEVE_CURRENT.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CURRENT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CURRENT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CURRENT
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CURRENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CURRENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CURRENT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CURRENT_JOB.rfo/co=FLN_RETRIEVE_CURRENT_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CURRENT_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CURRENT_JOB
'RDB$FLN_RETRIEVE_CURRENT_JOB' not in module table
$ 	purge/nolog FLN_RETRIEVE_CURRENT_JOB.obj
$ 	purge/nolog FLN_RETRIEVE_CURRENT_JOB.for
$ 	purge/nolog FLN_RETRIEVE_CURRENT_JOB.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CURRENT_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CURRENT_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CURRENT_JOB
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CURRENT_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CURRENT_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CURRENT_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_OPERATOR_AUTH.rfo/co=FLN_RETRIEVE_OPERATOR_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_OPERATOR_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_OPERATOR_AUTH
'RDB$FLN_RETRIEVE_OPERATOR_AUTH' not in module table
$ 	purge/nolog FLN_RETRIEVE_OPERATOR_AUTH.obj
$ 	purge/nolog FLN_RETRIEVE_OPERATOR_AUTH.for
$ 	purge/nolog FLN_RETRIEVE_OPERATOR_AUTH.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_OPERATOR_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_OPERATOR_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_OPERATOR_AUTH
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_OPERATOR_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_OPERATOR_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_OPERATOR_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WORKSTATION_AUTH.rfo/co=FLN_RETRIEVE_WORKSTATION_AUTH
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WORKSTATION_AUTH
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WORKSTATION_AUTH
'RDB$FLN_RETRIEVE_WORKSTATION_AU' not in module table
$ 	purge/nolog FLN_RETRIEVE_WORKSTATION_AUTH.obj
$ 	purge/nolog FLN_RETRIEVE_WORKSTATION_AUTH.for
$ 	purge/nolog FLN_RETRIEVE_WORKSTATION_AUTH.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WORKSTATION_AUTH.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WORKSTATION_AUTH"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WORKSTATION_AUTH
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WORKSTATION_AUTH inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WORKSTATION_AU inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WORKSTATION_AUTH.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CURRENT_PROJECT.rfo/co=FLN_RETRIEVE_CURRENT_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CURRENT_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CURRENT_PROJECT
'RDB$FLN_RETRIEVE_CURRENT_PROJEC' not in module table
$ 	purge/nolog FLN_RETRIEVE_CURRENT_PROJECT.obj
$ 	purge/nolog FLN_RETRIEVE_CURRENT_PROJECT.for
$ 	purge/nolog FLN_RETRIEVE_CURRENT_PROJECT.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CURRENT_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CURRENT_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CURRENT_PROJECT
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CURRENT_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CURRENT_PROJEC inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CURRENT_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_CURRENT_TASK.rfo/co=FLN_RETRIEVE_CURRENT_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_CURRENT_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_CURRENT_TASK
'RDB$FLN_RETRIEVE_CURRENT_TASK' not in module table
$ 	purge/nolog FLN_RETRIEVE_CURRENT_TASK.obj
$ 	purge/nolog FLN_RETRIEVE_CURRENT_TASK.for
$ 	purge/nolog FLN_RETRIEVE_CURRENT_TASK.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_CURRENT_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_CURRENT_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_CURRENT_TASK
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_CURRENT_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_CURRENT_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_CURRENT_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEMENT_DEF.rfo/co=FLN_RETRIEVE_ELEMENT_DEF
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEMENT_DEF
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEMENT_DEF
'RDB$FLN_RETRIEVE_ELEMENT_DEF' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_DEF.obj
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_DEF.for
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_DEF.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEMENT_DEF.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEMENT_DEF"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEMENT_DEF
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEMENT_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEMENT_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEMENT_DEF.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_FLOWLINE_DEF.rfo/co=FLN_RETRIEVE_FLOWLINE_DEF
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_FLOWLINE_DEF
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_FLOWLINE_DEF
'RDB$FLN_RETRIEVE_FLOWLINE_DEF' not in module table
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_DEF.obj
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_DEF.for
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_DEF.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_FLOWLINE_DEF.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_FLOWLINE_DEF"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_FLOWLINE_DEF
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_FLOWLINE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_FLOWLINE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_FLOWLINE_DEF.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_INFO_JOB_ID.rfo/co=FLN_RETRIEVE_INFO_JOB_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_INFO_JOB_ID
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_INFO_JOB_ID
'RDB$FLN_RETRIEVE_INFO_JOB_ID' not in module table
$ 	purge/nolog FLN_RETRIEVE_INFO_JOB_ID.obj
$ 	purge/nolog FLN_RETRIEVE_INFO_JOB_ID.for
$ 	purge/nolog FLN_RETRIEVE_INFO_JOB_ID.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_INFO_JOB_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_INFO_JOB_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_INFO_JOB_ID
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_INFO_JOB_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_INFO_JOB_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_INFO_JOB_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_OUTER_INFO_JOB_ID.rfo/co=FLN_RETRIEVE_OUTER_INFO_JOB_ID
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_OUTER_INFO_JOB_ID
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_OUTER_INFO_JOB_ID
'RDB$FLN_RETRIEVE_OUTER_INFO_JOB' not in module table
$ 	purge/nolog FLN_RETRIEVE_OUTER_INFO_JOB_ID.obj
$ 	purge/nolog FLN_RETRIEVE_OUTER_INFO_JOB_ID.for
$ 	purge/nolog FLN_RETRIEVE_OUTER_INFO_JOB_ID.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_OUTER_INFO_JOB_ID.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_OUTER_INFO_JOB_ID"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_OUTER_INFO_JOB_ID
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_OUTER_INFO_JOB_ID inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_OUTER_INFO_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_OUTER_INFO_JOB_ID.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_PROCEDURE_DEF.rfo/co=FLN_RETRIEVE_PROCEDURE_DEF
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_PROCEDURE_DEF
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_PROCEDURE_DEF
'RDB$FLN_RETRIEVE_PROCEDURE_DEF' not in module table
$ 	purge/nolog FLN_RETRIEVE_PROCEDURE_DEF.obj
$ 	purge/nolog FLN_RETRIEVE_PROCEDURE_DEF.for
$ 	purge/nolog FLN_RETRIEVE_PROCEDURE_DEF.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_PROCEDURE_DEF.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_PROCEDURE_DEF"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_PROCEDURE_DEF
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_PROCEDURE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_PROCEDURE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_PROCEDURE_DEF.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WIRE_DEF.rfo/co=FLN_RETRIEVE_WIRE_DEF
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WIRE_DEF
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WIRE_DEF
'RDB$FLN_RETRIEVE_WIRE_DEF' not in module table
$ 	purge/nolog FLN_RETRIEVE_WIRE_DEF.obj
$ 	purge/nolog FLN_RETRIEVE_WIRE_DEF.for
$ 	purge/nolog FLN_RETRIEVE_WIRE_DEF.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WIRE_DEF.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WIRE_DEF"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WIRE_DEF
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WIRE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WIRE_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WIRE_DEF.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_SYSTEM_DEF.rfo/co=FLN_RETRIEVE_SYSTEM_DEF
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_SYSTEM_DEF
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_SYSTEM_DEF
'RDB$FLN_RETRIEVE_SYSTEM_DEF' not in module table
$ 	purge/nolog FLN_RETRIEVE_SYSTEM_DEF.obj
$ 	purge/nolog FLN_RETRIEVE_SYSTEM_DEF.for
$ 	purge/nolog FLN_RETRIEVE_SYSTEM_DEF.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_SYSTEM_DEF.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_SYSTEM_DEF"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_SYSTEM_DEF
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_SYSTEM_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_SYSTEM_DEF inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_SYSTEM_DEF.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_JOB_TASK.rfo/co=FLN_RETRIEVE_JOB_TASK
Can't open 'FLN_RETRIEVE_JOB_TASK.SRC'
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_JOB_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_JOB_TASK
Can't open file ADC.IDE
%RMS-E-FNF, file not found
$ 	purge/nolog FLN_RETRIEVE_JOB_TASK.obj
$ 	purge/nolog FLN_RETRIEVE_JOB_TASK.for
$ 	purge/nolog FLN_RETRIEVE_JOB_TASK.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_JOB_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_JOB_TASK"
$ 	delete adc.ide;*
%DELETE-W-SEARCHFAIL, error searching for LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]ADC.IDE;*
-RMS-E-FNF, file not found
$	if ok then libr FLN_RETRIEVE_JOB_TASK
$ 	delete FLN_RETRIEVE_JOB_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_JOBS.rfo/co=FLN_RETRIEVE_JOBS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_JOBS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_JOBS
'RDB$FLN_RETRIEVE_JOBS' not in module table
$ 	purge/nolog FLN_RETRIEVE_JOBS.obj
$ 	purge/nolog FLN_RETRIEVE_JOBS.for
$ 	purge/nolog FLN_RETRIEVE_JOBS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_JOBS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_JOBS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_JOBS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_JOBS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_JOBS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_JOB_HIST_PROJECT.rfo/co=FLN_RETRIEVE_JOB_HIST_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_JOB_HIST_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_JOB_HIST_PROJECT
'RDB$FLN_RETRIEVE_JOB_HIST_PROJE' not in module table
$ 	purge/nolog FLN_RETRIEVE_JOB_HIST_PROJECT.obj
$ 	purge/nolog FLN_RETRIEVE_JOB_HIST_PROJECT.for
$ 	purge/nolog FLN_RETRIEVE_JOB_HIST_PROJECT.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_JOB_HIST_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_JOB_HIST_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_JOB_HIST_PROJECT
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_JOB_HIST_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_JOB_HIST_PROJE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_JOB_HIST_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_JOBS_PROJECT.rfo/co=FLN_RETRIEVE_JOBS_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_JOBS_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_JOBS_PROJECT
'RDB$FLN_RETRIEVE_JOBS_PROJECT' not in module table
$ 	purge/nolog FLN_RETRIEVE_JOBS_PROJECT.obj
$ 	purge/nolog FLN_RETRIEVE_JOBS_PROJECT.for
$ 	purge/nolog FLN_RETRIEVE_JOBS_PROJECT.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_JOBS_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_JOBS_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_JOBS_PROJECT
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_JOBS_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_JOBS_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_JOBS_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_PROJECTS.rfo/co=FLN_RETRIEVE_PROJECTS
Line 13 of file FLN_RETRIEVE_PROJECTS.SRC too long
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_PROJECTS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_PROJECTS
'RDB$FLN_RETRIEVE_PROJECTS' not in module table
$ 	purge/nolog FLN_RETRIEVE_PROJECTS.obj
$ 	purge/nolog FLN_RETRIEVE_PROJECTS.for
$ 	purge/nolog FLN_RETRIEVE_PROJECTS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_PROJECTS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_PROJECTS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_PROJECTS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_PROJECTS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_PROJECTS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_PROJECTS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEMENT_TIMINGS.rfo/co=FLN_RETRIEVE_ELEMENT_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEMENT_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEMENT_TIMINGS
'RDB$FLN_RETRIEVE_ELEMENT_TIMING' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_ELEMENT_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEMENT_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEMENT_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEMENT_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEMENT_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEMENT_TIMING inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEMENT_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_OPER_WORK_TIMINGS.rfo/co=FLN_RETRIEVE_OPER_WORK_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_OPER_WORK_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_OPER_WORK_TIMINGS
'RDB$FLN_RETRIEVE_OPER_WORK_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_OPER_WORK_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_OPER_WORK_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_OPER_WORK_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_OPER_WORK_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_OPER_WORK_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_OPER_WORK_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_OPER_WORK_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_OPER_WORK_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_OPER_WORK_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WORK_OPER_TIMINGS.rfo/co=FLN_RETRIEVE_WORK_OPER_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WORK_OPER_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WORK_OPER_TIMINGS
'RDB$FLN_RETRIEVE_WORK_OPER_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_WORK_OPER_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_WORK_OPER_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_WORK_OPER_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WORK_OPER_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WORK_OPER_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WORK_OPER_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WORK_OPER_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WORK_OPER_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WORK_OPER_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_OPER_ELEM_TIMINGS.rfo/co=FLN_RETRIEVE_OPER_ELEM_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_OPER_ELEM_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_OPER_ELEM_TIMINGS
'RDB$FLN_RETRIEVE_OPER_ELEM_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_OPER_ELEM_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_OPER_ELEM_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_OPER_ELEM_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_OPER_ELEM_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_OPER_ELEM_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_OPER_ELEM_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_OPER_ELEM_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_OPER_ELEM_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_OPER_ELEM_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WORK_ELEM_TIMINGS.rfo/co=FLN_RETRIEVE_WORK_ELEM_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WORK_ELEM_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WORK_ELEM_TIMINGS
'RDB$FLN_RETRIEVE_WORK_ELEM_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_WORK_ELEM_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_WORK_ELEM_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_WORK_ELEM_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WORK_ELEM_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WORK_ELEM_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WORK_ELEM_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WORK_ELEM_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WORK_ELEM_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WORK_ELEM_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEM_OPER_TIMINGS.rfo/co=FLN_RETRIEVE_ELEM_OPER_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEM_OPER_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEM_OPER_TIMINGS
'RDB$FLN_RETRIEVE_ELEM_OPER_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEM_OPER_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_ELEM_OPER_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_ELEM_OPER_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEM_OPER_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEM_OPER_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEM_OPER_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEM_OPER_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEM_OPER_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEM_OPER_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_ELEM_WORK_TIMINGS.rfo/co=FLN_RETRIEVE_ELEM_WORK_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_ELEM_WORK_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_ELEM_WORK_TIMINGS
'RDB$FLN_RETRIEVE_ELEM_WORK_TIMI' not in module table
$ 	purge/nolog FLN_RETRIEVE_ELEM_WORK_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_ELEM_WORK_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_ELEM_WORK_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_ELEM_WORK_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_ELEM_WORK_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_ELEM_WORK_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_ELEM_WORK_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_ELEM_WORK_TIMI inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_ELEM_WORK_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_WORK_TOTAL_TIMINGS.rfo/co=FLN_RETRIEVE_WORK_TOTAL_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_WORK_TOTAL_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_WORK_TOTAL_TIMINGS
'RDB$FLN_RETRIEVE_WORK_TOTAL_TIM' not in module table
$ 	purge/nolog FLN_RETRIEVE_WORK_TOTAL_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_WORK_TOTAL_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_WORK_TOTAL_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_WORK_TOTAL_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_WORK_TOTAL_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_WORK_TOTAL_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_WORK_TOTAL_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_WORK_TOTAL_TIM inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_WORK_TOTAL_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_OPER_TOTAL_TIMINGS.rfo/co=FLN_RETRIEVE_OPER_TOTAL_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_OPER_TOTAL_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_OPER_TOTAL_TIMINGS
'RDB$FLN_RETRIEVE_OPER_TOTAL_TIM' not in module table
$ 	purge/nolog FLN_RETRIEVE_OPER_TOTAL_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_OPER_TOTAL_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_OPER_TOTAL_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_OPER_TOTAL_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_OPER_TOTAL_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_OPER_TOTAL_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_OPER_TOTAL_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_OPER_TOTAL_TIM inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_OPER_TOTAL_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_FLOWLINE_TIMINGS.rfo/co=FLN_RETRIEVE_FLOWLINE_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_FLOWLINE_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_FLOWLINE_TIMINGS
'RDB$FLN_RETRIEVE_FLOWLINE_TIMIN' not in module table
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_FLOWLINE_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_FLOWLINE_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_FLOWLINE_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_FLOWLINE_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_FLOWLINE_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_FLOWLINE_TIMIN inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_FLOWLINE_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_PROJECT_TIMINGS.rfo/co=FLN_RETRIEVE_PROJECT_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_PROJECT_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_PROJECT_TIMINGS
'RDB$FLN_RETRIEVE_PROJECT_TIMING' not in module table
$ 	purge/nolog FLN_RETRIEVE_PROJECT_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_PROJECT_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_PROJECT_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_PROJECT_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_PROJECT_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_PROJECT_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_PROJECT_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_PROJECT_TIMING inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_PROJECT_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_JOB_TIMINGS.rfo/co=FLN_RETRIEVE_JOB_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_JOB_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_JOB_TIMINGS
'RDB$FLN_RETRIEVE_JOB_TIMINGS' not in module table
$ 	purge/nolog FLN_RETRIEVE_JOB_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_JOB_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_JOB_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_JOB_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_JOB_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_JOB_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_JOB_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_JOB_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_JOB_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_SESSION_TIMINGS.rfo/co=FLN_RETRIEVE_SESSION_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_SESSION_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_SESSION_TIMINGS
'RDB$FLN_RETRIEVE_SESSION_TIMING' not in module table
$ 	purge/nolog FLN_RETRIEVE_SESSION_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_SESSION_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_SESSION_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_SESSION_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_SESSION_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_SESSION_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_SESSION_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_SESSION_TIMING inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_SESSION_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_TASK_TIMINGS.rfo/co=FLN_RETRIEVE_TASK_TIMINGS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_TASK_TIMINGS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_TASK_TIMINGS
'RDB$FLN_RETRIEVE_TASK_TIMINGS' not in module table
$ 	purge/nolog FLN_RETRIEVE_TASK_TIMINGS.obj
$ 	purge/nolog FLN_RETRIEVE_TASK_TIMINGS.for
$ 	purge/nolog FLN_RETRIEVE_TASK_TIMINGS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_TASK_TIMINGS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_TASK_TIMINGS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_TASK_TIMINGS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_TASK_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_TASK_TIMINGS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_TASK_TIMINGS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_RESETS.rfo/co=FLN_RETRIEVE_RESETS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_RESETS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_RESETS
'RDB$FLN_RETRIEVE_RESETS' not in module table
$ 	purge/nolog FLN_RETRIEVE_RESETS.obj
$ 	purge/nolog FLN_RETRIEVE_RESETS.for
$ 	purge/nolog FLN_RETRIEVE_RESETS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_RESETS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_RESETS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_RESETS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_RESETS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_RESETS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_RESETS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_SESSION_PJE.rfo/co=FLN_RETRIEVE_SESSION_PJE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_SESSION_PJE
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_SESSION_PJE
'RDB$FLN_RETRIEVE_SESSION_PJE' not in module table
$ 	purge/nolog FLN_RETRIEVE_SESSION_PJE.obj
$ 	purge/nolog FLN_RETRIEVE_SESSION_PJE.for
$ 	purge/nolog FLN_RETRIEVE_SESSION_PJE.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_SESSION_PJE.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_SESSION_PJE"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_SESSION_PJE
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_SESSION_PJE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_SESSION_PJE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_SESSION_PJE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_TASKS.rfo/co=FLN_RETRIEVE_TASKS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_TASKS
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_TASKS
'RDB$FLN_RETRIEVE_TASKS' not in module table
$ 	purge/nolog FLN_RETRIEVE_TASKS.obj
$ 	purge/nolog FLN_RETRIEVE_TASKS.for
$ 	purge/nolog FLN_RETRIEVE_TASKS.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_TASKS.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_TASKS"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_TASKS
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_TASKS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_TASKS_JOB.rfo/co=FLN_RETRIEVE_TASKS_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_TASKS_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_TASKS_JOB
'RDB$FLN_RETRIEVE_TASKS_JOB' not in module table
$ 	purge/nolog FLN_RETRIEVE_TASKS_JOB.obj
$ 	purge/nolog FLN_RETRIEVE_TASKS_JOB.for
$ 	purge/nolog FLN_RETRIEVE_TASKS_JOB.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_TASKS_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_TASKS_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_TASKS_JOB
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_TASKS_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_TASKS_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_TASKS_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_RETRIEVE_TASK_HIST_JOB.rfo/co=FLN_RETRIEVE_TASK_HIST_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_RETRIEVE_TASK_HIST_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_RETRIEVE_TASK_HIST_JOB
'RDB$FLN_RETRIEVE_TASK_HIST_JOB' not in module table
$ 	purge/nolog FLN_RETRIEVE_TASK_HIST_JOB.obj
$ 	purge/nolog FLN_RETRIEVE_TASK_HIST_JOB.for
$ 	purge/nolog FLN_RETRIEVE_TASK_HIST_JOB.rfo
$ 	if ok then delete/nolog FLN_RETRIEVE_TASK_HIST_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_RETRIEVE_TASK_HIST_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_RETRIEVE_TASK_HIST_JOB
%LIBRAR-S-INSERTED, module FLN_RETRIEVE_TASK_HIST_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_RETRIEVE_TASK_HIST_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_RETRIEVE_TASK_HIST_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_COMPLETE.rfo/co=FLN_SESS_COMPLETE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_COMPLETE
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_COMPLETE
$ 	purge/nolog FLN_SESS_COMPLETE.obj
$ 	purge/nolog FLN_SESS_COMPLETE.for
$ 	purge/nolog FLN_SESS_COMPLETE.rfo
$ 	if ok then delete/nolog FLN_SESS_COMPLETE.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_COMPLETE"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_COMPLETE
%LIBRAR-S-INSERTED, module FLN_SESS_COMPLETE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_COMPLETE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_CONTINUE.rfo/co=FLN_SESS_CONTINUE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_CONTINUE
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_CONTINUE
'RDB$FLN_SESS_CONTINUE' not in module table
$ 	purge/nolog FLN_SESS_CONTINUE.obj
$ 	purge/nolog FLN_SESS_CONTINUE.for
$ 	purge/nolog FLN_SESS_CONTINUE.rfo
$ 	if ok then delete/nolog FLN_SESS_CONTINUE.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_CONTINUE"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_CONTINUE
%LIBRAR-S-INSERTED, module FLN_SESS_CONTINUE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SESS_CONTINUE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_CONTINUE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_ERROR.rfo/co=FLN_SESS_ERROR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_ERROR
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_ERROR
'RDB$FLN_SESS_ERROR' not in module table
$ 	purge/nolog FLN_SESS_ERROR.obj
$ 	purge/nolog FLN_SESS_ERROR.for
$ 	purge/nolog FLN_SESS_ERROR.rfo
$ 	if ok then delete/nolog FLN_SESS_ERROR.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_ERROR"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_ERROR
%LIBRAR-S-INSERTED, module FLN_SESS_ERROR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SESS_ERROR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_ERROR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_OFFLINE.rfo/co=FLN_SESS_OFFLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_OFFLINE
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_OFFLINE
'RDB$FLN_SESS_OFFLINE' not in module table
$ 	purge/nolog FLN_SESS_OFFLINE.obj
$ 	purge/nolog FLN_SESS_OFFLINE.for
$ 	purge/nolog FLN_SESS_OFFLINE.rfo
$ 	if ok then delete/nolog FLN_SESS_OFFLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_OFFLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_OFFLINE
%LIBRAR-S-INSERTED, module FLN_SESS_OFFLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SESS_OFFLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_OFFLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_RESTART.rfo/co=FLN_SESS_RESTART
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_RESTART
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_RESTART
'RDB$FLN_SESS_RESTART' not in module table
$ 	purge/nolog FLN_SESS_RESTART.obj
$ 	purge/nolog FLN_SESS_RESTART.for
$ 	purge/nolog FLN_SESS_RESTART.rfo
$ 	if ok then delete/nolog FLN_SESS_RESTART.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_RESTART"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_RESTART
%LIBRAR-S-INSERTED, module FLN_SESS_RESTART inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SESS_RESTART inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_RESTART.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SESS_SUBFLOWLINE.rfo/co=FLN_SESS_SUBFLOWLINE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SESS_SUBFLOWLINE
$ 	ok=$status
$ 	if ok then pvv FLN_SESS_SUBFLOWLINE
'RDB$FLN_SESS_SUBFLOWLINE' not in module table
$ 	purge/nolog FLN_SESS_SUBFLOWLINE.obj
$ 	purge/nolog FLN_SESS_SUBFLOWLINE.for
$ 	purge/nolog FLN_SESS_SUBFLOWLINE.rfo
$ 	if ok then delete/nolog FLN_SESS_SUBFLOWLINE.lis;*
$	if .not.ok then emsg=emsg+" FLN_SESS_SUBFLOWLINE"
$ 	delete adc.ide;*
$	if ok then libr FLN_SESS_SUBFLOWLINE
%LIBRAR-S-INSERTED, module FLN_SESS_SUBFLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SESS_SUBFLOWLINE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SESS_SUBFLOWLINE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_CURRENT.rfo/co=FLN_SET_CURRENT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_CURRENT
$ 	ok=$status
$ 	if ok then pvv FLN_SET_CURRENT
'RDB$FLN_SET_CURRENT' not in module table
$ 	purge/nolog FLN_SET_CURRENT.obj
$ 	purge/nolog FLN_SET_CURRENT.for
$ 	purge/nolog FLN_SET_CURRENT.rfo
$ 	if ok then delete/nolog FLN_SET_CURRENT.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_CURRENT"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_CURRENT
%LIBRAR-S-INSERTED, module FLN_SET_CURRENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_CURRENT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_CURRENT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_CURRENT_PJE.rfo/co=FLN_SET_CURRENT_PJE
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_CURRENT_PJE
$ 	ok=$status
$ 	if ok then pvv FLN_SET_CURRENT_PJE
'RDB$FLN_SET_CURRENT_PJE' not in module table
$ 	purge/nolog FLN_SET_CURRENT_PJE.obj
$ 	purge/nolog FLN_SET_CURRENT_PJE.for
$ 	purge/nolog FLN_SET_CURRENT_PJE.rfo
$ 	if ok then delete/nolog FLN_SET_CURRENT_PJE.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_CURRENT_PJE"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_CURRENT_PJE
%LIBRAR-S-INSERTED, module FLN_SET_CURRENT_PJE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_CURRENT_PJE inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_CURRENT_PJE.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_CURRENT_JOB.rfo/co=FLN_SET_CURRENT_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_CURRENT_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_SET_CURRENT_JOB
'RDB$FLN_SET_CURRENT_JOB' not in module table
$ 	purge/nolog FLN_SET_CURRENT_JOB.obj
$ 	purge/nolog FLN_SET_CURRENT_JOB.for
$ 	purge/nolog FLN_SET_CURRENT_JOB.rfo
$ 	if ok then delete/nolog FLN_SET_CURRENT_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_CURRENT_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_CURRENT_JOB
%LIBRAR-S-INSERTED, module FLN_SET_CURRENT_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_CURRENT_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_CURRENT_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_CURRENT_PROJECT.rfo/co=FLN_SET_CURRENT_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_CURRENT_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_SET_CURRENT_PROJECT
'RDB$FLN_SET_CURRENT_PROJECT' not in module table
$ 	purge/nolog FLN_SET_CURRENT_PROJECT.obj
$ 	purge/nolog FLN_SET_CURRENT_PROJECT.for
$ 	purge/nolog FLN_SET_CURRENT_PROJECT.rfo
$ 	if ok then delete/nolog FLN_SET_CURRENT_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_CURRENT_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_CURRENT_PROJECT
%LIBRAR-S-INSERTED, module FLN_SET_CURRENT_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_CURRENT_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_CURRENT_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_CURRENT_TASK.rfo/co=FLN_SET_CURRENT_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_CURRENT_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_SET_CURRENT_TASK
'RDB$FLN_SET_CURRENT_TASK' not in module table
$ 	purge/nolog FLN_SET_CURRENT_TASK.obj
$ 	purge/nolog FLN_SET_CURRENT_TASK.for
$ 	purge/nolog FLN_SET_CURRENT_TASK.rfo
$ 	if ok then delete/nolog FLN_SET_CURRENT_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_CURRENT_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_CURRENT_TASK
%LIBRAR-S-INSERTED, module FLN_SET_CURRENT_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_CURRENT_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_CURRENT_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_GLOBALS.rfo/co=FLN_SET_GLOBALS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_GLOBALS
$ 	ok=$status
$ 	if ok then pvv FLN_SET_GLOBALS
'RDB$FLN_SET_GLOBALS' not in module table
$ 	purge/nolog FLN_SET_GLOBALS.obj
$ 	purge/nolog FLN_SET_GLOBALS.for
$ 	purge/nolog FLN_SET_GLOBALS.rfo
$ 	if ok then delete/nolog FLN_SET_GLOBALS.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_GLOBALS"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_GLOBALS
%LIBRAR-S-INSERTED, module FLN_SET_GLOBALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_GLOBALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_GLOBALS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_WIRES.rfo/co=FLN_SET_WIRES
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_WIRES
$ 	ok=$status
$ 	if ok then pvv FLN_SET_WIRES
'RDB$FLN_SET_WIRES' not in module table
$ 	purge/nolog FLN_SET_WIRES.obj
$ 	purge/nolog FLN_SET_WIRES.for
$ 	purge/nolog FLN_SET_WIRES.rfo
$ 	if ok then delete/nolog FLN_SET_WIRES.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_WIRES"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_WIRES
%LIBRAR-S-INSERTED, module FLN_SET_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_WIRES inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_WIRES.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SETUP_TASKS.rfo/co=FLN_SETUP_TASKS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SETUP_TASKS
$ 	ok=$status
$ 	if ok then pvv FLN_SETUP_TASKS
'RDB$FLN_SETUP_TASKS' not in module table
$ 	purge/nolog FLN_SETUP_TASKS.obj
$ 	purge/nolog FLN_SETUP_TASKS.for
$ 	purge/nolog FLN_SETUP_TASKS.rfo
$ 	if ok then delete/nolog FLN_SETUP_TASKS.lis;*
$	if .not.ok then emsg=emsg+" FLN_SETUP_TASKS"
$ 	delete adc.ide;*
$	if ok then libr FLN_SETUP_TASKS
%LIBRAR-S-INSERTED, module FLN_SETUP_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SETUP_TASKS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SETUP_TASKS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_JOB.rfo/co=FLN_SET_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_SET_JOB
'RDB$FLN_SET_JOB' not in module table
$ 	purge/nolog FLN_SET_JOB.obj
$ 	purge/nolog FLN_SET_JOB.for
$ 	purge/nolog FLN_SET_JOB.rfo
$ 	if ok then delete/nolog FLN_SET_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_JOB
%LIBRAR-S-INSERTED, module FLN_SET_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_LOCALS.rfo/co=FLN_SET_LOCALS
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_LOCALS
$ 	ok=$status
$ 	if ok then pvv FLN_SET_LOCALS
'RDB$FLN_SET_LOCALS' not in module table
$ 	purge/nolog FLN_SET_LOCALS.obj
$ 	purge/nolog FLN_SET_LOCALS.for
$ 	purge/nolog FLN_SET_LOCALS.rfo
$ 	if ok then delete/nolog FLN_SET_LOCALS.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_LOCALS"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_LOCALS
%LIBRAR-S-INSERTED, module FLN_SET_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_LOCALS inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_LOCALS.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_LOCALS_TR.rfo/co=FLN_SET_LOCALS_TR
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_LOCALS_TR
$ 	ok=$status
$ 	if ok then pvv FLN_SET_LOCALS_TR
'RDB$FLN_SET_LOCALS_TR' not in module table
$ 	purge/nolog FLN_SET_LOCALS_TR.obj
$ 	purge/nolog FLN_SET_LOCALS_TR.for
$ 	purge/nolog FLN_SET_LOCALS_TR.rfo
$ 	if ok then delete/nolog FLN_SET_LOCALS_TR.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_LOCALS_TR"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_LOCALS_TR
%LIBRAR-S-INSERTED, module FLN_SET_LOCALS_TR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_LOCALS_TR inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_LOCALS_TR.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_PROJECT.rfo/co=FLN_SET_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_SET_PROJECT
'RDB$FLN_SET_PROJECT' not in module table
$ 	purge/nolog FLN_SET_PROJECT.obj
$ 	purge/nolog FLN_SET_PROJECT.for
$ 	purge/nolog FLN_SET_PROJECT.rfo
$ 	if ok then delete/nolog FLN_SET_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_PROJECT
%LIBRAR-S-INSERTED, module FLN_SET_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SET_TASK.rfo/co=FLN_SET_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SET_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_SET_TASK
'RDB$FLN_SET_TASK' not in module table
$ 	purge/nolog FLN_SET_TASK.obj
$ 	purge/nolog FLN_SET_TASK.for
$ 	purge/nolog FLN_SET_TASK.rfo
$ 	if ok then delete/nolog FLN_SET_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_SET_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_SET_TASK
%LIBRAR-S-INSERTED, module FLN_SET_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SET_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SET_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_SKIP_TASK.rfo/co=FLN_SKIP_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_SKIP_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_SKIP_TASK
'RDB$FLN_SKIP_TASK' not in module table
$ 	purge/nolog FLN_SKIP_TASK.obj
$ 	purge/nolog FLN_SKIP_TASK.for
$ 	purge/nolog FLN_SKIP_TASK.rfo
$ 	if ok then delete/nolog FLN_SKIP_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_SKIP_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_SKIP_TASK
%LIBRAR-S-INSERTED, module FLN_SKIP_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_SKIP_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_SKIP_TASK.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_START_JOB.rfo/co=FLN_START_JOB
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_START_JOB
$ 	ok=$status
$ 	if ok then pvv FLN_START_JOB
'RDB$FLN_START_JOB' not in module table
$ 	purge/nolog FLN_START_JOB.obj
$ 	purge/nolog FLN_START_JOB.for
$ 	purge/nolog FLN_START_JOB.rfo
$ 	if ok then delete/nolog FLN_START_JOB.lis;*
$	if .not.ok then emsg=emsg+" FLN_START_JOB"
$ 	delete adc.ide;*
$	if ok then libr FLN_START_JOB
%LIBRAR-S-INSERTED, module FLN_START_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_START_JOB inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_START_JOB.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_START_PROJECT.rfo/co=FLN_START_PROJECT
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_START_PROJECT
$ 	ok=$status
$ 	if ok then pvv FLN_START_PROJECT
'RDB$FLN_START_PROJECT' not in module table
$ 	purge/nolog FLN_START_PROJECT.obj
$ 	purge/nolog FLN_START_PROJECT.for
$ 	purge/nolog FLN_START_PROJECT.rfo
$ 	if ok then delete/nolog FLN_START_PROJECT.lis;*
$	if .not.ok then emsg=emsg+" FLN_START_PROJECT"
$ 	delete adc.ide;*
$	if ok then libr FLN_START_PROJECT
%LIBRAR-S-INSERTED, module FLN_START_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_START_PROJECT inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_START_PROJECT.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_START_SESSION.rfo/co=FLN_START_SESSION
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_START_SESSION
$ 	ok=$status
$ 	if ok then pvv FLN_START_SESSION
'RDB$FLN_START_SESSION' not in module table
$ 	purge/nolog FLN_START_SESSION.obj
$ 	purge/nolog FLN_START_SESSION.for
$ 	purge/nolog FLN_START_SESSION.rfo
$ 	if ok then delete/nolog FLN_START_SESSION.lis;*
$	if .not.ok then emsg=emsg+" FLN_START_SESSION"
$ 	delete adc.ide;*
$	if ok then libr FLN_START_SESSION
%LIBRAR-S-INSERTED, module FLN_START_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_START_SESSION inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_START_SESSION.obj;*
$	set noverify
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
$ 	adc FLN_START_TASK.rfo/co=FLN_START_TASK
$	rfort/debug/noopt/check=(bounds,overflow)/list FLN_START_TASK
$ 	ok=$status
$ 	if ok then pvv FLN_START_TASK
'RDB$FLN_START_TASK' not in module table
$ 	purge/nolog FLN_START_TASK.obj
$ 	purge/nolog FLN_START_TASK.for
$ 	purge/nolog FLN_START_TASK.rfo
$ 	if ok then delete/nolog FLN_START_TASK.lis;*
$	if .not.ok then emsg=emsg+" FLN_START_TASK"
$ 	delete adc.ide;*
$	if ok then libr FLN_START_TASK
%LIBRAR-S-INSERTED, module FLN_START_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
%LIBRAR-S-INSERTED, module RDB$FLN_START_TASK inserted in LSL$SOURCE_ROOT:[FLOWLINE.LIBRARY]FLOWLINE.OLB;47
$ 	delete FLN_START_TASK.obj;*
$	set noverify
  JON          job terminated at  9-MAY-1990 14:04:27.77

  Accounting information:
  Buffered I/O count:        83512      Peak working set size:  2291
  Direct I/O count:          27676      Peak page file size:    6547
  Page faults:              652243      Mounted volumes:           0
  Charged CPU time:     0 00:20:05.48   Elapsed time:     0 02:13:45.13
