C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 14:42:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION NON_INTERACTIVE_CREATE_JOB()
C
***	MODULE NON_INTERACTIVE_CREATE_JOB
***	IDENT 13AP88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow new job to be launched, as specified with the
C /CREATE_JOB qualifier.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C function
	INTEGER		FLN_CREATE_JOB
C
C Assume success
C
	NON_INTERACTIVE_CREATE_JOB = LSC__NORMAL
C
C Set up variables from those input with qualifiers to describe
C the flowline, project, outer task id, and job name
C
	FLOWLINE_ID = NEW_JOB_FLOWLINE(:NEW_JOB_FLOWLINE_LEN)
	PROJECT_ID  = NEW_JOB_PROJ(:NEW_JOB_PROJ_LEN)
	JOB_NAME    = NEW_JOB(:NEW_JOB_LEN)
	OUTER_TASK_ID = NEW_JOB_OUTER_TASK_ID
	PRIORITY = NEW_JOB_PRIORITY
C
C Now deal with calling the job creation library routine
C
	NON_INTERACTIVE_CREATE_JOB = FLN_CREATE_JOB(
     &			FLOWLINE_ID,		! flowline
     &			PROJECT_ID,		! project
     &			JOB_NAME,		! new job's name
     &			OUTER_TASK_ID,		! outer task id
     &			OPERATOR_ID,		! creating operator
     &			PRIORITY,		! priority
     &			JOB_ID,			! returned job id
     &			FLOWLINE_COMPROC,	! returned fln com proc
     &			PROJECT_COMPROC)	! returned proj com proc
C
C Check for errors
C
	IF (.NOT.NON_INTERACTIVE_CREATE_JOB) THEN
	   CALL LCONT_PUTMSG(LSC__UNCRTJOB,0)
	   CALL LCONT_ADDMSG(NON_INTERACTIVE_CREATE_JOB,0)
	   NEXT_FUNCTION = DO_ERROR
C
C Otherwise, show that want to create a job
C
	ELSE
	   NEXT_FUNCTION = DO_NON_INT_CREATE_JOB
	ENDIF
C
C Exit
C
999	RETURN
	END
