C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 13:10:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION OUTPUT_CONTROL_STRING()
C
***	MODULE OUTPUT_CONTROL_STRING
***	IDENT 3MY88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to output to the currently assigned channel CHAN_SYS$OUTPUT
C the current contents of the EXPBUF byte buffer in the
C LSL$CMNLSL:EXPC.CMN common block wihtout any carriage control
C characters
C This is useful for outputting terminal control strings without
C messing up FMS too much
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE '($IODEF)'
C
C w/s
	INTEGER*2	IOSB(4)	! i/o status block
C
C functions
	INTEGER		SYS$QIOW
C
C Assume success
C
	OUTPUT_CONTROL_STRING = LSC__NORMAL
C
C Do the SYS$QIOW call to write a virtual block with no
C carriage control
C
	OUTPUT_CONTROL_STRING = SYS$QIOW(
     &			,
     &			%VAL(CHAN_SYS$OUTPUT),	! channel for output
     &			%VAL(IO$_WRITEVBLK),	! specify write block
     &			IOSB,			! status block
     &			,			! astadr
     &			,			! astadr
     &			EXPBUF,			! p1 buffer with chars 
     &			%VAL(EXPLEN),		! p2 length of buffer
     &			,			! p3
     &			%VAL(0),		! p4 no carriage control
     &			,)			! p5,p6

C
C Check for errors, firstly by examining the function return
C Don't exit for this sort of error
C
	IF (.NOT.OUTPUT_CONTROL_STRING) THEN
	   CALL LCONT_PUTMSG(OUTPUT_CONTROL_STRING,0)
	ENDIF
C
C Then by looking at the first word of the IO status block
C Don't exit for this sort of error
C
	IF (.NOT.IOSB(1)) THEN
	   CALL LCONT_PUTMSG(IOSB(1),0)
	ENDIF
C
C Exit
C
	RETURN
	END
