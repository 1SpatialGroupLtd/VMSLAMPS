	INTEGER FUNCTION OUTPUT_CONTROL_STRING()
C
***	MODULE OUTPUT_CONTROL_STRING
***	IDENT 3MY88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to output to the currently assigned channel CHAN_SYS$OUTPUT
C the current contents of the EXPBUF byte buffer in the
C LSL$CMNLSL:EXPC.CMN common block wihtout any carriage control
C characters
C This is useful for outputting terminal control strings without
C messing up FMS too much
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
	INCLUDE '($IODEF)'
C
C w/s
	INTEGER*2	IOSB(4)	! i/o status block
C
C functions
	INTEGER		SYS$QIOW
C
C Assume success
C
	OUTPUT_CONTROL_STRING = LSC__NORMAL
C
C Do the SYS$QIOW call to write a virtual block with no
C carriage control
C
	OUTPUT_CONTROL_STRING = SYS$QIOW(
     &			,
     &			%VAL(CHAN_SYS$OUTPUT),	! channel for output
     &			%VAL(IO$_WRITEVBLK),	! specify write block
     &			IOSB,			! status block
     &			,			! astadr
     &			,			! astadr
     &			EXPBUF,			! p1 buffer with chars 
     &			%VAL(EXPLEN),		! p2 length of buffer
     &			,			! p3
     &			%VAL(0),		! p4 no carriage control
     &			,)			! p5,p6

C
C Check for errors, firstly by examining the function return
C Don't exit for this sort of error
C
	IF (.NOT.OUTPUT_CONTROL_STRING) THEN
	   CALL LCONT_PUTMSG(OUTPUT_CONTROL_STRING,0)
	ENDIF
C
C Then by looking at the first word of the IO status block
C Don't exit for this sort of error
C
	IF (.NOT.IOSB(1)) THEN
	   CALL LCONT_PUTMSG(IOSB(1),0)
	ENDIF
C
C Exit
C
	RETURN
	END
