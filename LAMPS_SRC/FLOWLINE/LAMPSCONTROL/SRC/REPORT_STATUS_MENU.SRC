C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-20 18:48:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION REPORT_STATUS_MENU()
C
***	MODULE REPORT_STATUS_MENU
***	IDENT 05OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow selection of option from report menu
C It is assumed that authorisation checks have been carried
C out before reaching this routine
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C w/s
	LOGICAL		PRINT		! .T. if to print report
	LOGICAL		ABORT_REPORT	! .T. if to abort report
	INTEGER		STATUS		! temporary error return
	INTEGER		I		! temporary index
	INTEGER		TERM		! field terminator
	INTEGER		REDO		! .T. if to redisplay
	INTEGER		OPT_NUM		! number of options
	INTEGER		CURRENT_OPT	! current option
	INTEGER		INV_NUM		! number of invariants
	INTEGER		CURRENT_INV	! current invariant
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		PROJECT_STATUS_REPORT
	INTEGER		JOB_STATUS_REPORT
	INTEGER		TASK_STATUS_REPORT
	INTEGER		SESSION_STATUS_REPORT
	INTEGER		OPERATOR_STATUS_REPORT
	INTEGER		WORKSTATION_STATUS_REPORT
	INTEGER		OPEN_REPORT_FILE
	INTEGER		CLOSE_REPORT_FILE
	INTEGER		WIDE_SCREEN
C
C Set default print flag - not to print
C
	PRINT = .FALSE.
C
C Set initial option
C
	CURRENT_OPT = 1
C
C Assume success
C
10	REPORT_STATUS_MENU = LSC__NORMAL
C
C Set up options (except go top and move up) for REPORT menu
C
	OPT_LIST(1) = 'Project status report'
	OPT_LIST(2) = 'Job status report'
	OPT_LIST(3) = 'Task status report'
	OPT_LIST(4) = 'Session status report'
	OPT_LIST(5) = 'Operator status report'
	OPT_LIST(6) = 'Workstation status report'
C
C Set up option to move up to report menu
C
	OPT_LIST(7)='Move up to main report menu'
C
C Set up go top option
C
	OPT_LIST(8) = 'Jump to top level menu'
C
C Set up length of option list
C If main report menu is the top level menu (ie /REPORT qualifier used)
C then jump to top (go top) option is unecessary.
C
	IF (REPORT) THEN
	   OPT_NUM = 7
	ELSE
	   OPT_NUM = 8
	ENDIF
C
C and number of invariant options (none)
C
	INV_NUM = 0
C
C Display menu form
C
	REPORT_STATUS_MENU = DISPLAY_MENU(
     &		'Current System Status Report Menu',
     &		'Selection of system status report operations',
     &		'The following options are available:')
C
C Check for errors
C
	IF (.NOT.REPORT_STATUS_MENU) GOTO 900
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C Get required option
C
20	REPORT_STATUS_MENU = GET_MENU_OPTION(
     &		OPT_LIST,		! option list
     &		OPT_NUM,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.REPORT_STATUS_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C This avoids redisplaying the menu page if the terminator
C is rejected
C
	REDO = .FALSE.
C
C Check if have one of required field terminators and set up
C PRINT flag, BRIEF details flag and AUTH flag appropriately
C
C If have return key, then do not want to print
C
	IF (TERM.EQ.RETURN_KEY) THEN
	   PRINT = .FALSE.
C
C If have GOLD P then want to print details
C
	ELSEIF ((TERM.EQ.(GOLD_BASE + ICHAR('P'))).OR.
     &		(TERM.EQ.(GOLD_BASE + ICHAR('p')))) THEN
	   PRINT = .TRUE.
C
C Otherwise the terminator is unrecognised, so ignore it
C
	ELSE
	   GOTO 20
	ENDIF
C
C Set redisplay flag so do need to redisplay if we are not printing
C the report - i.e. if it is to appear on the screen which will
C mess up the menu
C
	IF (.NOT.PRINT) THEN
	   REDO = .TRUE.
	   PREVIOUS_MENU_USABLE = .FALSE.
C
C Now determine if this requires wide screen mode
C i.e. if projects, jobs, tasks, sessions, operators, or workstations
C i.e. if not move up or jump to top level menu
C
	   IF (CURRENT_OPT.LE.6) THEN
	      REPORT_STATUS_MENU = WIDE_SCREEN(.TRUE.)
	   ENDIF
C
C Check for errors in setting screen to be wide - try to ensure
C that screen is reset to be narrow and return to menu,
C which will be redisplayed.
C
	   IF (.NOT.REPORT_STATUS_MENU) THEN
	      CALL WIDE_SCREEN(.FALSE.)
	      GOTO 20
	   ENDIF
	ENDIF
C
C If this is one of the report options,
C Open the report file ready for whichever report
C the user has selected
C This will be SYS$OUTPUT or a temporary spool file
C
	IF (CURRENT_OPT.LE.6) THEN
C
C Set flag to indicate report is to be aborted if anything
C goes wrong with open
C
	   ABORT_REPORT = .TRUE.
C
C Open report file
C
	   REPORT_STATUS_MENU = OPEN_REPORT_FILE(PRINT)
C
C Check for errors, and go straight to closing the file
C if there is one
C
	   IF (.NOT.REPORT_STATUS_MENU) GOTO 800
C
C Set flag to indicate report has been started successfully
C
	   ABORT_REPORT = .FALSE.
	ENDIF
C
C Now determine option and perform required actions
C
C List current projects
C
	IF (CURRENT_OPT.EQ.1) THEN
	   REPORT_STATUS_MENU = PROJECT_STATUS_REPORT()
C
C List current jobs
C
	ELSEIF (CURRENT_OPT.EQ.2) THEN
	   REPORT_STATUS_MENU = JOB_STATUS_REPORT()
C
C List current tasks, turning on 132 column mode to do it
C
	ELSEIF (CURRENT_OPT.EQ.3) THEN
	   REPORT_STATUS_MENU = TASK_STATUS_REPORT()
C
C List current sessions
C
	ELSEIF (CURRENT_OPT.EQ.4) THEN
	   REPORT_STATUS_MENU = SESSION_STATUS_REPORT()
C
C List operators
C
	ELSEIF (CURRENT_OPT.EQ.5) THEN
	   REPORT_STATUS_MENU = OPERATOR_STATUS_REPORT()
C
C List workstations
C
	ELSEIF (CURRENT_OPT.EQ.6) THEN
	   REPORT_STATUS_MENU = WORKSTATION_STATUS_REPORT()
C
C Move to higher level
C
	ELSEIF (CURRENT_OPT.EQ.7) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
C
C Perform go top
C
	ELSEIF (CURRENT_OPT.EQ.8) THEN
	   NEXT_FUNCTION = DO_GO_TOP
C
C Default do nothing
C
	ELSE
	   NEXT_FUNCTION = DO_NOTHING
	ENDIF
C
C Close the report file, if one was opened
C
800	IF (CURRENT_OPT.LE.6) THEN
	   STATUS = CLOSE_REPORT_FILE(PRINT,ABORT_REPORT)
C
C And finally, if we were not printing the report, set the screen
C to 80 columns again
C
	   IF (.NOT.PRINT) STATUS = WIDE_SCREEN(.FALSE.)
	ENDIF
C
C Ignore any errors from the last two calls, will not affect
C what we actually do
C
C
C Check if want to repeat menu
C
	IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	   NEXT_FUNCTION = DO_ERROR
	   GOTO 10
	ENDIF
C
C Exit
C
900	RETURN
	END
