C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 14:43:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROJECT_INITIATION()
C
***	MODULE PROJECT_INITIATION
***	IDENT 13AP88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow entry of details of a new project to be launched,
C before creating in the db, and signalling that project creation
C command procedure is to be written.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C w/s
	INTEGER		TERM
	CHARACTER*20	FVAL
	CHARACTER*20	FID
	INTEGER		STATUS
C
C function
	INTEGER		RDINT
	INTEGER		FLN_CREATE_PROJECT
C
C Assume success
C
	PROJECT_INITIATION = LSC__NORMAL
C
C Clear the screen and display the form
C
	CALL FDV$CLRSH('PROJECT_CREATE_FORM')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now get the default values from the form
C
	CALL FDV$RETN(PROJECT_ID,'PROJECT')
	CALL FDV$RETN(FVAL,'PRIORITY')
C
	CALL SETAUX(%REF(FVAL),20)
	IF (RDINT(PRIORITY)) PRIORITY = 1
	CALL BSLN
C
C Now set the first field to be entered
C
	FID  = 'PROJECT'
C
C Start of loop dealing with entry of each field on form
C
C Read next field
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Check if abort form terminator used, exit if it is, indicating
C that previous menu to be redisplayed
C
	IF (TERM.EQ.ABORT_FORM) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Now determine which field was entered
C
C Project id
C
	IF (FID.EQ.'PROJECT') THEN
	   PROJECT_ID = FVAL
C
C Priority
C
	ELSEIF (FID.EQ.'PRIORITY') THEN
C
C Set decode pointer to field value prior to reading number
C
	   CALL SETAUX(%REF(FVAL),20)
C
C Read the number
C
	   IF (RDINT(PRIORITY)) THEN
	      CALL FORM_PUTMSG('Illegal priority',-1,0)
	      GOTO 10
	   ENDIF
C
	   CALL BSLN
C
	ENDIF
C
C Process the terminator
C
	CALL FDV$PFT
C
C Find the status, i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Determine the next field to be entered
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.RETURN_KEY) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C Now deal with calling the PROJECT creation library routine
C
	PROJECT_INITIATION = FLN_CREATE_PROJECT(
     &			PROJECT_ID,		! project
     &			OPERATOR_ID,		! creating operator
     &			PRIORITY,		! priority
     &			SYSTEM_COMPROC)		! returned fln com proc
C
C Check for errors
C
	IF (.NOT.PROJECT_INITIATION) THEN
C
C Duplicate project name
C
	   IF (PROJECT_INITIATION.EQ.FLN__DUPPROJ) THEN
	      CALL FORM_PUTMSG('Duplicate project name',-1,0)
	      FID = 'PROJECT'
C
C Illegal priorities
C
	   ELSEIF (PROJECT_INITIATION.EQ.FLN__ILLEGPRI) THEN
	      CALL FORM_PUTMSG('Illegal priority',-1,0)
	      FID = 'PRIORITY'
C
C Unrecognised error
C
	   ELSE
	      CALL LCONT_PUTMSG(PROJECT_INITIATION,0)
	      CALL FORM_PUTMSG('Try re-entering project information'
     &					,-1,0)
	      FID = 'PROJECT'
	   ENDIF
C
C Repeat the loop to retry entry
C
	   GOTO 10
	ENDIF
C
C Show that want to create a project
C
	NEXT_FUNCTION = DO_CREATE_PROJECT
C
C Exit
C
999	RETURN
	END
