C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-29 12:20:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WRITE_TASK_COMPROC()
C
***	MODULE WRITE_TASK_COMPROC
***	IDENT 29JA93
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to write a task command procedure to do execute a given
C task
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
C
C w/s
	LOGICAL		STARTED		! flag indicating task status
	LOGICAL		OFFLINE		! flag inidcating session status
	INTEGER		I		! temporary count
C
	INTEGER		NUM_PARAM		! number of params
	CHARACTER*255	PARAM_LIST(FLN_MAX_PAR)	! param's passed to task
C
C functions
	INTEGER		FLN_BEGIN_TASK	! function to begin task
	INTEGER		SIGNCH		! fn to find sig chars in string
C
C Assume success
C
	WRITE_TASK_COMPROC = LSC__NORMAL
C
C Find out if requested task still available, and what its command
C procedures are called
C
	WRITE_TASK_COMPROC = FLN_BEGIN_TASK(
     &		TASK_ID,		! task id
     &		OPERATOR_ID,		! operator id
     &		WORKSTATION_ID,		! workstation id
     &		SESSION_ID,		! session id
     &		PROJECT_COMPROC,	! project command procedure
     &		JOB_COMPROC,		! job command procedure
     &		ELEMENT_COMPROC,	! element command procedure
     &		PROC_COMPROC,		! procedure command procedure
     &		STARTED,		! .T. if continuation of task
     &		OFFLINE,		! .T. if session just offline
     &		NUM_PARAM,		! number of parameter lines
     &		PARAM_LIST)		! parameter lines to include
C
C Check for failure to find task - restart if get one
C
	IF (.NOT.WRITE_TASK_COMPROC) THEN
C
C Tell the user what the problem is
C
	   CALL LCONT_PUTMSG(LSC__UNBEGINTASK,0)
	   CALL LCONT_ADDMSG(WRITE_TASK_COMPROC,0)
C
C Signal that we are to repeat the attempt to select a task
C
	   NEXT_FUNCTION = DO_REPEAT
	   GOTO 900
	ENDIF
C
C Set session and task status, as determined by values
C of flags returned by the call to FLN_BEGIN_TASK
C
	TASK_STATUS = 'NEW'
	SESSION_STATUS = 'NEW'
C
	IF (STARTED) TASK_STATUS = 'STARTED'
	IF (OFFLINE) SESSION_STATUS = 'OFFLINE'
C
C Header comment lines for DCL jacket command procedure
C
	CALL FLWRTF('$! LAMPSCONTROL created jacket command procedure')
	CALL FLWRTF('$! Function    Task execution')
	CALL FLWRTF('$!')
	CALL FLWRTF('$! Operator    %S',OPERATOR_ID)
	CALL FLWRTF('$! Workstation %S',WORKSTATION_ID)
	CALL FLWRTF('$! Project     %S',PROJECT_ID)
	CALL FLWRTF('$! Job         %S',JOB_NAME)
	CALL FLWRTF('$! Element     %S',ELEMENT_ID)
	CALL FLWRTF('$!')
C
C Set up on error/warning action for the jacket command procedure
C and local flag to indicate no variables yet set up
C
	CALL FLWRTF('$	on warning then continue')
	CALL FLWRTF('$	on error then goto jacket_error')
	CALL FLWRTF('$	fln_local_set_up = ""')
C
C Commands to set up the DCL symbols needed
C
C Determine CPU start time
C
	CALL FLWRTF('$	FLN_START == f$getjpi("","CPUTIM")')
C
C Set up write symbol for output to SYS$OUTPUT
C
	CALL FLWRTF('$	ws == "write sys$output"')
C
C Set up symbol to indicate type of command procedure
C
	CALL FLWRTF('$	FLN_JACKET_TYPE :== TASK')
C
C Call routine to write command lines to 
C set up default for FLN_INT (T/F) 
C and FLN_MODE (CONTROL/MANAGE/REPORT/OPERATE/BATCH/SLAVE)
C
	CALL OUTPUT_SHARED_DCL()
C
C Name of jacket command procedure
C
	CALL FLWRTF('$	FLN_JACKET_COMPROC :== %S',COMFIL(:COMFIL_LEN))
C
C Specifications of command procedures to be called for doing task
C
	CALL FLWRTF('$	FLN_PROJECT_COMPROC :== %S',
     &			PROJECT_COMPROC(1:SIGNCH(PROJECT_COMPROC)))
C
	CALL FLWRTF('$	FLN_JOB_COMPROC :== %S',
     &			JOB_COMPROC(1:SIGNCH(JOB_COMPROC)))
C
	CALL FLWRTF('$	FLN_ELEMENT_COMPROC :== %S',
     &			ELEMENT_COMPROC(1:SIGNCH(ELEMENT_COMPROC)))
C
	CALL FLWRTF('$	FLN_PROCEDURE_COMPROC :== %S',
     &			PROC_COMPROC(1:SIGNCH(PROC_COMPROC)))
C
C IDs of operator and workstation
C
	CALL FLWRTF('$	FLN_OPERATOR :== %S',OPERATOR_ID)
	CALL FLWRTF('$	FLN_WORKSTATION :== %S',WORKSTATION_ID)
C
C IDs and names of project,job,task and session concerned
C
	CALL FLWRTF('$	FLN_PROJECT_ID :== %S',PROJECT_ID)
	CALL FLWRTF('$	FLN_JOB_ID :== %N',JOB_ID)
	CALL FLWRTF('$	FLN_JOB_NAME :== %S',JOB_NAME)
	CALL FLWRTF('$	FLN_ELEMENT_ID :== %S',ELEMENT_ID)
	CALL FLWRTF('$	FLN_TASK_ID :== %N',TASK_ID)
	CALL FLWRTF('$	FLN_TASK_STATUS :== %S', TASK_STATUS)
	CALL FLWRTF('$	FLN_SESSION_ID :== %N',SESSION_ID)
	CALL FLWRTF('$	FLN_SESSION_STATUS :== %S', 
     &						SESSION_STATUS)
C
C Defaults for command procedure outputs
C i.e. the symbols used in setting up the notification command line
C
	CALL FLWRTF('$	FLN_RESULT :== ERROR')
	CALL FLWRTF('$	FLN_OUTCOME :== 1')
	CALL FLWRTF('$	FLN_PROBLEM == "Session startup" ')
	CALL FLWRTF('$	FLN_CPU :== 0')
	CALL FLWRTF('$	FLN_LOCAL_PARAM == ""')
	CALL FLWRTF('$	FLN_GLOBAL_PARAM == ""')
	CALL FLWRTF('$	FLN_EXTERNAL_PARAM == ""')
C
C Now include the parameters lines, which will be valid DCL
C commands passed by the immediately preciding task(s) using
C the /PARAMETERS qualifier on the command line
C
C
C
	DO 10 I = 1, NUM_PARAM
	   CALL FLWRTF('$	%S',
     &				PARAM_LIST(I)(1:SIGNCH(PARAM_LIST(I))))
10	CONTINUE
C
C Set local flag to indicate values of symbols have been set up
C
	CALL FLWRTF('$	fln_local_set_up = "t"')
C
C Execute the relevant command procedures (project, job and element)
C
	CALL FLWRTF('$	@''FLN_PROJECT_COMPROC'' ')
	CALL FLWRTF('$	@''FLN_JOB_COMPROC'' ')
	CALL FLWRTF('$	@''FLN_ELEMENT_COMPROC'' ')
C
C Determine amount of cpu time used
C
	CALL FLWRTF('$	FLN_END == f$getjpi("","CPUTIM")')
	CALL FLWRTF('$	FLN_CPU == f$string(FLN_END - FLN_START)')
C
C Check that all the symbols in the notification line have values
C
	CALL FLWRTF('$	if FLN_RESULT .eqs. "" then -')
	CALL FLWRTF('		FLN_RESULT :== ERROR')
	CALL FLWRTF('$	if FLN_PROBLEM .eqs. "" then -')
	CALL FLWRTF('		FLN_PROBLEM :== None')
	CALL FLWRTF('$	if FLN_OUTCOME .eqs. "" then -')
	CALL FLWRTF('		FLN_OUTCOME :== 1')
	CALL FLWRTF('$	if FLN_CPU .eqs. "" then -')
	CALL FLWRTF('		FLN_CPU :== 0')
C
C Commands to notify LAMPSCONTROL of session termination
C
	CALL FLWRTF('$ do_notify:')
C
C Set up error actions for this section
C
	CALL FLWRTF('$	on error then continue')
	CALL FLWRTF('$	on warning then continue')
C
C If there are any parameters of any type, use /PARAMETERS qualifier
C so jump to appropriate command line
C
	CALL FLWRTF('$	if FLN_LOCAL_PARAM.nes. "" then -')
	CALL FLWRTF('		goto with_parameters')
	CALL FLWRTF('$	if FLN_GLOBAL_PARAM.nes. "" then -')
	CALL FLWRTF('		goto with_parameters')
	CALL FLWRTF('$	if FLN_EXTERNAL_PARAM.nes. "" then -')
	CALL FLWRTF('		goto with_parameters')
C
C Now for the actual notification line, without parameters
C
C
C *** DEBUGGING ONLY ***
C
CCC	CALL FLWRTF('$	if FLN_INT then -')
CCC	CALL FLWRTF('		assign/user sys$command sys$input')
C
	CALL FLWRTF('$	LAMPSCONTROL/NOTIFY/NOMENU/NOCOMMAND_FILE -')
	CALL FLWRTF('		''fln_log_file_qual'' - ')
	IF (.NOT.HAD_FAST) CALL FLWRTF('	   /NOFAST_AUTHORISATION - ')
	CALL FLWRTF('		/SESSION_ID=''FLN_SESSION_ID'' -')
	CALL FLWRTF('		/SESSION_RESULT=''FLN_RESULT'' -')
	CALL FLWRTF('		/PROBLEM="''''FLN_PROBLEM''" -')
	CALL FLWRTF('		/OUTCOME=''FLN_OUTCOME'' -')
	CALL FLWRTF('		/CPU=''FLN_CPU'' ')
	CALL FLWRTF('$	goto after_notify')
C
C Now for the actual notification line, with parameters
C
	CALL FLWRTF('$ with_parameters:')
C
C *** DEBUGGING ONLY ***
C
CCC	CALL FLWRTF('$	write sys$output "DEBUGGING VERSION"')
CCC	CALL FLWRTF('$	fln_param_qual = "/PARAMETERS"')
CCC	CALL FLWRTF('$	if FLN_INT then -')
CCC	CALL FLWRTF('		assign/user sys$command sys$input')
C
	CALL FLWRTF('$	LAMPSCONTROL/NOTIFY/NOMENU/NOCOMMAND_FILE -')
	CALL FLWRTF('		''fln_log_file_qual'' - ')
	IF (.NOT.HAD_FAST) CALL FLWRTF('	   /NOFAST_AUTHORISATION - ')
	CALL FLWRTF('		/SESSION_ID=''FLN_SESSION_ID'' -')
	CALL FLWRTF('		/SESSION_RESULT=''FLN_RESULT'' -')
	CALL FLWRTF('		/PARAMETERS - ')
	CALL FLWRTF('		/PROBLEM="''''FLN_PROBLEM''" -')
	CALL FLWRTF('		/OUTCOME=''FLN_OUTCOME'' -')
	CALL FLWRTF('		/CPU=''FLN_CPU'' ')
C
C Deal with task/session parameters - they are set up in a command
C line driven mode.
C
	CALL FLWRTF('LOCAL <FLN_LOCAL_PARAM>')
	CALL FLWRTF('GLOBAL <FLN_GLOBAL_PARAM>')
	CALL FLWRTF('EXTERNAL <FLN_EXTERNAL_PARAM>')
	CALL FLWRTF('EXIT')
C
C Command to delete the command file now it has finished
C
	CALL FLWRTF('$ after_notify:')
	CALL FLWRTF('$	PROC = f$environment("PROCEDURE")')
	CALL FLWRTF('$	delete/nolog/noconf ''PROC'' ')
	CALL FLWRTF('$	exit')
C
C Error routine
C
	CALL FLWRTF('$ jacket_error:')
	CALL FLWRTF('$	on error then continue')
	CALL FLWRTF('$	on warning then continue')
C
C Check local flag to indicate if symbols needed for command line
C have been given default values yet
C
	CALL FLWRTF('$	if fln_local_set_up then goto do_notify')
C
C Set up default values for notification command line symbols
C
	CALL FLWRTF('$	FLN_RESULT :== ERROR')
	CALL FLWRTF('$	FLN_OUTCOME :== 1')
	CALL FLWRTF('$	FLN_CPU :== 0')
	CALL FLWRTF('$	FLN_PROBLEM == "Jacket command procedure"')
	CALL FLWRTF('$	goto do_notify')
C
C Exit
C
900	RETURN
	END
