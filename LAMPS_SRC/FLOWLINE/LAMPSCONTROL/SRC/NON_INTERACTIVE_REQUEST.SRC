	INTEGER FUNCTION NON_INTERACTIVE_REQUEST()
C
***	MODULE NON_INTERACTIVE_REQUEST
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to find and start the next available task for the
C current operator to execute under LAMPSCONTROL
C Will be used primarily for batch processing of non-interactive
C tasks.
C Will initially look in current job and project of the operator
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_TASK	! number available tasks
	INTEGER		TASK_INDEX	! index to task being tried
	INTEGER		NUM_JOB		! number available jobs
	INTEGER		JOB_INDEX	! index to job being tried
	INTEGER		NUM_PROJECT	! number available projects
	INTEGER		PROJECT_INDEX	! index to project being tried
C
	INTEGER		I		! temporary index
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	INTEGER		A_TASK_ID(FLN_MAX_TASK)		! task ids
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_TASK)		! element ids
CCC	INTEGER		A_JOB_ID(FLN_MAX_TASK)		! job ids
CCC	CHARACTER*20	A_JOB_NAME(FLN_MAX_TASK)	! job names
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_TASK)		! project ids
C
C functions
	INTEGER		FLN_RETRIEVE_CURRENT
	INTEGER		FLN_RETRIEVE_TASKS
	INTEGER		FLN_RETRIEVE_JOBS
	INTEGER		FLN_RETRIEVE_PROJECTS
	INTEGER		SETUP_DCL
C
C
C Assume success
C
	NON_INTERACTIVE_REQUEST = LSC__NORMAL
C
C Initialise number of tasks,jobs,projects to zero to indicate no
C lists of them retrieved yet
C
	NUM_TASK = 0
	NUM_JOB = 0
	NUM_PROJECT = 0
C
C Initialise project/job/task list search indices
C Job and project search should start at second entries,
C after current job and project
C
	TASK_INDEX = 1
	JOB_INDEX = 2
	PROJECT_INDEX = 2
C
C Attempt to retrieve current job/project
C
	NON_INTERACTIVE_REQUEST = FLN_RETRIEVE_CURRENT(
     &			OPERATOR_ID,
     &			PROJECT_ID,
     &			PROJECT_STATUS,
     &			JOB_ID,
     &			JOB_NAME,
     &			JOB_STATUS,
     &			ELEMENT_ID)
C
C Check for errors
C
	IF (.NOT.NON_INTERACTIVE_REQUEST) THEN
C
C Check if can't find project, and go to find a new one, starting at top
C of list
C
	   IF (NON_INTERACTIVE_REQUEST.EQ.FLN__NOSUCHPROJ) THEN
	      PROJECT_INDEX = 1
	      GOTO 10
C
C Check if can't find job, and go to find a new one, starting at top
C of list
C
	   ELSEIF (NON_INTERACTIVE_REQUEST.EQ.FLN__NOSUCHJOB) THEN
	      JOB_INDEX = 1
	      GOTO 20
C
C Otherwise, general error report and exit
C
	   ELSE
	      CALL LSL_PUTMSG(NON_INTERACTIVE_REQUEST)
	      GOTO 900
	   ENDIF
	ENDIF
C
C Now check on project status, if not active, go to find a new one
C
	IF (PROJECT_STATUS.NE.'Active') THEN
	   GOTO 10
C
C Now check on job status, if not active, go to find a new one
C
	ELSEIF (JOB_STATUS.NE.'Active') THEN
	   GOTO 20
C
C Otherwise, go straight into choosing a task
C
	ELSE
	   GOTO 30
	ENDIF
C
C Now code to select next task/job/project to try
C
C Select next project to attempt, retrieving list if have not done so
C
C If number of projects is zero then need to retrieve list
C
10	IF (NUM_PROJECT.EQ.0) THEN
	   NON_INTERACTIVE_REQUEST = FLN_RETRIEVE_PROJECTS(
     &			OPERATOR_ID,		! id of current operator
     &			WORKSTATION_ID,		! current workstation
     &			A_PROJ_ID,		! list of project ids
     &			NUM_PROJECT)		! number of projects
C
C Check for errors
C
	   IF (.NOT.NON_INTERACTIVE_REQUEST) THEN
	      CALL LSL_PUTMSG(NON_INTERACTIVE_REQUEST)
	      GOTO 900
	   ENDIF
	ENDIF
C
C Now see if any projects left to try, if not create wait DCL commmand
C procedure
C
	IF (PROJECT_INDEX.GT.NUM_PROJECT) THEN
	   PROJECT_INDEX = 1
	   NEXT_FUNCTION = DO_WAIT
	   GOTO 40
	ENDIF
C
C Now select next project
C
	PROJECT_ID = A_PROJ_ID(PROJECT_INDEX)
C
C Increment PROJECT index
C
	PROJECT_INDEX = PROJECT_INDEX + 1
C
C Select next job
C
	NUM_JOB = 0
	GOTO 20
C
C Select next job to attempt, retrieving list if have not done so
C
C If number of jobs is zero then need to retrieve list
C
20	IF (NUM_JOB.EQ.0) THEN
	   NON_INTERACTIVE_REQUEST = FLN_RETRIEVE_JOBS(
     &			OPERATOR_ID,		! id of current operator
     &			WORKSTATION_ID,		! current workstation
     &			PROJECT_ID,		! current project id
     &			A_JOB_ID,		! list of job ids
     &			A_JOB_NAME,		! list of job names
     &			NUM_JOB)		! number of jobs
C
C Check for errors
C
	   IF (.NOT.NON_INTERACTIVE_REQUEST) THEN
	      CALL LSL_PUTMSG(NON_INTERACTIVE_REQUEST)
	      GOTO 900
	   ENDIF
	ENDIF
C
C Now see if any jobs left to try, if not go to project selection
C
	IF (JOB_INDEX.GT.NUM_JOB) THEN
	   JOB_INDEX = 1
	   GOTO 10
	ENDIF
C
C Now select next job
C
	JOB_ID = A_JOB_ID(JOB_INDEX)
	JOB_NAME = A_JOB_NAME(JOB_INDEX)
C
C Increment job index
C
	JOB_INDEX = JOB_INDEX + 1
C
C Select next task
C
	NUM_TASK = 0
	GOTO 30
C
C Select next task to attempt, retrieving list if have not done so
C
C If number of tasks is zero then need to retrieve list
C
30	IF (NUM_TASK.EQ.0) THEN
	   NON_INTERACTIVE_REQUEST = FLN_RETRIEVE_TASKS(
     &			OPERATOR_ID,		! id of current operator
     &			WORKSTATION_ID,		! current workstation
     &			JOB_ID,			! current job id
     &			A_TASK_ID,		! list of task ids
     &			A_ELEM_ID,		! list of elements
     &			NUM_TASK)		! number of tasks
C
C Check for errors
C
	   IF (.NOT.NON_INTERACTIVE_REQUEST) THEN
	      CALL LSL_PUTMSG(NON_INTERACTIVE_REQUEST)
	      GOTO 900
	   ENDIF
	ENDIF
C
C Now see if any tasks left to try, if not go to job selection
C
	IF (TASK_INDEX.GT.NUM_TASK) THEN
	   TASK_INDEX = 1
	   GOTO 20
	ENDIF
C
C Now select next task
C
	TASK_ID = A_TASK_ID(TASK_INDEX)
	ELEMENT_ID = A_ELEM_ID(TASK_INDEX)
C
C Increment task index
C
	TASK_INDEX = TASK_INDEX + 1
C
C Try task
C
	NEXT_FUNCTION = DO_TASK
	GOTO 40
C
C Setting up DCL command procedure file
C 
C First, if performing a task, report on what doing
C
40	IF (NEXT_FUNCTION.EQ.DO_TASK) THEN
	   CALL WRITEF('Project %S20 Job %S20 Task %S20',
     &			PROJECT_ID(:20),JOB_NAME(:20),ELEMENT_ID(:20))
C
C If waiting, report on what doing
C
	ELSEIF (NEXT_FUNCTION.EQ.DO_WAIT) THEN
	   CALL WRITEF('Waiting')
	ENDIF
C
C Attempt to set up DCL file to execute the task selected
C
	NON_INTERACTIVE_REQUEST = SETUP_DCL()
C
C Check for problems
C
	IF ((.NOT.NON_INTERACTIVE_REQUEST).AND.
     &	    (NEXT_FUNCTION.NE.DO_REPEAT))	GOTO 900
C
C Check if need to repeat to find the next executable task
C
	IF (NEXT_FUNCTION.EQ.DO_REPEAT) GOTO 30
C
	GOTO 999
C
C Deal with errors by creating a wait command file
C
900	NEXT_FUNCTION = DO_WAIT
	GOTO 40
C
C Exit
C
999	RETURN
	END
