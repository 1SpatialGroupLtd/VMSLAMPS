C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 11:59:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_ELEMENT_OUTCOMES_AREA(
     &		OUTCOMES,WIRES,NUM_OUTCOME,CURRENT_OUTCOME,TERM)
C
***	MODULE GET_ELEMENT_OUTCOMES_AREA
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			7th Semptember 1988
C
C
C Function to get set of outcomes/wire identifiers from scrolled area 
C of element definition forms as part of LAMPSCONTROL
C
C This routine assumes that any existing outcomes/wire identifiers are 
C already displayed.
C
C If you want to alter this routine to do something different, it
C would probably be better rewriting it from scratch than attempting
C to understand it.
C
C
	IMPLICIT NONE
C
C Common and parameter blocks
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
C
C Arguments
C
	INTEGER		OUTCOMES(FLN_MAX_OUTCOME)
	CHARACTER*(*)	WIRES(FLN_MAX_OUTCOME)
	INTEGER		NUM_OUTCOME	! number of records present
	INTEGER		CURRENT_OUTCOME	! current record being entered
	INTEGER		TERM		! terminator used to exit
C
C w/s
C
	INTEGER		TOP_LINE	! ptr to outcome at top of area 
	INTEGER		BOTTOM_LINE	! ptr to bottom 
	CHARACTER*100	FVAL		! field (line) value
	CHARACTER*20	FID		! field identifier
	INTEGER		I		! temporary count
	INTEGER		J		! temporary count
C
C function
C
	LOGICAL		RDINT
C
C Assume success
C
	GET_ELEMENT_OUTCOMES_AREA = LSC__NORMAL
C
C Set initial first line, will be current line
C
	TOP_LINE = CURRENT_OUTCOME
C
C Set intial bottom line, will be top line + 4, or last line 
C containing entry. If there are no current entries, will be 0.
C
	BOTTOM_LINE = MIN( (TOP_LINE + OUTCOME_AREA_LEN - 1),
     &			    MAX(NUM_OUTCOME,0) )
C
C Get contents of current line of scrolled area
C
10	CALL FDV$GETSC('OUTCOME',FVAL,TERM)
C
C Transfer values to current outcome/wire id array entries
C
C Outcome - convert the string into an integer
C
C Set decode buffer to point at outcome string
C
	CALL SETAUX(%REF(FVAL),3)
C
C Attempt to read integer
C
	IF ((RDINT(OUTCOMES(CURRENT_OUTCOME))).AND.
     &	    (FVAL(1:3).NE.'   ') ) THEN
C
C If the string is not a legal integer, or empty report it as 
C illegal and force reentry.
C
	   CALL FORM_PUTMSG('Illegal outcome',-1,0)
	   GOTO 10
	ENDIF
C
C Reset the text decode pointer to point at default buffer
C
	CALL BSLN
C
C Wire id
C
	WIRES(CURRENT_OUTCOME) = FVAL(4:23)
C
C Now check if the bottom line needs increasing - i.e. if have just
C extended the outcome/wire list by adding this entry
C If need to, move down the bottom line and increase the number of
C records. This is tedious but necessary.
C
	IF (BOTTOM_LINE.LT.CURRENT_OUTCOME) THEN
	   BOTTOM_LINE = CURRENT_OUTCOME
	ENDIF
C
	IF (NUM_OUTCOME.LT.CURRENT_OUTCOME) THEN
	   NUM_OUTCOME = CURRENT_OUTCOME
	ENDIF
C
C Now examine the terminator used, and determine if it is legal,
C and act on it.
C
C---------------------------------------------------------------------
C Check for 'GOLD D', 'GOLD d' ie delete line
C
	IF ((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &	    (TERM.EQ.(GOLD_BASE + ICHAR('d')))) THEN
C
C Delete entries from contents of outcome and wire arrays
C
	   DO 25 I = CURRENT_OUTCOME, NUM_OUTCOME - 1
C
C Transfer all array entries following the one deleted to the entry 
C before them in the array
C
	      OUTCOMES(I) = OUTCOMES(I+1)
	      WIRES(I) = WIRES(I+1)
25	   CONTINUE
C
C Set the old last record to null, doing this ensures
C that if old last record was in the display area, then
C its line will be overlayed with the null contents
C
	   OUTCOMES(NUM_OUTCOME) = 0
	   WIRES(NUM_OUTCOME) = ' '
C
C Decrease the number of entries.
C
	   NUM_OUTCOME = NUM_OUTCOME - 1
C
C Now redisplay the lines from the current one downwards
C
	   I = CURRENT_OUTCOME
C
27	   IF (I.LE.BOTTOM_LINE) THEN
C
C Put new record into the current line, providing have not gone past
C end of list
C
	      IF (I.LE.NUM_OUTCOME) THEN
	         CALL EXPAND('%WS%N',FVAL,OUTCOMES(I))
	         CALL FDV$PUT(FVAL,'OUTCOME')
	         CALL FDV$PUT(WIRES(I),'WIRE_ID')
	      ELSE
	         CALL FDV$PUT(' ','OUTCOME')
	         CALL FDV$PUT(' ','WIRE_ID')
	      ENDIF
C
C If there is a next line, move down to it
C
	      IF (I.LT.BOTTOM_LINE) CALL FDV$PFT(DOWN_ARROW)
C
C Increase line number being altered to point to next line
C
	      I = I + 1
C
C Loop for next line
C
	      GOTO 27
	   ENDIF
C
C Now move back up
C
	   I = I - 1
C
28	   IF (I.GT.CURRENT_OUTCOME) THEN
	      CALL FDV$PFT(UP_ARROW)
	      I = I - 1
	      GOTO 28
	   ENDIF
C
C Ensure that, if the original final record was displayed (or if it
C was the entry to be deleted), then the new bottom displayed record 
C has the correct value.
C
	   IF (BOTTOM_LINE.GT.NUM_OUTCOME) BOTTOM_LINE = NUM_OUTCOME
C
C---------------------------------------------------------------------
C Check for down arrow
C
	ELSEIF (TERM.EQ.DOWN_ARROW) THEN
C
C Determine if any more lines available
C
	   IF (CURRENT_OUTCOME.EQ.FLN_MAX_OUTCOME) THEN
	      CALL FORM_PUTMSG('No next line',-1,0)
C
C Determine if a response was entered in the current field
C
	   ELSEIF (FVAL(1:3).EQ.' ') THEN
	      CALL FORM_PUTMSG('Response required',-1,0)
C
C Determine if at bottom of scrolled area
C
	   ELSEIF ((CURRENT_OUTCOME.EQ.BOTTOM_LINE).AND.
     &	       ((BOTTOM_LINE - TOP_LINE + 1).EQ.OUTCOME_AREA_LEN)) THEN
C
C At bottom of screen, and want to move down, 
C so determine line to scroll in
C
	      CURRENT_OUTCOME = CURRENT_OUTCOME + 1
	      BOTTOM_LINE = CURRENT_OUTCOME
	      TOP_LINE = TOP_LINE + 1
C
C Check if at end of list, and feed in null line if we are
C
	      IF (CURRENT_OUTCOME.EQ.NUM_OUTCOME+1) THEN
	         FVAL = '                       '
C
C If not at end of list, then feed in the next one
C
	      ELSE
	         CALL EXPAND('%WS%I3',FVAL,OUTCOMES(CURRENT_OUTCOME))
	         FVAL(4:23) = WIRES(CURRENT_OUTCOME)
	      ENDIF
C
C Now scroll in the appropriate line
C
	      CALL FDV$PFT(TERM,'OUTCOME',FVAL)
C
C Otherwise, we have a down arrow, but we are not at the bottom of
C the scrolled area
C
	   ELSE
	      CALL FDV$PFT(TERM)
	      CURRENT_OUTCOME = CURRENT_OUTCOME + 1
	   ENDIF
C
C---------------------------------------------------------------------
C Determine if have an up arrow terminator
C
	ELSEIF (TERM.EQ.UP_ARROW) THEN
C
C Determine if a response was entered on the current line.
C if it is not last line, say that a response is required
C if it is the last line, and it is not blank say that a repsonse 
C is required.
C Any blank final line/entry will be trimmed off on exit 
C from this routine 
C
	   IF (  (FVAL(1:3).EQ.'   ').AND.
     &		 ((CURRENT_OUTCOME.LT.NUM_OUTCOME).OR. 
     &		  (FVAL.NE.'                      ') ) ) THEN
	      CALL FORM_PUTMSG('Response required',-1,0)
C
C Check if at top of scrolled area
C
	   ELSEIF (CURRENT_OUTCOME.EQ.TOP_LINE) THEN
C
C At top line, and want to move up, so determine if we can
C
	      IF (CURRENT_OUTCOME.EQ.1) THEN
	         CALL FORM_PUTMSG('No previous line',-1,0)
C
C Otherwise, allow to move up
C
	      ELSE
	         CURRENT_OUTCOME = CURRENT_OUTCOME - 1
	         TOP_LINE = TOP_LINE - 1
	         BOTTOM_LINE = BOTTOM_LINE - 1
C
C Put together the line to scroll up
C
	         CALL EXPAND('%WS%I3',FVAL,OUTCOMES(CURRENT_OUTCOME))
	         FVAL(4:23) = WIRES(CURRENT_OUTCOME)
C
C Now scroll up with the new line 
C
	         CALL FDV$PFT(TERM,'OUTCOME',FVAL)
	      ENDIF
C
C If at bottom line, and the entry is blank and it is the last entry
C in the arrays, then the user is moving upwards from a blank and
C unfilled line, so decrement the total number of entries in the
C array and move up by a single line
C
	   ELSEIF ((CURRENT_OUTCOME.EQ.BOTTOM_LINE).AND.
     &		   (CURRENT_OUTCOME.EQ.NUM_OUTCOME).AND.
     &		   (FVAL.EQ.'  ') ) THEN
	      CURRENT_OUTCOME = CURRENT_OUTCOME - 1
	      BOTTOM_LINE = BOTTOM_LINE - 1
	      NUM_OUTCOME = NUM_OUTCOME - 1
	      CALL FDV$PFT(TERM)
C
C Otherwise this is not top or bottom line, so just move up without 
C scrolling or doing anything else special
C
	   ELSE
	      CALL FDV$PFT(TERM)
	      CURRENT_OUTCOME = CURRENT_OUTCOME - 1
	   ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C Check if this is one of the exit from scrolled area terminators
C repeat this line if it isn't
C
	IF ((TERM.NE.ABORT_FORM).AND.
     &		(TERM.NE.RETURN_KEY).AND.
     &		(TERM.NE.EXIT_BACKWARDS)) GOTO 10
C
C---------------------------------------------------------------------
C Reposition cursor on first line of area
C
50	IF (CURRENT_OUTCOME.GT.TOP_LINE) THEN
	   CALL FDV$PFT(UP_ARROW)
	   CURRENT_OUTCOME = CURRENT_OUTCOME -1
	   GOTO 50
	ENDIF
C
C---------------------------------------------------------------------
C Check for blank entry in last record(s)
C Trim it off if found. This can arise because someone is allowed
C to move up from final line without entering data on it.
C
60	IF ((NUM_OUTCOME.GT.0).AND.
     &	    (WIRES(NUM_OUTCOME).EQ.' ')) THEN
	   NUM_OUTCOME = NUM_OUTCOME - 1
	   GOTO 60
	ENDIF
C
C Exit
C
	RETURN
	END

