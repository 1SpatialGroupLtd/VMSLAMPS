	INTEGER FUNCTION STRIP_DOUBLE_QUOTES(
     &		IN_STR, IN_LEN, OUT_STR, OUT_LEN)
C
***	MODULE STRIP_DOUBLE_QUOTES
***	IDENT 04OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			28 September 1988
C
C Routine to remove any delimiting double quote pair around the
C input string, copying the result to the output string.
C Will also remove any null characters from the start of the string.
C
	IMPLICIT NONE
C
C common blocks
CCC	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROL.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	IN_STR		! input string
	INTEGER		IN_LEN		! input string length
	CHARACTER*(*)	OUT_STR		! output string
	INTEGER		OUT_LEN		! output string length
C
C workspace
	INTEGER		FIRST_CHAR	! position of first non null 
					! character in input string
	INTEGER		PTR		! pointer into string
	INTEGER		DIFF_PTR	! character relocation 
					! offset from main pointer
	CHARACTER*1	CHAR0		! current + 0th character
	CHARACTER*1	CHAR1		! current + 1st character	
	LOGICAL		HAD_QUOTES	! .T. if string is delimited
					! by quotes
	LOGICAL		DONE_WARNING	! .T. if already output a 
					! warning about misplaced
					! quotes
C
C functions
C
C Assume success
C
	STRIP_DOUBLE_QUOTES = LSC__NORMAL
C
C Clear flag to indicate that no warnings have been generated yet
C This flag is used to avoid outputting multiple warnings
C
	DONE_WARNING = .TRUE.
C
C Initialise variable to point to first character in string
C
	FIRST_CHAR = 1
C
C Determine position of first non-null character
C
10	IF ((IN_STR(FIRST_CHAR:FIRST_CHAR).EQ.' ').AND.
     &	    (FIRST_CHAR.LT.IN_LEN)) THEN
	   FIRST_CHAR = FIRST_CHAR + 1
	   GOTO 10
	ENDIF
C
C Set output length to be the same as input length
C
	OUT_LEN = IN_LEN
C
C If first character is a quotation mark, then must assume that
C string is to be delimited by a quotation mark
C (and generate warning message if last character is not ")
C
	IF (IN_STR(FIRST_CHAR:FIRST_CHAR).EQ.'"') THEN
C
C Set flag to indicate this should be treated as enclosed by "
C
	   HAD_QUOTES = .TRUE.
C
C Move first character pointer
C
	   FIRST_CHAR = FIRST_CHAR + 1
C
C Check if last character is "
C
	   IF (IN_STR(OUT_LEN:OUT_LEN).EQ.'"') THEN
C
C Move last character pointer to ignore it
C
	      OUT_LEN = OUT_LEN - 1
C
C Otherwise, warn about the problem
C
	   ELSE
	      CALL LCONT_PUTMSG(LSC__BADQUOT,0)
	      DONE_WARNING = .TRUE.
	   ENDIF
C
C Otherwise, we are not enclosed by "s
C
	ELSE
	   HAD_QUOTES = .FALSE.
	ENDIF
C
C Setup output length to take into any initial input nulls characters
C '"' delimiter
C
	OUT_LEN = OUT_LEN - FIRST_CHAR + 1
C
C Now transfer the required part of the input string to the output 
C string
C
	OUT_STR = IN_STR(FIRST_CHAR:(OUT_LEN + FIRST_CHAR - 1))
C
C Now, if the string was enclosed by double quotes, go through the
C output string looking for instances of "" to be changed into "
C
	IF (HAD_QUOTES) THEN
C
C Go through output string, looking for double "s to convert into
C single "s by shifting all the rest of the string backwards by
C and extra character position to obliterate the second of the
C pair of "s
C
	   DO PTR = 1, (OUT_LEN-1)
C
C Get the current character and the one after it
C
	      CHAR0 = OUT_STR(PTR:PTR)
	      CHAR1 = OUT_STR((PTR+1):(PTR+1))
C
C Check for a double "
C
	      IF ((CHAR0.EQ.'"').AND.(CHAR1.EQ.'"')) THEN
C
C Move everything following the current character back by one,
C obliterating the current character, and so turning a "" into a ".
C This is the a less efficient, but simpler, way of tackling this 
C shifting of characters.
C
	         OUT_STR(PTR:OUT_LEN) = OUT_STR((PTR+1):OUT_LEN)
C
C Otherwise, if we have a single ", then warn user
C
	      ELSEIF ((CHAR0.EQ.'"').AND.(CHAR1.NE.'"')) THEN
	         IF (.NOT.DONE_WARNING) THEN
	            CALL LCONT_PUTMSG(LSC__BADQUOT,0)
	            DONE_WARNING = .TRUE.
	         ENDIF
	      ENDIF
	   END DO
C
C Now make sure the end of the output string is blank if the characters
C in it have been shifted back, and adjust length of output string
C
CCC	   IF (DIFF_PTR.GT.0) THEN
CCC	      OUT_STR((OUT_LEN-DIFF_PTR+1):OUT_LEN) = ' '
CCC	      OUT_LEN = OUT_LEN - DIFF_PTR
CCC	   ENDIF
C
C Otherwise, the string is not enclosed by double quotes, so check
C that none of the characters in it are double quotes.
C
	ELSE
	   DO PTR = 1, OUT_LEN
	      IF ((OUT_STR(PTR:PTR).EQ.'"').AND.
     &		  (.NOT.DONE_WARNING)) THEN
	         CALL LCONT_PUTMSG(LSC__BADQUOT,0)
	         DONE_WARNING = .TRUE.
	      ENDIF
	   END DO
	ENDIF
C
C Exit
C
	RETURN
	END
