C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 12:45:58.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION OPEN_REPORT_FILE(PRINT)
C
***	MODULE OPEN_REPORT_FILE
***	IDENT 22SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to open a file for writing a LAMPSCONTROL report to
C If the report is not to be printed this will be SYS$OUTPUT
C If the report is to be printed, this will be a spool file
C which will be closed, deleted and printed by the CLOSE_REPORT_FILE
C routine
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:DEBUGGING.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE '($JPIDEF)'
C
C arguments
	LOGICAL		PRINT		! .T. if report is to be printed
C
C w/s
	CHARACTER*30	TIME		! date/time stamps
C
C functions
	INTEGER		FLWOPN
	INTEGER		SIGNCH
	INTEGER		LIB$DATE_TIME
C
C Assume success
C
	OPEN_REPORT_FILE = LSC__NORMAL
C
C Determine if we are going to print the report, and set up
C the file spec accordingly
C
	IF (PRINT) THEN
	   REPORTFIL = 'LSL$FLN_WORK:REPORT.SPL'
C
C Inform user that report is being compiled
C
	   CALL LCONT_PUTMSG(LSC__REPCOMP,0)
C
C Otherwise, send report to screen
C
	ELSE
	   REPORTFIL = 'SYS$OUTPUT:'
C
C And do an FMS call to clear the screen
C
	   CALL FDV$CLEAR()
	ENDIF
C
C Work out how long the report file spec is
C
	   REPORTFIL_LEN = SIGNCH(REPORTFIL)
C
C Open the report file for writing
C
	OPEN_REPORT_FILE = 
     &		FLWOPN(REPORTFIL_LUN, REPORTFIL(1:REPORTFIL_LEN))
C
C Test for errors in opening report file
C
	IF (.NOT.OPEN_REPORT_FILE) THEN
	   CALL LCONT_PUTMSG(OPEN_REPORT_FILE,0)
C
C Signal that, in spite of error, we only want to move up
C to the next menu level, rather than dropping out of the
C program altogether.
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Otherwise, if the file has been opened successfully, output a time
C stamp and general header
C
	ELSE
C
C Find out the time
C
	   IF (.NOT.LIB$DATE_TIME(TIME)) TIME = 'Unknown date/time'
C
C Now do the header
C
	   CALL FLWRTF('LAMPSCONTROL report operation at %S',TIME)
	   CALL FLWRTF()
	ENDIF
C
C Determine start date and time, and the amount of CPU time used
C so far by the process, so that the amount of time needed to complete
C report can be output at end
C
C Start date, time
C
	   CALL LIB$DAY(REPORT_START_DATE,,REPORT_START_TIME)
C
C CPU time used so far by process
C
	   CALL LIB$GETJPI(JPI$_CPUTIM,,,REPORT_START_CPU)
C
C Exit
C
	RETURN
	END
