C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 15:38:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SESSION_STATISTICS_REPORT(
     &		PROJ_IDENT,JOB_IDENT,JOB_NAM,ELEM_IDENT)
C
***	MODULE SESSION_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to the sessions in the flowline control 
C database for a particular project, job and task
C The information displayed will include:
C	Operator identifier
C	Workstation identifier
C	Start date/time of session
C	Finish date/time of session
C	CPU time used for session
C
C Times will be displayed in hh:mm:ss.cc format
C
C The CPU time is recovered from the database in integer
C hundredths of seconds.
C
C The start/end date is in integer days since 17-NOV-1858.
C
C The start/end time is in integer hundredths of seconds since midnight.
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*(*)	PROJ_IDENT		! project identifier
	INTEGER		JOB_IDENT		! job identifier
	CHARACTER*(*)	JOB_NAM			! job name
	CHARACTER*(*)	ELEM_IDENT		! element identifier
C
C w/s
	INTEGER		NUM_SESS		  ! number of SESSs
	INTEGER		I			  ! temporary count 
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	SDATE			! start date string
	INTEGER		SDATE_LENGTH		! length of date string
	CHARACTER*20	EDATE			! end date string
	INTEGER		EDATE_LENGTH		! length of date string
	CHARACTER*20	STIME			! start time string
	INTEGER		STIME_LENGTH		! length of time string
	CHARACTER*20	ETIME			! end time string
	INTEGER		ETIME_LENGTH		! length of time string
C
	INTEGER		INSTANCE(FLN_MAX_SESS)	  ! instance - signifies
						  ! different tasks 
						  ! performed on same
						  ! element
	INTEGER		CPU_TIME(FLN_MAX_SESS) 	  ! cpu time
	INTEGER		START_TIME(FLN_MAX_SESS)  ! start time
	INTEGER		START_DATE(FLN_MAX_SESS)  ! start day of SESS
	INTEGER		END_TIME(FLN_MAX_SESS)	  ! end time
	INTEGER		END_DATE(FLN_MAX_SESS)	  ! end day of SESS
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_OPER_ID(FLN_MAX_SESS)	  ! operator ids
CCC	CHARACTER*20	A_WORK_ID(FLN_MAX_SESS)	  ! workstation ids
C
C functions
	INTEGER		FLN_RETRIEVE_SESSION_TIMINGS
	INTEGER		SIGCHS
	INTEGER		CONVERT_DAY_TO_STRING
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	SESSION_STATISTICS_REPORT = LSC__NORMAL
C
C Call the routine to get statistics on all sessions
C in the system
C
	SESSION_STATISTICS_REPORT = FLN_RETRIEVE_SESSION_TIMINGS(
     &		JOB_IDENT,	! job identifier
     &		ELEM_IDENT,	! element identifier
     &		NUM_SESS,	! number of sessions
     &		INSTANCE,	! number of tasks for this element
     &		A_OPER_ID,	! operator identifier
     &		A_WORK_ID,	! workstation identifier
     &		CPU_TIME,	! cpu time used for session so far
     &		START_TIME,	! start time of session
     &		START_DATE,	! start day of session
     &		END_TIME,	! end time of session
     &		END_DATE)	! end day of session
C
C Check for errors in reading list of sessions
C
	IF (.NOT.SESSION_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETSESS,0)
	   CALL LCONT_ADDMSG(SESSION_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the session listing
C
	CALL FLWRTF('LAMPSCONTROL Session Statistics Report'//
     &		    ' For Element %S In Job %S In Project %S',
     &		    ELEM_IDENT(1:SIGCHS(ELEM_IDENT)),
     &		    JOB_NAM(1:SIGCHS(JOB_NAM)),
     &		    PROJ_IDENT)
C
C Blank line for neatness
C
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Task No.  ')
	CALL APPEND('Operator Ident        ')
	CALL APPEND('Workstation Ident     ')
	CALL APPEND('Start date    ')
	CALL APPEND('Start time      ')
	CALL APPEND('End date      ')
	CALL APPEND('End time        ')
	CALL APPEND('CPU time        ')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual session details, in a loop
C
	DO 10 I = 1, NUM_SESS
C
C Convert the dates and times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with start date 
C
	   CALL CONVERT_DAY_TO_STRING(START_DATE(I),SDATE_LENGTH,SDATE)
C
C Deal with start time
C
	   CALL CONVERT_TIME_TO_STRING(START_TIME(I),STIME_LENGTH,STIME)
C
C Remove number of days from start time
C
	   IF (STIME(1:4).EQ.'000-') THEN
	      STIME = STIME(5:STIME_LENGTH)
	      STIME_LENGTH = STIME_LENGTH - 4
	   ENDIF
C
C Deal with end date 
C
	   CALL CONVERT_DAY_TO_STRING(END_DATE(I),EDATE_LENGTH,EDATE)
C
C Deal with end time
C
	   CALL CONVERT_TIME_TO_STRING(END_TIME(I),ETIME_LENGTH,ETIME)
C
C Remove number of days from end time
C
	   IF (ETIME(1:4).EQ.'000-') THEN
	      ETIME = ETIME(5:ETIME_LENGTH)
	      ETIME_LENGTH = ETIME_LENGTH - 4
	   ENDIF
C
C Deal with cpu time
C
	   CALL CONVERT_TIME_TO_STRING(CPU_TIME(I),CPU_LENGTH,CPU)
C
C Format the line
C
	   CALL EXPAND('%I7%(3 %)',INSTANCE(I))
	   CALL APPEND('%S20%(2 %)',A_OPER_ID(I))
	   CALL APPEND('%S20%(2 %)',A_WORK_ID(I))
	   CALL APPEND('%S%[ %]',SDATE(1:SDATE_LENGTH),
     &				 (14-SDATE_LENGTH))
	   CALL APPEND('%S%[ %]',STIME(1:STIME_LENGTH),
     &				 (16-STIME_LENGTH))
	   CALL APPEND('%S%[ %]',EDATE(1:EDATE_LENGTH),
     &				 (14-EDATE_LENGTH))
	   CALL APPEND('%S%[ %]',ETIME(1:ETIME_LENGTH),
     &				 (16-ETIME_LENGTH))
	   CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				 (16-CPU_LENGTH))
C
C And output line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many sessions were found
C
	IF (NUM_SESS.GT.0) THEN
	   CALL FLWRTF('Total number of sessions is %N',NUM_SESS)
C
C Deal with the case where no session details are found
C
	ELSE
	   CALL FLWRTF('No sessions found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
