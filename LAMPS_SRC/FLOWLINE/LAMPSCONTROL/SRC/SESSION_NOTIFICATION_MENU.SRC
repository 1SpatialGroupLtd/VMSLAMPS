C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 16:38:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SESSION_NOTIFICATION_MENU()
C
***	MODULE SESSION_NOTIFICATION_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Menu to notify the end of any active sessions in the system
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_SESS			! num sessions
	INTEGER		CURRENT_OPT			! current option
	INTEGER		NUM_INV				! num invariants
	INTEGER		CURRENT_INV			! current inv'nt
	INTEGER		TERM				! fms terminator
	INTEGER		REDISPLAY			! .T. redo menu
	CHARACTER*50	FVAL				! field value
	INTEGER		I				! tempar'y count
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	INTEGER		A_SESS_ID(FLN_MAX_SESS)		! session ids
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_SESS)		! element ids
CCC	CHARACTER*20	A_OPER_ID(FLN_MAX_SESS)		! operator ids
CCC	CHARACTER*20	A_JOB_NAME(FLN_MAX_SESS)	! job name list
CCC	CHARACTER*80	A_MENU(FLN_MAX_SESS)		! lines on menu 
C
C functions
	INTEGER		FLN_RETRIEVE_ACTIVE_SESSIONS
	INTEGER		SESSION_FINISHED_FORM
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
C
C Assume success
C
5	SESSION_NOTIFICATION_MENU = LSC__NORMAL
C
C Set up defaults for menu display etc
C
	CURRENT_OPT = 1
	CURRENT_INV = 0
	REDISPLAY   = .TRUE.
C
C Set up invariant menu list options
C
	INV_LIST(1) = 'Move up to project, job and session '//
     &				'notification menu'
	INV_LIST(2) = 'Jump to top level menu'
	NUM_INV = 2
C
C Read the list of sessions from database
C
	SESSION_NOTIFICATION_MENU = FLN_RETRIEVE_ACTIVE_SESSIONS(
     &		A_SESS_ID,	! projects containing each session
     &		A_ELEM_ID,	! list of session ids
     &		A_OPER_ID,	! list of operator names
     &		A_JOB_NAME,	! list of operator names
     &		NUM_SESS)	! number of sessions
C
C Deal with any errors
C
	IF (.NOT.SESSION_NOTIFICATION_MENU) THEN
	   CALL LCONT_PUTMSG(SESSION_NOTIFICATION_MENU,0)
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Create the menu lines, by putting session name and project id on each
C line of menu
C
	DO 10 I = 1,NUM_SESS
C
C Ensure that menu list line is blank to start with
C
	   A_MENU(I) = '  '
C
C Now expand session name and project id into line
C
	   CALL EXPAND('%W%S20%S20%S20',
     &		%REF(A_MENU(I)),
     &		A_ELEM_ID(I),
     &		A_OPER_ID(I),
     &		A_JOB_NAME(I))
C
10	CONTINUE
C
C Display the menu page
C
	SESSION_NOTIFICATION_MENU = DISPLAY_MENU(
     &		'                  Session Notification Menu',
     &		'Selection of active session for termination',
     &		'Element Name        Operator Id         Job Name')
C
C Deal with errors
C
	IF (.NOT.SESSION_NOTIFICATION_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Set the flag to indicate menu must be redisplayed
C
	REDISPLAY = .TRUE.
C
C Now display the menu
C
20	SESSION_NOTIFICATION_MENU = GET_MENU_OPTION(
     &		A_MENU,	! list of main options
     &		NUM_SESS,	! number of main options
     &		INV_LIST,	! list of invariant options
     &		NUM_INV,	! number of invariant options
     &		CURRENT_OPT,	! current main option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,	! number of lines in scrolled area
     &		OPT_FIELD,	! option field name
     &		TERM,		! fms field terminator used to exit
     &		REDISPLAY)	! .T. if to redisplay menu on entry
C
C Deal with errors
C
	IF (.NOT.SESSION_NOTIFICATION_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C Check the terminators and act accordingly
C
C---------------------------------------------------------------------
C Deal with RETURN
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C Test if one of the sessions selected
C
	   IF (CURRENT_OPT.GT.0) THEN
C
C Call form to set up conditions for end of session selected
C
	      SESSION_NOTIFICATION_MENU = SESSION_FINISHED_FORM
     &			(A_SESS_ID(CURRENT_OPT))
C
C Deal with errors
C
	      IF (.NOT.SESSION_NOTIFICATION_MENU) THEN
	         CALL LCONT_PUTMSG(SESSION_NOTIFICATION_MENU,0)
	         GOTO 5
	      ENDIF
C
C Loop, restarting menu to get option list without started session
C
	      GOTO 5
C
C Otherwise it is an invariant option
C
C---------------------------------------------------------------------
C Deal with move up option
C
	   ELSEIF (CURRENT_INV.EQ.1) THEN
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
C
C---------------------------------------------------------------------
C Deal with go top
C
	   ELSEIF (CURRENT_INV.EQ.2) THEN
	      NEXT_FUNCTION = DO_GO_TOP
	      GOTO 999
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with unrecognised key sequence - just ignore it and loop
C back to allow entry of next option without rediplaying menu
C
	ELSE
	   REDISPLAY = .FALSE.
	   GOTO 20
	ENDIF
C
C Exit
C
999	RETURN
	END
