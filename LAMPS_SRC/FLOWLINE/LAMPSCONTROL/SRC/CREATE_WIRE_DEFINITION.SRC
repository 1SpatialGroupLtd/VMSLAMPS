	INTEGER FUNCTION CREATE_WIRE_DEFINITION()
C
***	MODULE CREATE_WIRE_DEFINITION
***	IDENT 03SE91
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 September 1988
C
C Routine to allow the user to enter, on the WIRE_DEFINITION_FORM, 
C details of a wire definition.
C
C The routine allows the altering of an existing wire definition,
C or the entry of a completely new one.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C arguments
C
C workspace
	CHARACTER*20	FLN_ID		! flowline identifier
	CHARACTER*20	WIRE_ID		! wire identifier
	LOGICAL		EXISTS		! .T. if wire definition
					! already present in db
	CHARACTER*20	END_ELEMENT	! wire end element
C
	CHARACTER*50	FID		! form field identifier
	INTEGER		TERM		! form field terminator
	CHARACTER*255	FVAL		! form field value
	CHARACTER*100	RESPONSE	! response to a form prompt
	LOGICAL		HAD_WIRE_ID	! .T. if wire id has been
					! entered already
	INTEGER		STATUS		! status return code
	INTEGER		LENGTH
	CHARACTER*20	ID,NEW_ID
C
C functions
	INTEGER		FLN_RETRIEVE_WIRE_DEF
	INTEGER		FLN_DEFINE_WIRE
	INTEGER		FLN_REMOVE_SPACES
	INTEGER		FORM_GETLINE
C
C Assume success
C
	CREATE_WIRE_DEFINITION = LSC__NORMAL
C
C Clear the screen and display the form
C
	CALL FDV$CLRSH('WIRE_DEFINITION_FORM')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Clear flag to indicate that we have not yet had wire id entered
C
	HAD_WIRE_ID = .FALSE.
C
C Setup identifier of next field to be entered to be for flowline id
C
	FID = 'FLOWLINE_ID'
C
C Retrieve the next field from the form
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Clear the message lines on the screen, if they need it
C
	CALL CLEAR_MESSAGE_LINES()
C
C If the abort form terminator was used, move up to system defintn menu
C
	IF (TERM.EQ.ABORT_FORM) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
	ENDIF
C
C Check which field was entered
C
C Flowline id
C
	IF (FID.EQ.'FLOWLINE_ID') THEN
C
C Remove spaces
C
	   ID = FVAL
	   CREATE_WIRE_DEFINITION = FLN_REMOVE_SPACES(
     &						ID,NEW_ID,LENGTH)
	   IF (.NOT.CREATE_WIRE_DEFINITION) GOTO 900
C
	   FLN_ID = NEW_ID(1:LENGTH)
C
C Wire id
C
	ELSEIF (FID.EQ.'WIRE_ID') THEN
C
C If the terminator used was a backspace, and the field is blank,
C then ignore the contents of this field for the moment
C
	   IF ( (TERM.EQ.PREV_FIELD).AND.
     &		(FVAL.EQ.' ') ) GOTO 101
C
C Remove spaces
C
	   ID = FVAL
	   CREATE_WIRE_DEFINITION = FLN_REMOVE_SPACES(
     &						ID,NEW_ID,LENGTH)
	   IF (.NOT.CREATE_WIRE_DEFINITION) GOTO 900
C
	   WIRE_ID = NEW_ID(1:LENGTH)
C
C Check if this is the first time this field has been entered - if it
C is, then attempt to retrieve the information on the WIRE with
C this identifier
C
	   IF (.NOT.HAD_WIRE_ID) THEN
C
C Set flag to indicate this field has now been entered at least once
C
	      HAD_WIRE_ID = .TRUE.
C
C Attempt to retrieve the information on this WIRE
C
	      CREATE_WIRE_DEFINITION = FLN_RETRIEVE_WIRE_DEF(
     &		FLN_ID,		! flowline id
     &		WIRE_ID,	! wire identifier
     &		EXISTS,		! .T. if flowine definition exists
     &		END_ELEMENT)	! end element
C
C Test if the WIRE actually exists, if it does, output the
C information on the form
C
	      IF (EXISTS) THEN
C
C Tell the user
C
	         CALL FORM_PUTMSG('Wire definition exists',0,0)
C
C Output each field value
C
	         CALL FDV$PUT(FLN_ID,'FLOWLINE_ID')
	         CALL FDV$PUT(WIRE_ID,'WIRE_ID')
	         CALL FDV$PUT(END_ELEMENT,'END_ELEMENT_ID')
	      ENDIF
	   ENDIF
C
C End element
C
	ELSEIF (FID.EQ.'END_ELEMENT_ID') THEN
	   END_ELEMENT = FVAL
	ENDIF
C
101	CONTINUE
C
C If GOLD D (delete entry) key sequence was used, attempt to 
C delete the WIRE
C
	IF ((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &	    (TERM.EQ.(GOLD_BASE + ICHAR('d')))) THEN
C
C If the wire id has not yet been entered, tell the user to do it
C
	   IF (.NOT.HAD_WIRE_ID) THEN
	      CALL FORM_PUTMSG('Please enter wire identifier',-1,0)
	      FID = 'WIRE_ID'
	      GOTO 10
	   ENDIF
C
C Prompt user to make sure deletion is required
C
15	   CREATE_WIRE_DEFINITION = FORM_GETLINE(
     &		RESPONSE,
     &		TERM,
     &		0,
     &		'Delete wire definition from database (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	   IF (.NOT.CREATE_WIRE_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_WIRE_DEFINITION,0)
	      GOTO 15
	   ENDIF
C
C Clear the message lines on the screen
C
	   CALL CLEAR_MESSAGE_LINES()
C
C Check if response is 'Y...', return to allow field re-entry if it
C is not.
C
	   IF ( (RESPONSE(1:1).NE.'Y').AND.
     &		(RESPONSE(1:1).NE.'y')) GOTO 10
C
C Delete entry from database
C
	   CREATE_WIRE_DEFINITION = FLN_DEFINE_WIRE(
     &		FLN_ID,		! flowline identifier
     &		WIRE_ID,	! wire to be deleted
     &		END_ELEMENT,	! final element (dummy - not used)
     &		.TRUE.)		! delete only flag .T. so del wire
C
C Check for, and report, any errors.
C If an error occurs, return to allow re-entry of information.
C
	   IF (.NOT.CREATE_WIRE_DEFINITION) THEN
C
C No such flowline
C
	      IF (CREATE_WIRE_DEFINITION.EQ.FLN__NOSUCHFLN) THEN
	         CALL FORM_PUTMSG('No such flowline',-1,0)
	         FID = 'FLOWLINE_ID'
C
C No such wire
C
	      ELSEIF (CREATE_WIRE_DEFINITION.EQ.FLN__NOSUCHWIRE) THEN
	         CALL FORM_PUTMSG('No such wire',-1,0)
	         FID = 'WIRE_ID'
C
C Illegal priorities
C
	      ELSEIF (CREATE_WIRE_DEFINITION.EQ.FLN__ILLEGPRI) THEN
	         CALL FORM_PUTMSG('Illegal priority',-1,0)
	         FID = 'PRIORITY'
C
C Unrecognised error
C
	      ELSE
	         CALL LCONT_PUTMSG(LSC__UNDELWIRE,0)
	         CALL LCONT_ADDMSG(CREATE_WIRE_DEFINITION,0)
	         CALL FORM_PUTMSG('Try re-entering information',-1,0)
	         FID = 'FLOWLINE_ID'
	      ENDIF
C
C Repeat the loop to retry entry
C
	      GOTO 10
	   ENDIF
C
C Otherwise, the delete has succeeded, so exit from this form and move
C up to previous menu
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
	ENDIF
C
C Process the terminator
C
	CALL FDV$PFT
C
C Find the status, i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Determine the next field to be entered
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.RETURN_KEY) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C Return key (finish form) was used so output new definition
C
C Attempt to output new definition to the database
C
	CREATE_WIRE_DEFINITION = FLN_DEFINE_WIRE(
     &		FLN_ID,		! flowline identifier
     &		WIRE_ID,	! wire to be deleted
     &		END_ELEMENT,	! final element 
     &		.FALSE.)	! delete only flag 
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of definition.
C
	IF (.NOT.CREATE_WIRE_DEFINITION) THEN
	   CALL LCONT_PUTMSG(LSC__UNDEFWIRE,0)
	   CALL LCONT_ADDMSG(CREATE_WIRE_DEFINITION,0,0)
	   GOTO 10
	ENDIF
C
C Set semaphore to indicate that we want to re-enter the system deftn 
C menu
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
900	RETURN
	END
C
