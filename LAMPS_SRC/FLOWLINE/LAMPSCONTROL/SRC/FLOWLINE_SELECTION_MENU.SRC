	INTEGER FUNCTION FLOWLINE_SELECTION_MENU(
     &				TITLE_SUFFIX,CHOSEN_FLOW_ID)
C
***	MODULE FLOWLINE_SELECTION_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to put up menu of flowlines, and allow user to select one
C The arguments, are:
C
C	Title suffix	String suffixing 'Selection of a flowline' on
C			title description line of menu. It decribes 
C			what the selection is being made for.
C
C 	Flowline id	The identifier of the flowline returned on exit.
C
C
C On exit, the NEXT_FUNCTION semaphore can have one of these values:
C
C	DO_MOVE_UP_LEVEL	Carry on with operation, for which
C				a flowline has been selected.
C
C	DO_NOTHING		No flowline has been selected, so
C				abort the operation which required
C				it. The 'Move up to previous menu'
C				option has been chosen.
C
C	DO_GO_TOP		Jump to top level menu.
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*(*)	TITLE_SUFFIX	! suffix string for title
					! description line
	CHARACTER*(*)	CHOSEN_FLOW_ID	! flowline id chosen
C
C workspace
	CHARACTER*100	DESCRIPTION	! description line of menu title
	INTEGER		NUM_FLN		! number of flowlines found
	INTEGER		TERM		! field terminator found
	LOGICAL		REDO		! .T. if to redisplay menu
	INTEGER		CURRENT_OPT	! current option
	INTEGER		INV_NUM		! number of invariants
	INTEGER		CURRENT_INV	! current invariant
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_FLOW_ID(FLN_MAX_FLOWLINE)
CCC	INTEGER		A_FLOW_PRI(FLN_MAX_FLOWLINE)
CCC	CHARACTER*20	A_START_ELEM_ID(FLN_MAX_FLOWLINE)
CCC	CHARACTER*20	A_END_ELEM_ID(FLN_MAX_FLOWLINE)
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		FLN_RETRIEVE_ALL_FLOWLINES
	INTEGER		GET_MENU_OPTION
C
C Assume success
C
	FLOWLINE_SELECTION_MENU = LSC__NORMAL
C
C Set up menu title description line, including title suffix
C
	CALL EXPAND('%WS% Selection of a flowline %S',
     &		DESCRIPTION,TITLE_SUFFIX)
C
C Now cause the menu form to be displayed with title etc
C
	FLOWLINE_SELECTION_MENU = DISPLAY_MENU(
     &		'                   Flowline Request Menu',
     &		DESCRIPTION,
     &		'Flowlines present in system are :')
C
C Check for errors
C
	IF (.NOT.FLOWLINE_SELECTION_MENU) GOTO 900
C
C Now set up the invariant options list (go top and move up).
C
	INV_NUM = 2
	INV_LIST(1)  = 'Move up to previous menu'
	INV_LIST(2)  = 'Jump to top level menu'
C
C Now attempt to read the current flowline list
C
C
C Call the routine to get list of information on all flowlines
C in the system
C
	FLOWLINE_SELECTION_MENU = FLN_RETRIEVE_ALL_FLOWLINES(
     &		A_FLOW_ID,	! list of flowlines
     &		A_FLOW_PRI,	! list of flowline priorities
     &		A_START_ELEM_ID,	! first element in flowline
     &		A_END_ELEM_ID,	! last element in flowline
     &		A_COMPROC,	! command procedure specifications
     &		NUM_FLN)	! number of flowlines
C
C Check for errors in reading list of flowlines
C
	IF (.NOT.FLOWLINE_SELECTION_MENU) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETFLN,0)
	   CALL LCONT_ADDMSG(FLOWLINE_SELECTION_MENU,0)
C
C Specify that you just want to abort the current operation
C which required selection of a flowline
C
	   NEXT_FUNCTION = DO_NOTHING
	   GOTO 900
	ENDIF
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C And set current option to be first item on menu
C
	CURRENT_OPT = 1
C
C Get required option
C
20	FLOWLINE_SELECTION_MENU = GET_MENU_OPTION(
     &		A_FLOW_ID,			! option list
     &		NUM_FLN,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.FLOWLINE_SELECTION_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator
C
	IF (TERM.NE.RETURN_KEY) GOTO 20
C
C Translate selected option number into some sort of flowline id to
C return as the argument
C
C First check if an invariant option was selected
C
C For move up to next level menu, 
C (indicated by INV_NUM > 1)
C
	IF ((CURRENT_OPT.LE.0).AND.
     &	    (CURRENT_INV.EQ.1)) THEN
C
C Set flag to indicate we want to abort the operation which required
C selection of a flowline
C
	   NEXT_FUNCTION = DO_NOTHING
C
C For go top 
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.2)) THEN
	   NEXT_FUNCTION = DO_GO_TOP
C
C Now deal with project options, setting next project id and name
C for rest of program to play with
C
	ELSE
	   CHOSEN_FLOW_ID = A_FLOW_ID(CURRENT_OPT)		! project name
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL		! to job menu
	ENDIF
C
C Exit
C
900	RETURN
	END
