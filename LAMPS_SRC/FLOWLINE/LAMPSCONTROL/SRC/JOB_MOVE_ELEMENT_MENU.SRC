C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-07-18 16:40:50.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION JOB_MOVE_ELEMENT_MENU
     &		(CONT_JOB_ID,CONT_JOB_NAME,CONT_PROJECT_ID)
C
***	MODULE JOB_MOVE_ELEMENT_MENU
***	IDENT 18JL91
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			18 May 1988
C
C Menu to select the elements to which to move (back) a job
C in a particular flowline
C The flowline library will ensure that only suitable elements,
C through which the job has already passed, will be returned for
C display on this menu
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	INTEGER		CONT_JOB_ID			! job id
	CHARACTER*20	CONT_JOB_NAME			! job name
	CHARACTER*20	CONT_PROJECT_ID			! proj id
C
C w/s
	INTEGER		NUM_ELEM			! num elemnts
	INTEGER		NUM_SELECTED			! no. selections
	INTEGER		CURRENT_OPT			! current option
	INTEGER		CURRENT_INV			! current inv'nt
	INTEGER		NUM_INV				! num invariants
	INTEGER		TERM				! fms terminator
	INTEGER		REDISPLAY			! .T. redo menu
	INTEGER		I				! tempar'y count
	CHARACTER*60	DESCRIPTION_LINE		! for menu
	CHARACTER*50	FVAL				! field value
C
	LOGICAL		SELECTED(FLN_MAX_ELEMENT)	! .T. if elemnt
							! selected
	CHARACTER*20	SELECT_LIST(FLN_MAX_ELEMENT)	! elmnts selctd
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_ELEMENT)	! elemnt list
CCC	CHARACTER*60	A_MENU(FLN_MAX_ELEMENT)		! menu opt'ns - elem ids
C
C functions
	INTEGER		FLN_RESET_JOB
	INTEGER		FLN_RETRIEVE_RESETS
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
C
C Assume success
C
5	JOB_MOVE_ELEMENT_MENU = LSC__NORMAL
C
C Set up defaults for menu display etc
C
	CURRENT_OPT = 1
	CURRENT_INV = 0
	REDISPLAY   = .TRUE.
C
C Set up invariant menu list options
C
	INV_LIST(1) = 'Move up to job status modification menu'
	INV_LIST(2) = 'Jump to top level menu'
	NUM_INV = 2
C
C Read the list of legal reset elements from database
C
	JOB_MOVE_ELEMENT_MENU = FLN_RETRIEVE_RESETS(
     &		CONT_JOB_ID,	! job being reset
     &		A_ELEM_ID,	! list of legal element ids
     &		NUM_ELEM)	! number of legal reset elements
C
C Deal with any errors
C
	IF (.NOT.JOB_MOVE_ELEMENT_MENU) THEN
	   CALL LCONT_PUTMSG(JOB_MOVE_ELEMENT_MENU,0)
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Assemble menu list and initialise the selected option array
C
	DO 10 I = 1,NUM_ELEM
C
C Initialiase selected option list array
C
	   SELECTED(I) = .FALSE.
C
C Transfer element id to menu list array 
C
	   A_MENU(I) = A_ELEM_ID(I)
C
10	CONTINUE
C
C Create the menu description line
C
	DESCRIPTION_LINE = '  '
C
	CALL EXPAND('%WProject %S20  Job %S20',
     &		%REF(DESCRIPTION_LINE),
     &		CONT_PROJECT_ID,
     &		CONT_JOB_NAME)
C
C Display the menu page
C
	JOB_MOVE_ELEMENT_MENU = DISPLAY_MENU(
     &		'           Element Selection for Job Movement Menu',
     &		DESCRIPTION_LINE,
     &		'The following options are available : ')
C
C Deal with errors
C
	IF (.NOT.JOB_MOVE_ELEMENT_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Set the flag to indicate menu must be redisplayed
C
	REDISPLAY = .TRUE.
C
C Now display the menu
C
20	JOB_MOVE_ELEMENT_MENU = GET_MENU_OPTION(
     &		A_MENU,	! list of main options
     &		NUM_ELEM,	! number of main options
     &		INV_LIST,	! list of invariant options
     &		NUM_INV,	! number of invariant options
     &		CURRENT_OPT,	! current main option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,	! number of lines in scrolled area
     &		OPT_FIELD,	! option field name
     &		TERM,		! fms field terminator used to exit
     &		REDISPLAY)	! .T. if to redisplay menu on entry
C
C Deal with errors
C
	IF (.NOT.JOB_MOVE_ELEMENT_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C Check the terminators and act accordingly
C
C---------------------------------------------------------------------
C Deal with RETURN
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C If element selected, do nothing and loop for next option
C
	   IF (CURRENT_OPT.GT.0) THEN
	      REDISPLAY = .FALSE.
	      GOTO 20
C
C Otherwise it is an invariant option
C
C---------------------------------------------------------------------
C Deal with move up option
C
	   ELSEIF (CURRENT_INV.EQ.1) THEN
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
C
C---------------------------------------------------------------------
C Deal with go top
C
	   ELSEIF (CURRENT_INV.EQ.2) THEN
	      NEXT_FUNCTION = DO_GO_TOP
	      GOTO 999
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with element deselection i.e. GOLD D
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('d')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Now amend the local status array
C
	   SELECTED(CURRENT_OPT) = .FALSE.
C
C And update the menu item on display
C
	   A_MENU(CURRENT_OPT) = A_ELEM_ID(CURRENT_OPT)
C
C And loop for next option, redisplaying amended option list
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with select element i.e. GOLD S
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('S'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('s')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Now amend the local status array
C
	   SELECTED(CURRENT_OPT) = .TRUE.
C
C And update the menu item on display
C Ensure menu list array entry is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the text line into the menu option list string
C
	   CALL EXPAND('%W%S20     Selected',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_ELEM_ID(CURRENT_OPT))
C
C And loop for next option, redisplaying amended option list
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with attempt to move job i.e. GOLD M
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('M'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('m')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Initialise count of selected elements
C
	   NUM_SELECTED = 0
C
C Assemble list of selected elements
C
	   DO 30 I = 1,NUM_ELEM
C
C Test if element has been selected
C
	      IF (SELECTED(I)) THEN
C
C Increment count of selected elements
C
	         NUM_SELECTED = NUM_SELECTED + 1
C
C Enter selected element in list
C
	         SELECT_LIST(NUM_SELECTED) = A_ELEM_ID(I)
C
	      ENDIF
30	   CONTINUE
C
C Check that some elements have been selected, tell user not to
C be silly if they haven't
C
	   IF (NUM_SELECTED.LT.1) THEN
	      CALL FORM_PUTMSG('No element(s) selected',-1,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Inform the user - as this sometimes takes quite a while
C
	   CALL LCONT_PUTMSG(LSC__JOBMOVE,0)
C
C Now do the reset
C
	   JOB_MOVE_ELEMENT_MENU =
     &		FLN_RESET_JOB(NUM_SELECTED,SELECT_LIST,CONT_JOB_ID)
C
C Deal with errors
C
	   IF (.NOT.JOB_MOVE_ELEMENT_MENU) THEN
	      CALL LCONT_PUTMSG(JOB_MOVE_ELEMENT_MENU,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Otherwise, have succeeded, so move back up to job status menu,
C after clearing the message area
C
	   CALL CLEAR_MESSAGE_LINES()
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
C
C---------------------------------------------------------------------
C Deal with unrecognised key sequence - just ignore it and loop
C back to allow entry of next option without rediplaying menu
C
	ELSE
	   REDISPLAY = .FALSE.
	   GOTO 20
	ENDIF
C
C Exit
C
999	RETURN
	END
