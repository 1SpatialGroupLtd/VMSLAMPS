C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-28 14:53:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CONTROL_MENU()
C
***	MODULE CONTROL_MENU
***	IDENT 28JA93
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow selection of option from CONTROLment menu
C It is assumed that authorisation checks have been carried
C out before reaching this routine
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C w/s
	INTEGER		I		! temporary index
	INTEGER		MAX_CONT_OPT	! max number of control opts
	LOGICAL		AUTH_OP		! .T. if operator authorised
	LOGICAL		AUTH_WK		! .T. if wkstation authorised
C
	INTEGER		TERM		! field terminator for menu
	LOGICAL		REDO		! .T. if menu area redisplay
	INTEGER		OPT_NUM		! number of menu options
	INTEGER		CURRENT_OPT	! current menu option
	INTEGER		INV_NUM		! number of invariant options
	INTEGER		CURRENT_INV	! current invariant option
C
	CHARACTER*50	AUTH_OPT(20)	! possible options
	CHARACTER*50	AUTH_ID(20)	! auth's reqd for opts
	INTEGER		AUTH_USED(20)	! options actually used
C
C Assign number of possible control options
C
	PARAMETER	(MAX_CONT_OPT = 3)
C
C functions
	INTEGER		FLN_CHECK_OPERATOR_AUTH
	INTEGER		FLN_CHECK_WORKSTATION_AUTH
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		MANAGE_MENU
	INTEGER		REQUEST_MENU
	INTEGER		REPORT_MENU
	INTEGER		LIB$DELETE_LOGICAL
C
C Assume success
C
	CONTROL_MENU = LSC__NORMAL
C
C Set initial option number
C
	CURRENT_OPT = 1
C
C Set up list of menu options
C
	DATA (AUTH_OPT(I),I=1,MAX_CONT_OPT) /
     &		'Management Menu',
     &		'Report Menu',
     &		'Project, Job and Task Request Menus'/
C
C Set up list of authorisations corresponding to menu options
C
	DATA (AUTH_ID(I),I=1,MAX_CONT_OPT) /
     &		'MANAGE',
     &		'REPORT',
     &		'REQUEST'/
C
C Set up initial option list length
C
5	OPT_NUM = 0
C
C Set up number of invariant options
C
	INV_NUM = 0
C
C Determine which operations the current user/workstation is allowed
C to do, and set up the menu options appropriately
C
C Check for each in turn
C
	DO 10 I = 1,MAX_CONT_OPT
C
C If using previous authorisation  has not been allowed then do it
           IF (.NOT.HAD_USER_AUTH.OR..NOT.HAD_FAST) THEN
C
C Do check for operator authorisation
C
	      CONTROL_MENU = FLN_CHECK_OPERATOR_AUTH(
     &			'DB',			! specifies db
     &			OPERATOR_ID,		! current user
     &			AUTH_ID(I),		! authorisation reqd
     &			AUTH_OP)		! authorised operator ?
C
C Deal with errors, other than a no such authorisation error
C
	      IF ((.NOT.CONTROL_MENU).AND.
     &		   (CONTROL_MENU.NE.FLN__NOSUCHAUTH)) THEN
	         CALL LCONT_PUTMSG(CONTROL_MENU,0)
	         GOTO 900
	      ENDIF
C
C Check authorisation for worrkstation
C
	      CONTROL_MENU = FLN_CHECK_WORKSTATION_AUTH(
     &			'DB',			! for database
     &			WORKSTATION_ID,		! current workstation
     &			AUTH_ID(I),		! reqd authorisation
     &			AUTH_WK)		! wkstat authorised ?
C
C Deal with errors, other than a no such authorisation error
C
	      IF ((.NOT.CONTROL_MENU).AND.
     &		   (CONTROL_MENU.NE.FLN__NOSUCHAUTH)) THEN
	         CALL LCONT_PUTMSG(CONTROL_MENU,0)
	         GOTO 900
	      ENDIF
	   ELSE
C
C If using previous authorisation is allowed then set flags.
	      AUTH_OP = .TRUE.
	      AUTH_WK = .TRUE.
	   ENDIF
C
C Now, iff workstation and operator are authorised, add the option
C to menu list, set up corresponding semaphore value to indicate
C what this option represents, and increment count of number of
C options.
C
	   IF (AUTH_OP.AND.AUTH_WK) THEN
C
C Increment count of options
C
	      OPT_NUM = OPT_NUM + 1
C
C Add new item to option list
C
	      OPT_LIST(OPT_NUM) = AUTH_OPT(I)
C
C Set up semaphore indicating to later code what this option is for
C
	      AUTH_USED(OPT_NUM) = I
	   ENDIF
C
10	CONTINUE
C
C Set up logoff option
C
	OPT_NUM = OPT_NUM + 1
	OPT_LIST(OPT_NUM) = 'Exit from LAMPSCONTROL'
	AUTH_USED(OPT_NUM) = 0
C
C Display menu form, with title, description and option title
C
	CONTROL_MENU = DISPLAY_MENU(
     &		'LAMPSCONTROL Overall Control Menu',
     &		'Menu to select overall operation required',
     &		'Operations for which operator authorised:')
C
C Check for errors
C
	IF (.NOT.CONTROL_MENU) GOTO 900
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C Get required option
C
20	CONTROL_MENU = GET_MENU_OPTION(
     &		OPT_LIST,		! option list
     &		OPT_NUM,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.CONTROL_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator
C
	IF (TERM.NE.RETURN_KEY) GOTO 20
C
C Now perform the particular options selected.
C in case of menus, only loop to redo control menu if semaphore
C indicates that move up a menu level option was selected. 
C
C Manage menu option
C
	IF (AUTH_USED(CURRENT_OPT).EQ.1) THEN
	   CONTROL_MENU = MANAGE_MENU()
C
C Reqest menu option
C
	ELSEIF (AUTH_USED(CURRENT_OPT).EQ.3) THEN
	   CONTROL_MENU = REQUEST_MENU()
C
C Report menu option
C
	ELSEIF (AUTH_USED(CURRENT_OPT).EQ.2) THEN
	   CONTROL_MENU = REPORT_MENU()
C
C Perform logoff
C
	ELSEIF (AUTH_USED(CURRENT_OPT).EQ.0) THEN
	   NEXT_FUNCTION = DO_LOGOFF
	   GOTO 900
C
C Default, exit with error value of NEXT_FUNCTION
C
	ELSE
	   NEXT_FUNCTION = DO_ERROR
	ENDIF
C
C If the move up a menu level, or the jump to top level menu options
C were selected on a lower level, do control menu again.
C Reset next function semaphore.
C
	   IF (	(NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL).OR.
     &		(NEXT_FUNCTION.EQ.DO_GO_TOP)) THEN
	      NEXT_FUNCTION = DO_ERROR
	      GOTO 5
	   ENDIF
C
C Exit
C
900	RETURN
	END
