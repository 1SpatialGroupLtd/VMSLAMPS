C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 14:08:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION DEFINE_PARAMETERS()
C
***	MODULE DEFINE_PARAMETERS
***	IDENT 04OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 October 1988
C
C Routine to allow user to define the local, global and external
C parameters for passing between sessions/tasks in LAMPSCONTROL
C in a command line driven mode of operation.
C This mode will be entered if the /PARAMETER qualifier is specified
C on the command line.
C This is necessary because of a gross deficiency in DCL, which treats
C all foreign command lines as single command elements (even if they
C are split over several lines), thus forcing them to be at most 255
C characters long.
C
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CMDCOM.CMN'
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
C
C arguments
C
C workspace
	CHARACTER*2048	PARAM_STRING	! current parameter (as read)
	INTEGER		PARAM_LEN	! length of parameter list text
	CHARACTER*2048	PARSED_PARAM	! current parameter (as parsed)
	LOGICAL		SAVE_MENU	! to preserve menu required
					! common block flag
	INTEGER		COMMAND		! number of command found
	INTEGER		IERR		! supplementary error code
	LOGICAL		MORE		! .T. if there are any more
					! items in the param list on
					! current line
C
C functions
	INTEGER		RDCOMM		! routine to interpret commands
	INTEGER		TTRSTR		! read from terminal
	INTEGER		SIGCHS		! significant chars in string
	INTEGER		READ_PARAM_STRING
	INTEGER		PARSE_PARAM_STRING
	INTEGER		STORE_PARAM_STRING
C
C externals
	INTEGER		PARAM_CMD_TABLE	! command table
	EXTERNAL	PARAM_CMD_TABLE
C
C Assume success
C
	DEFINE_PARAMETERS = LSC__NORMAL
C
C Initialise numbers of parameters to zero
C
	NOTIFY_LOC_PARAM_NUM = 0
	NOTIFY_GLB_PARAM_NUM = 0
	NOTIFY_EXT_PARAM_NUM = 0
C
C Turn off menu mode for duration of this routine - this will prevent
C the error reporting being done using the FMS line output routines
C
	SAVE_MENU = MENU
	MENU = .FALSE.
C
C Turn on error reporting by RDCOMM
C
	NOMESS = .FALSE.
C
C Prompt for parameter
C
10	DEFINE_PARAMETERS = TTRSTR(
     &			PARAM_STRING,PARAM_LEN,'PARAMETER> ',IERR)
C
C Check for errors
C
	IF (.NOT.DEFINE_PARAMETERS) THEN
	   CALL LCONT_PUTMSG(DEFINE_PARAMETERS,0)
	   CALL LCONT_ADDMSG(IERR,0)
	   GOTO 950
	ENDIF
C
C Decode command line, resetting the decode pointer first
C
	CALL SETAUX(%REF(PARAM_STRING),2048)
	COMMAND = RDCOMM(PARAM_CMD_TABLE)
C
C Check for errors or unknown commands
C
	IF ((COMMAND.LE.0).AND.(PARAM_LEN.NE.0)) THEN
	   CALL LCONT_ADDMSG(LSC__BADPAR,0)
	   GOTO 10
C
C Check for empty command lines
C
	ELSEIF (COMMAND.EQ.0) THEN
	   GOTO 10
C
C Check if command is one of those to define parameters
C
	ELSEIF (COMMAND.LE.3) THEN
C
C Get rid of the part of the command line in which we are not interested
C ie the command word
C
	   PARAM_STRING = PARAM_STRING(DCPTR:PARAM_LEN)
C
C Parse the string argument (ie the parameter list)
C This includes substituting any symbols delimited by ' or '' with
C their DCL symbol values.
C
	   DEFINE_PARAMETERS = PARSE_PARAM_STRING(
     &		PARAM_STRING,
     &		PARSED_PARAM)
C
C Check for errors, loop to prompt for next parameter if there are any
C
	   IF (.NOT.DEFINE_PARAMETERS) GOTO 10
	ENDIF
C
C Break up the parameter list into its separate elements and store
C them in an appropriate array
C
C Local parameters
C
	IF ((COMMAND.EQ.1).AND.(SIGCHS(PARSED_PARAM).NE.0)) THEN
	   DEFINE_PARAMETERS = STORE_PARAM_STRING(
     &		PARSED_PARAM,		! parameter string list
     &		NOTIFY_LOC_PARAM_TXT,	! array to hold parameters
     &		NOTIFY_LOC_PARAM_NUM,	! no. so far - updated by this
     &		NOTIFY_MAX_PARAM)	! maximum no. allowed
C
C Global parameters
C
	ELSEIF ((COMMAND.EQ.2).AND.(SIGCHS(PARSED_PARAM).NE.0)) THEN
	   DEFINE_PARAMETERS = STORE_PARAM_STRING(
     &		PARSED_PARAM,		! parameter string list
     &		NOTIFY_GLB_PARAM_TXT,	! array to hold parameters
     &		NOTIFY_GLB_PARAM_NUM,	! no. so far - updated by this
     &		NOTIFY_MAX_PARAM)	! maximum no. allowed
C
C External parameters
C
	ELSEIF ((COMMAND.EQ.3).AND.(SIGCHS(PARSED_PARAM).NE.0)) THEN
	   DEFINE_PARAMETERS = STORE_PARAM_STRING(
     &		PARSED_PARAM,		! parameter string list
     &		NOTIFY_EXT_PARAM_TXT,	! array to hold parameters
     &		NOTIFY_EXT_PARAM_NUM,	! no. so far - updated by this
     &		NOTIFY_MAX_PARAM)	! maximum no. allowed
C
C Exit command
C
	ELSEIF (COMMAND.EQ.4) THEN
	   GOTO 950
	ENDIF
C
C Loop to prompt for next command line
C
	GOTO 10
C
C End of loop
C
950	CONTINUE
C
C Restore previous menu/nomenu mode
C
	MENU = SAVE_MENU
C
C
C Exit
C
	RETURN
	END
