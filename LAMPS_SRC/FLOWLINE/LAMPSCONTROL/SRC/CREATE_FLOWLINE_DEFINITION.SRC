	INTEGER FUNCTION CREATE_FLOWLINE_DEFINITION()
C
***	MODULE CREATE_FLOWLINE_DEFINITION
***	IDENT 25JN90
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 September 1988
C
C Routine to allow the user to enter, on the FLOWLINE_DEFINITION_FORM, 
C details of a flowline definition, and to edit its command procedure 
C file, with callable EDT, if required.
C
C The routine allows the altering of an existing flowline definition,
C or the entry of a completely new one.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C arguments
C
C workspace
	CHARACTER*20	FLN_ID		! flowline identifier
	LOGICAL		EXISTS		! .T. if flowline com. proc.
					! already present in db
	CHARACTER*20	START_ELEMENT	! flowline start element
	CHARACTER*20	END_ELEMENT	! flowline end element
	CHARACTER*255	NEW_FLN_COMPROC	! new flowline command procedure
	CHARACTER*255	OLD_FLN_COMPROC	! old flowline command procedure
	INTEGER		FLN_PRIORITY	! flowline priority
C
	CHARACTER*50	FID		! form field identifier
	INTEGER		TERM		! form field terminator
	CHARACTER*255	FVAL		! form field value
	CHARACTER*100	RESPONSE	! response to a form prompt
	LOGICAL		USED_EDT	! .T. if edited with EDT
	LOGICAL		HAD_FLN_ID	! .T. if flowline id has been
					! entered already
	INTEGER		STATUS		! status return code
	CHARACTER*20	ID,NEW_ID
	INTEGER		LENGTH
C
C functions
	INTEGER		FLN_RETRIEVE_FLOWLINE_DEF
	INTEGER		FLN_DEFINE_FLOWLINE
	INTEGER		FLN_REMOVE_SPACES
	INTEGER		FORM_GETLINE
	INTEGER		EDIT_FILE
	INTEGER		LIB$DELETE_FILE
	INTEGER		RDINT
C
C Assume success
C
	CREATE_FLOWLINE_DEFINITION = LSC__NORMAL
C
C Clear the screen and display the form
C
	CALL FDV$CLRSH('FLOWLINE_DEFINITION_FORM')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Clear flag to indicate that we have not yet had flowline id entered
C
	HAD_FLN_ID = .FALSE.
C
C Default priority
C
	FLN_PRIORITY = 4
C
C Setup identifier of next field to be entered to be for flowline id
C
	FID = 'FLOWLINE_ID'
C
C Retrieve the next field from the form
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Clear the message lines on the screen, if they need it
C
	CALL CLEAR_MESSAGE_LINES()
C
C If the abort form terminator was used, move up to system defintn menu
C
	IF (TERM.EQ.ABORT_FORM) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
	ENDIF
C
C Check which field was entered
C
C Flowline id
C
	IF (FID.EQ.'FLOWLINE_ID') THEN
C
C Remove spaces
C
	   ID = FVAL
	   CREATE_FLOWLINE_DEFINITION = FLN_REMOVE_SPACES(
     &						ID,NEW_ID,LENGTH)
	   IF (.NOT.CREATE_FLOWLINE_DEFINITION) GOTO 900
C
	   FLN_ID = NEW_ID(1:LENGTH)
C
C Check if this is the first time this field has been entered - if it
C is, then attempt to retrieve the information on the flowline with
C this identifier
C
	   IF (.NOT.HAD_FLN_ID) THEN
C
C Set flag to indicate this field has now been entered at least once
C
	      HAD_FLN_ID = .TRUE.
C
C Initialise old flowline command procedure (this will be compared
C with new command procedure to determine if the user should be
C asked whether to delete the old command procedure)
C
	      OLD_FLN_COMPROC = ' '
C
C Attempt to retrieve the information on this flowline
C
	      CREATE_FLOWLINE_DEFINITION = FLN_RETRIEVE_FLOWLINE_DEF(
     &		FLN_ID,		! flowline identifier
     &		EXISTS,		! .T. if flowine definition exists
     &		START_ELEMENT,	! start element
     &		END_ELEMENT,	! end element
     &		OLD_FLN_COMPROC,! flowline command procedure
     &		FLN_PRIORITY)	! flowline priority
C
C Set new command procedure to be, initially, the same as the old one
C This allows for the case when the user does not alter it.
C
	      NEW_FLN_COMPROC = OLD_FLN_COMPROC
C
C Test if the flowline actually exists, if it does, output the
C information on the form
C
	      IF (EXISTS) THEN
C
C Tell the user
C
	         CALL FORM_PUTMSG('Flowline definition exists',0,0)
C
C Output each field value
C
	         CALL FDV$PUT(FLN_ID,'FLOWLINE_ID')
	         CALL FDV$PUT(START_ELEMENT,'START_ELEMENT_ID')
	         CALL FDV$PUT(END_ELEMENT,'END_ELEMENT_ID')
	         CALL FDV$PUT(OLD_FLN_COMPROC,'COMPROC')
C
	         CALL EXPAND('%WS%I2',FVAL,FLN_PRIORITY)
	         CALL FDV$PUT(FVAL,'PRIORITY')
	      ENDIF
	   ENDIF
C
C Start element
C
	ELSEIF (FID.EQ.'START_ELEMENT_ID') THEN
	   START_ELEMENT = FVAL
C
C End element
C
	ELSEIF (FID.EQ.'END_ELEMENT_ID') THEN
	   END_ELEMENT = FVAL
C
C Priority
C
	ELSEIF (FID.EQ.'PRIORITY') THEN
C
C Set decode pointer to field value prior to reading number
C
	   CALL SETAUX(%REF(FVAL),20)
C
C Read the number
C
	   IF (RDINT(FLN_PRIORITY)) THEN
	      CALL FORM_PUTMSG('Illegal priority',-1,0)
	      GOTO 10
	   ENDIF
C
C Command procedure
C
	ELSEIF (FID.EQ.'COMPROC') THEN
	   NEW_FLN_COMPROC = FVAL
	ENDIF
C
C If GOLD D (delete entry) key sequence was used, attempt to 
C delete the flowline
C
	IF ((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &	    (TERM.EQ.(GOLD_BASE + ICHAR('d')))) THEN
C
C Prompt user to make sure deletion is required
C
15	   CREATE_FLOWLINE_DEFINITION = FORM_GETLINE(
     &		RESPONSE,
     &		TERM,
     &		0,
     &		'Delete flowline definition from database (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	   IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_FLOWLINE_DEFINITION,0)
	      GOTO 15
	   ENDIF
C
C Clear the message lines on the screen
C
	   CALL CLEAR_MESSAGE_LINES()
C
C Check if response is 'Y...', return to allow field re-entry if it
C is not.
C
	   IF ( (RESPONSE(1:1).NE.'Y').AND.
     &		(RESPONSE(1:1).NE.'y')) GOTO 10
C
C Delete entry from database
C
	   CREATE_FLOWLINE_DEFINITION = FLN_DEFINE_FLOWLINE(
     &		FLN_ID,		! flowline to be deleted
     &		START_ELEMENT,	! initial element (dummy - not used)
     &		END_ELEMENT,	! final element (dummy - not used)
     &		NEW_FLN_COMPROC,! command procedure (dummy - not used)
     &		FLN_PRIORITY,	! priority (dummy - not used)
     &		.TRUE.)		! delete only flag .T. so del flowline
C
C Check for, and report, any errors.
C If an error occurs, return to allow re-entry of information.
C
	   IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
C
C No such flowline
C
	      IF (CREATE_FLOWLINE_DEFINITION.EQ.FLN__NOSUCHFLN) THEN
	         CALL FORM_PUTMSG('No such flowline',-1,0)
	         FID = 'FLOWLINE_ID'
C
C Illegal priorities
C
	      ELSEIF (CREATE_FLOWLINE_DEFINITION.EQ.FLN__ILLEGPRI) THEN
	         CALL FORM_PUTMSG('Illegal priority',-1,0)
	         FID = 'PRIORITY'
C
C Unrecognised error
C
	      ELSE
	         CALL LCONT_PUTMSG(LSC__UNDELFLN,0)
	         CALL LCONT_ADDMSG(CREATE_FLOWLINE_DEFINITION,0)
	         CALL FORM_PUTMSG('Try re-entering information',-1,0)
	         FID = 'FLOWLINE_ID'
	      ENDIF
C
C Repeat the loop to retry entry
C
	      GOTO 10
	   ENDIF
C
C Otherwise, the delete has succeeded, so exit from this form,
C and move up to previous menu
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
	ENDIF
C
C Process the terminator
C
	CALL FDV$PFT
C
C Find the status, i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Determine the next field to be entered
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.RETURN_KEY) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C Return key (finish form) was used so go on and allow user to edit
C the command procedure and delete any old command procedure as 
C appropriate
C
C Clear flag to indicate EDT has not yet been used
C
	USED_EDT = .FALSE.
C
C Check if user wants to edit the command procedure with EDT
C
20	CREATE_FLOWLINE_DEFINITION = FORM_GETLINE(
     &		RESPONSE,
     &		TERM,
     &		0,
     &		'Edit command procedure (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	   CALL LCONT_PUTMSG(CREATE_FLOWLINE_DEFINITION,0)
	   GOTO 20
	ENDIF
C
C Clear the message lines on the screen
C
	CALL CLEAR_MESSAGE_LINES()
C
C Check if response is 'Y...', and allow editing of file if it is.
C
	IF ((RESPONSE(1:1).EQ.'Y').OR.(RESPONSE(1:1).EQ.'y')) THEN
C
C Mark form as undisplayed, prior to editing with EDT
C
	   CALL FDV$NDISP
C
C Edit the command procedure
C
	   CREATE_FLOWLINE_DEFINITION = EDIT_FILE(NEW_FLN_COMPROC)
C
C Check for errors, report, refresh screen, redisplay form and loop 
C back to allow user to re-enter details on form or exit without editing
C
	   IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_FLOWLINE_DEFINITION,0)
	      CALL FDV$DISPW
	      GOTO 10
	   ENDIF
C
C Set flag to indicate EDT has been used
C
	   USED_EDT = .TRUE.
C
C Restore the FMS screen, by clearing it, refreshing it, and then 
C exiting, so leaving the way clear for the menu to be redisplayed.
C
	   CALL FDV$RFRSH
	ENDIF
C
C Find out if the flowline command procedure spec has been altered,
C and whether there was an old command procedure spec
C
	IF ( (OLD_FLN_COMPROC.NE.NEW_FLN_COMPROC).AND.
     &	     (OLD_FLN_COMPROC.NE.' ')) THEN
C
C If EDT has been used, redisplay the form
C
	   IF (USED_EDT) CALL FDV$DISPW
C
C And clear flag to indicate that the effects of EDT on the screen
C are nolonger hanging around
C
	   USED_EDT = .FALSE.
C
C Ask if user wants to delete the existing command procedure
C
30	   CREATE_FLOWLINE_DEFINITION = FORM_GETLINE(
     &		RESPONSE,
     &		TERM,
     &		0,
     &		'Delete previous command procedure (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	   IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_FLOWLINE_DEFINITION,0)
	      GOTO 30
	   ENDIF
C
C Clear the message lines on the screen, if they need it
C
	   CALL CLEAR_MESSAGE_LINES()
C
C Check if response is 'Y...', and delete file if it is.
C
	   IF ((RESPONSE(1:1).EQ.'Y').OR.(RESPONSE(1:1).EQ.'y')) THEN
	      CREATE_FLOWLINE_DEFINITION = 
     &			LIB$DELETE_FILE(OLD_FLN_COMPROC)
C
C Check for errors, report and loop back to allow user to change
C form entry, or exit without deleting
C
	      IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	         CALL LCONT_PUTMSG(CREATE_FLOWLINE_DEFINITION,0)
	         GOTO 10
	      ENDIF
	   ENDIF
	ENDIF
C
C Attempt to output new definition to the database
C
	CREATE_FLOWLINE_DEFINITION = FLN_DEFINE_FLOWLINE(
     &		FLN_ID,		! flowline to be deleted
     &		START_ELEMENT,	! initial element 
     &		END_ELEMENT,	! final element 
     &		NEW_FLN_COMPROC,! command procedure 
     &		FLN_PRIORITY,	! priority 
     &		.FALSE.)	! delete only flag .T. so del flowline
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of definition.
C
	IF (.NOT.CREATE_FLOWLINE_DEFINITION) THEN
	   CALL LCONT_PUTMSG(LSC__UNDEFFLN,0)
	   CALL LCONT_ADDMSG(CREATE_FLOWLINE_DEFINITION,0,0)
C
C If EDT has been used, redisplay the form
C
	   IF (USED_EDT) CALL FDV$DISPW
C
C And clear flag to indicate that the effects of EDT on the screen
C are nolonger hanging around
C
	   USED_EDT = .FALSE.
C
C Go back to allow reentry of form information
C
	   GOTO 10
	ENDIF
C
C Set semaphore to indicate that we want to re-enter the system deftn 
C menu
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
900	RETURN
	END
C
