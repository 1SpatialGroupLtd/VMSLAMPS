C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-28 18:51:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CHECK_AUTHORISATION()
C
***	MODULE CHECK_AUTHORISATION
***	IDENT 27JA93
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to determine if user/workstation combination has
C authorisation to carry operations specified by command line
C qualifiers used.
C i.e. checks on :
C	/MANAGE that user is a manager
C	/REPORT that user allowed to get reports
C	/NOTIFY with /JOB_ID that user is entitled to start a job
C	/NOTIFY with /SESSION_ID
C	/REQUEST
C	/MENU that user/workstation allowed menus (e.g. batch, hardcopy)
C
C Also determines and places in common block variables the current
C operator id and workstation id
C
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C w/s
	LOGICAL	      EXISTS	! yes/no op/wkst known to db
	LOGICAL       AUTH	! yes/no authorisation on db
	CHARACTER*20  AUTH_ID	! specific operation wanted
	CHARACTER*2   AUTH_TYPE	! specifies interested in 
				! authorisation for database access
C
C functions
C
	INTEGER	FIND_OPERATOR_ID
	INTEGER FIND_WORKSTATION_ID
	INTEGER FLN_CHECK_OPERATOR_AUTH
	INTEGER FLN_CHECK_WORKSTATION_AUTH
	INTEGER FLN_CHECK_OPERATOR
	INTEGER FLN_CHECK_WORKSTATION
C
C Assume success
C
	CHECK_AUTHORISATION = LSC__NORMAL
C
C Find out operator identification (i.e. process name), placing it in
C common block variable 
C
	CHECK_AUTHORISATION =
     &		FIND_OPERATOR_ID(OPERATOR_ID,OPERATOR_ID_LEN)
C
C Check for errors
C
	IF (.NOT.CHECK_AUTHORISATION) THEN
	   CALL LCONT_PUTMSG(LSC__UNDETOPER,0)
	   CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	   GOTO 950
	ENDIF
C
C Find out workstation identification, placing in common block variable
C
	CHECK_AUTHORISATION =
     &		FIND_WORKSTATION_ID(WORKSTATION_ID,WORKSTATION_ID_LEN)
C
C Check for errors
C
	IF (.NOT.CHECK_AUTHORISATION) THEN
	   CALL LCONT_PUTMSG(LSC__UNDETWKS,0)
	   CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	   GOTO 950
	ENDIF
C
C If we have had the user authorisation logical then we can skip the
C authorisation checks
	IF (HAD_USER_AUTH.AND.HAD_FAST) GOTO 950
C
C Progress message output to title page
	IF (MENU) CALL FDV$PUT('Checking operator authorisation...',
     &		'CHECK_OP_AU')
C
C Determine that the operator is known to the database
C
	CHECK_AUTHORISATION = FLN_CHECK_OPERATOR(OPERATOR_ID,EXISTS)
C
C Check for errors
C
	IF (.NOT.CHECK_AUTHORISATION) THEN
	   CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	   CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	   GOTO 950
	ENDIF
C
C Check if operator exists
C
	IF (.NOT.EXISTS) THEN
	   CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	   CALL LCONT_ADDMSG(LSC__UNKNOWNOP,0)
	   CHECK_AUTHORISATION = LSC__NOAUTH
	   GOTO 950
	ENDIF
C
C Determine that the workstation is known to the database
C
	IF (MENU) CALL FDV$PUT('Checking workstation authorisation...',
     &		'CHECK_WK_AU')
	CHECK_AUTHORISATION=FLN_CHECK_WORKSTATION(WORKSTATION_ID,EXISTS)
C
C Check for errors
C
	IF (.NOT.CHECK_AUTHORISATION) THEN
	   CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	   CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	   GOTO 950
	ENDIF
C
C Check if workstation exists
C
	IF (.NOT.EXISTS) THEN
	   CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	   CALL LCONT_ADDMSG(LSC__UNKNOWNWKS,0)
	   CHECK_AUTHORISATION = LSC__NOAUTH
	   GOTO 950
	ENDIF
C
C New get on with finding is operator/workstation allowed to do 
C LAMPSCONTROL commands specified
C
C Set up authorisation type to show interested in accessing database
C
	AUTH_TYPE = 'DB'
C
C Examine qualifier combination and determine authorisation id which
C indicates specific operation required
C
C Check, if using menus, that operator allowed to do so.
C Progress message output to title page.
C
	IF (MENU) THEN
	   CALL FDV$PUT('Checking combined authorisations...','CHECK_CO_AU')
	   CHECK_AUTHORISATION =
     &		FLN_CHECK_OPERATOR_AUTH(
     &			AUTH_TYPE,		! specifies db
     &			OPERATOR_ID,		! operator
     &			'MENU',			! able to do menus ?
     &			AUTH)			! authorised .T./.F.
C
C Deal with failure
C
	   IF ((.NOT.CHECK_AUTHORISATION).OR.(.NOT.AUTH)) THEN
	      CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	      IF (.NOT.CHECK_AUTHORISATION) 
     &			CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	      CHECK_AUTHORISATION = LSC__NOAUTH
	      GOTO 950
	   ENDIF
C
C Check, if using menus, that workstation allowed to do so
C Progress message output to title page.
C
	   CHECK_AUTHORISATION =
     &		FLN_CHECK_WORKSTATION_AUTH(
     &			AUTH_TYPE,		! specifies db
     &			WORKSTATION_ID,		! operator
     &			'MENU',			! able to do menus ?
     &			AUTH)			! authorised .T./.F.
C
C Deal with failure
C
	   IF ((.NOT.CHECK_AUTHORISATION).OR.(.NOT.AUTH)) THEN
	      CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	      IF (.NOT.CHECK_AUTHORISATION) 
     &			CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	      CHECK_AUTHORISATION = LSC__NOAUTH
	      GOTO 950
	   ENDIF
	ENDIF
C
C
C Now check for other forms of authorisation
C
	AUTH_ID = ' '
	IF (REQUEST) AUTH_ID = 'REQUEST'
	IF (MANAGE)  AUTH_ID = 'MANAGE'
	IF (REPORT)  AUTH_ID = 'REPORT'
	IF (NOTIFY_PROJECT) AUTH_ID = 'MANAGE'
	IF (NOTIFY_JOB) AUTH_ID = 'MANAGE'
	IF (NOTIFY_SESSION) AUTH_ID = 'REQUEST'
C
C If none of the above (just want top level) then nothing to check
	IF (AUTH_ID.EQ.' ') GOTO 950
C
C Check that operator allowed to do operation
C
	CHECK_AUTHORISATION =
     &		FLN_CHECK_OPERATOR_AUTH(
     &			AUTH_TYPE,		! specifies db
     &			OPERATOR_ID,		! operator
     &			AUTH_ID,		! able to do menus ?
     &			AUTH)			! authorised .T./.F.
C
C Deal with failure
C
	   IF ((.NOT.CHECK_AUTHORISATION).OR.(.NOT.AUTH)) THEN
	      CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	      IF (.NOT.CHECK_AUTHORISATION) 
     &			CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	      CHECK_AUTHORISATION = LSC__NOAUTH
	      GOTO 950
	   ENDIF
C
C Check that workstation allowed to do operation
C
	CHECK_AUTHORISATION =
     &		FLN_CHECK_WORKSTATION_AUTH(
     &			AUTH_TYPE,		! specifies db
     &			WORKSTATION_ID,		! operator
     &			AUTH_ID,		! able to do menus ?
     &			AUTH)			! authorised .T./.F.
C
C Deal with failure
C
	   IF ((.NOT.CHECK_AUTHORISATION).OR.(.NOT.AUTH)) THEN
	      CALL LCONT_PUTMSG(LSC__NOAUTH,0)
	      IF (.NOT.CHECK_AUTHORISATION) 
     &			CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
	      CHECK_AUTHORISATION = LSC__NOAUTH
	      GOTO 950
	   ENDIF
C
C Authorisation has succeeded, so exit
C
CCC	GOTO 950
C
C Deal with errors
C If there has been a specific error code, set one up
C
CCC900	CALL LCONT_PUTMSG(LSC__NOAUTH,0)
C
CCC	IF (CHECK_AUTHORISATION) THEN
CCC	   CHECK_AUTHORISATION = LSC__NOAUTH
C
C Now say unable to authorise requested LAMPSCONTROL operation
C if there was no specific error code, message will already have been
C output
C
CCC	ELSE
CCC	   CALL LCONT_ADDMSG(CHECK_AUTHORISATION,0)
CCC	ENDIF
C
C Exit
C
950	RETURN
	END
