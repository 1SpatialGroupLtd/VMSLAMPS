C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 12:53:16.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_PARAMETERS_FORM
     &		(PARAM_NAME,NUM_PARAMS,PARAMS,TERM)
C
***	MODULE GET_PARAMETERS_FORM
***	IDENT 29SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			14 September 1988
C
C Routine to accept up to 16 strings to be used as parameters for
C passing to tasks.
C This routine will be called when session notification is carried
C out using a form, and is designed to replace the functions of the
C /LOCAL_PARAMETERS, /GLOBAL_PARAMETERS and /EXTERNAL_PARAMTERS
C qualifiers on the notification command line.
C 
C The arguments are as follows
C
C	PARAM_NAME	String describing parameters for inclusion
C			in title. eg:
C				'Local Parameters'
C				'Global Parameters'
C				'External Parameters'
C
C	NUM_PARAMS	Number of parameters
C
C	PARAMS		String array to recieve parameters
C
C	TERM		Terminator used to end entry of data on form
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	PARAM_NAME	! string to be included in title
	INTEGER		NUM_PARAMS	! number of parameters
	CHARACTER*(*)	PARAMS(16)	! parameters input
	INTEGER		TERM		! terminator used to complete
					! form
C
C workspace
	CHARACTER*1400	FVAL		! field values
	CHARACTER*100	TITLE		! form title
	INTEGER		FIELD_INDEX	! index to current field
	INTEGER		PARAM_INDEX	! index to current param entry
	INTEGER		OFFSET		! offset in concatenated field
					! string of current field
	INTEGER		I		! temporary index
C
C functions
	INTEGER		SIGCHS
	INTEGER		CENTRE_STRING
C
C Assume success
C
	GET_PARAMETERS_FORM = LSC__NORMAL
C
C Mark previous menu as unusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Load the parameter form in workspace
C
	CALL FDV$LOAD('PARAMETER_FORM')
C
C Prepare title string
C
	CALL CENTRE_STRING(PARAM_NAME,70,TITLE)
C
C Output title
C
	CALL FDV$PUT(TITLE,'TITLE')
C
C If there are any existing parameters in array, output them
C
	IF (NUM_PARAMS.GT.0) THEN
	   DO 5 I = 1, MIN(16,NUM_PARAMS)
	      CALL FDV$PUT(PARAMS(I),'PARAMETER',I)
5	   CONTINUE
	ENDIF
C
C Display the form
C
	CALL FDV$DISPW
C
C Now get all the fields on form
C
	CALL FDV$GETAL(FVAL,TERM)
C
C Intialise indexes pointing field entries and parameter array entries
C
	FIELD_INDEX = 1
	PARAM_INDEX = 1
	NUM_PARAMS  = 0
C
C Transfer field values (each 70 chars) to parameter array
C Remember that title field will also be returned, so ignore
C first 70 characters
C
10	IF (FIELD_INDEX.LE.16) THEN
C
C Calculate base of next field as offset in string of all fields
C
	   OFFSET = (FIELD_INDEX) * 70 + 1
C
C If field is not blank, transfer it to an entry in the parameter array
C and increment index into parameter array
C
	   IF (SIGCHS(FVAL(OFFSET:(OFFSET+69))).NE.0) THEN
	      PARAMS(PARAM_INDEX) = FVAL(OFFSET:(OFFSET+69))
	      PARAM_INDEX = PARAM_INDEX + 1
	      NUM_PARAMS  = NUM_PARAMS  + 1
	   ENDIF
C
C Increment field index to point at next field
C
	   FIELD_INDEX = FIELD_INDEX + 1
C
C Loop to get next field
C
	   GOTO 10
	ENDIF
C
C Exit
C
	RETURN
	END
