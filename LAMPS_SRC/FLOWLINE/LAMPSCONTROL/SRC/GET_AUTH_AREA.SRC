C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 11:59:44.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_AUTH_AREA(
     &		ID, MAX_NUM_REC, AUTH_REC, NUM_REC, CURRENT_REC, TERM)
C
***	MODULE GET_AUTH_AREA
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			11 May 1988
C
C
C Function to get set of authorisations from scrolled area of
C operator or workstation authorisation forms as part of LAMPSCONTROL
C
C This routine assumes that any existing authorisations are already
C displayed.
C
C
	IMPLICIT NONE
C
C Common and parameter blocks
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.STR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
C
C arguments
	CHARACTER*(*)	ID		! workstation/operator ident
	INTEGER		MAX_NUM_REC	! maximum possible records
	INTEGER		NUM_REC		! number of records present
	INTEGER		CURRENT_REC	! current record being entered
	INTEGER		TERM		! terminator used to exit
C
	RECORD /FLN_AUTH/ AUTH_REC(FLN_MAX_AUTH)! authorisation records
C
C w/s
	INTEGER		TOP_REC		! ptr to top line, in AUTH_REC
	INTEGER		BOTTOM_REC	! ptr to bottom CURRENT_REC
	CHARACTER*100	FVAL		! field (line) value
	CHARACTER*20	FID		! field identifier
	INTEGER		I		! temporary count
	INTEGER		J		! temporary count
C
C
C Assume success
C
	GET_AUTH_AREA = LSC__NORMAL
C
C Set initial first line, will be current line
C
	TOP_REC = CURRENT_REC
C
C Set intial bottom line, will be top line + 4, or last line in AUTH_REC
C containing entry. If there are no current entries, will be 0.
C
	BOTTOM_REC = MIN ((TOP_REC + AUTH_AREA_LEN-1), MAX(NUM_REC,0) )
C
C Get contents of current line of scrolled area
C
10	CALL FDV$GETSC('AUTH_TYPE',FVAL,TERM)
C
C Clear any messages from message lines at bottom of screen
C
	CALL CLEAR_MESSAGE_LINES()
C
C Transfer values to current authorisation record
C
C Authorisation type
C
	AUTH_REC(CURRENT_REC).TYPE(1:1) = FVAL(1:1)
	AUTH_REC(CURRENT_REC).TYPE(2:2) = FVAL(2:2)
C
C Negatable flag
C
	AUTH_REC(CURRENT_REC).YES_NO = FVAL(3:3)
CCC	AUTH_REC(CURRENT_REC).YES_NO = .FALSE.
CCC
CCC	IF (FVAL(3:3).EQ.'Y') AUTH_REC(CURRENT_REC).YES_NO = .TRUE.
C
C Authorisation id
C
	AUTH_REC(CURRENT_REC).ID = FVAL(4:23)
C
CCC	DO 20 I = 1,20
CCC	   AUTH_REC(CURRENT_REC).ID(I:I) = FVAL((I+3):(I+3))
CCC20	CONTINUE
C
C Now check if the bottom line needs increasing - i.e. if have just
C extended the authorisation list by adding this entry
C If need to, move the bottom line down and increment the number of
C records. This is tedious but necessary.
C
	IF (BOTTOM_REC.LT.CURRENT_REC) THEN
	   BOTTOM_REC = CURRENT_REC
	ENDIF
C
	IF (NUM_REC.LT.CURRENT_REC) THEN
	   NUM_REC = CURRENT_REC
	ENDIF
C
C Now examine the terminator used, and determine if it is legal,
C and act on it.
C
C---------------------------------------------------------------------
C Check for 'GOLD D', 'GOLD d' ie delete line
C
	IF ((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &	    (TERM.EQ.(GOLD_BASE + ICHAR('d')))) THEN
C
C Delete record from contents of authorisation array
C
	   DO 25 I = CURRENT_REC, NUM_REC - 1
C
C Transfer all records following the one deleted to the record before
C them in the array
C
	      AUTH_REC(I).TYPE(1:1) = AUTH_REC(I+1).TYPE(1:1)
	      AUTH_REC(I).TYPE(2:2) = AUTH_REC(I+1).TYPE(2:2)
C
	      AUTH_REC(I).YES_NO = AUTH_REC(I+1).YES_NO
C
	      AUTH_REC(I).ID = AUTH_REC(I+1).ID
C
CCC	      DO 22 J = 1,20
CCC	         AUTH_REC(I).ID(J:J) = AUTH_REC(I+1).ID(J:J)
CCC22	      CONTINUE
C
25	   CONTINUE
C
C Set the old last record to null, doing this ensures
C that if old last record was in the display area, then
C its line will be overlayed with the null contents
C
	   AUTH_REC(NUM_REC).TYPE = '  '
	   AUTH_REC(NUM_REC).YES_NO = 'N'
CCC	   AUTH_REC(NUM_REC).YES_NO = .FALSE.
	   AUTH_REC(NUM_REC).ID = ' '
C
C Decrease the number of record.
C
	   NUM_REC = NUM_REC - 1
C
C Now redisplay the lines from the current one downwards
C
	   I = CURRENT_REC
C
27	   IF (I.LE.BOTTOM_REC) THEN
C
C Put new record into the current line
C
	      CALL FDV$PUT(AUTH_REC(I).TYPE,'AUTH_TYPE')
	      CALL FDV$PUT(AUTH_REC(I).ID,'AUTH_ID')
C
CCC	      IF (AUTH_REC(I).YES_NO) THEN
CCC	         CALL FDV$PUT('Y','NEGATABLE')
CCC	      ELSE
CCC	         CALL FDV$PUT('N','NEGATABLE')
CCC	      ENDIF
C
	      CALL FDV$PUT(AUTH_REC(I).YES_NO,'NEGATABLE')
C
C If there is a next line, move down to it
C
	      IF (I.LT.BOTTOM_REC) CALL FDV$PFT(DOWN_ARROW)
C
C Increase line number being altered to point to next line
C
	      I = I + 1
C
C Loop for next line
C
	      GOTO 27
	   ENDIF
C
C Now move back up
C
	   I = I - 1
C
28	   IF (I.GT.CURRENT_REC) THEN
	      CALL FDV$PFT(UP_ARROW)
	      I = I - 1
	      GOTO 28
	   ENDIF
C
C Ensure that, if the original final record was displayed, then
C the new bottom displayed record has the correct value
C
	   IF (BOTTOM_REC.GT.NUM_REC) BOTTOM_REC = NUM_REC
C
C---------------------------------------------------------------------
C Check for down arrow
C
	ELSEIF (TERM.EQ.DOWN_ARROW) THEN
C
C Determine if any more lines available
C
	   IF (CURRENT_REC.EQ.MAX_NUM_REC) THEN
	      CALL FORM_PUTMSG('No next line',-1,0)
C
C Determine if a response was entered in the current field
C
	   ELSEIF ((FVAL(1:1).EQ.' ').OR.(FVAL(2:2).EQ.' ')) THEN
	      CALL FORM_PUTMSG('Response required',-1,0)
C
C Determine if at bottom of scrolled area
C
	   ELSEIF ((CURRENT_REC.EQ.BOTTOM_REC).AND.
     &	       ((BOTTOM_REC - TOP_REC + 1).EQ.AUTH_AREA_LEN)) THEN
C
C At bottom of screen, and want to move down, 
C so determine line to scroll in
C
	      CURRENT_REC = CURRENT_REC + 1
	      BOTTOM_REC = CURRENT_REC
	      TOP_REC = TOP_REC + 1
C
C Check if at end of list, and feed in null line if we are
C
	      IF (CURRENT_REC.EQ.NUM_REC+1) THEN
	         FVAL = '  N                    '
C
C If not at end of list, then feed in the next one
C
	      ELSE
	         FVAL(1:1) = AUTH_REC(CURRENT_REC).TYPE(1:1)
	         FVAL(2:2) = AUTH_REC(CURRENT_REC).TYPE(2:2)
C
		 FVAL(3:3) = AUTH_REC(CURRENT_REC).YES_NO
C
CCC	         FVAL(3:3) = 'N'
CCC	         IF (AUTH_REC(CURRENT_REC).YES_NO) FVAL(3:3) = 'Y'
C
	         FVAL(4:23) = AUTH_REC(CURRENT_REC).ID
C
CCC	         DO 30 I = 1,20
CCC	            FVAL((I+3):(I+3)) = AUTH_REC(CURRENT_REC).ID(I:I)
CCC30	         CONTINUE
C
	      ENDIF
C
C Now scroll in the appropriate line
C
	      CALL FDV$PFT(TERM,'AUTH_TYPE',FVAL)
C
C Otherwise, we have a down arrow, but we are not at the bottom of
C the scrolled area
C
	   ELSE
	      CALL FDV$PFT(TERM)
	      CURRENT_REC = CURRENT_REC + 1
	   ENDIF
C
C---------------------------------------------------------------------
C Determine if have an up arrow terminator
C
	ELSEIF (TERM.EQ.UP_ARROW) THEN
C
C Determine if a response was entered in the current line's
C authorisation type field,
C if it is not last line, say that a response is required
C if it is the last line, and it is not '  N    ....' or
C '      ......', say that a repsonse is required.
C Any blank final line/entry will be trimmed off on exit
C from this routine
C
	   IF ( ((FVAL(1:1).EQ.' ').OR.
     &		 (FVAL(2:2).EQ.' ')).AND. 
     &		 ((CURRENT_REC.LT.NUM_REC).OR. 
     &		  ((FVAL.NE.'  N                    ').AND.
     &		   (FVAL.NE.'                       ')) ) ) THEN
	      CALL FORM_PUTMSG('Response required',-1,0)
C
C Check if at top of scrolled area
C
	   ELSEIF (CURRENT_REC.EQ.TOP_REC) THEN
C
C At top line, and want to move up, so determine if we can
C
	      IF (CURRENT_REC.EQ.1) THEN
	         CALL FORM_PUTMSG('No previous line',-1,0)
C
C Otherwise, allow to move up
C
	      ELSE
	         CURRENT_REC = CURRENT_REC - 1
	         TOP_REC = TOP_REC - 1
	         BOTTOM_REC = BOTTOM_REC - 1
C
C Put together the line to scroll up
C
	         FVAL(1:1) = AUTH_REC(CURRENT_REC).TYPE(1:1)
	         FVAL(2:2) = AUTH_REC(CURRENT_REC).TYPE(2:2)
C
		 FVAL(3:3) = AUTH_REC(CURRENT_REC).YES_NO
C
CCC	         FVAL(3:3) = 'N'
CCC	         IF (AUTH_REC(CURRENT_REC).YES_NO) FVAL(3:3) = 'Y'
C
	         FVAL(4:23) = AUTH_REC(CURRENT_REC).ID
C
CCC	         DO 40 I = 1,20
CCC	            FVAL((I+3):(I+3)) = AUTH_REC(CURRENT_REC).ID(I:I)
CCC40	         CONTINUE
C
C Now scroll up with the new line 
C
	         CALL FDV$PFT(TERM,'AUTH_TYPE',FVAL)
	      ENDIF
C
C Otherwise this is not top line, so just move up without scrolling
C
	   ELSE
	      CALL FDV$PFT(TERM)
	      CURRENT_REC = CURRENT_REC - 1
	   ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C Check if this is one of the exit from scrolled area terminators
C repeat this line if it isn't
C
	IF ((TERM.NE.ABORT_FORM).AND.
     &		(TERM.NE.RETURN_KEY).AND.
     &		(TERM.NE.EXIT_BACKWARDS)) GOTO 10
C
C---------------------------------------------------------------------
C Reposition cursor on first line of area
C
50	IF (CURRENT_REC.GT.TOP_REC) THEN
	   CALL FDV$PFT(UP_ARROW)
	   CURRENT_REC = CURRENT_REC -1
	   GOTO 50
	ENDIF
C
C---------------------------------------------------------------------
C Check for blank entry in last record(s)
C Trim it off if found. This can arise because someone is allowed
C to move up from final line without entering data on it.
C
60	IF ((NUM_REC.GT.0).AND.
     &	    ((AUTH_REC(NUM_REC).TYPE(1:1).EQ.' ').OR.
     &	     (AUTH_REC(NUM_REC).TYPE(2:2).EQ.' '))) THEN
	   NUM_REC = NUM_REC - 1
	   GOTO 60
	ENDIF
C
C Exit
C
	RETURN
	END

