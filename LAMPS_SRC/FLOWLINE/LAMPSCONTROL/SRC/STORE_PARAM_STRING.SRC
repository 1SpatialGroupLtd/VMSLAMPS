C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 10:11:42.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION STORE_PARAM_STRING(
     &		IN_STR,OUT_ARRAY,NUM,MAX)
C
***	MODULE STORE_PARAM_STRING
***	IDENT 04OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			14 September 1988
C
C Routine to split up parameter list of strings delimited by
C double quotes and separated by commas into separate array
C entries
C
	IMPLICIT NONE
C
C common blocks
CCC	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROL.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	IN_STR		! input string (list) to be
					! broken up into elements
	INTEGER		MAX		! maximum size of array
	CHARACTER*(*)	OUT_ARRAY(MAX)	! output array to receive
					! list elements
	INTEGER		NUM		! number currently in the
					! array, updated by this routine
C
C workspace
	LOGICAL		IN_QUOTES	! .T. if in " marks
	INTEGER		IN_LEN		! length of input string
	INTEGER		OUT_LEN		! output length (dummy)
	INTEGER		PTR		! current char in input string
	INTEGER		START_PTR	! start of element in input str
	CHARACTER*1	CHAR0		! current + 0th character
	CHARACTER*1	CHAR1		! current + 1st character
C
C functions
	INTEGER		SIGCHS
C
C Assume success
C
	STORE_PARAM_STRING = LSC__NORMAL
C
C Determine length of input string
C
	IN_LEN = SIGCHS(IN_STR)
C
C Initialise pointers to next character input string
C
	PTR = 0
C
C Move to next character
C
10	PTR = PTR + 1
C
C Check if we have reached end of string
C
	IF (PTR.LE.IN_LEN) THEN
C
C Get next character + a single character lookahead
C
	   CHAR0 = IN_STR(PTR:PTR)
C
	   IF ((PTR+1).LE.IN_LEN) THEN
	      CHAR1 = IN_STR((PTR+1):(PTR+1))
	   ELSE
	      CHAR1 = ' '
	   ENDIF
C
C Move past spaces or commas before start of item
C
	   IF (	(CHAR0.EQ.' ').OR.
     &		(CHAR0.EQ.',') ) THEN
	      GOTO 10
	   ENDIF
C
C Check if this item is delimited by double quotes
C Set up flag to indicate whether it is, and a pointer to the
C first character in the string (excluding the quotes)
C
	   IF (CHAR0.EQ.'"') THEN
	      IN_QUOTES = .TRUE.
	   ELSE
	      IN_QUOTES = .FALSE.
	   ENDIF
C
C Set up pointers to first character (including any " delimiter)
C
	   START_PTR = PTR
C
C Otherwise, we have reached end of string, so finish off
C
	ELSE
	   GOTO 800
	ENDIF
C
C Move to next character
C
20	PTR = PTR + 1
C
C Get next character + a single character lookahead
C
	IF (PTR.LE.IN_LEN) THEN
	   CHAR0 = IN_STR(PTR:PTR)
	ELSE
	   CHAR0 = ' '
	ENDIF
C
	IF ((PTR+1).LE.IN_LEN) THEN
	   CHAR1 = IN_STR((PTR+1):(PTR+1))
	ELSE
	   CHAR1 = ' '
	ENDIF
C
C Check that have not reached end of string or end of current element
C
C If not delimited by "
C
	IF	((PTR.LE.IN_LEN).AND.
     &		 (.NOT.(IN_QUOTES)).AND.
     &		 (CHAR0.NE.' ').AND.
     &		 (CHAR1.NE.',') ) THEN
C
	   GOTO 20
C
C If delimited by "
C
	ELSEIF	((PTR.LE.IN_LEN).AND.
     &		 (IN_QUOTES).AND.
     &		 (.NOT.((CHAR0.EQ.'"').AND.(CHAR1.NE.'"'))) ) THEN
C
C If have "" (two consecutive double quotes), then move past both,
C since they will later be changed into a single quote
C Do not move past them if the first quote was at the start of the
C string - that signifies a null string
C
	   IF (	(CHAR0.EQ.'"').AND.
     &		(CHAR1.EQ.'"').AND.
     &		(PTR.NE.START_PTR)) PTR = PTR + 1
C
C If there are any characters left, go round again
C
	   IF (PTR.LE.IN_LEN) GOTO 20
	ENDIF
C
C If element is not enclosed by "s, ensure pointer does not
C point at a space or a comma
C
	IF (.NOT.(IN_QUOTES)) PTR = PTR - 1
C
C Ensure that pointer does not point after end of string
C
	IF (PTR.GT.IN_LEN) PTR = IN_LEN
C
C If the current list entry contains at least on character, then
C put it in the output array
C
	IF (((.NOT.(IN_QUOTES)).AND.(START_PTR.LE.PTR)).OR.
     &	    ((IN_QUOTES).AND.(START_PTR.LE.(PTR-2))) ) THEN
C
C Check that there is some space left in the array
C warn the user if there is not
C
	   IF (NUM.GE.MAX) THEN
	      CALL LCONT_PUTMSG(LSC__TOOMNYPAR,0)
	      GOTO 800
C
C Otherwise, go on and make entry in array
C
	   ELSE
C
C Increment number of array entries
C
	      NUM = NUM + 1
C
C Make array entry, stripping off any double quotes as you do it
C
	      CALL STRIP_DOUBLE_QUOTES(
     &			IN_STR(START_PTR:PTR),
     &			(PTR - START_PTR + 1),
     &			OUT_ARRAY(NUM),
     &			OUT_LEN)
	   ENDIF
	ENDIF
C
C Loop to process next entry
C
	GOTO 10
C
C Finish off the processing of the list elements
C
800	CONTINUE
C
C Exit
C
	RETURN
	END
