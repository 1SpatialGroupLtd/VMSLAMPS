C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 14:09:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION LOG_ENTRY(ERROR,MSG)
C
***	MODULE LOG_ENTRY
***	IDENT 27SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Function to make entry in (possibly shared) flowline control
C system abnormal event log file
C Will retry a number of times if fails to open the log file
C Any errors encountered in this routine are not reported
C since this routine forms part of the error reporting
C system of LAMPSCONTROL
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C functions
	INTEGER		SIGNCH		! signif chars in string
	INTEGER		FLWSVL		! save lun of current file
	INTEGER		OPEN_LOG_FILE	! open log file
	INTEGER		FIND_LOG_DETAILS! find details for log
	INTEGER		CLOSE_LOG_FILE	! close log file
	INTEGER		FLWSEL		! reselect original file
C
C arguments
	INTEGER		ERROR		! error being logged
	CHARACTER*(*)	MSG		! message being logged
C
C w/s
	INTEGER		SAVELUN		! lun of previous open file
C
	CHARACTER*40	TIME		! time stamp for log entry
	CHARACTER*20	USER		! current user		
	CHARACTER*20	WKS		! current workstation
	CHARACTER*100	PROCESS		! current process name
	CHARACTER*255	ACTION		! what was being done
	CHARACTER*20	PROJECT		! project if session error
	CHARACTER*20	JOB		! job if session error
	CHARACTER*20	ELEM		! element if session error
	CHARACTER*100	PROBLEM		! problem if session error
C
C Assume success
C
	LOG_ENTRY = LSC__NORMAL
C
C Save current open file lun for writing
C
	IF (.NOT.FLWSVL(SAVELUN)) SAVELUN = 0
C
C Open the file, specifying as an argument the number of retries to
C do if the file is locked by another user and the number of seconds
C to wait between retries
C
	IF (.NOT.OPEN_LOG_FILE(50,5)) GOTO 900
C
C Now find out the details of the current USERator, workstation,
C process and time. This is done independently by this routine
C even though the information may be present in common block
C variables to ensure its integrity.
C
	CALL FIND_LOG_DETAILS(
     &		ERROR,		! error causing the problem
     &		TIME,		! time
     &		USER,		! current user
     &		WKS,		! current workstation
     &		PROCESS,	! current process 
     &		ACTION,		! what was being done with LAMPSCONTROL
     &		PROJECT,	! current project if ntfy proj,job,sess
     &		JOB,		! current job if notify job, session
     &		ELEM,		! current element if notify session
     &		PROBLEM)	! problem text from notify
C
C Now write the error messages to the file
C
	CALL FLWRTF(MSG)
	CALL FLWRTF('Time          %S',TIME)
	CALL FLWRTF('User          %S',USER)
	CALL FLWRTF('Workstation   %S',WKS)
	CALL FLWRTF('Operation     %S',ACTION(1:SIGNCH(ACTION)))
	CALL FLWRTF('Process       %S',PROCESS(1:SIGNCH(PROCESS)))
C
C Now check if the message was concerned with notification
C
	IF (NOTIFY) THEN
C
C If it was session output details of project, job and element
C
	   IF (NOTIFY_SESSION) THEN
	      CALL FLWRTF(' ')
	      CALL FLWRTF('Project       %S',PROJECT)
	      CALL FLWRTF('Job           %S',JOB)
	      CALL FLWRTF('Element       %S',ELEM)
C
C If it was job, output details of project and job
C
	   ELSEIF (NOTIFY_JOB) THEN
	      CALL FLWRTF(' ')
	      CALL FLWRTF('Project       %S',PROJECT)
	      CALL FLWRTF('Job           %S',JOB)
C
C If it was project, output details of project
C
	   ELSEIF (NOTIFY_PROJECT) THEN
	      CALL FLWRTF(' ')
	      CALL FLWRTF('Project       %S',PROJECT)
	   ENDIF
C
C If there was a problem string, and there was an unsuccessful
C completion to the session or creation attempt, output details of it
C
	   IF ((NOTIFY_PROBLEM).AND.
     &		((NOTIFY_CREATION_RESULT.EQ.CREATION_FAILURE).OR.
     &		 (NOTIFY_SESSION_RESULT .EQ.TASK_ERROR).OR.
     &		 (NOTIFY_SESSION_RESULT .EQ.TASK_RESTART)) ) THEN
	      CALL FLWRTF('Problem       %S',PROBLEM(1:SIGNCH(PROBLEM)))
	   ENDIF
	ENDIF
C
C Output blank lines
C
	CALL FLWRTF(' ')
	CALL FLWRTF(' ')
C
C Close log file
C
	CALL CLOSE_LOG_FILE()
C
C Reselect orginal file if there was one
C
	IF (SAVELUN.NE.0) CALL FLWSEL(SAVELUN)
C
C Exit
C
900	RETURN
	END
