C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 12:50:34.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CREATE_SYSTEM_DEFINITION()
C
***	MODULE CREATE_SYSTEM_DEFINITION
***	IDENT 02SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 September 1988
C
C Routine to allow the user to enter, on the SYSTEM_DEFINITION_FORM, 
C details of the system command procedure file specification and to
C edit that file, with callable EDT, if required.
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
C
C workspace
	CHARACTER*255	NEW_SYS_COMPROC	! new system command procedure
	CHARACTER*255	OLD_SYS_COMPROC	! old system command procedure
	LOGICAL		EXISTS		! .T. if system com. proc.
					! already present in db
	CHARACTER*100	RESPONSE	! response to a form prompt
	INTEGER		TERM		! form field temerminator
	CHARACTER*100	FVAL		! form field value
	LOGICAL		USED_EDT	! .T. if edited with EDT
C
C functions
	INTEGER		FLN_RETRIEVE_SYSTEM_DEF
	INTEGER		FLN_DEFINE_SYSTEM
	INTEGER		FORM_GETLINE
	INTEGER		EDIT_FILE
	INTEGER		LIB$DELETE_FILE
C
C Assume success
C
	CREATE_SYSTEM_DEFINITION = LSC__NORMAL
C
C Clear the screen and display the form
C
	CALL FDV$CLRSH('SYSTEM_DEFINITION_FORM')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now attempt to retrieve the system command procedure from the database
C
	CREATE_SYSTEM_DEFINITION = FLN_RETRIEVE_SYSTEM_DEF(
     &		EXISTS,		! .T. if system com. proc. is present
     &		OLD_SYS_COMPROC)! system com proc specification
C
C Check for, and report, any errors.
C If an error occurs, exit from routine.
C Set semaphore to indicate that we want to re-enter the system def menu
C
	   IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_SYSTEM_DEFINITION,0)
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 900
	   ENDIF
C
C Output command procedure, if it exists, to the field in the form
C
	IF (EXISTS) CALL FDV$PUT(OLD_SYS_COMPROC,'COMPROC')
C
C Allow the user to alter the field
C
10	CALL FDV$GET(NEW_SYS_COMPROC,TERM,'COMPROC')
C
C Clear the message lines on the screen, if they need it
C
	CALL CLEAR_MESSAGE_LINES()
C
C Check if an appropriate terminator has been used
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C Clear flag to indicate EDT has not yet been used
C
	   USED_EDT = .FALSE.
C
C Check if user wants to edit the command procedure with EDT
C
20	   CREATE_SYSTEM_DEFINITION = FORM_GETLINE(
     &		RESPONSE,
     &		TERM,
     &		0,
     &		'Edit command procedure (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	   IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	      CALL LCONT_PUTMSG(CREATE_SYSTEM_DEFINITION,0)
	      GOTO 20
	   ENDIF
C
C Check if response is 'Y...', and allow editing of file if it is.
C
	   IF ((RESPONSE(1:1).EQ.'Y').OR.(RESPONSE(1:1).EQ.'y')) THEN
C
C Mark form as undisplayed, prior to editing with EDT
C
	      CALL FDV$NDISP
C
C Edit the command procedure
C
	      CREATE_SYSTEM_DEFINITION = EDIT_FILE(NEW_SYS_COMPROC)
C
C Check for errors, report, refresh screen, redisplay form and loop 
C back to allow user to re-enter details on form or exit without editing
C
	      IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	         CALL LCONT_PUTMSG(CREATE_SYSTEM_DEFINITION,0)
	         CALL FDV$DISPW
	         GOTO 10
	      ENDIF
C
C Set flag to indicate EDT has been used
C
	      USED_EDT = .TRUE.
C
C Restore the FMS screen, by clearing it, refreshing it, and then 
C exiting, so leaving the way clear for the menu to be redisplayed.
C
	      CALL FDV$RFRSH
	   ENDIF
C
C Find out if the system command procedure spec has been altered
C
	   IF (OLD_SYS_COMPROC.NE.NEW_SYS_COMPROC) THEN
C
C If EDT has been used, redisplay the form
C
	      IF (USED_EDT) CALL FDV$DISPW
C
C Ask if user wants to delete the existing command procedure
C
30	      CREATE_SYSTEM_DEFINITION = FORM_GETLINE(
     &			RESPONSE,
     &			TERM,
     &			0,
     &			'Delete previous command procedure (Y/N) ? ')
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of response.
C
	      IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	         CALL LCONT_PUTMSG(CREATE_SYSTEM_DEFINITION,0)
	         GOTO 30
	      ENDIF
C
C Check if response is 'Y...', and delete file if it is.
C
	      IF ((RESPONSE(1:1).EQ.'Y').OR.(RESPONSE(1:1).EQ.'y')) THEN
	         CREATE_SYSTEM_DEFINITION = 
     &			LIB$DELETE_FILE(OLD_SYS_COMPROC)
C
C Check for errors, report and loop back to allow user to change
C form entry, or exit without deleting
C
	         IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	            CALL LCONT_PUTMSG(CREATE_SYSTEM_DEFINITION,0)
	            GOTO 10
	         ENDIF
	      ENDIF
	   ENDIF
C
C Attempt to output new value to the database
C
	   CREATE_SYSTEM_DEFINITION = FLN_DEFINE_SYSTEM(NEW_SYS_COMPROC)
C
C Check for, and report, any errors.
C If an error occurs, loop back and allow re-entry of command procedure.
C
	   IF (.NOT.CREATE_SYSTEM_DEFINITION) THEN
	      CALL LCONT_PUTMSG(LSC__UNDEFSYS,0)
	      CALL LCONT_ADDMSG(CREATE_SYSTEM_DEFINITION,0)
	      GOTO 10
	   ENDIF
C
C Check if response was anything but an abort form key sequence
C Ignore key stroke if unrecognised
C
	ELSEIF (TERM.NE.ABORT_FORM) THEN
	   GOTO 10
	ENDIF
C
C Set semaphore to indicate that we want to re-enter the system def menu
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
900	RETURN
	END
