C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 15:36:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROJECT_REQUEST_MENU()
C
***	MODULE PROJECT_REQUEST_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to put up menu of projects, and allow user to select one
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		TERM		! field terminator found
	LOGICAL		REDO		! .T. if to redisplay menu
	INTEGER		OPT_NUM		! number of options
	INTEGER		CURRENT_OPT	! current option
	INTEGER		INV_NUM		! number of invariants
	INTEGER		CURRENT_INV	! current invariant
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_PROJECT)	! project ids
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		FLN_RETRIEVE_PROJECTS
	INTEGER		GET_MENU_OPTION
C
C Assume success
C
	PROJECT_REQUEST_MENU = LSC__NORMAL
C
C Now cause the menu form to be displayed with title etc
C
	PROJECT_REQUEST_MENU = DISPLAY_MENU(
     &		'                    Project Request Menu',
     &		'Selection of next project',
     &		'Authorised options are :')
C
C Check for errors
C
	IF (.NOT.PROJECT_REQUEST_MENU) GOTO 900
C
C Now set up the invariant options list (go top and move up if came
C here via top level menu)
C
C Determine if came through control menu, or directly with
C /REQUEST qualifier
C
	IF (REQUEST) THEN
	   INV_NUM = 1
	   INV_LIST(1)  = 'Exit from LAMPSCONTROL'
C
C Came through control menu, so want option to return there
C
	ELSE
	   INV_NUM = 1
	   INV_LIST(1)  = 'Move up to overall control menu'
	ENDIF
C
C Now attempt to read the current PROJECT list
C
	PROJECT_REQUEST_MENU = FLN_RETRIEVE_PROJECTS(
     &			OPERATOR_ID,		! id of operator
     &			WORKSTATION_ID,		! current workstation
     &			A_PROJ_ID,		! list of returned 
     &						! project names
     &			OPT_NUM)
C
C Check for errors
C
	IF (.NOT.PROJECT_REQUEST_MENU) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETPROJ,0)
	   CALL LCONT_ADDMSG(PROJECT_REQUEST_MENU,0)
	   GOTO 900
	ENDIF
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C And set current option to be first item on menu
C
	CURRENT_OPT = 1
C
C Get required option
C
20	PROJECT_REQUEST_MENU = GET_MENU_OPTION(
     &		A_PROJ_ID,		! option list
     &		OPT_NUM,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.PROJECT_REQUEST_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator
C
	IF (TERM.NE.RETURN_KEY) GOTO 20
C
C Translate selected option number into some sort of project id which
C the rest of the program will apreciate
C
C
C First check if an invariant option was selected
C
C For move up to top level menu, if possible
C (indicated by INV_NUM = 1, with no /REQUEST qualifier used on command
C line)
C
	IF ((CURRENT_OPT.LE.0).AND.
     &	    (CURRENT_INV.EQ.1).AND.
     &	    (.NOT.REQUEST)) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL		! to top level
C
C For log off
C (indicated by CURRENT_INV = 1, with /REQUEST qualifier on command 
C line)
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.INV_NUM).AND.
     &		(REQUEST)) THEN
	   NEXT_FUNCTION = DO_LOGOFF
C
C Now deal with project options, setting next project id and name
C for rest of program to play with
C
	ELSE
	   PROJECT_ID = A_PROJ_ID(CURRENT_OPT)		! project name
	   NEXT_FUNCTION = DO_MOVE_DOWN_LEVEL		! to job menu
	ENDIF
C
C Exit
C
900	RETURN
	END
