
	INTEGER FUNCTION PROJECT_NOTIFICATION_MENU()
C
***	MODULE PROJECT_NOTIFICATION_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Menu to notify the start of any created menus in the system
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_PROJ			! num projects
	INTEGER		CURRENT_OPT			! current option
	INTEGER		NUM_INV				! num invariants
	INTEGER		CURRENT_INV			! current inv'nt
C
	INTEGER		TERM				! fms terminator
	INTEGER		REDISPLAY			! .T. redo menu
	CHARACTER*255	FVAL				! field value
C
	CHARACTER*255	FILENAME			! comproc file
	INTEGER		FILENAME_LEN			! file spec len
C
	INTEGER		I				! tempar'y count
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*80	A_PROJ_ID(FLN_MAX_PROJECT)	! menu options
C
C functions
	INTEGER		FLN_RETRIEVE_CREATED_PROJECTS
	INTEGER		FLN_START_PROJECT
	INTEGER		PARFILN
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
C
C Assume success
C
5	PROJECT_NOTIFICATION_MENU = LSC__NORMAL
C
C Set up defaults for menu display etc
C
	CURRENT_OPT = 1
	CURRENT_INV = 0
	REDISPLAY   = .TRUE.
C
C Set up invariant menu list options
C
	INV_LIST(1) = 'Move up to project, job and session '//
     &				'notification menu'
	INV_LIST(2) = 'Jump to top level menu'
	NUM_INV = 2
C
C Read the list of projects from database
C
	PROJECT_NOTIFICATION_MENU = FLN_RETRIEVE_CREATED_PROJECTS(
     &		A_PROJ_ID,		! list of project ids,
     &		NUM_PROJ)		! number of projects
C
C Deal with any errors
C
	IF (.NOT.PROJECT_NOTIFICATION_MENU) THEN
	   CALL LCONT_PUTMSG(PROJECT_NOTIFICATION_MENU,0)
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Display the menu page
C
	PROJECT_NOTIFICATION_MENU = DISPLAY_MENU(
     &		'              Project Notification Menu',
     &		'Selection of created projects for starting',
     &		'The following options are available : ')
C
C Deal with errors
C
	IF (.NOT.PROJECT_NOTIFICATION_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Set the flag to indicate menu must be redisplayed
C
	REDISPLAY = .TRUE.
C
C Now display the menu
C
20	PROJECT_NOTIFICATION_MENU = GET_MENU_OPTION(
     &		A_PROJ_ID,	! list of main options
     &		NUM_PROJ,	! number of main options
     &		INV_LIST,	! list of invariant options
     &		NUM_INV,	! number of invariant options
     &		CURRENT_OPT,	! current main option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,	! number of lines in scrolled area
     &		OPT_FIELD,	! option field name
     &		TERM,		! fms field terminator used to exit
     &		REDISPLAY)	! .T. if to redisplay menu on entry
C
C Deal with errors
C
	IF (.NOT.PROJECT_NOTIFICATION_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C Check the terminators and act accordingly
C
C---------------------------------------------------------------------
C Deal with RETURN
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C If project selected, allow input of command procedure spec
C
	   IF (CURRENT_OPT.GT.0) THEN
	      CALL FORM_GETLINE(FVAL,TERM,0, 'Command Procedure Spec : ')
C
C Check for abort
C
30	      IF (FVAL.EQ.' ') THEN
	         CALL FORM_PUTMSG(' ',-1,0)
	         REDISPLAY = .FALSE.
	         GOTO 20
	      ENDIF
C
C Now parse the filename to ensure legality
C
	      PROJECT_NOTIFICATION_MENU = PARFILN(
     &		FILENAME,	! destination of parsed spec
     &		FILENAME_LEN,	! destiniation string length
     &		FVAL,		! input string
     &		'PROJECT.COM;0',! minimal default
     &		.TRUE.)		! allow version numbers
C
C Deal with errors in parsing file spec
C
	      IF (.NOT.PROJECT_NOTIFICATION_MENU) THEN
	         CALL LCONT_PUTMSG(PROJECT_NOTIFICATION_MENU,0)
C
C Request re-entry of file spec
C
	         CALL FORM_GETLINE(
     &			FVAL,TERM,0, 
     &			'Re-enter Command Procedure Spec : ')
	         GOTO 30
	      ENDIF
C
C Tell the user starting project
C
	      CALL FORM_PUTMSG('Starting project now',-1,0)
C
C And notify start of project selected
C
	      PROJECT_NOTIFICATION_MENU = FLN_START_PROJECT
     &			(A_PROJ_ID(CURRENT_OPT),FVAL)
C
C Get rid of starting project message
C
	      CALL FORM_PUTMSG(' ',-1,0)
C
C Deal with errors
C
	      IF (.NOT.PROJECT_NOTIFICATION_MENU) THEN
	         CALL LCONT_PUTMSG(PROJECT_NOTIFICATION_MENU,0)
	         REDISPLAY = .FALSE.
	         GOTO 20
	      ENDIF
C
C Loop, restarting menu to get option list without started project
C
	      GOTO 5
C
C Otherwise it is an invariant option
C
C---------------------------------------------------------------------
C Deal with move up option
C
	   ELSEIF (CURRENT_INV.EQ.1) THEN
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
C
C---------------------------------------------------------------------
C Deal with go top
C
	   ELSEIF (CURRENT_INV.EQ.2) THEN
	      NEXT_FUNCTION = DO_GO_TOP
	      GOTO 999
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with unrecognised key sequence - just ignore it and loop
C back to allow entry of next option without rediplaying menu
C
	ELSE
	   REDISPLAY = .FALSE.
	   GOTO 20
	ENDIF
C
C Exit
C
999	RETURN
	END
