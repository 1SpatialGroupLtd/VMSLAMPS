C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 15:37:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROJECT_STATISTICS_REPORT()
C
***	MODULE PROJECT_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to the projects in the flowline control 
C database
C The information displayed will include:
C	Project identifier
C	Start date/time of project
C	Connect time used so far for project
C	CPU time used so far for project
C	Number of jobs within project
C
C Times will be displayed in hh:mm:ss.hh format
C
C The connect and CPU times are recovered from the database in integer
C hundredths of seconds.
C
C The start date is in integer days since 17-NOV-1858.
C
C The start time is in integer hundredths of seconds since midnight.
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_PROJ		! number of projects
	INTEGER		I,J			! temporary count varble
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	CONNECT			! connect time string
	INTEGER		CONNECT_LENGTH		! length of connect str
	CHARACTER*20	DATE			! start date string
	INTEGER		DATE_LENGTH		! length of date string
	CHARACTER*20	TIME			! start time string
	INTEGER		TIME_LENGTH		! length of time string
C
	INTEGER		CPU_TIME(FLN_MAX_PROJECT)	! cpu time
	INTEGER		CONNECT_TIME(FLN_MAX_PROJECT)	! connect time
	INTEGER		START_TIME(FLN_MAX_PROJECT)	! start time
	INTEGER		START_DATE(FLN_MAX_PROJECT)	! start day of proj
	INTEGER		NUM_JOB(FLN_MAX_PROJECT)	! number of jobs in proj
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_PROJECT)	! list of project ids
C
C functions
	INTEGER		FLN_RETRIEVE_PROJECT_TIMINGS
	INTEGER		SIGCHS
	INTEGER		CONVERT_DAY_TO_STRING
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	PROJECT_STATISTICS_REPORT = LSC__NORMAL
C
C Call the routine to get statistics on all projects
C in the system
C
	PROJECT_STATISTICS_REPORT = FLN_RETRIEVE_PROJECT_TIMINGS(
     &		A_PROJ_ID,	! project identiiers
     &		NUM_PROJ,	! number of projects
     &		CPU_TIME,	! cpu time used for project so far
     &		CONNECT_TIME,	! connect time used for project
     &		START_TIME,	! start time of project
     &		START_DATE,	! start day of project
     &		NUM_JOB)	! number of jobs in each project
C
C Check for errors in reading list of projects
C
	IF (.NOT.PROJECT_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETPROJ,0)
	   CALL LCONT_ADDMSG(PROJECT_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the project listing
C
	CALL FLWRTF('LAMPSCONTROL Project Statistics Report')
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Project Identifier    ')
	CALL APPEND('Start date            ')
	CALL APPEND('Start time            ')
	CALL APPEND('Connect time          ')
	CALL APPEND('CPU time              ')
	CALL APPEND('Number of jobs')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual project details, in a loop
C
	DO 10 I = 1, NUM_PROJ
C
C Convert the dates and times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with start date 
C
	   CALL CONVERT_DAY_TO_STRING(START_DATE(I),DATE_LENGTH,DATE)
C
C Deal with start time
C
	   CALL CONVERT_TIME_TO_STRING(START_TIME(I),TIME_LENGTH,TIME)
C
C Remove number of days from start time
C
	   IF (TIME(1:4).EQ.'000-') THEN
	      TIME = TIME(5:TIME_LENGTH)
	      TIME_LENGTH = TIME_LENGTH - 4
	   ENDIF
C
C Deal with connect time
C
	   CALL CONVERT_TIME_TO_STRING(
     &			CONNECT_TIME(I),CONNECT_LENGTH,CONNECT)
C
C Deal with cpu time
C
	   CALL CONVERT_TIME_TO_STRING(CPU_TIME(I),CPU_LENGTH,CPU)
C
C Format the line
C
	   CALL EXPAND('%S20  ',A_PROJ_ID(I))
	   CALL APPEND('%S%[ %]',DATE(1:DATE_LENGTH),
     &				 (22-DATE_LENGTH))
	   CALL APPEND('%S%[ %]',TIME(1:TIME_LENGTH),
     &				 (22-TIME_LENGTH))
	   CALL APPEND('%S%[ %]',CONNECT(1:CONNECT_LENGTH),
     &				 (22-CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				 (22-CPU_LENGTH))
	   CALL APPEND('%I8   ',NUM_JOB(I))
C
C And output line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many projects were found
C
	IF (NUM_PROJ.GT.0) THEN
	   CALL FLWRTF('Total number of projects is %N',NUM_PROJ)
C
C Deal with the case where no project details are found
C
	ELSE
	   CALL FLWRTF('No projects found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
