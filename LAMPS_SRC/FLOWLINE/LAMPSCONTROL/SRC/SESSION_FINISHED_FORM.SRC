C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-20 19:49:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION SESSION_FINISHED_FORM(SESS_ID)
C
***	MODULE SESSION_FINISHED_FORM
***	IDENT 29SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow entry of details of termination of active session
C
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
C
C argument
	INTEGER		SESS_ID
C
C w/s
	INTEGER		TERM
	CHARACTER*20	FVAL
	CHARACTER*20	FID
	INTEGER		STATUS
C
	CHARACTER*30	RESULT		! session result keyword
	INTEGER		OUTCOME		! completed task outcome
	INTEGER		CPU		! estimated CPU
	INTEGER		NUM_LOC_PARAMS	! number of local parameters
	INTEGER		NUM_GLOB_PARAMS	! number of global parameters
	INTEGER		NUM_EXT_PARAMS	! number of external parameters
C
	LOGICAL		VALUES_ENTERED	! .T. if have completed main
					! form
C
	CHARACTER*100	LOC_PARAMS(16)	! local parameters passed on
	CHARACTER*100	GLOB_PARAMS(16)	! global parameters passed on
	CHARACTER*100	EXT_PARAMS(16)	! external parameters passed on
C
C function
	INTEGER		GET_PARAMETERS_FORM
	INTEGER		RDINT
	INTEGER		FLN_SESS_COMPLETE
	INTEGER		FLN_SESS_CONTINUE
	INTEGER		FLN_SESS_ERROR
	INTEGER		FLN_SESS_RESTART
	INTEGER		FLN_SESS_OFFLINE
	INTEGER		FLN_SESS_SUBFLOWLINE
C
C Assume success
C
	SESSION_FINISHED_FORM = LSC__NORMAL
C
C Clear flag to indicate have not yet entered values on form
C
	VALUES_ENTERED = .FALSE.
C
C Initialise number of parameters
C
	NUM_LOC_PARAMS = 0
	NUM_GLOB_PARAMS = 0
	NUM_EXT_PARAMS = 0
C
C Clear the screen and display the form
C
5	CALL FDV$CLRSH('SESSION_FINISHED')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Check if values have already been entered (ie have we already
C completed this form once, and have got back here after an error
C in one of the parameter forms)
C
	IF (VALUES_ENTERED) THEN
C
C Output previously entered values
C
	   CALL FDV$PUT(RESULT,'RESULT')
	   CALL EXPAND('%WS%N',FVAL,OUTCOME)
	   CALL FDV$PUT(FVAL,'OUTCOME')
C
C Otherwise, this is first time round, so get the default values 
C from the form.
C
	ELSE
	   CALL FDV$RETN(RESULT,'RESULT')
C
	   CALL FDV$RETN(FVAL,'OUTCOME')
	   CALL SETAUX(%REF(FVAL),20)
	   IF (RDINT(OUTCOME)) OUTCOME = 1
	   CALL BSLN
	ENDIF
C
C Now set the first field to be entered
C
	FID  = 'RESULT'
C
C Start of loop dealing with entry of each field on form
C
C Read next field
C
10	CALL FDV$GET(FVAL,TERM,FID)
C
C Clear any messages output on bottom of screen
C
	CALL CLEAR_MESSAGE_LINES()
C
C Check if abort form terminator used, exit if it is, setting semaphore
C to indicate that previous menu to be redisplayed
C
	IF (TERM.EQ.ABORT_FORM) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Now determine which field was entered
C
C Session result
C
	IF (FID.EQ.'RESULT') THEN
C
C Check if return is of recognised type
C
	   IF  ((FVAL.NE.'COMPLETE').AND.(FVAL.NE.'CONTINUE').AND.
     &		(FVAL.NE.'RESTART' ).AND.(FVAL.NE.'ERROR'   ).AND.
     &		(FVAL.NE.'OFFLINE' ).AND.(FVAL.NE.'SUBFLOWLINE')) THEN
	      CALL LCONT_PUTMSG('Unrecognised session return',0)
	      GOTO 10
	   ENDIF
C
C Session return is legal, so store it away
C
	   RESULT = FVAL
C
C Session outcome
C
	ELSEIF (FID.EQ.'OUTCOME') THEN
	   CALL SETAUX(%REF(FVAL),20)
	   IF (RDINT(OUTCOME)) OUTCOME = 1
	   CALL BSLN
	ENDIF
C
C Process the terminator
C
	CALL FDV$PFT
C
C Find the status, i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Determine the next field to be entered
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.RETURN_KEY) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C Set flag to indicate that values have already been entered
C for the result and outcome
C
	VALUES_ENTERED = .TRUE.
C
C Now get the local parameters
C
	SESSION_FINISHED_FORM = GET_PARAMETERS_FORM(
     &		'Local Parameters',	! title of parameters
     &		NUM_LOC_PARAMS,		! number of parameters found
     &		LOC_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C
	IF (.NOT.SESSION_FINISHED_FORM) GOTO 5
C
C Check if abort form terminator used, loop back to main form if it is
C
	IF (TERM.EQ.ABORT_FORM) GOTO 5
C
C Now get the global parameters
C
	SESSION_FINISHED_FORM = GET_PARAMETERS_FORM(
     &		'Global Parameters',	! title of parameters
     &		NUM_GLOB_PARAMS,	! number of parameters found
     &		GLOB_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C
	IF (.NOT.SESSION_FINISHED_FORM) GOTO 5
C
C Check if abort form terminator used, loop back to main form if it is
C
	IF (TERM.EQ.ABORT_FORM) GOTO 5
C
C Now get the external parameters
C
	SESSION_FINISHED_FORM = GET_PARAMETERS_FORM(
     &		'External Parameters',	! title of parameters
     &		NUM_EXT_PARAMS,		! number of parameters found
     &		EXT_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C
	IF (.NOT.SESSION_FINISHED_FORM) GOTO 5
C
C Check if abort form terminator used, loop back to main form if it is
C
	IF (TERM.EQ.ABORT_FORM) GOTO 5
C
C Tell the user what is happening so he/she/it does not get impatient
C
	CALL FORM_PUTMSG('Terminating session now',-1,0)
C
C Set CPU time to null value
C
	CPU = -1
C
C Determine result type and make appropriate session termination call
C
C Complete
C
	IF (RESULT.EQ.'COMPLETE') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_COMPLETE(
     &		SESS_ID,			! session id
     &		OUTCOME,			! outcome
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
C
C Continue
C
	ELSEIF (RESULT.EQ.'CONTINUE') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_CONTINUE(
     &		SESS_ID,			! session id
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
C
C Error
C
	ELSEIF (RESULT.EQ.'ERROR') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_ERROR(
     &		SESS_ID,			! session id
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
C
C Restart
C
	ELSEIF (RESULT.EQ.'RESTART') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_RESTART(
     &		SESS_ID,			! session id
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
C
C Offline
C
	ELSEIF (RESULT.EQ.'OFFLINE') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_OFFLINE(
     &		SESS_ID,			! session id
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
C
C Subflowline
C
	ELSEIF (RESULT.EQ.'SUBFLOWLINE') THEN
	   SESSION_FINISHED_FORM = FLN_SESS_SUBFLOWLINE(
     &		SESS_ID,			! session id
     &		CPU,				! cpu time
     &		NUM_LOC_PARAMS,LOC_PARAMS,	! local parameters
     &		NUM_GLOB_PARAMS,GLOB_PARAMS,	! global parameters
     &		NUM_EXT_PARAMS,EXT_PARAMS)	! external parameters
	ENDIF
C
C Deal with errors
C
	IF (.NOT.SESSION_FINISHED_FORM) THEN
	   CALL LCONT_PUTMSG(SESSION_FINISHED_FORM,0)
	   FID = 'RESULT'
C
C Repeat the loop to retry entry
C
	   GOTO 10
	ENDIF
C
C Set semaphore to indicate that previous menu should be rediplayed
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Clear any messages output on bottom of screen
C
999	CALL CLEAR_MESSAGE_LINES()
C
C Exit
C
	RETURN
	END
