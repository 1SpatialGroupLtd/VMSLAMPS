	INTEGER FUNCTION ELEMENT_STATISTICS_REPORT(FLN_ID)
C
***	MODULE ELEMENT_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to the elements in the flowline passed
C as an argument.
C The information displayed will include:
C	Element id
C	Total connect time
C	Average connect time per task
C	Total CPU time
C	Average CPU time per task
C	Average number of sessions per task
C	Number of tasks which have passed through element
C
C Times will be displayed in hh:mm:ss.cc format
C
C The connect and CPU times are recovered from the database in integer
C hundredths of seconds.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*20	FLN_ID			! flowline of interest
C
C w/s
	INTEGER		NUM_ELEM		! number of elements
	INTEGER		I,J			! temporary count varble
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	CONNECT			! connect time string
	INTEGER		CONNECT_LENGTH		! length of connect str
	CHARACTER*20	MEAN_CPU		! mean cpu time string
	INTEGER		MEAN_CPU_LENGTH		! length mean cpu string
	CHARACTER*20	MEAN_CONNECT		! mean connect time str
	INTEGER		MEAN_CONNECT_LENGTH	! len mean connect str
	REAL		MEAN_SESS		! mean num. sessions
C
	INTEGER		CPU_TIME(FLN_MAX_ELEMENT) ! cpu time
	INTEGER		CONNECT_TIME(FLN_MAX_ELEMENT)! connect time
	INTEGER		NUM_SESS(FLN_MAX_ELEMENT) ! number of sessions
	INTEGER		NUM_TASKS(FLN_MAX_ELEMENT)! number of tasks 
	INTEGER		NUM_UNSET_TASKS(FLN_MAX_ELEMENT)
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_ELEMENT) ! list of element ids
C
C functions
	INTEGER		FLN_RETRIEVE_ELEMENT_TIMINGS
	INTEGER		SIGCHS
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	ELEMENT_STATISTICS_REPORT = LSC__NORMAL
C
C Call the routine to get statistics on all elements
C in the system
C
	ELEMENT_STATISTICS_REPORT = FLN_RETRIEVE_ELEMENT_TIMINGS(
     &		FLN_ID,		! flowline of interest
     &		A_ELEM_ID,	! element identifiers
     &		NUM_ELEM,	! number of elements
     &		CPU_TIME,	! cpu time used for element so far
     &		CONNECT_TIME,	! connect time used for element
     &		NUM_SESS,	! number of sessions in element
     &		NUM_TASKS,	! number of tasks in each element
     &		NUM_UNSET_TASKS)! number of tasks with incomplete
				! timing statistics
C
C Check for errors in reading list of elements
C
	IF (.NOT.ELEMENT_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETELEM,0)
	   CALL LCONT_ADDMSG(ELEMENT_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the element listing
C
	CALL FLWRTF('LAMPSCONTROL Element Statistics '//
     &		    'Report For Flowline %S',FLN_ID)
C
C Output blank line for neatness
C
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Element Identifier    ')
	CALL APPEND('Connect time      ')
	CALL APPEND('Mean connect/task ')
	CALL APPEND('CPU time          ')
	CALL APPEND('Mean CPU/task     ')
	CALL APPEND('Sessions/task  ')
	CALL APPEND('Number of tasks')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual ELEMENT details, in a loop
C
	DO 10 I = 1, NUM_ELEM
C
C Convert the times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with total connect time
C
	   CALL CONVERT_TIME_TO_STRING(
     &		CONNECT_TIME(I),
     &		CONNECT_LENGTH,
     &		CONNECT)
C
C Deal with mean connect time
C
	   IF (NUM_TASKS(I).GT.NUM_UNSET_TASKS(I)) THEN
	      CALL CONVERT_TIME_TO_STRING(
     &		(CONNECT_TIME(I)/(NUM_TASKS(I)-NUM_UNSET_TASKS(I))),
     &		MEAN_CONNECT_LENGTH,
     &		MEAN_CONNECT)
	   ELSE
	      MEAN_CONNECT = 'Unset'
	      MEAN_CONNECT_LENGTH = SIGCHS(MEAN_CONNECT)
	   ENDIF
C
C Deal with total cpu time
C
	   CALL CONVERT_TIME_TO_STRING(
     &		CPU_TIME(I),
     &		CPU_LENGTH,
     &		CPU)
C
C Deal with mean CPU time
C
	   IF (NUM_TASKS(I).GT.NUM_UNSET_TASKS(I)) THEN
	      CALL CONVERT_TIME_TO_STRING(
     &		(CPU_TIME(I)/(NUM_TASKS(I)-NUM_UNSET_TASKS(I))),
     &		MEAN_CPU_LENGTH,
     &		MEAN_CPU)
	   ELSE
	      MEAN_CPU = 'Unset'
	      MEAN_CPU_LENGTH = SIGCHS(MEAN_CPU)
	   ENDIF
C
C Determine mean number of sessions per task
C
	   IF (NUM_TASKS(I).LE.0) THEN
	      MEAN_SESS = 0.0
	   ELSE
	      MEAN_SESS = FLOAT(NUM_SESS(I))/FLOAT(NUM_TASKS(I))
	   ENDIF
C
C Format the line
C
	   CALL EXPAND('%S20  ',A_ELEM_ID(I))
	   CALL APPEND('%S%[ %]',CONNECT(1:CONNECT_LENGTH),
     &				 (18-CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CONNECT(1:MEAN_CONNECT_LENGTH),
     &				 (18-MEAN_CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				 (18-CPU_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CPU(1:MEAN_CPU_LENGTH),
     &				 (18-MEAN_CPU_LENGTH))
	   CALL APPEND('%F9.1%(6 %)',MEAN_SESS)
	   CALL APPEND('%I8',NUM_TASKS(I))
C
C And output line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many elements were found
C
	IF (NUM_ELEM.GT.0) THEN
	   CALL FLWRTF('Total number of elements is %N',NUM_ELEM)
C
C Deal with the case where no element details are found
C
	ELSE
	   CALL FLWRTF('No elements found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
