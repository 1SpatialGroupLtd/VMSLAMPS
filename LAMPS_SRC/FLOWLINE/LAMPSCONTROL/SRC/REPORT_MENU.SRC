C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-20 19:48:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION REPORT_MENU()
C
***	MODULE REPORT_MENU
***	IDENT 05OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to allow selection of option from report menu
C It is assumed that authorisation checks have been carried
C out before reaching this routine
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C w/s
	INTEGER		I		! temporary index
	INTEGER		TERM		! field terminator
	INTEGER		REDO		! .T. if to redisplay
	INTEGER		OPT_NUM		! number of options
	INTEGER		CURRENT_OPT	! current option
	INTEGER		INV_NUM		! number of invariant
	INTEGER		CURRENT_INV	! current invariant
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		REPORT_DEFINITION_MENU
	INTEGER		REPORT_STATUS_MENU
	INTEGER		REPORT_STATISTICS_MENU
C
C Initial current option
C
	CURRENT_OPT = 1
C
C Assume success
C
10	REPORT_MENU = LSC__NORMAL
C
C Set up length of option list
C
	OPT_NUM = 4
C
C and number of invariant options (none)
C
	INV_NUM = 0
C
C Set up options (except logoff and move up) for REPORT menu
C
	OPT_LIST(1) = 'System definition'
	OPT_LIST(2) = 'System status'
	OPT_LIST(3) = 'System statistics'
C
C Check if came here through top level menu, or with /REPORT qualifier
C If cam here via control menu, set up option to move up to it
C
	IF (.NOT.REPORT) THEN
	   OPT_LIST(OPT_NUM)='Move up to overall control menu'
C
C Otherwise, set up option to logoff
C
	ELSE
	   OPT_LIST(OPT_NUM) = 'Exit from LAMPSCONTROL'
	ENDIF
C
C Display menu form
C
	REPORT_MENU = DISPLAY_MENU(
     &		'Main Report Menu',
     &		'Selection of report operations',
     &		'The following reports are available:')
C
C Check for errors
C
	IF (.NOT.REPORT_MENU) GOTO 900
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C Get required option
C
20	REPORT_MENU = GET_MENU_OPTION(
     &		OPT_LIST,		! option list
     &		OPT_NUM,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.REPORT_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator
C
	IF (TERM.NE.RETURN_KEY) GOTO 20
C
C Now determine option and perform required actions
C
C System definition
C
	IF (CURRENT_OPT.EQ.1) THEN
	   REPORT_MENU = REPORT_DEFINITION_MENU()
C
C System status
C
	ELSEIF (CURRENT_OPT.EQ.2) THEN
	   REPORT_MENU = REPORT_STATUS_MENU()
C
C System statistics
C
	ELSEIF (CURRENT_OPT.EQ.3) THEN
	   REPORT_MENU = REPORT_STATISTICS_MENU()
C
C Move to higher level
C
	ELSEIF ((.NOT.REPORT).AND.(CURRENT_OPT.EQ.OPT_NUM)) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
C
C Perform logoff
C
	ELSEIF ((REPORT).AND.(CURRENT_OPT.EQ.OPT_NUM)) THEN
	   NEXT_FUNCTION = DO_LOGOFF
C
C Default do nothing
C
	ELSE
	   NEXT_FUNCTION = DO_NOTHING
	ENDIF
C
C Check if want to repeat menu
C
	IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	   NEXT_FUNCTION = DO_ERROR
	   GOTO 10
	ENDIF
C
C Exit
C
900	RETURN
	END
