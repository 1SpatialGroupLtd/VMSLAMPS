C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 16:37:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROJECT_STATUS_MENU()
C
***	MODULE PROJECT_STATUS_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Menu to examine/modify the status of the projects in the
C system
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_PROJ			! num projects
C
	INTEGER		CURRENT_OPT			! current option
	INTEGER		CURRENT_INV			! current inv'nt
	INTEGER		NUM_INV				! num invariants
C
	INTEGER		TERM				! fms terminator
	INTEGER		REDISPLAY			! .T. redo menu
	CHARACTER*50	FVAL				! field value
C
	INTEGER		I				! tempar'y count
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	INTEGER		A_PROJ_PRI(FLN_MAX_PROJECT)	! proj pri'ties
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_PROJECT)	! project ids
CCC	CHARACTER*20	A_PROJ_STATUS(FLN_MAX_PROJECT)	! project status
CCC	CHARACTER*80	A_MENU(FLN_MAX_PROJECT)		! lines on menu
CCC	CHARACTER*255	A_COMPROC(FLN_MAX_PROJECT)
C
C functions
	INTEGER		FLN_RETRIEVE_ALL_PROJECTS
	INTEGER		FLN_CHANGE_PROJ_PRI
	INTEGER		FLN_DELETE_PROJECT
	INTEGER		FLN_HOLD_PROJECT
	INTEGER		FLN_RELEASE_PROJECT
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	LOGICAL		RDINT
	INTEGER		JOB_STATUS_MENU
	INTEGER		EDIT_FILE
C
C Assume success
C
5	PROJECT_STATUS_MENU = LSC__NORMAL
C
C Set up defaults for menu display etc
C
	CURRENT_OPT = 1
	CURRENT_INV = 0
	REDISPLAY   = .TRUE.
C
C Set up invariant menu list options
C
	INV_LIST(1) = 'Move up to main management menu'
	INV_LIST(2) = 'Jump to top level menu'
C
C If the management menu is the top level menu (ie /MANAGE was
C used), then the jump to top level is not needed
C
	IF (MANAGE) THEN
	   NUM_INV = 1
	ELSE
	   NUM_INV = 2
	ENDIF
C
C Read the list of projects from database
C
	PROJECT_STATUS_MENU = FLN_RETRIEVE_ALL_PROJECTS(
     &		A_PROJ_ID,		! array of project ids
     &		A_PROJ_STATUS,	! array of project statuses
     &		A_PROJ_PRI,	! array of project priorities
     &		A_COMPROC,		! array of project com procs
     &		NUM_PROJ)		! number of projects
C
C Deal with any errors
C
	IF (.NOT.PROJECT_STATUS_MENU) THEN
	   CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Assemble list including project_id, status and priority on same line
C
	DO 10 I = 1,NUM_PROJ
C
C Ensure menu list array is empty
C
	   A_MENU(I) = '     '
C
C Now expand the required text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20     %^W%N5',
     &			%REF(A_MENU(I)),
     &			A_PROJ_ID(I),
     &			A_PROJ_STATUS(I),
     &			A_PROJ_PRI(I))
C
10	CONTINUE
C
C Display the menu page
C
	PROJECT_STATUS_MENU = DISPLAY_MENU(
     &		'              Project Status Modification Menu',
     &		'Project status modification options :',
     &		'Project Id               Status                   '//
     &							'Priority')
C
C Deal with errors
C
	IF (.NOT.PROJECT_STATUS_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Set the flag to indicate menu must be redisplayed
C
	REDISPLAY = .TRUE.
C
C Now display the menu
C
20	PROJECT_STATUS_MENU = GET_MENU_OPTION(
     &		A_MENU,	! list of main options
     &		NUM_PROJ,	! number of main options
     &		INV_LIST,	! list of invariant options
     &		NUM_INV,	! number of invariant options
     &		CURRENT_OPT,	! current main option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,	! number of lines in scrolled area
     &		OPT_FIELD,	! option field name
     &		TERM,		! fms field terminator used to exit
     &		REDISPLAY)	! .T. if to redisplay menu on entry
C
C Deal with errors
C
	IF (.NOT.PROJECT_STATUS_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C Check the terminators and act accordingly
C
C---------------------------------------------------------------------
C Deal with RETURN
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C If project selected, call job status menu for project selected
C
	   IF (CURRENT_OPT.GT.0) THEN
	      PROJECT_STATUS_MENU = 
     &			JOB_STATUS_MENU(A_PROJ_ID(CURRENT_OPT))
C
C If next operation is to move up a level, then reset next function
C semaphore and repeat this menu
C
	      IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	         NEXT_FUNCTION = DO_ERROR
	         GOTO 5
	      ENDIF
C
C Deal with errors
C
	      IF (.NOT.PROJECT_STATUS_MENU) THEN
	         NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	         GOTO 999
	      ENDIF
C
C Otherwise it is an invariant option
C
C---------------------------------------------------------------------
C Deal with move up option
C
	   ELSEIF (CURRENT_INV.EQ.1) THEN
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
C
C---------------------------------------------------------------------
C Deal with go top
C
	   ELSEIF (CURRENT_INV.EQ.2) THEN
	      NEXT_FUNCTION = DO_GO_TOP
	      GOTO 999
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with edit project command procedure i.e. GOLD E
C Will call routine to take care of editing file
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('E'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('e')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Call the file editing routine
C
	   PROJECT_STATUS_MENU = EDIT_FILE(A_COMPROC(CURRENT_OPT))
C
C Check for, and report, any errors
C
	   IF (.NOT.PROJECT_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	   ENDIF
C
C Mark menu as not displayed, refresh it to cure damage done by EDT
C to the display
C
	   CALL FDV$NDISP
	   CALL FDV$RFRSH
C
C Repeat menu, redisplaying it because EDT will have destroyed screen
C
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with project deletion i.e. GOLD D
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('D'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('d')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Prompt the user to make sure
C
	   CALL FORM_GETLINE(FVAL,TERM,0,'Are you sure (Y/N) ? ')
C
C Test the value returned
C
	   IF ((FVAL(1:1).EQ.'Y').OR.(FVAL(1:1).EQ.'y')) THEN
C
C Delete the project
C
	      PROJECT_STATUS_MENU = FLN_DELETE_PROJECT(
     &		A_PROJ_ID(CURRENT_OPT))
C
C Deal with errors
C
	      IF (.NOT.PROJECT_STATUS_MENU) THEN
	         CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	         REDISPLAY = .FALSE.
	         GOTO 20
	      ENDIF
C
C The project has now been deleted, so must get new list of projects
C and display it.
C
	      GOTO 5
C
C Otherwise, just loop without redisplaying
C
	   ELSE
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with project held i.e. GOLD H
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('H'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('h')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Put the project to held in database
C
	   PROJECT_STATUS_MENU = 
     &			FLN_HOLD_PROJECT(A_PROJ_ID(CURRENT_OPT))
C
C Deal with errors
C
	   IF (.NOT.PROJECT_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Now amend the local status array
C
	   A_PROJ_STATUS(CURRENT_OPT) = 'Held'
C
C And update the menu item on display
C Ensure menu list array entry is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20     %^W%N5',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_PROJ_ID(CURRENT_OPT),
     &			A_PROJ_STATUS(CURRENT_OPT),
     &			A_PROJ_PRI(CURRENT_OPT))
C
C And loop for next option
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with project release i.e. GOLD R
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('R'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('r')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Release the project in database (change to 'Active' status)
C
	   PROJECT_STATUS_MENU = 
     &			FLN_RELEASE_PROJECT(A_PROJ_ID(CURRENT_OPT))
C
C Deal with errors
C
	   IF (.NOT.PROJECT_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Now amend the local status array
C
	   A_PROJ_STATUS(CURRENT_OPT) = 'Active'
C
C And update the menu item on display
C Ensure menu list array entry is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the new text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20     %^W%N5',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_PROJ_ID(CURRENT_OPT),
     &			A_PROJ_STATUS(CURRENT_OPT),
     &			A_PROJ_PRI(CURRENT_OPT))
C
C And loop for next option
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with project priority alteration i.e. GOLD P
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('P'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('p')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Prompt the user determine the required priority
C
30	   CALL FORM_GETLINE(FVAL,TERM,0,'New priority (1-16) : ')
C
C Determine the value entered, setting and resetting buffers and
C testing for errors
C
	   CALL SETAUX(%REF(FVAL),20)
C
	   IF (RDINT(A_PROJ_PRI(CURRENT_OPT))) THEN
	      CALL FORM_PUTMSG('Illegal priority',-1,0)
	      CALL BSLN
	      GOTO 30
	   ENDIF
C
	   CALL BSLN
C
C Test that priority is in legal range
C
	   IF ((A_PROJ_PRI(CURRENT_OPT).GT.16).OR.
     &	       (A_PROJ_PRI(CURRENT_OPT).LT.01)) THEN
	      CALL FORM_PUTMSG('Illegal priority',-1,0)
	      GOTO 30
	   ENDIF
C
C Reset the priority
C
	      PROJECT_STATUS_MENU = FLN_CHANGE_PROJ_PRI(
     &		A_PROJ_ID(CURRENT_OPT),
     &		A_PROJ_PRI(CURRENT_OPT))
C
C Deal with errors
C
	   IF (.NOT.PROJECT_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(PROJECT_STATUS_MENU,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Ensure menu list array is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the new text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20     %^W%N5',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_PROJ_ID(CURRENT_OPT),
     &			A_PROJ_STATUS(CURRENT_OPT),
     &			A_PROJ_PRI(CURRENT_OPT))
C
C And loop for next option
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with unrecognised key sequence - just ignore it and loop
C back to allow entry of next option without rediplaying menu
C
	ELSE
	   REDISPLAY = .FALSE.
	   GOTO 20
	ENDIF
C
C Exit
C
999	RETURN
	END
