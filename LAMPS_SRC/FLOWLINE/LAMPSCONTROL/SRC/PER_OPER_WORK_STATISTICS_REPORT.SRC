	INTEGER FUNCTION PER_OPER_WORK_STATISTICS_REPORT(OPER_ID)
C
***	MODULE PER_OPER_WORK_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to an operator using the 
C flowline control system, broken down by workstation.
C The information displayed will include:
C	Workstation id
C	Total connect time
C	Average connect time per session
C	Total CPU time
C	Average CPU time per session
C	Number of sessions performed by operator
C
C Times will be displayed in hh:mm:ss.cc format
C
C The connect and CPU times are recovered from the database in integer
C hundredths of seconds.
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*(*)	OPER_ID		! operator of interest
C
C w/s
	INTEGER		NUM_WORK		! number of workstations
	INTEGER		I,J			! temporary count varble
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	CONNECT			! connect time string
	INTEGER		CONNECT_LENGTH		! length of connect str
	CHARACTER*20	MEAN_CPU		! mean cpu time string
	INTEGER		MEAN_CPU_LENGTH		! length mean cpu string
	CHARACTER*20	MEAN_CONNECT		! mean connect time str
	INTEGER		MEAN_CONNECT_LENGTH	! len mean connect str
C
	INTEGER		CPU_TIME(FLN_MAX_WORK)	! cpu time
	INTEGER		CONNECT_TIME(FLN_MAX_WORK)! connect time
	INTEGER		NUM_SESS(FLN_MAX_WORK)	! number of sessions
	REAL		QUOTIENT(FLN_MAX_WORK)	! eff quot - abandoned
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_WORK_ID(FLN_MAX_WORK)	! workstation ids
C
C functions
	INTEGER		FLN_RETRIEVE_OPER_WORK_TIMINGS
	INTEGER		FLN_RETRIEVE_ALL_OPER_IDS
	INTEGER		SIGCHS
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	PER_OPER_WORK_STATISTICS_REPORT = LSC__NORMAL
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the operator listing
C
	CALL FLWRTF('LAMPSCONTROL Statistics '//
     &		'Broken Down By Workstation For Operator %S',OPER_ID)
C
C Output blank lines for neatness
C
	CALL FLWRTF()
C
C Output the header line, with column titles
C
	CALL EXPAND('Workstation Ident     ')
	CALL APPEND('Connect time          ')
	CALL APPEND('Connect/session       ')
	CALL APPEND('CPU time              ')
	CALL APPEND('CPU/session           ')
	CALL APPEND('No. sessions')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Call the routine to get overall statistics on current operator
C broken down by workstation
C
	PER_OPER_WORK_STATISTICS_REPORT=FLN_RETRIEVE_OPER_WORK_TIMINGS(
     &		OPER_ID,	! operator identifier
     &		A_WORK_ID,	! workstation identifiers
     &		CPU_TIME,	! cpu time used by operator
     &		CONNECT_TIME,	! connect time used by operator
     &		NUM_SESS,	! number of sessions by operator
     &		QUOTIENT,	! efficiency quotients
     &		NUM_WORK)	! number of operators
C
C Check for errors in reading list of operators
C
	IF (.NOT.PER_OPER_WORK_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETWKS,0)
	   CALL LCONT_ADDMSG(PER_OPER_WORK_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Output details for each workstation for current operator
C
	DO 10 J = 1, NUM_WORK
C
C Convert the times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with total connect time
C
	   CALL CONVERT_TIME_TO_STRING(
     &			CONNECT_TIME(J),CONNECT_LENGTH,CONNECT)
C
C Deal with mean connect time
C
	   IF (NUM_SESS(J).LE.0) THEN
	      MEAN_CONNECT = 'Unset'
	      MEAN_CONNECT_LENGTH = SIGCHS(MEAN_CONNECT)
	   ELSE
	      CALL CONVERT_TIME_TO_STRING(
     &		(CONNECT_TIME(J)/NUM_SESS(J)),
     &		MEAN_CONNECT_LENGTH,
     &		MEAN_CONNECT)
	   ENDIF
C
C Deal with total cpu time
C
	   CALL CONVERT_TIME_TO_STRING(CPU_TIME(J),CPU_LENGTH,CPU)
C
C Deal with mean CPU time
C
	   IF (NUM_SESS(J).LE.0) THEN
	      MEAN_CPU = 'Unset'
	      MEAN_CPU_LENGTH = SIGCHS(MEAN_CPU)
	   ELSE
	      CALL CONVERT_TIME_TO_STRING(
     &		(CPU_TIME(J)/NUM_SESS(J)),
     &		MEAN_CPU_LENGTH,
     &		MEAN_CPU)
	   ENDIF
C
C Format the line
C
	   CALL EXPAND('%S20  ',A_WORK_ID(J))
	   CALL APPEND('%S%[ %]',CONNECT(1:CONNECT_LENGTH),
     &				 (22-CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CONNECT(1:MEAN_CONNECT_LENGTH),
     &				 (22-MEAN_CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				 (22-CPU_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CPU(1:MEAN_CPU_LENGTH),
     &				 (22-MEAN_CPU_LENGTH))
	   CALL APPEND('%I10',NUM_SESS(J))
C
C And output line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF()
C
C Tell the user how many workstations were found
C
	IF (NUM_WORK.GT.0) THEN
	   CALL FLWRTF('Total number of workstations is %N',NUM_WORK)
C
C Deal with the case where no workstation details are found
C
	ELSE
	   CALL FLWRTF('No workstations found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
