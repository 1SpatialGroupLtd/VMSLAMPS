	INTEGER FUNCTION PER_ELEMENT_STATISTICS_MENU(FLN_ID,ELEM_ID)
C
***	MODULE PER_ELEMENT_STATISTICS_MENU
***	IDENT 26SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			14 September 1988
C
C Routine to allow selection of option from statistics
C report menu for specific element
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C argument
	CHARACTER*(*)	FLN_ID		! flowline of interest
	CHARACTER*(*)	ELEM_ID		! element of interest
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		ELEM_WORK_STATISTICS_REPORT
	INTEGER		ELEM_OPER_STATISTICS_REPORT
	INTEGER		WIDE_SCREEN
	INTEGER		OPEN_REPORT_FILE
	INTEGER		CLOSE_REPORT_FILE
C
C w/s
	INTEGER		I		! temporary index
	INTEGER		TERM		! field terminator
	INTEGER		REDO		! .T. if to redisplay
	INTEGER		OPT_NUM		! number of options
	INTEGER		CURRENT_OPT	! current option
	INTEGER		INV_NUM		! number of invariants
	INTEGER		CURRENT_INV	! current invariant
	LOGICAL		PRINT		! .T. if to print report
	LOGICAL		ABORT		! .T. if to abort report
	CHARACTER*80	DESCR_LINE	! description title line on menu
C
C Initial current option
C
	CURRENT_OPT = 1
C
C Assume success
C
10	PER_ELEMENT_STATISTICS_MENU = LSC__NORMAL
C
C and number of invariant options (none)
C
	INV_NUM = 0
C
C Set up length of option list
C
	OPT_NUM = 4
C
C Set up options (except go top and move up) for menu
C
	OPT_LIST(1) = 'Statistics broken down by workstation'
	OPT_LIST(2) = 'Statistics broken down by operator'
C
C Move up to report menu option
C
	OPT_LIST(OPT_NUM-1)='Move up to element statistics menu'
C
C Set up go top option
C
	OPT_LIST(OPT_NUM) = 'Jump to top level menu'
C
C Set up description line for menu title
C
	CALL EXPAND('%WSFlowline %S  Element %S',DESCR_LINE,
     &			FLN_ID,ELEM_ID)
C
C Display menu form
C
	PER_ELEMENT_STATISTICS_MENU = DISPLAY_MENU(
     &		'           Specific Element Statistics Menu',
     &		DESCR_LINE,
     &		'The following options are available:')
C
C Check for errors
C
	IF (.NOT.PER_ELEMENT_STATISTICS_MENU) GOTO 900
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C Get required option
C
20	PER_ELEMENT_STATISTICS_MENU = GET_MENU_OPTION(
     &		OPT_LIST,		! option list
     &		OPT_NUM,		! number of options
     &		INV_LIST,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.PER_ELEMENT_STATISTICS_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator
C That is, RETURN for any option, or GOLD P for any report options
C
	IF ((TERM.NE.RETURN_KEY).AND.
     &	    ((CURRENT_OPT.GT.2).OR.
     &	     ((TERM.NE.GOLD_BASE+ICHAR('P')).AND.
     &	      (TERM.NE.GOLD_BASE+ICHAR('p')) ) ) ) GOTO 20
C
C Determine if the report file needs opening (first 3 options on menu)
C
	IF (CURRENT_OPT.LE.2) THEN
C
C Determine if repport is to be printed - GOLD P used as terminator
C Set flag to indicate if report is to be printed
C
	   IF ( (TERM.EQ.GOLD_BASE+ICHAR('P')).OR.
     &		(TERM.EQ.GOLD_BASE+ICHAR('p')) ) THEN
	      PRINT = .TRUE.
	   ELSE
	      PRINT = .FALSE.
C
C If report is to be displayed on screen, then set flag to indicate
C current menu needs redisplaying when report is finished
C
	      REDO = .TRUE.
C
C Set screen to 132 columns
C
	      PER_ELEMENT_STATISTICS_MENU = WIDE_SCREEN(.TRUE.)
C
C If an error occurs, set the screen to 80 columns, and loop to
C redisplay the current menu
C
	      IF (.NOT.PER_ELEMENT_STATISTICS_MENU) THEN
	         CALL WIDE_SCREEN(.FALSE.)
	         GOTO 10
	      ENDIF
	   ENDIF
C
C Now open the report file, for either screen output or printing
C
	   PER_ELEMENT_STATISTICS_MENU = OPEN_REPORT_FILE(PRINT)
C
C If an error occurs, jump straight to closing the file
C
	   IF (.NOT.PER_ELEMENT_STATISTICS_MENU) GOTO 800
	ENDIF
C
C Now determine option and perform required actions
C
C Statistics broken down by workstation
C
	IF (CURRENT_OPT.EQ.1) THEN
	   PER_ELEMENT_STATISTICS_MENU = 
     &		ELEM_WORK_STATISTICS_REPORT(FLN_ID,ELEM_ID)
C
C Statistics broken down by flowline and element
C
	ELSEIF (CURRENT_OPT.EQ.2) THEN
	   PER_ELEMENT_STATISTICS_MENU = 
     &		ELEM_OPER_STATISTICS_REPORT(FLN_ID,ELEM_ID)
C
C Move to higher level
C
	ELSEIF (CURRENT_OPT.EQ.OPT_NUM-1) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
C
C Perform go top
C
	ELSEIF (CURRENT_OPT.EQ.OPT_NUM) THEN
	   NEXT_FUNCTION = DO_GO_TOP
C
C Default do nothing
C
	ELSE
	   NEXT_FUNCTION = DO_NOTHING
	ENDIF
C
C Determine if the option selected involved report production, and
C close the report file if it did
C
800	IF (CURRENT_OPT.LE.2) THEN
C
C Determine if report was produced successfully, or if it should be
C aborted
C
	   IF (.NOT.PER_ELEMENT_STATISTICS_MENU) THEN
	      ABORT = .TRUE.
	   ELSE
	      ABORT = .FALSE.
	   ENDIF
C
C Finish of the report file (send it to printer if printing wanted)
C
	   CALL CLOSE_REPORT_FILE(PRINT,ABORT)
C
C Set screen to 80 columns if report was not printed
C
	   IF (.NOT.PRINT) CALL WIDE_SCREEN(.FALSE.)
	ENDIF
C
C Check if want to repeat menu
C
	IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	   NEXT_FUNCTION = DO_ERROR
	   GOTO 10
	ENDIF
C
C Exit
C
900	RETURN
	END
