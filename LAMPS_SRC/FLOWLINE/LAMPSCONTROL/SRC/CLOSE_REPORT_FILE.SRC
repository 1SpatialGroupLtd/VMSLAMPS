C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 12:45:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CLOSE_REPORT_FILE(PRINT,ABORT)
C
***	MODULE CLOSE_REPORT_FILE
***	IDENT 23SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to close a report file for LAMPSCONTROL
C If it is to be printed, then should close, print and delete
C If report is to be aborted, then close and delete
C Otherwise, just close it
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:DEBUGGING.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'
	INCLUDE '($JPIDEF)'
C
C arguments
	LOGICAL		PRINT		! .T. if to print report
	LOGICAL		ABORT		! .T. if to abort report
C
C functions
	INTEGER		FLWDEL		! close & delete report file
	INTEGER		FLWCLO		! close report file
	INTEGER		FLWSPL		! spool report file (print+delt)
C
C workspace
	INTEGER		IERR		! additional return code
	INTEGER		ELAPSED		! elapsed time to prepare report
	INTEGER		CPU		! cpu time to prepare report
	CHARACTER*30	TIME_STR	! string to holds times
	INTEGER		TIME_LEN	! length of time string
C
C Assume success
C
	CLOSE_REPORT_FILE = LSC__NORMAL
C
C If not aborting report, output information about how long it
C took (elapsed & cpu) to prepare
C
CCC	IF (.NOT.ABORT) THEN
C
C Select report file
C
CCC	   CALL FLWSEL(REPORTFIL_LUN)
C
C Output blank line and subtitle
C
CCC	   CALL FLWRTF()
CCC	   CALL FLWRTF('Time required to prepare report :')
C
C Work out the current date and time, and the amount of CPU time
C used by process so far
C
C Date and time
C
CCC	   CALL LIB$DAY(REPORT_END_DATE,,REPORT_END_TIME)
C
C CPU time used so far by process
C
CCC	   CALL LIB$GETJPI(JPI$_CPUTIM,,,REPORT_END_CPU)
C
C Work out elapsed time to do report 
C
CCC	   ELAPSED = (REPORT_END_TIME - REPORT_START_TIME) +
CCC     &		     (REPORT_END_DATE - REPORT_START_DATE) *
CCC     &		     (100 * 3600 * 24)
C
C Convert to string
C
CCC	   CALL CONVERT_TIME_TO_STRING(ELAPSED,TIME_LEN,TIME_STR)
C
C Report elapsed time
C
CCC	   CALL FLWRTF('   Elapsed : %S',TIME_STR(:TIME_LEN))
C
C Work out cpu time to do report
C
CCC	   CPU = REPORT_END_CPU - REPORT_START_CPU
C
C Convert to string
C
CCC	   CALL CONVERT_TIME_TO_STRING(CPU,TIME_LEN,TIME_STR)
C
C Report CPU time
C
CCC	   CALL FLWRTF('       CPU : %S',TIME_STR(:TIME_LEN))
CCC	ENDIF
C
C Check if report should be aborted, and close and delete it
C
	IF (ABORT) THEN
	   CLOSE_REPORT_FILE = FLWDEL(REPORTFIL_LUN,IERR)
C
C Check if it should be printed, and close, print and delete it
C if it should
C
	ELSEIF (PRINT) THEN
	   CLOSE_REPORT_FILE = FLWSPL(REPORTFIL_LUN,IERR)
C
C Tell user that report has been submitted to printer
C
	   CALL LCONT_PUTMSG(LSC__REPPRIN,0)
C
C Otherwise, just close the file - in this case it will
C almost certainly be sys$output i.e. the terminal
C
	ELSE
	   CLOSE_REPORT_FILE = FLWCLO(REPORTFIL_LUN,IERR)
	ENDIF
C
C Check for errors in closing report
C
	IF (.NOT.CLOSE_REPORT_FILE) THEN
	   CALL LCONT_PUTMSG(CLOSE_REPORT_FILE,0)
C
C If this is a system error, report additional return code
C
	   IF (CLOSE_REPORT_FILE.EQ.LSL__SYSCLOSE)
     &	      CALL LCONT_ADDMSG(IERR,0)
C
C Set semaphore to indicate that we should only move up to the
C next level menu, in spite of the error
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	ENDIF
C
C If were not printing report but just writing it to terminal, wait
C until the user types return to continue
C
	IF (.NOT.PRINT) THEN
	   CALL WRITEF()
	   CALL TTRSTR(,,'Press RETURN to continue :',)
C
C And clear the report text from the screen by doing an FMS fix
C
C	   CALL FDV$CLEAR()
C	   CALL FDV$FIX_SCREEN()
	ENDIF
C
C Exit
C
	RETURN
	END
