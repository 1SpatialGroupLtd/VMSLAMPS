C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-03-12 12:55:28.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION ELEMENT_DEFINITION_REPORT(FLOWLINE)
C
***	MODULE ELEMENT_DEFINITION_REPORT
***	IDENT 12MR91
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			2 September 1988
C
C Routine to produce listing on lun for current report file of
C the elements in the flowline control database
C The information displayed will include:
C	Element identifier
C	Element priority
C	Procedure identifier
C	Outcomes/Wire identifiers
C	Activation conditions
C	Element command procedure
C
	IMPLICIT NONE
C
C common blocks
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
C
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*(*)	FLOWLINE		! flowline for which
						! elements to be shown
C
C workspace
	INTEGER		NUM_ELEMENT		! number of elements
	INTEGER		NEXT_ELEMENT		! serial number of
						! next element to fetch
						! from db
	INTEGER		TOTAL_ELEMENT		! total number of elem's
C
	INTEGER		I,J			! temporary indices
	INTEGER		NUM_LINES		! number of lines to
						! output current element
						! details
C
	CHARACTER*255	ACTIVE_COND(FLN_FEW_ELEMENT)
	INTEGER		OUTCOME(FLN_MAX_OUTCOME,FLN_FEW_ELEMENT)
	INTEGER		NUM_OUTCOME(FLN_FEW_ELEMENT)
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_ELEM_ID(FLN_FEW_ELEMENT)
CCC	INTEGER		A_ELEM_PRI(FLN_FEW_ELEMENT)
CCC	CHARACTER*20	A_PROC_ID(FLN_FEW_ELEMENT)
CCC	CHARACTER*20	A_WIRE_ID(FLN_FEW_ELEMENT)
CCC	CHARACTER*255	A_COMPROC(FLN_FEW_ELEMENT)
C
C The following array is equivalenced onto (occupies the same area of storage
C as) several other square identifier arrays, and so should be used with
C caution. See the 'LARGE_ARRAYS.CMN' common block file for details.
C
CCC	CHARACTER*20	A_WIRE_ID2(FLN_MAX_OUTCOME,FLN_FEW_ELEMENT)
C
C
C functions
	INTEGER		FLN_RETRIEVE_ELEMENTS_FLOWLINE
	INTEGER		SIGCHS
C
C Assume success
C
	ELEMENT_DEFINITION_REPORT = LSC__NORMAL
C
C Initialise serial number (internal to db library routine called
C below) of next element to retrieve from database
C
	NEXT_ELEMENT = 1
C
C Initialise total number of elements found
C
	TOTAL_ELEMENT = 0
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the element listing
C
	CALL FLWRTF('LAMPSCONTROL Element Definition Report for '//
     &			'flowline %S', FLOWLINE)
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Element Id            ')
	CALL APPEND('Priority  ')
	CALL APPEND('Procedure Id          ')
	CALL APPEND('Outcome   ')
	CALL APPEND('Wire Id               ')
	CALL APPEND('Activation Condtns    ')
	CALL APPEND('Command Procedure     ')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Call the routine to get list of information on the next
C group of elements elements, starting from the next element index
C
5	ELEMENT_DEFINITION_REPORT = FLN_RETRIEVE_ELEMENTS_FLOWLINE(
     &		FLOWLINE,	! flowline of interest
     &		NEXT_ELEMENT,	! serial number of next element wanted
     &		A_ELEM_ID,	! list of elements
     &		A_COMPROC,	! element command procedure
     &		A_ELEM_PRI,	! element priority
     &		A_PROC_ID,	! procedure identifier
     &		ACTIVE_COND,	! activation condintions
     &		OUTCOME,	! possible outcome(s)
     &		A_WIRE_ID2,	! activated wire identifier(s)
     &		NUM_OUTCOME,	! number of outcomes for each element
     &		NUM_ELEMENT)	! number of elements
C
C Check for errors in reading list of elements
C
	IF (.NOT.ELEMENT_DEFINITION_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETELEM,0)
	   CALL LCONT_ADDMSG(ELEMENT_DEFINITION_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Now output the actual element details, in a loop
C
	DO 20 I = 1, NUM_ELEMENT
C
C Format the line
C
	   CALL EXPAND('%S20  ',A_ELEM_ID(I))
	   CALL APPEND('%I5%(5 %)',A_ELEM_PRI(I))
	   CALL APPEND('%S20  ',A_PROC_ID(I))
C
C Deal with the outcomes/wire identifiers, the activation conditions
C and the element command procedure.
C These may need outputting on more than one line.
C The number of lines is determined as the maximum out of the number
C of different outcomes for the current element, and the maximum number
C of lines required for the activation conditions and command procedure
C when split over columns of twenty characters.
C
	   NUM_LINES = MAX(
     &		NUM_OUTCOME(I),
     &		((SIGCHS(ACTIVE_COND(I))+19)/20),
     &		((SIGCHS(A_COMPROC(I))+19)/20) )
C
C If the number of lines required for the outcomes/wires, the activation
C conditions and the command procedure is zero, then output the 
C current line containing the element id, priority and procedure id
C
	   IF (NUM_LINES.EQ.0) CALL FLWSTR()
C
C Otherwise, output the outcomes/wires, activation conditions and 
C command procedure at the end of the current, and any subsequent,
C lines
C
 	   DO 10 J = 1, NUM_LINES
C
C If this is not the first line, pad the initial columns which
C would have held the elementr id, priority and procedure id
C
	      IF (J.GT.1) THEN
	         CALL EXPAND('%(22 %)')
	         CALL APPEND('%(10 %)')
	         CALL APPEND('%(22 %)')
	      ENDIF
C
C If there are any outcomes left, append the next to the current line
C
	      IF (J.LE.NUM_OUTCOME(I)) THEN
	         CALL APPEND('%I4%(6 %)',OUTCOME(J,I))
	         CALL APPEND('%S20%(2 %)',A_WIRE_ID2(J,I))
C
C Otherwise, there are no outcomes left, so pad the columns
C
	      ELSE
	         CALL APPEND('%(10 %)')
	         CALL APPEND('%(22 %)')
	      ENDIF
C
C If there is any of the activation condition string left, output it
C The limits are calculated from the current J index, and assume a 
C column width of 20 characters
C
	      IF ((J*20-19).LE.SIGCHS(ACTIVE_COND(I))) THEN
	         CALL APPEND('%S20  ',
     &			ACTIVE_COND(I)(
     &			   (J*20-19):
     &			   MIN( (J*20),LEN(ACTIVE_COND(1)) ) ) )
C
C Otherwise, there is non of the activation condition string left,
C so pad this column
C
	      ELSE
	         CALL APPEND('%(22 %)')
	      ENDIF
C
C If there is any of the command procedure string left, output it
C The limits are calculated from the current J index, and assume a 
C column width of 20 characters
C
	      IF ((J*20-19).LE.SIGCHS(A_COMPROC(I))) THEN
	         CALL APPEND('%S20  ',
     &			A_COMPROC(I)(
     &			   (J*20-19):
     &			   MIN( (J*20),LEN(A_COMPROC(1)) ) ) )
C
C Otherwise, there is non of the activation condition string left,
C so pad this column
C
	      ELSE
	         CALL APPEND('%(22 %)')
	      ENDIF
C
C Output the current line to the report file lun
C
	      CALL FLWSTR()
C
10	   CONTINUE
20	CONTINUE
C
C Add number of elements retrieved in this pass to total number of 
C elements
C
	TOTAL_ELEMENT = TOTAL_ELEMENT + NUM_ELEMENT
C
C Check whether there are any more elements to retrieve - this is
C indicated by a non-zero NEXT_ELEMENT return from the library routine
C to retrieve the element details from the database
C
	IF (NEXT_ELEMENT.NE.0) GOTO 5
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many elements were found
C
	IF (NUM_ELEMENT.GT.0) THEN
	   CALL FLWRTF('Total number of elements is %N',TOTAL_ELEMENT)
C
C Deal with the case where no element details are found
C
	ELSE
	   CALL FLWRTF('No elements found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
