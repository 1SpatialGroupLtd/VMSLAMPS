C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 14:40:28.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION FIND_LOG_DETAILS(
     &	 ERROR,TIME,USER,WKS,PROCESS,ACTION,PROJECT,JOB,ELEM,PROBLEM)
C
***	MODULE FIND_LOG_DETAILS
***	IDENT 27SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to find details for LAMPSCONTROL error log entry
C This routine finds the details independently, to ensure integrity,
C and without calling the error reporting routines, of which it is
C a part.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE '($JPIDEF)'
C
C arguments
	INTEGER		ERROR	! input, original error number
	CHARACTER*(*)	TIME	! current time/date
	CHARACTER*(*)	USER	! process user name/operator id
	CHARACTER*(*)	WKS	! current workstation
	CHARACTER*(*)	PROCESS	! current process
	CHARACTER*(*)	ACTION	! what's being done with LAMPSCONTROL
	CHARACTER*(*)	PROJECT	! project if error is LSC__SESSERROR
	CHARACTER*(*)	JOB	! job              ditto
	CHARACTER*(*)	ELEM	! element          ditto
	CHARACTER*(*)	PROBLEM ! problem          ditto
C
C w/s
	INTEGER		LENGTH	! dummy length variable
C
C functions
	INTEGER		LIB$GETJPI	! get process information
	INTEGER		LIB$DATE_TIME	! current time for stamp
	INTEGER		TRNALL		! translate logical name
	INTEGER		FLN_RETRIEVE_SESSION_PJE
					! current proj, job, elem
					! for session termination error
	INTEGER		FLN_RETRIEVE_INFO_JOB_ID
					! find job name and project id
					! from job id
	INTEGER		SIGNCH		! no. signif. chars. in string
					! or 1 if there are none
C
C Assume success
C
	FIND_LOG_DETAILS = LSC__NORMAL
C
C Call library routine to determine process's user name
C
	USER = 'Unknown'
C
	FIND_LOG_DETAILS = LIB$GETJPI(
     &				JPI$_USERNAME,,,,! item code
     &				USER)		! name string
C
C Check for errors
C
	IF (.NOT.FIND_LOG_DETAILS) THEN
	   USER = 'Unknown'
	ENDIF
C
C Call library routine to determine process's user name
C
	FIND_LOG_DETAILS = LIB$GETJPI(
     &				JPI$_PRCNAM,,,,! item code
     &				PROCESS)		! name string
C
C Check for errors
C
	IF (.NOT.FIND_LOG_DETAILS) THEN
	   PROCESS = 'Unknown'
	ENDIF
C
C Find workstation name from LSL$FLN_WORKSTATION
C
	IF (.NOT.TRNALL('lsl$fln_workstation',WKS)) WKS = 'Unknown'
C
C Find out current date/time as a string, for time stamp
C
	IF (.NOT.LIB$DATE_TIME(TIME)) TIME = 'Unknown'
C
C Determine which action you are attempting to carry out with
C LAMPSCONTROL by examining the qualifier flags
C
	IF (NOTIFY) THEN
	   ACTION = 'Unknown notify'
C
C If it is notify job started, give the job and project
C
	   IF (NOTIFY_JOB) THEN
	      ACTION = 'Notify job started'
C
C Retrieve project id and job name from database
C
	      FIND_LOG_DETAILS = FLN_RETRIEVE_INFO_JOB_ID(
     &			NOTIFY_JOB_ID,JOB,PROJECT)
C
C Check for errors in retrieving log details
C
	      IF (.NOT.FIND_LOG_DETAILS) THEN
	         CALL EXPAND('%WSIdentifier %N',JOB,NOTIFY_JOB_ID)
	         PROJECT = 'Not available'
	      ENDIF
	   ENDIF
C
C If it is notify project started, give the project id
C
	   IF (NOTIFY_PROJECT) THEN
	      ACTION = 'Notify project started'
	      PROJECT = NOTIFY_PROJECT_ID
	   ENDIF
C
C If it is notify session, then give the project, job and element
C
	   IF (NOTIFY_SESSION) THEN
	      ACTION = 'Notify session finished'
C
C Determine project, job and element giving trouble
C
	      FIND_LOG_DETAILS = FLN_RETRIEVE_SESSION_PJE(
     &		NOTIFY_SESSION_ID,	! id of current session
     &		PROJECT,		! retrieved project id
     &		JOB,			! retrieved job name
     &		ELEM)			! retrieved element id
C
C Check for errors
C
	      IF (.NOT.FIND_LOG_DETAILS) THEN
	         PROJECT = 'Unknown'
	         JOB = 'Unknown'
	         ELEM = 'Unknown'
	      ENDIF
	   ENDIF
C
C Determine problem text, which may be present for any of the
C notify operations
C
	   IF (NOTIFY_PROBLEM) THEN 
	      PROBLEM = NOTIFY_PROBLEM_TEXT(1:NOTIFY_PROBLEM_LEN)
	   ELSE
	      PROBLEM = 'Unknown'
	   ENDIF
C
C Deal with errors doing manage actions
C
	ELSEIF (MANAGE) THEN
	   ACTION = 'Manage actions'
	   IF (CREATE_JOB) ACTION = 'Non-interactive job creation'
C
C Deal with errors doing report operations
C
	ELSEIF (REPORT) THEN
	   ACTION = 'Report actions'
C
C Deal with request in menus
C
	ELSEIF (REQUEST.AND.MENU) THEN
	   ACTION = 'Operator request'
C
C Deal with automatic request
C
	ELSEIF (REQUEST.AND.(.NOT.MENU)) THEN
	   ACTION = 'Non-interactive task selection'
C
C Deal with undetermined action (including entry via
C top level control menu)
C
	ELSE
	   ACTION = 'Unknown action'
	ENDIF
C
C If the message indicates that a command procedure is being created,
C add something to the ACTION string which inidicates the type
C of the command procedure
C
	IF (ERROR.EQ.LSC__CRTJCP) THEN
C
C Check for job creation command procedure
C
	   IF (NEXT_FUNCTION.EQ.DO_CREATE_JOB) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) //
     &			' using job launching com. proc.'
C
C Check for project creation command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_CREATE_PROJECT) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) //
     &			' using project creation com. proc.'
C
C Check for task command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_TASK) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using task com. proc.'
C
C Check for null command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_NOTHING) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using null com. proc.'
C
C Check for logoff command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_LOGOFF) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using logoff com. proc.'
C
C Check for wait command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_WAIT) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using wait com. proc.'
C 
C Check for error command procedure
C
	   ELSEIF (NEXT_FUNCTION.EQ.DO_ERROR) THEN
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using error com. proc.'
C
C Otherwise, say the command procedure is not known
C
	   ELSE
	      ACTION = ACTION(1:SIGNCH(ACTION)) // 
     &			' using unknown com. proc.'
	   ENDIF
	ENDIF
C
C Exit
C
	RETURN
	END
