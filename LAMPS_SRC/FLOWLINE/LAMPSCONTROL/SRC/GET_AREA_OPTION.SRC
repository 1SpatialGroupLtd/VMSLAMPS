C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 15:21:38.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_AREA_OPTION(FID,LINE,MAX_LINE,TERM)
C
***	MODULE GET_AREA_OPTION
***	IDENT 27SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to get option line number from current scrolled area
C Routine assumes that current line is in argument variable
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	FID		! scrolled area field name
	INTEGER		LINE		! current line
	INTEGER		MAX_LINE	! maximum number of lines
	INTEGER		TERM		! terminator used
C
C w/s
	CHARACTER*100	FVAL		! dummy field value variable
	CHARACTER*100	VALUE		! to preserve line contents
C
C Assume success
C
	GET_AREA_OPTION = LSC__NORMAL
C
C Preserve the current line contents
C
10	CALL FDV$RETN(VALUE,FID)
C
C Get current field/line
C
	CALL FDV$INLN(FID,FVAL,TERM)
C
C Now output the original line, in case the user has done any overtyping
C
	CALL FDV$OUTLN(FID,VALUE)
C
C Check on which terminator was used
C
C If this was an autotab, a tab, or a tab from final field in line,
C then ignore it
C
	IF (TERM.EQ.AUTOTAB) GOTO 10
C
C Clear the last lines of the screen prior to dealing with terminator
C i.e. get rid of any messages still hanging around at bottom of screen
C
	CALL CLEAR_MESSAGE_LINES()
C
C Deal with up arrow
C
	IF (TERM.EQ.UP_ARROW) THEN
C
C Check if able to move up
C
	   IF (LINE.GT.1) THEN
	      LINE = LINE - 1
	      CALL FDV$PFT(TERM)
C
C If at top item, move down to bottom one (wrap around)
C
	   ELSE
20	      IF (LINE.LT.MAX_LINE) THEN
	         CALL FDV$PFT(DOWN_ARROW)
	         LINE = LINE + 1
	         GOTO 20
	      ENDIF
CCC	      CALL FORM_PUTMSG('No previous option',-1,0)
	   ENDIF
C
C Deal with down arrow
C
	ELSEIF (TERM.EQ.DOWN_ARROW) THEN
C
C Check if can move down
C
	   IF (LINE.LT.MAX_LINE) THEN
	      LINE = LINE + 1
	      CALL FDV$PFT(TERM)
C
C If a bottom item, move up to top one (wrap around)
C
	   ELSE
30	      IF (LINE.GT.1) THEN
	         CALL FDV$PFT(UP_ARROW)
	         LINE = LINE - 1
	         GOTO 30
	      ENDIF
CCC	      CALL FORM_PUTMSG('No next option',-1,0)
	   ENDIF
C
C Deal with any other terminator i.e. exit program with current 
C line value
C
	ELSE
	   GOTO 900
	ENDIF
C
C Now repeat loop for next line
C
	GOTO 10
C
C Exit
C
900	RETURN
	END
