C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 16:40:00.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION TASK_STATUS_MENU
     &			(CONT_JOB_ID,CONT_JOB_NAME,CONT_PROJ_ID)
C
***	MODULE TASK_STATUS_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Menu to examine/modify the status of the tasks in the
C system
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	INTEGER		CONT_JOB_ID		! id job containing task
	CHARACTER*(*)	CONT_JOB_NAME		! job containing task
	CHARACTER*(*)	CONT_PROJ_ID		! id project cont'g task
C
C w/s
	INTEGER		NUM_TASK			! num tasks
C
	INTEGER		CURRENT_OPT		! current option
	INTEGER		CURRENT_INV		! current inv'nt
	INTEGER		NUM_INV			! num invariants
C
	INTEGER		TERM			! fms terminator
	INTEGER		REDISPLAY		! .T. redo menu
	CHARACTER*50	FVAL			! field value
C
	INTEGER		I			! tempar'y count
	LOGICAL		STARTED			! continue/restart flag
						! for task release
C
	CHARACTER*70	DESCRIPTION_LINE	! for menu line
C
C for task skipping
C
	LOGICAL		JUST_SKIPPED_TASK ! .T. if last operation
					! was to skip a task
	INTEGER		SKIP_OUTCOME	! outcome when skipping
	INTEGER		NUM_LOC_PARAMS	! number of local parameters
	INTEGER		NUM_GLOB_PARAMS	! number of global parameters
	INTEGER		NUM_EXT_PARAMS	! number of external parameters
	CHARACTER*100	LOC_PARAMS(16)	! local parameters passed on
	CHARACTER*100	GLOB_PARAMS(16)	! global parameters passed on
	CHARACTER*100	EXT_PARAMS(16)	! external parameters passed on
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	INTEGER		A_TASK_ID(FLN_MAX_TASK)		! task ids
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_TASK)		! element IDs
CCC	CHARACTER*20	A_TASK_STATUS(FLN_MAX_TASK)	! task status
CCC	CHARACTER*80	A_MENU(FLN_MAX_TASK)		! lines on menu
C
C functions
	INTEGER		FLN_RETRIEVE_TASKS_JOB
	INTEGER		FLN_SKIP_TASK
	INTEGER		FLN_HOLD_TASK
	INTEGER		FLN_RELEASE_TASK
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		RDINT
	INTEGER		SIGCHS
	INTEGER		GET_PARAMETERS_FORM
C
C Clear flag to indicate have not just skipped a task
C
	JUST_SKIPPED_TASK = .FALSE.
C
C Assume success
C
5	TASK_STATUS_MENU = LSC__NORMAL
C
C Set up defaults for menu display etc
C
	CURRENT_OPT = 1
	CURRENT_INV = 0
	REDISPLAY   = .TRUE.
C
C Set up invariant menu list options
C
	INV_LIST(1) = 'Move up to job status modification menu'
	INV_LIST(2) = 'Jump to top level menu'
	NUM_INV = 2
C
C Read the list of tasks from database
C
	TASK_STATUS_MENU = FLN_RETRIEVE_TASKS_JOB(
     &		CONT_JOB_ID,	! job containing these tasks
     &		A_TASK_ID,	! array of task ids
     &		A_ELEM_ID,	! array of element names
     &		A_TASK_STATUS,! array of task statuses
     &		NUM_TASK)	! number of tasks
C
C Check for a no such job error in the case when a task has just
C been skipped.
C These will arise if the task was the last one in the job, and
C skipping it lead to the job being finished.
C Thus the job nolonger exists, so the user should be informed
C of the occurence, and returned to the project status modification
C menu.
C
	IF ((TASK_STATUS_MENU.EQ.FLN__NOSUCHJOB).AND.
     &	    (JUST_SKIPPED_TASK)) THEN
C
C Inform user of job end
C
	   CALL LCONT_PUTMSG(LSC__JOBFINISHED,0)
C
C Reset returned value to indicate success
C
	   TASK_STATUS_MENU = LSC__NORMAL
C
C Required operation is to move up a menu level
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C And exit from this menu
C
	   GOTO 999
	ENDIF
C
C Deal with any errors not of the above sort
C
	IF (.NOT.TASK_STATUS_MENU) THEN
	   CALL LCONT_PUTMSG(TASK_STATUS_MENU,0)
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Clear flag to indicate have not just skipped a task
C
	JUST_SKIPPED_TASK = .FALSE.
C
C Assemble list including task_id, status and priority on same line
C
	DO 10 I = 1,NUM_TASK
C
C Ensure menu list array is empty
C
	   A_MENU(I) = '     '
C
C Now expand the required text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20',
     &			%REF(A_MENU(I)),
     &			A_ELEM_ID(I),
     &			A_TASK_STATUS(I))
C
10	CONTINUE
C
C Construct the menu description line
C
15	DESCRIPTION_LINE = '  '
C
	CALL EXPAND('%WProject %S  Job %S',
     &		%REF(DESCRIPTION_LINE),CONT_PROJ_ID,CONT_JOB_NAME)
C
C Display the menu page
C
	TASK_STATUS_MENU = DISPLAY_MENU(
     &		'                Task Status Modification Menu',
     &		DESCRIPTION_LINE,
     &		'Element Id               Status                   ')
C
C Deal with errors
C
	IF (.NOT.TASK_STATUS_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Set the flag to indicate menu must be redisplayed
C
	REDISPLAY = .TRUE.
C
C Now display the menu
C
20	TASK_STATUS_MENU = GET_MENU_OPTION(
     &		A_MENU,	! list of main options
     &		NUM_TASK,	! number of main options
     &		INV_LIST,	! list of invariant options
     &		NUM_INV,	! number of invariant options
     &		CURRENT_OPT,	! current main option
     &		CURRENT_INV,	! current invariant option
     &		OPT_AREA_LEN,	! number of lines in scrolled area
     &		OPT_FIELD,	! option field name
     &		TERM,		! fms field terminator used to exit
     &		REDISPLAY)	! .T. if to redisplay menu on entry
C
C Deal with errors
C
	IF (.NOT.TASK_STATUS_MENU) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C---------------------------------------------------------------------
C Check the terminators and act accordingly
C
C---------------------------------------------------------------------
C Deal with RETURN
C
	IF (TERM.EQ.RETURN_KEY) THEN
C
C If task selected, do nothing, just loop for next selection
C
	   IF (CURRENT_OPT.GT.0) THEN
	      REDISPLAY = .FALSE.
	      GOTO 20
C
C Otherwise it is an invariant option
C
C---------------------------------------------------------------------
C Deal with move up option
C
	   ELSEIF (CURRENT_INV.EQ.1) THEN
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
C
C---------------------------------------------------------------------
C Deal with go top
C
	   ELSEIF (CURRENT_INV.EQ.2) THEN
	      NEXT_FUNCTION = DO_GO_TOP
	      GOTO 999
	   ENDIF
C
C---------------------------------------------------------------------
C Deal with task skipping i.e. GOLD S
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('S'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('s')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Prompt the user to determine task outcome (return = don't do it)
C
30	   CALL FORM_GETLINE(FVAL,TERM,0,
     &		'Task outcome (RETURN to abort) : ')
C
C Determine the value returned
C
	   CALL SETAUX(%REF(FVAL),20)
C
C Attempt to convert integer from string
C
	   IF (RDINT(SKIP_OUTCOME)) THEN
C
C Reset pointer to default decode buffer
C
	      CALL BSLN
C
C If it fails, check if response was null string i.e. RETURN to abort
C
	      IF (SIGCHS(FVAL).EQ.0) THEN
	         REDISPLAY = .FALSE.
	         GOTO 20
C
C Otherwise, it is not a legal integer or RETURN, so complain,
C and loop for re-entry
C
	      ELSE
	         CALL FORM_PUTMSG(
     &			'Not a legal response (Integer or RETURN).',
     &			-1,0)
	         GOTO 30
	      ENDIF
	   ENDIF
C
C Reset decode pointer to point to default buffer
C
	   CALL BSLN
C
C Initialise number of local, global and external parameters
C
	   NUM_LOC_PARAMS = 0
	   NUM_GLOB_PARAMS = 0
	   NUM_EXT_PARAMS = 0
C
C Ask the user if want to enter parameters
C
35	   CALL FORM_GETLINE(FVAL,TERM,0,
     &		'Enter parameters (Y/N) ? ')
C
C Check if answer is 'Y' or 'y'
C
	   IF ((FVAL(1:1).EQ.'Y').OR.(FVAL(1:1).EQ.'y')) THEN
C
C The user wants to enter the local, global and external parameters,
C so allow this using the relevant forms
C
C Now get the local parameters
C
	      TASK_STATUS_MENU = GET_PARAMETERS_FORM(
     &		'Local Parameters',	! title of parameters
     &		NUM_LOC_PARAMS,		! number of parameters found
     &		LOC_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (.NOT.TASK_STATUS_MENU) GOTO 15
C
C Check if abort form terminator used, loop back to main form if it is
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (TERM.EQ.ABORT_FORM) GOTO 15
C
C Now get the global parameters
C
	      TASK_STATUS_MENU = GET_PARAMETERS_FORM(
     &		'Global Parameters',	! title of parameters
     &		NUM_GLOB_PARAMS,	! number of parameters found
     &		GLOB_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (.NOT.TASK_STATUS_MENU) GOTO 15
C
C Check if abort form terminator used, loop back to main form if it is
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (TERM.EQ.ABORT_FORM) GOTO 15
C
C Now get the external parameters
C
	      TASK_STATUS_MENU = GET_PARAMETERS_FORM(
     &		'External Parameters',	! title of parameters
     &		NUM_EXT_PARAMS,		! number of parameters found
     &		EXT_PARAMS,		! parameter array
     &		TERM)			! terminator used to exit form
C
C Check for errors
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (.NOT.TASK_STATUS_MENU) GOTO 15
C
C Check if abort form terminator used, loop back to main form if it is
C Jump back to redisplay menu without getting list of tasks again
C
	      IF (TERM.EQ.ABORT_FORM) GOTO 15
	   ENDIF
C
C Skip the task
C
	   TASK_STATUS_MENU = FLN_SKIP_TASK(
     &		A_TASK_ID(CURRENT_OPT),
     &		SKIP_OUTCOME,
     &		NUM_LOC_PARAMS,
     &		LOC_PARAMS,
     &		NUM_GLOB_PARAMS,
     &		GLOB_PARAMS,
     &		NUM_EXT_PARAMS,
     &		EXT_PARAMS)
C
C Deal with errors
C
	      IF (.NOT.TASK_STATUS_MENU) THEN
	         CALL LCONT_PUTMSG(TASK_STATUS_MENU,0)
	         GOTO 5
	      ENDIF
C
C Set a flag to indicate a task has just been skipped.
C This is tested if the attempt to retrieve the current list
C of tasks in the job results in a no such job error.
C This will occur if the task just skipped was the last one
C in the job - so that the job has been deleted.
C
	   JUST_SKIPPED_TASK = .TRUE.
C
C The task has now been skipped, so must get new list of tasks
C and display it.
C
	   GOTO 5
C
C---------------------------------------------------------------------
C Deal with task held i.e. GOLD H
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('H'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('h')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Put the task to held in database
C
	   TASK_STATUS_MENU = 
     &			FLN_HOLD_TASK(A_TASK_ID(CURRENT_OPT))
C
C Deal with errors
C
	   IF (.NOT.TASK_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(TASK_STATUS_MENU,0)
	      GOTO 5
	   ENDIF
C
C Now amend the local status array
C
	   A_TASK_STATUS(CURRENT_OPT) = 'Held'
C
C And update the menu item on display
C Ensure menu list array entry is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_ELEM_ID(CURRENT_OPT),
     &			A_TASK_STATUS(CURRENT_OPT))
C
C And loop for next option
C
	   REDISPLAY = .TRUE.
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with TASK release i.e. GOLD R
C
	ELSEIF (((TERM.EQ.(GOLD_BASE + ICHAR('R'))).OR.
     &		 (TERM.EQ.(GOLD_BASE + ICHAR('r')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Prompt the user to determine if restarted
C
	   CALL FORM_GETLINE(FVAL,TERM,0,
     &		'Treat task as if no sessions have'//
     &		' been performed in it (Y/N) ? ')
C
C Test the value returned, to determine value of restart flag
C
	   IF ((FVAL(1:1).EQ.'Y').OR.(FVAL(1:1).EQ.'y')) THEN
	      STARTED = .FALSE.
	   ELSE
	      STARTED = .TRUE.
	   ENDIF
C
C Release the TASK in database (change to 'Active' status)
C
	   TASK_STATUS_MENU = 
     &		FLN_RELEASE_TASK(A_TASK_ID(CURRENT_OPT),STARTED)
C
C Deal with errors
C
	   IF (.NOT.TASK_STATUS_MENU) THEN
	      CALL LCONT_PUTMSG(TASK_STATUS_MENU,0)
	      REDISPLAY = .FALSE.
	      GOTO 20
	   ENDIF
C
C Now amend the local status array
C
	   A_TASK_STATUS(CURRENT_OPT) = 'Inactive'
C
C And update the menu item on display
C Ensure menu list array entry is empty
C
	   A_MENU(CURRENT_OPT) = '     '
C
C Now expand the new text line into the menu option list string
C
	   CALL EXPAND('%W%S20     %S20',
     &			%REF(A_MENU(CURRENT_OPT)),
     &			A_ELEM_ID(CURRENT_OPT),
     &			A_TASK_STATUS(CURRENT_OPT))
C
C Mark that must redisplay menu
C
	   REDISPLAY = .TRUE.
C
C And loop for next option
C
	   GOTO 20
C
C---------------------------------------------------------------------
C Deal with unrecognised key sequence - just ignore it and loop
C back to allow entry of next option without redisplaying menu
C
	ELSE
	   REDISPLAY = .FALSE.
	   GOTO 20
	ENDIF
C
C Exit
C
999	RETURN
	END
