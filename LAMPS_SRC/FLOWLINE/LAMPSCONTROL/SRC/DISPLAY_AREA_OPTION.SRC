C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 12:51:10.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION DISPLAY_AREA_OPTION
     &		(FID,DISPLAY,DISPLAY_LEN,MAX_LEN,LINE,REQUIRED_LINE)
C
***	MODULE DISPLAY_AREA_OPTION
***	IDENT 29SE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			13 April 1988
C
C Routine to display specified option lines in scrolled area with
C field of specified name
C The routine on exit leaves the current line as the selected required
C line, given the current line passed to it as a starting point
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	FID			! scroll area field name
	INTEGER		DISPLAY_LEN		! number of options
	INTEGER		MAX_LEN			! max number of lines
	CHARACTER*(*)	DISPLAY(DISPLAY_LEN)	! possible option list
	INTEGER		LINE			! current line
	INTEGER		REQUIRED_LINE		! required current line
						! 0 or less if no change
C
C w/s
	INTEGER		I			! temporary index
	CHARACTER*255	FVAL			! dummy field value
C
C functions
	INTEGER		SIGNCH			! no. signif chars in
						! string, or 1 if there
						! are none
C
C Assume success
C
	DISPLAY_AREA_OPTION = LSC__NORMAL
C
C Mark form as not displayed
C
	CALL FDV$NDISP
C
C If previous menu not usable do multiple scrolls
C feeding in blank lines to ensure nothing is left in the scrolled
C area
C
	IF (.NOT.PREVIOUS_MENU_USABLE) THEN
C
C Set all lines in the scrolled area back to defaults (ie blank)
C Do this by reading the values of all unscrolled fields, outputting
C the defaults to all fields (both scrolled and unscrolled), and
C then restoring the values to all the unscrolled fields
C
C Of course this doesn't appear to work, probably because of a bug
C in the way in which FMS routine FDV$PUTAL deals with display
C only fields - it refuses to output the values to the display
C only fields at the top of the menu form.
C
CCC	   CALL FDV$RETAL(FVAL)	! store values of unscrolled fields
CCC	   CALL FDV$PUTAL()	! restore defaults to all fields
CCC	   CALL FDV$PUTAL(FVAL(1:SIGNCH(FVAL)))	
CCC				! restore values to unscrolled fields
C
C Move to top line
C
	   DO 5 I = 0, MAX_LEN + MAX_LEN
	      CALL FDV$PFT(UP_ARROW)
5	   CONTINUE
C
C Feed in blank lines
C
CCC	   DO 10 I = 0, MAX_LEN
CCC	      CALL FDV$PFT(UP_ARROW,'OPTION',' ')
CCC10	   CONTINUE
	ENDIF
C
C Reset Current Line
C
	LINE = 1
C
C Now move up or down to the required line
C
20	IF ((REQUIRED_LINE.GE.1).AND.(REQUIRED_LINE.NE.LINE)) THEN
C
C Move up a line if required
C
	   IF (REQUIRED_LINE.LT.LINE) THEN
	      LINE = LINE - 1
	      CALL FDV$PFT(UP_ARROW)
C
C Move down a line if required
C 
	   ELSEIF (REQUIRED_LINE.GT.LINE) THEN
	      LINE = LINE + 1
	      CALL FDV$PFT(DOWN_ARROW)
	   ENDIF
C
	   GOTO 20
	ENDIF
C
C Output each line in turn, from the last to the first, scrolling
C down each time, so that line comes in as first
C
	DO 30 I = DISPLAY_LEN,1,-1
	   CALL FDV$PFT(UP_ARROW,FID,DISPLAY(I))
30	CONTINUE
C
C Now that changes have been made, display the form
C
	CALL FDV$DISPW
C
C Mark menu as used
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Exit
C
	RETURN
	END
