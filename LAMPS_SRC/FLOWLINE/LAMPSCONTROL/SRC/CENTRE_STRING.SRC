C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 10:06:40.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION CENTRE_STRING(IN,WIDTH,OUT)
C
***	MODULE CENTRE_STRING
***	IDENT 05OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			14 September 1988
C
C Routine to centre the input string IN assuming a line width WIDTH,
C and place it in the output string OUT
C
	IMPLICIT NONE
C
C common blocks
CCC	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROL.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	IN		! input string
	INTEGER		WIDTH		! line width
	CHARACTER*(*)	OUT		! output string
C
C workspace
	INTEGER		FIRST_CHAR	! first signif char in input
	INTEGER		LAST_CHAR	! last signif char input
	INTEGER		PAD		! number of padding spaces
C
C functions
	INTEGER		SIGCHS
C
C Assume success
C
	CENTRE_STRING = LSC__NORMAL
C
C Find last significant character in input string
C
	LAST_CHAR = SIGCHS(IN)
C
C Check for case where input has no significant characters, set up
C blank output, and exit
C
	IF (LAST_CHAR.EQ.0) THEN
	   OUT = ' '
	   GOTO 950
	ENDIF
C
C Find first significant character in input
C
C Initialise first character pointer
C
	FIRST_CHAR = 1
C 
C Check if character pointed at by FIRST_CHAR is a space
C
10	IF ((IN(FIRST_CHAR:FIRST_CHAR).EQ.' ').AND.
     &	    (FIRST_CHAR.LT.LAST_CHAR) ) THEN
C
C Increment first character pointer and loop
C
	   FIRST_CHAR = FIRST_CHAR + 1
	   GOTO 10
	ENDIF
C
C Determine number of padding spaces
C Add 1 before the divide so that, if the actual width difference is 
C odd, the extra space will be placed before the string. This seems to
C give a better appearance than placing it after the string.
C
	PAD = (1 + WIDTH - (LAST_CHAR - FIRST_CHAR + 1)) / 2
C
C Ensure that the text will not overflow the output string
C
	IF (LEN(OUT).LT.(LAST_CHAR - FIRST_CHAR + 1)) THEN
	   LAST_CHAR = LEN(OUT) + FIRST_CHAR - 1
	ENDIF
C
	IF (LEN(OUT).LT.(PAD + (LAST_CHAR - FIRST_CHAR + 1))) THEN
	   PAD = LEN(OUT) - (LAST_CHAR - FIRST_CHAR + 1)
	ENDIF
C
C Expand padded string into the output string
C
	CALL EXPAND('%WS%[ %]%S',OUT,PAD,IN(FIRST_CHAR:LAST_CHAR))
C
C Exit
C
950	RETURN
	END
