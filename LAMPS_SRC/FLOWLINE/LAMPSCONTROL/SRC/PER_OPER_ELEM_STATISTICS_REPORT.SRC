C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 16:34:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PER_OPER_ELEM_STATISTICS_REPORT(OPER_ID)
C
***	MODULE PER_OPER_ELEM_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to an operator using the 
C flowline control system, broken down by element.
C The information displayed will include:
C	Flowline id
C	Element id
C	Total connect time
C	Average connect time per session
C	Total CPU time
C	Average CPU time per session
C	Number of sessions performed by operator
C
C Times will be displayed in hh:mm:ss.cc format
C
C The connect and CPU times are recovered from the database in integer
C hundredths of seconds.
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C arguments
	CHARACTER*(*)	OPER_ID			! operator of interest
C
C w/s
	INTEGER		NUM_FLN			! number of flowlines
	INTEGER		NUM_ELEM		! number of elements
	INTEGER		I,J,K			! temporary count varble
C
	INTEGER		TOTAL_FLN		! total number of 
						! flowlines for which 
						! any work done by 
						! current operator
	INTEGER		TOTAL_ELEM		! total elements done by
						! current operator
	INTEGER		TOTAL_SESS		! total sessions done by
						! current operator
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	CONNECT			! connect time string
	INTEGER		CONNECT_LENGTH		! length of connect str
	CHARACTER*20	MEAN_CPU		! mean cpu time string
	INTEGER		MEAN_CPU_LENGTH		! length mean cpu string
	CHARACTER*20	MEAN_CONNECT		! mean connect time str
	INTEGER		MEAN_CONNECT_LENGTH	! len mean connect str
	REAL		MEAN_SESS		! mean num. sessions
C
	INTEGER		CPU_TIME(FLN_MAX_ELEMENT)	! cpu time
	INTEGER		CONNECT_TIME(FLN_MAX_ELEMENT)	! connect time
	INTEGER		NUM_SESS(FLN_MAX_ELEMENT)	! no. sessions
	REAL		QUOTIENT(FLN_MAX_ELEMENT)	! efficncy quot
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_FLOW_ID(FLN_MAX_FLOWLINE)	! flowline ids
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_ELEMENT)	! element ids
C
C functions
	INTEGER		FLN_RETRIEVE_OPER_ELEM_TIMINGS
	INTEGER		FLN_RETRIEVE_ALL_OPER_IDS
	INTEGER		FLN_RETRIEVE_ALL_FLOWLINE_IDS
	INTEGER		SIGCHS
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	PER_OPER_ELEM_STATISTICS_REPORT = LSC__NORMAL
C
C Get list of all flowlines using the system
C
	PER_OPER_ELEM_STATISTICS_REPORT = FLN_RETRIEVE_ALL_FLOWLINE_IDS(
     &		A_FLOW_ID,	! flowline identifiers
     &		NUM_FLN)	! number of flowlines
C
C Check for errors in reading list of flowlines
C
	IF (.NOT.PER_OPER_ELEM_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETFLN,0)
	   CALL LCONT_ADDMSG(PER_OPER_ELEM_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the operator listing
C
	CALL FLWRTF('LAMPSCONTROL Statistics '//
     &		    'Broken Down By Element For Operator %S',OPER_ID)
C
C Output blank line
C
	CALL FLWRTF()
C
C Initialise totals of the number of flowlines, elements, sessions 
C by operator
C
	TOTAL_FLN  = 0
	TOTAL_ELEM = 0
	TOTAL_SESS = 0
C
C Output the header line, with column titles
C
	CALL EXPAND('Flowline ident        ')
	CALL APPEND('Element Ident         ')
	CALL APPEND('Connect time      ')
	CALL APPEND('Connect/session   ')
	CALL APPEND('CPU time          ')
	CALL APPEND('CPU/session       ')
	CALL APPEND('No. sessions')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Output the details per flowline, in a loop
C
	DO 20 J = 1, NUM_FLN
C
C Call the routine to get overall statistics on current operator
C in current flowline of interest broken down by element
C
	   PER_OPER_ELEM_STATISTICS_REPORT = 
     &		FLN_RETRIEVE_OPER_ELEM_TIMINGS(
     &			OPER_ID,	! operator identifier
     &			A_FLOW_ID(J),	! flowline identifier
     &			A_ELEM_ID,	! element identifiers
     &			CPU_TIME,	! cpu time used by operator
     &			CONNECT_TIME,	! connect time used by operator
     &			NUM_SESS,	! number of sessions by operator
     &			QUOTIENT,	! efficiency quotients
     &			NUM_ELEM)	! number of operators
C
C Check for errors in reading list of operators
C
	   IF (.NOT.PER_OPER_ELEM_STATISTICS_REPORT) THEN
	      CALL LCONT_PUTMSG(LSC__UNRETWKS,0)
	      CALL LCONT_ADDMSG(PER_OPER_ELEM_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	      NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      GOTO 999
	   ENDIF
C
C Increment count of number of elements done by operator
C
	   TOTAL_ELEM = TOTAL_ELEM + NUM_ELEM
C
C Increment number of flowlines for which work has been done by
C this operator, if any elements in current flowline have been
C done by it
C
	   IF (NUM_ELEM.GT.0) TOTAL_FLN = TOTAL_FLN + 1
C
C Output details for each element for current operator
C
	   DO 10 K = 1, NUM_ELEM
C
C Increment count of number of sessions done by operator
C
	      TOTAL_SESS = TOTAL_SESS + NUM_SESS(K)
C
C Convert the times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with total connect time
C
	      CALL CONVERT_TIME_TO_STRING(
     &			CONNECT_TIME(K),	! 100ths seconds
     &			CONNECT_LENGTH,		! length of time string
     &			CONNECT)		! time string
C
C Deal with mean connect time
C
	      IF (NUM_SESS(K).GT.0) THEN
	         CALL CONVERT_TIME_TO_STRING(
     &			(CONNECT_TIME(K)/NUM_SESS(K)),
     &			MEAN_CONNECT_LENGTH,
     &			MEAN_CONNECT)
	      ELSE
	         MEAN_CONNECT = 'Unset'
	         MEAN_CONNECT_LENGTH = SIGCHS(MEAN_CONNECT)
	      ENDIF
C
C Deal with total cpu time
C
	      CALL CONVERT_TIME_TO_STRING(
     &			CPU_TIME(K),
     &			CPU_LENGTH,
     &			CPU)
C
C Deal with mean cpu time
C
	      IF (NUM_SESS(K).GT.0) THEN
	         CALL CONVERT_TIME_TO_STRING(
     &			(CPU_TIME(K)/NUM_SESS(K)),
     &			MEAN_CPU_LENGTH,
     &			MEAN_CPU)
	      ELSE
	         MEAN_CPU = 'Unset'
	         MEAN_CPU_LENGTH = SIGCHS(MEAN_CPU)
	      ENDIF
C
C Format the line
C
C If this is first element in flowline, output the flowline
C identifier, otherwise, output a blank space
C
	      IF (K.EQ.1) THEN
	         CALL EXPAND('%S20  ',A_FLOW_ID(J))
	      ELSE
	         CALL EXPAND('%(22 %)')
	      ENDIF
C
C Format remaining columns in line
C
	      CALL APPEND('%S20  ',A_ELEM_ID(K))
	      CALL APPEND('%S%[ %]',CONNECT(1:CONNECT_LENGTH),
     &				(18-CONNECT_LENGTH))
	      CALL APPEND('%S%[ %]',
     &				MEAN_CONNECT(1:MEAN_CONNECT_LENGTH),
     &				(18-MEAN_CONNECT_LENGTH))
	      CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				(18-CPU_LENGTH))
	      CALL APPEND('%S%[ %]',
     &				MEAN_CPU(1:MEAN_CPU_LENGTH),
     &				(18-MEAN_CPU_LENGTH))
	      CALL APPEND('%I10',NUM_SESS(K))
C
C And output line to the report file lun
C
	      CALL FLWSTR()
C
C End of element loop
C
10	   CONTINUE
C
C End of flowline loop
C
20	CONTINUE
C
C Output summary of how many elements and sessions done by operator
C
	CALL FLWRTF()
	CALL FLWRTF('Number of flowlines : %N',TOTAL_FLN)
	CALL FLWRTF('Number of elements  : %N',TOTAL_ELEM)
	CALL FLWRTF('Number of sessions  : %N',TOTAL_SESS)
C
C Output blank line
C
	CALL FLWRTF()
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
