	INTEGER FUNCTION FLOWLINE_STATISTICS_REPORT()
C
***	MODULE FLOWLINE_STATISTICS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to produce listing on lun for current report file
C of the statistics relating to the flowlines in the flowline control 
C database
C The information displayed will include:
C	Flowline id
C	Total connect time
C	Average connect time per job
C	Total CPU time
C	Average CPU time per job
C	Number of jobs which have passed through flowline
C
C Times will be displayed in hh:mm:ss.cc format
C
C The connect and CPU times are recovered from the database in integer
C hundredths of seconds.
C
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_FLN			! number of flowlines
	INTEGER		I,J			! temporary count varble
C
	CHARACTER*20	CPU			! cpu time string
	INTEGER		CPU_LENGTH		! length of cpu string
	CHARACTER*20	CONNECT			! connect time string
	INTEGER		CONNECT_LENGTH		! length of connect str
	CHARACTER*20	MEAN_CPU		! mean cpu time string
	INTEGER		MEAN_CPU_LENGTH		! length mean cpu string
	CHARACTER*20	MEAN_CONNECT		! mean connect time str
	INTEGER		MEAN_CONNECT_LENGTH	! len mean connect str
C
	INTEGER		CPU_TIME(FLN_MAX_FLOWLINE)! cpu time
	INTEGER		CONNECT_TIME(FLN_MAX_FLOWLINE)! connect time
	INTEGER		NUM_JOBS(FLN_MAX_FLOWLINE)! number of jobs 
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_FLOW_ID(FLN_MAX_FLOWLINE) ! list of flowline ids
C
C functions
	INTEGER		FLN_RETRIEVE_FLOWLINE_TIMINGS
	INTEGER		SIGCHS
	INTEGER		CONVERT_TIME_TO_STRING
C
C Assume success
C
	FLOWLINE_STATISTICS_REPORT = LSC__NORMAL
C
C Call the routine to get statistics on all flowlines
C in the system
C
	FLOWLINE_STATISTICS_REPORT = FLN_RETRIEVE_FLOWLINE_TIMINGS(
     &		A_FLOW_ID,	! flowline identiiers
     &		NUM_FLN,	! number of flowlines
     &		CPU_TIME,	! cpu time used for flowline so far
     &		CONNECT_TIME,	! connect time used for flowline
     &		NUM_JOBS)	! number of elements in each flowline
C
C Check for errors in reading list of flowlines
C
	IF (.NOT.FLOWLINE_STATISTICS_REPORT) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETFLN,0)
	   CALL LCONT_ADDMSG(FLOWLINE_STATISTICS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the flowline listing
C
	CALL FLWRTF('LAMPSCONTROL Flowline Statistics Report')
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Flowline Identifier   ')
	CALL APPEND('Connect time          ')
	CALL APPEND('Mean connect/job      ')
	CALL APPEND('CPU time              ')
	CALL APPEND('Mean CPU/job          ')
	CALL APPEND('Number of jobs')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual flowline details, in a loop
C
	DO 10 I = 1, NUM_FLN
C
C Convert the times and things into strings for output
C Allow for unset values in each of the quantities
C
C Deal with total connect time
C
	   CALL CONVERT_TIME_TO_STRING(
     &		CONNECT_TIME(I),
     &		CONNECT_LENGTH,
     &		CONNECT)
C
C Deal with mean connect time
C
	   IF (NUM_JOBS(I).GT.0) THEN
	      CALL CONVERT_TIME_TO_STRING(
     &			(CONNECT_TIME(I)/NUM_JOBS(I)),
     &			MEAN_CONNECT_LENGTH,
     &			MEAN_CONNECT)
	   ELSE
	      MEAN_CONNECT = 'Unset'
	      MEAN_CONNECT_LENGTH = SIGCHS(MEAN_CONNECT)
	   ENDIF
C
C Deal with total cpu time
C
	   CALL CONVERT_TIME_TO_STRING(
     &		CPU_TIME(I),
     &		CPU_LENGTH,
     &		CPU)
C
C Deal with mean CPU time
C
	   IF (NUM_JOBS(I).GT.0) THEN
	      CALL CONVERT_TIME_TO_STRING(
     &			(CPU_TIME(I)/NUM_JOBS(I)),
     &			MEAN_CPU_LENGTH,
     &			MEAN_CPU)
	   ELSE
	      MEAN_CPU = 'Unset'
	      MEAN_CPU_LENGTH = SIGCHS(MEAN_CPU)
	   ENDIF
C
C Format the line
C
	   CALL EXPAND('%S20  ',A_FLOW_ID(I))
	   CALL APPEND('%S%[ %]',CONNECT(1:CONNECT_LENGTH),
     &				 (22-CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CONNECT(1:MEAN_CONNECT_LENGTH),
     &				 (22-MEAN_CONNECT_LENGTH))
	   CALL APPEND('%S%[ %]',CPU(1:CPU_LENGTH),
     &				 (22-CPU_LENGTH))
	   CALL APPEND('%S%[ %]',MEAN_CPU(1:MEAN_CPU_LENGTH),
     &				 (22-MEAN_CPU_LENGTH))
	   CALL APPEND('%I8   ',NUM_JOBS(I))
C
C And output line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many flowlines were found
C
	IF (NUM_FLN.GT.0) THEN
	   CALL FLWRTF('Total number of flowlines is %N',NUM_FLN)
C
C Deal with the case where no flowline details are found
C
	ELSE
	   CALL FLWRTF('No flowlines found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
