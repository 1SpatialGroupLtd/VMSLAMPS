C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-23 11:21:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION OPERATOR_STATUS_REPORT()
C
***	MODULE OPERATOR_STATUS_REPORT
***	IDENT 23DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to produce listing on lun for current report file
C of the OPERATORs using the flowline control database
C The information displayed will include:
C	OPERATOR identifier
C	Current workstation(s)
C	Authorisation record(s) :	Type
C					Allowed (Yes/No)
C					Identifier
C
	IMPLICIT NONE
C
C Common blocks and parameter files 
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.STR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:AUTHORISATION_STRUCTURE.CMN'
C
C w/s
C
	INTEGER		NUM_OPER		! number of OPERATORs
	INTEGER		I,J			! temporary count varble
	INTEGER		NUM_WKS(FLN_MAX_OPER)	! number of operators
	INTEGER		NUM_AUTH(FLN_MAX_OPER)	! number of auth rec
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_OPER_ID(FLN_MAX_OPER)	! list of operator ids
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_OPER)	! current projects
CCC	CHARACTER*20	A_JOB_NAME(FLN_MAX_OPER)! current job list
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_OPER)	! current element list
C
C The following array is equivalenced onto (occupies the same area of storage
C as) several other square identifier arrays, and so should be used with
C caution. See the 'LARGE_ARRAYS.CMN' common block file for details.
C
CCC	CHARACTER*20	A_WORK_ID2(FLN_MAX_OPER,FLN_MAX_WORK)
C
C The data structure for storing authorisation records is now contained in
C 'AUTHORISATION_STRUCTURE.CMN'.
C
CCC	RECORD /FLN_AUTH/ AUTH_REC(FLN_MAX_OPER,FLN_MAX_AUTH) ! auth recs
C
C Functions
C
	INTEGER		FLN_RETRIEVE_ALL_OPERATORS
	INTEGER		SIGCHS
C
C Assume success
C
	OPERATOR_STATUS_REPORT = LSC__NORMAL
C
C Call the routine to get list of information on all OPERATORs
C in the system
C
	OPERATOR_STATUS_REPORT = FLN_RETRIEVE_ALL_OPERATORS(
     &		A_OPER_ID,	! OPERATOR identifiers
     &		A_PROJ_ID,	! Operator's current project
     &		A_JOB_NAME,	! Operator's current job name
     &		A_ELEM_ID,	! Operator's current element
     &		A_WORK_ID2,	! Operator identifiers
     &		AUTH_REC,	! authorisation record arrays
     &		NUM_OPER,	! number of OPERATORs
     &		NUM_WKS,	! number of workstat for each oper
     &		NUM_AUTH)	! number of auth recs for each wks
C
C Check for errors in reading list of OPERATORs
C
	IF (.NOT.OPERATOR_STATUS_REPORT) THEN
	   CALL LCONT_PUTMSG(OPERATOR_STATUS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the OPERATOR listing
C
	CALL FLWRTF('LAMPSCONTROL Operator Status Report')
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Operator Identifier      ')
	CALL APPEND('Workstation Identifiers       ')
	CALL APPEND('Current/Pending Activity      ')
	CALL APPEND('     Authorisations')
	CALL FLWSTR()
C
C Output the next header line
C
	CALL EXPAND('                         ')
	CALL APPEND('                              ')
	CALL APPEND('Project                       ')
	CALL APPEND('Type  Allowed    ')
	CALL APPEND('Identifier               ')
	CALL FLWSTR()
C
C Output the next header line with the 'Job' on current activity col
C
	CALL EXPAND('                         ')
	CALL APPEND('                              ')
	CALL APPEND('Job                           ')
	CALL FLWSTR()
C
C Output the next header line with the 'Element' on current activity col
C
	CALL EXPAND('                         ')
	CALL APPEND('                              ')
	CALL APPEND('Element                       ')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual OPERATOR details, in a loop
C
	DO 10 I = 1, NUM_OPER
C
C Format the line - start with the OPERATOR identifier
C
	   CALL EXPAND('%S     ',A_OPER_ID(I))
C
C Now deal with all the possible operators and authorisation records
C Go round at least once to make sure you actually output the line
C with the OPERATOR identifier on it.
C
	   DO 15 J = 1, MAX(3,NUM_AUTH(I),NUM_WKS(I))
C
C If this is not the first line, expand a string to fill OPERATOR
C id column
C
	      IF (J.NE.1) CALL EXPAND('                         ')
C
C Append the operator id if there are any left
C
	      IF (J.LE.NUM_WKS(I)) THEN
	         CALL APPEND('%S          ',A_WORK_ID2(I,J))
C
C Otherwise output a blank part in the operator column
C
	      ELSE
	         CALL APPEND('                              ')
	      ENDIF
C
C Output whichever of the project, job or element ids are due to be done
C on this line
C
	      IF (J.EQ.1) THEN
	         IF (SIGCHS(A_PROJ_ID(I)).EQ.0) A_PROJ_ID(I) = 'n/a'
	         CALL APPEND('%S          ',A_PROJ_ID(I))
	      ELSEIF (J.EQ.2) THEN
	         IF (SIGCHS(A_JOB_NAME(I)).EQ.0) A_JOB_NAME(I) = 'n/a'
	         CALL APPEND('%S          ',A_JOB_NAME(I))
	      ELSEIF (J.EQ.3) THEN
	         IF (SIGCHS(A_ELEM_ID(I)).EQ.0) A_ELEM_ID(I) = 'n/a'
	         CALL APPEND('%S          ',A_ELEM_ID(I))
	      ELSE
	         CALL APPEND('                              ')
	      ENDIF
C
C Now check if there are any authorisation records left, and output
C them if there are
C
	      IF (J.LE.NUM_AUTH(I)) THEN
C
C Output the authorisation type
C
	         CALL APPEND('%S    ',AUTH_REC(I,J).TYPE)
C
C Output whether it is allowed or not or everything is allowed
C
		 IF (AUTH_REC(I,J).YES_NO .EQ. 'Y') THEN
	            CALL APPEND('Yes        ')
	         ELSEIF(AUTH_REC(I,J).YES_NO .EQ. 'E') THEN
	            CALL APPEND('Everything ')
	         ELSE
	            CALL APPEND('No         ')
		 ENDIF
C
C	         IF (AUTH_REC(I,J).YES_NO) THEN
C	            CALL APPEND('Yes      ')
C	         ELSE
C	            CALL APPEND('No       ')
C	         ENDIF
C
C And finally output the authorisation identifier
C
	         CALL APPEND('%S',AUTH_REC(I,J).ID)
C
	      ENDIF
C
C And output the finished line to the report file lun
C
	      CALL FLWSTR()
C
15	   CONTINUE
C
C And a blank line to separate indivdual operators
C
	   CALL FLWRTF()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many OPERATORs were found
C
	IF (NUM_OPER.GT.0) THEN
	   CALL FLWRTF('Total number of operators is %N',
     &			NUM_OPER)
C
C Deal with the case where no OPERATOR details are found
C
	ELSE
	   CALL FLWRTF('No operators found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
