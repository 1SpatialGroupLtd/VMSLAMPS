C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 12:02:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION WORKSTATION_AUTH_FORM()
C
***	MODULE WORKSTATION_AUTH_FORM
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			11 May 1988
C
C Routine to allow entry or modification of workstation authorisation
C
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.STR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
C
C w/s
	INTEGER		TERM			! FMS field terminator
	CHARACTER*20	FVAL			! FMS field value
	CHARACTER*20	FID			! FMS field identifier
	INTEGER		STATUS			! error status for FMS
	LOGICAL		EXISTS			! .T. workstation exists
	INTEGER		ERROR_INDEX		! auth rec in error
	INTEGER		I			! temp index
	INTEGER		J			! temp index
C
	INTEGER		CURRENT_REC		! current auth entry 
	INTEGER		NUM_REC			! num auth entries
	RECORD /FLN_AUTH/ AUTH_REC(FLN_MAX_AUTH)! auth entries
C
	CHARACTER*20	AUTH_WKS		! workstation being auth
C
	CHARACTER*100	REPLY			! reply to prompt
	INTEGER		REPLY_TERM		! prompt terminator
C
	LOGICAL		HAD_WKS_ID		! .T. if workstation id
						! has already been 
						! entered
C
C function
	INTEGER		GET_AUTH_AREA
	INTEGER		DISPLAY_AUTH_AREA
	INTEGER		FLN_RETRIEVE_WORKSTATION_AUTH
	INTEGER		FLN_AUTHORISE_WORKSTATION
	INTEGER		FLN_CHECK_WORKSTATION
	INTEGER		FLN_CREATE_WORKSTATION
	INTEGER		FLN_DELETE_WORKSTATION
C
C Assume success
C
	WORKSTATION_AUTH_FORM = LSC__NORMAL
C
C Clear the screen and display the form
C
	CALL FDV$CLRSH('WKS_AUTH_FORM')
C
C Set flag to indicate screen does not have a reusable menu on it
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Set flag to indicate workstation identifier has not yet been entered
C
	HAD_WKS_ID = .FALSE.
C
C Now set the first field to be entered
C
	FID  = 'WORKSTATION_ID'
C
C Initialiase workstation authorisation count
C
	NUM_REC = 0
C
C Initialise current authorisation entry record 
C i.e. which one is current line of scrolled area
C
	CURRENT_REC = 1
C
C Start of loop dealing with entry of each field on form
C
C
C Deal with entry to scrolled area
C
10	IF ((FID.EQ.'AUTH_TYPE').OR.(FID.EQ.'NEGATABLE').OR.
     &		(FID.EQ.'AUTH_ID')) THEN
	   WORKSTATION_AUTH_FORM = GET_AUTH_AREA(
     &		AUTH_WKS,
     &		FLN_MAX_AUTH,
     &		AUTH_REC,
     &		NUM_REC,
     &		CURRENT_REC,
     &		TERM)
C
C If not scrolled area, read next normal field
C
	ELSE
	   CALL FDV$GET(FVAL,TERM,FID)
	ENDIF
C
C Clear any messages which may be on last lines of screen
C
	CALL CLEAR_MESSAGE_LINES()
C
C Check if abort form terminator used, exit if it is, indicating
C that previous menu to be redisplayed
C
	IF (TERM.EQ.ABORT_FORM) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Now determine which field was entered
C
C workstation id
C
	IF (FID.EQ.'WORKSTATION_ID') THEN
	   AUTH_WKS = FVAL
	ENDIF
C
C Check if we want to delete the entire workstation entry - ie GOLD D
C was used
C
	IF ((TERM.EQ.GOLD_BASE+ICHAR('D')).OR.
     &	    (TERM.EQ.GOLD_BASE+ICHAR('d'))) THEN
C
C Ensure that the workstation exists
C
	   WORKSTATION_AUTH_FORM = 
     &		FLN_CHECK_WORKSTATION(AUTH_WKS,EXISTS)
C
C Check for errors
C
	   IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	      CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	      GOTO 999
	   ENDIF
C
C If the workstation does not exist, tell user and loop
C
	   IF (.NOT.EXISTS) THEN
	      CALL FORM_PUTMSG('Workstation does not exist',-1,0)
	      GOTO 10
	   ENDIF
C
C Prompt the user to make sure
C
	   CALL FORM_GETLINE(
     &		REPLY,
     &		REPLY_TERM,
     &		0,
     &		'Delete workstation entry (Y/N) ? ')
C
C If the reply starts with 'Y' or 'y'
C
	   IF ((REPLY.EQ.'Y').OR.(REPLY.EQ.'y')) THEN
C
C Then delete the workstation
C
	      WORKSTATION_AUTH_FORM = FLN_DELETE_WORKSTATION(AUTH_WKS)
C
C Check for errors, report problem and loop to allow re-entry on form
C
	      IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	         CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	         GOTO 10
C
C Otherwise, we have deleted the workstation, so exit from form
C
	      ELSE
	         GOTO 999
	      ENDIF
C
C Otherwise, have replied 'NO' to prompt, so loop to allow entry
C of same field as before
C
	   ELSE
	      GOTO 10
	   ENDIF
	ENDIF
C
C If the workstation identifier has just been entered for first
C time 
C
	IF ((.NOT.HAD_WKS_ID).AND.(FID.EQ.'WORKSTATION_ID')) THEN
C
C Set flag to indicate workstation identifier has been entered
C
	   HAD_WKS_ID = .TRUE.
C
C Check if any information already exists for this workstation
C
	   WORKSTATION_AUTH_FORM = 
     &		FLN_CHECK_WORKSTATION(AUTH_WKS,EXISTS)
C
C Check for errors
C
	   IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	      CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	      GOTO 999
	   ENDIF
C
C If the workstation exists, retrieve authorisations
C
	   IF (EXISTS) THEN
C
C Retrieve authorisations for user
C
	      WORKSTATION_AUTH_FORM = FLN_RETRIEVE_WORKSTATION_AUTH(
     &			AUTH_WKS,
     &			AUTH_REC,
     &			NUM_REC)
C
C Check for errors
C
	      IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	         CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	         GOTO 999
	      ENDIF
C
C Output the authorisations to the scrolled area
C
	      WORKSTATION_AUTH_FORM = 
     &			DISPLAY_AUTH_AREA(AUTH_REC,NUM_REC,CURRENT_REC)
C
C Deal with any errors
C
	      IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	         CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	         GOTO 999
	      ENDIF
C
C Tell the user that the workstation already exists
C
	      CALL FORM_PUTMSG('Workstation already exists',-1,0)
C
C
C Reset field identifier and loop
C
	      FID = 'AUTH_TYPE'
	      GOTO 10
C
C Otherwise the workstation does not already exist
C
	   ELSE
C
C Initialise the authorisations
C
	      NUM_REC = 0
	      CURRENT_REC = 1
C
C Display the authorisations
C
	      WORKSTATION_AUTH_FORM = 
     &	         DISPLAY_AUTH_AREA(AUTH_REC,NUM_REC,CURRENT_REC)
C
C Deal with any errors
C
	      IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	         CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	         GOTO 999
	      ENDIF
C
C Tell the user that workstation does not yet exist
C
CCC	      CALL FORM_PUTMSG('Workstation does not yet exist',-1,0)
C
C Reset field identifier and loop
C
	      FID = 'AUTH_TYPE'
	      GOTO 10
	   ENDIF
	ENDIF
C
C Process the terminator
C
	CALL FDV$PFT(TERM)
C
C Find the status, i.e. is everything ok
C
	CALL FDV$STAT(STATUS)
C
C Determine the next field to be entered
C
	CALL FDV$GCF(FID)
C
C If not RETURN, loop again
C
	IF (TERM.NE.RETURN_KEY) GOTO 10
C
C If status not ok (i.e. form not complete), loop again
C
	IF (STATUS.NE.1) GOTO 10
C
C About to exit, so we must output all the stuff we've gone
C to so much trouble to collect
C
C First, make sure that every entry in the authorisation
C list has workstation id in it
C
500	DO 520 I = 1,NUM_REC
	   DO 510 J=1,MIN(LEN(AUTH_REC(1).OP_WORK),LEN(AUTH_WKS))
	      AUTH_REC(I).OP_WORK(J:J) = AUTH_WKS(J:J)
510	   CONTINUE
520	CONTINUE
C
C If the workstation does not exist, create him/her
C
	IF (.NOT.EXISTS) THEN
	   WORKSTATION_AUTH_FORM = FLN_CREATE_WORKSTATION(AUTH_WKS)
C
C Check for errors
C
	   IF (.NOT.WORKSTATION_AUTH_FORM) THEN
	      CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	      GOTO 999
	   ENDIF
C
C Set flag to show it now exists
C
	   EXISTS = .TRUE.
	ENDIF
C
C Now can write out the workstation authorisations
C
	WORKSTATION_AUTH_FORM = 
     &		FLN_AUTHORISE_WORKSTATION(NUM_REC,AUTH_REC,ERROR_INDEX)
C
C Act on any errors in authorisations
C
	IF (.NOT.WORKSTATION_AUTH_FORM) THEN
C
C Redisplay authorisation areas
C
	   IF ((ERROR_INDEX.GT.0).AND.(ERROR_INDEX.LE.NUM_REC)) THEN
C
C Set current line of area to be the problem line
C
	      CURRENT_REC = ERROR_INDEX
C
C Display the auth area
C
	      CALL DISPLAY_AUTH_AREA(AUTH_REC,NUM_REC,CURRENT_REC)
C
C Set the current field to point at the scrolled area
C
	      FID = 'AUTH_TYPE'
C
C Now display the error message and loop to do the entry again
C
	      CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	      CALL FORM_PUTMSG('Re-enter this authorisation',-1,0)
	      GOTO 10
C
C Otherwise, error line was 0, so problem not in authorisations
C
	   ELSE
	      CALL LCONT_PUTMSG(WORKSTATION_AUTH_FORM,0)
	      GOTO 999
	   ENDIF
	ENDIF
C
C Indicate nothing is wrong
C
999	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	WORKSTATION_AUTH_FORM = LSC__NORMAL
C
C Exit
C
	RETURN
	END
