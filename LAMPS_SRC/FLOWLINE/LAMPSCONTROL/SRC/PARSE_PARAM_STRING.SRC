C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-10-13 10:10:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PARSE_PARAM_STRING(IN,OUT)
C
***	MODULE PARSE_PARAM_STRING
***	IDENT 05OC88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 October 1988
C
C Routine to parse the string used to define a LAMPSCONTROL
C task/session parameter (local, global or external).
C
C In particular it checks for any DCL symbols, translates them
C and substitutes the translations into the output string.
C
C The symbols should be delimited by:
C
C	At start	<
C	At end		>
C
C The double single quotes are used because the string argument
C will be contained in double quotes. Any single single quotes
C do not cause any sort of expansion/substitution.
C
C
	IMPLICIT NONE
C
C common blocks
CCC	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROL.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
C
C arguments
	CHARACTER*(*)	IN	! input string to be parsed
	CHARACTER*(*)	OUT	! output after parsing/substitution
C
C workspace
	INTEGER		IN_PTR	! pointer to current character in input
	INTEGER		IN_LEN	! length of input
	INTEGER		OUT_PTR	! pointer to current character in output
	CHARACTER*255	SYMBOL	! dcl symbol name for expansion
	INTEGER		SYM_PTR	! pointer to character in symbol name
	CHARACTER*255	EXPANSION!expansion of dcl symbol
	INTEGER		EXP_LEN	! length of expanded dcl symbol
	CHARACTER*1	CHAR0	! current + 0th character
	CHARACTER*1	CHAR1	! current + 1st character
	CHARACTER*1	CHAR2	! current + 2nd character
C
C delimiters
	CHARACTER*1	START
	PARAMETER	(START = '<')
	CHARACTER*1	END
	PARAMETER	(END = '>')
C
C functions
	INTEGER		SIGCHS		! significant chars in string
	INTEGER		LIB$GET_SYMBOL	! get DCL symbol definition
C
C Assume success
C
	PARSE_PARAM_STRING = LSC__NORMAL
C
C Initialise output string and the pointer to current characters
C
	OUT = ' '
	OUT_PTR = 1
	IN_PTR = 0
	IN_LEN = SIGCHS(IN)
C
C Loop to look at each character in turn
C
10	IN_PTR = IN_PTR + 1
C
C Check that we are still within input string
C
	IF (IN_PTR.LE.IN_LEN) THEN
C
C Get current characters, with single character lookahead
C
	   CHAR0 = IN((IN_PTR+0):(IN_PTR+0))
C
	   IF ((IN_PTR+1).LE.IN_LEN) THEN
	      CHAR1 = IN((IN_PTR+1):(IN_PTR+1))
	   ELSE
	      CHAR1 = ' '
	   ENDIF
C
C If character is not an initial delimiter, transfer it to output 
C string, incrementing pointer to output string
C Allow for the possible case two consecutive delimiters, which
C should be transfered as a single delimiter 
C
	   IF (	(CHAR0.NE.START).OR.
     &		((CHAR0.EQ.START).AND.(CHAR1.EQ.START)) ) THEN
C
C Transfer character to output
C
	      OUT(OUT_PTR:OUT_PTR) = CHAR0
C
C Move to next character (allow for consecutive pair of initial
C delimiters)
C
	      OUT_PTR = OUT_PTR + 1
	      IF (CHAR0.EQ.START) IN_PTR = IN_PTR + 1
C
C Otherwise, is initial delimiter, so may be start of symbol
C
	   ELSE
C
C Set input string pointer to point at character after delimiter
C
	      IN_PTR = IN_PTR + 1
	      CHAR0 = CHAR1
C
C Initialise symbol name
C
	      SYMBOL = ' '
	      SYM_PTR = 1
C
C Loop, collecting characters into symbol name, until find final 
C delimiter or a space or something which cannot be a character in a 
C symbol
C
	      DO WHILE ((CHAR0.NE.END).AND.
     &			(IN_PTR.LE.IN_LEN).AND.
     &		( ((CHAR0.GE.'0').AND.(CHAR0.LE.'9')).OR.
     &		  ((CHAR0.GE.'A').AND.(CHAR0.LE.'Z')).OR.
     &		  ((CHAR0.GE.'a').AND.(CHAR0.LE.'z')).OR.
     &		  (CHAR0.EQ.'$').OR.
     &		  (CHAR0.EQ.'_') ) )
C
C Transfer character from input to symbol string
C
	         SYMBOL(SYM_PTR:SYM_PTR) = CHAR0
C
C Increment string pointers
C
	         SYM_PTR = SYM_PTR + 1
	         IN_PTR  = IN_PTR  + 1
C
C Get next character
C
	         IF (IN_PTR.LE.IN_LEN) CHAR0 = IN(IN_PTR:IN_PTR)
	      END DO
C
C If the symbol was not terminated by a delimiter but by a
C character which can not be part of a symbol name, then decrement
C the character pointer, so that when it is incremented again at the
C start of this loop, it will point to the character following the
C symbol name.
C
	      IF (IN_PTR.LE.IN_LEN) THEN
	         IF (IN(IN_PTR:IN_PTR).NE.END) IN_PTR = IN_PTR - 1
	      ENDIF
C
C Now translate the  symbol
C
C Expand DCL symbol
C
	      PARSE_PARAM_STRING = LIB$GET_SYMBOL(
     &			SYMBOL,
     &			EXPANSION,
     &			EXP_LEN)
C
C Check for errors
C
	      IF (.NOT.PARSE_PARAM_STRING) THEN
	         CALL LCONT_PUTMSG(LSC__BADPAR,0)
	         CALL LCONT_ADDMSG(PARSE_PARAM_STRING,0)
	         EXPANSION = SYMBOL
	         EXP_LEN = SIGCHS(SYMBOL)
	      ENDIF
C
C Add expansion of symbol to end of output string, and increment
C pointer to output string to allow for the concatenation
C
	      IF (EXP_LEN.GT.0) THEN
	         OUT(OUT_PTR:(OUT_PTR+EXP_LEN-1))=EXPANSION(1:EXP_LEN)
	         OUT_PTR = OUT_PTR + EXP_LEN
	      ENDIF
	   ENDIF
C
C Loop to deal with next input character
C
	   GOTO 10
	ENDIF
C
C Exit
C
950	RETURN
	END
