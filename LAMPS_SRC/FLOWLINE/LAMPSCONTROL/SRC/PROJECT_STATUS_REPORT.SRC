C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-12-22 16:37:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION PROJECT_STATUS_REPORT()
C
***	MODULE PROJECT_STATUS_REPORT
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			3 May 1988
C
C Routine to produce listing on lun for current report file
C of the projects in the flowline control database
C The information displayed will include:
C	Project identifier
C	Project status
C	Project priority
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C w/s
	INTEGER		NUM_PROJ			! number of projects
	INTEGER		I,J				! temporary count varble
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	INTEGER		A_PROJ_PRI(FLN_MAX_PROJECT)	! list of proj prio'ties
CCC	CHARACTER*20	A_PROJ_ID(FLN_MAX_PROJECT)	! list of project idents
CCC	CHARACTER*20	A_STATUS(FLN_MAX_PROJECT)	! list of proj statuses
CCC	CHARACTER*255	A_COMPROC(FLN_MAX_PROJECT)	! list of command procs
C
C functions
	INTEGER		FLN_RETRIEVE_ALL_PROJECTS
	INTEGER		SIGCHS
C
C Assume success
C
	PROJECT_STATUS_REPORT = LSC__NORMAL
C
C Call the routine to get list of information on all projects
C in the system
C
	PROJECT_STATUS_REPORT = FLN_RETRIEVE_ALL_PROJECTS(
     &		A_PROJ_ID,	! list of projects
     &		A_PROJ_STATUS,	! list of project statuses
     &		A_PROJ_PRI,	! list of project priorities
     &		A_COMPROC,	! command procedure specifications
     &		NUM_PROJ)	! number of projects
C
C Check for errors in reading list of projects
C
	IF (.NOT.PROJECT_STATUS_REPORT) THEN
	   CALL LCONT_PUTMSG(PROJECT_STATUS_REPORT,0)
C
C Specify that you just want to repeat the menu from which call
C originated
C
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 999
	ENDIF
C
C Select report list file
C
	CALL FLWSEL(REPORTFIL_LUN)
C
C Mark the FMS screen menu as not reusable
C
	PREVIOUS_MENU_USABLE = .FALSE.
C
C Now output the title lines of the project listing
C
	CALL FLWRTF('LAMPSCONTROL Project Status Report')
	CALL FLWRTF(' ')
C
C Output the header line, with column titles
C
	CALL EXPAND('Project Identifier       ')
	CALL APPEND('Status    ')
	CALL APPEND('Priority  ')
	CALL APPEND('Command Procedure')
	CALL FLWSTR()
C
C Now output a blank line to make output look really beautiful
C
	CALL FLWRTF()
C
C Now output the actual project details, in a loop
C
	DO 10 I = 1, NUM_PROJ
C
C Format the line
C
	   CALL EXPAND('%S     ',A_PROJ_ID(I))
	   CALL APPEND('%S',A_PROJ_STATUS(I)(1:10))
	   CALL APPEND('%I5     ',A_PROJ_PRI(I))
C
C Including the command procedure specification
C Initialise index indicating part of command procedure on current line
C
	   J = 70
C
C Append current part of command procedure specification
C
5	   CALL APPEND('%S',A_COMPROC(I)((J-69):J))
C
C Deal with situations were command procedure is too long to fit on one
C line
C
	   IF (J.LT.SIGCHS(A_COMPROC(I))) THEN
C
C Output the current line
C
	      CALL FLWSTR()
C
C Increment index into command procedure string
C
	      J = J + 70
C
C Pad the start of a new line
C
	      CALL EXPAND('                         ')
	      CALL APPEND('          ')
	      CALL APPEND('          ')
C
C And loop to add the next part of the command procedure
C
	      GOTO 5
	   ENDIF
C
C And output (last) line to the report file lun
C
	   CALL FLWSTR()
C
10	CONTINUE
C
C Output blank line
C
	CALL FLWRTF(' ')
C
C Tell the user how many projects were found
C
	IF (NUM_PROJ.GT.0) THEN
	   CALL FLWRTF('Total number of projects is %N',NUM_PROJ)
C
C Deal with the case where no project details are found
C
	ELSE
	   CALL FLWRTF('No projects found')
	ENDIF
C
C Set semaphore to indicate that report status menu should be re-entered
C
	NEXT_FUNCTION = DO_MOVE_UP_LEVEL
C
C Exit
C
999	RETURN
	END
