	INTEGER FUNCTION TASK_STATISTICS_MENU(
     &		PROJ_IDENT,JOB_IDENT,JOB_NAM)
C
***	MODULE TASK_STATISTICS_MENU
***	IDENT 22DE88
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to put up menu of tasks, and allow user to request 
C output of statistics on tasks, or to select one task
C to examine the statistics of the sessions within it.
C
C The tasks will be all those, past and present, in the project and
C job passed to this routine as an argument
C
	IMPLICIT NONE
C
C Common blocks and parameter files
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C argument
	CHARACTER*(*)	PROJ_IDENT	! project identifier of 
					! interest
	INTEGER		JOB_IDENT	! job identifier
	CHARACTER*(*)	JOB_NAM		! job name
C
C w/s
	INTEGER		NUM_TASK	! number of tasks
	CHARACTER*80	INVARIANTS(10)	! menu invariant options
	INTEGER		INV_NUM		! number of invariants
C
	CHARACTER*80	DESCR_LINE	! description line of menu
	INTEGER		TERM		! field terminator found
	LOGICAL		REDO		! .T. if to redisplay menu
	INTEGER		CURRENT_OPT	! current option
	INTEGER		CURRENT_INV	! current invariant
	LOGICAL		PRINT		! .T. if report to be printed
	LOGICAL		ABORT		! .T. if report to be aborted
C
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_ELEM_ID(FLN_MAX_TASK)! element names
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		OPEN_REPORT_FILE
	INTEGER		CLOSE_REPORT_FILE
	INTEGER		TASK_STATISTICS_REPORT
	INTEGER		SESSION_STATISTICS_REPORT
	INTEGER		FLN_RETRIEVE_TASK_HIST_JOB
	INTEGER		WIDE_SCREEN
C
C Assume success
C
	TASK_STATISTICS_MENU = LSC__NORMAL
C
C Set up description line for menu complete with project name
C
10	CALL EXPAND('%WS% Project %S  Job %S',
     &			DESCR_LINE, PROJ_IDENT, JOB_NAM)
C
C Now cause the menu form to be displayed with title etc
C
	TASK_STATISTICS_MENU = DISPLAY_MENU(
     &		'                     Task Statistics Menu',
     &		DESCR_LINE,
     &		'Available options are :')
C
C Check for errors
C
	IF (.NOT.TASK_STATISTICS_MENU) GOTO 900
C
C Now set up the invariant options list (go top, move up and output
C report on all tasks)
C
	INV_NUM = 4
	INVARIANTS(1)  = 'Display task statistics report on screen'
	INVARIANTS(2)  = 'Print task statistics report'
	INVARIANTS(3)  = 'Move up to job statistics menu'
	INVARIANTS(4)  = 'Jump to top level menu'
C
C Now attempt to read all the tasks, past and present, in the project
C
	TASK_STATISTICS_MENU = FLN_RETRIEVE_TASK_HIST_JOB(
     &			JOB_IDENT,	! job ident of interest
     &			A_ELEM_ID,	! task names found
     &			NUM_TASK)	! number of tasks
C
C Check for errors
C
	IF (.NOT.TASK_STATISTICS_MENU) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETTASK,0)
	   CALL LCONT_ADDMSG(TASK_STATISTICS_MENU,0)
	   GOTO 900
	ENDIF
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C And set current option to be first item on menu
C
	CURRENT_OPT = 1
C
C Get required option
C
20	TASK_STATISTICS_MENU = GET_MENU_OPTION(
     &		A_ELEM_ID,		! task name list
     &		NUM_TASK,		! number of tasks
     &		INVARIANTS,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.TASK_STATISTICS_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C Check if have required field terminator, that is, the return key
C or GOLD P with the task options
C
	IF ((TERM.NE.RETURN_KEY).AND.
     &	    ((CURRENT_OPT.LE.0).OR.
     &	     ((TERM.NE.GOLD_BASE+ICHAR('P')).AND.
     &	      (TERM.NE.GOLD_BASE+ICHAR('p')) ) ) ) GOTO 20
C
C Decide which option was actually selected
C
C Compile and output report - for all tasks or for sessions in task
C
C If task was chosen with return, report sessions in task on screen
C If task was chosen with GOLD P, report sessions in task on printer
C
C If invariant 1 was chosen, report is to be displayed on screen
C If invariant 2 was chosen, report is to be printed
C
	IF ((CURRENT_OPT.GT.0).OR.
     &	    (CURRENT_INV.EQ.1).OR.(CURRENT_INV.EQ.2)) THEN
C
C Check if report is to be printed, and set flag accordingly
C If report is to be displayed on screen, set flag to indicate
C that the current menu has been destroyed and needs redisplaying,
C and set the screen to 132 columns
C
	   IF (((CURRENT_OPT.LE.0).AND.(CURRENT_INV.EQ.2)).OR.
     &	       ((TERM.EQ.GOLD_BASE+ICHAR('P')).OR.
     &	        (TERM.EQ.GOLD_BASE+ICHAR('p')) ) ) THEN
	      PRINT = .TRUE.
	   ELSE
	      PRINT = .FALSE.
	      REDO = .TRUE.	! menu on screen needs redisplaying
C
C Set screen to wide (132 columns)
C
	      TASK_STATISTICS_MENU = WIDE_SCREEN(.TRUE.)
C
C Check for errors - if any are found, redisplay the menu, including
C the error message.
C
	      IF (.NOT.TASK_STATISTICS_MENU) THEN
	         CALL WIDE_SCREEN(.FALSE.)
	         CALL LCONT_PUTMSG(TASK_STATISTICS_MENU,0)
	         GOTO 20
	      ENDIF
	   ENDIF
C
C Set flag to indicate that, if close report file procedure is reached, 
C before the flag can be cleared, the report is to be aborted
C
	   ABORT = .TRUE.
C
C Open the report file, for screen or printing depending on argument
C
	   TASK_STATISTICS_MENU = OPEN_REPORT_FILE(PRINT)
C
C Check for errors - if any are found, jump to closing the report file
C
	   IF (.NOT.TASK_STATISTICS_MENU) GOTO 30
C
C Determine whether report is required for all tasks (invariant options
C 1 or 2 will have been selected), or for the sessions in a specific 
C task (any non-invariant option will have been selected)
C
C Output the task statistics report
C
	   IF (CURRENT_OPT.LE.0) THEN
	      TASK_STATISTICS_MENU = TASK_STATISTICS_REPORT(
     &			PROJ_IDENT,			! project id
     &			JOB_IDENT,			! job ident
     &			JOB_NAM)			! job name
C
C Selection of task option
C Output session statistics for the selected task
C
	   ELSE
	      TASK_STATISTICS_MENU = 
     &		SESSION_STATISTICS_REPORT(
     &			PROJ_IDENT,			! project id
     &			JOB_IDENT,			! job ident
     &			JOB_NAM,			! job name
     &			A_ELEM_ID(CURRENT_OPT))	! element ident
	   ENDIF
C
C If report has been completed successfully, clear flag to 
C indicate we do not want to abort the report
C
	   IF (TASK_STATISTICS_MENU) ABORT = .FALSE.
C
C Close the report file - ignore any errors which arise
C
30	   CALL CLOSE_REPORT_FILE(PRINT,ABORT)
C
C Set screen to be 80 columns, if report was output to screen
C
	   IF (.NOT.PRINT) THEN
	      CALL WIDE_SCREEN(.FALSE.)
C
C Check for any errors which occured during output of report, and,
C if report was output on screen, display them again, since the screen
C will have been cleared by resetting to 80 columns.
C Set semaphore to indicate redisplay of task statistics menu is
C required.
C
	      IF (ABORT.AND.(.NOT.TASK_STATISTICS_MENU)) THEN
C	         CALL LCONT_PUTMSG(TASK_STATISTICS_MENU,0)
	         NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      ENDIF
	   ENDIF
C
C Move up to higher level menu
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.3)) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
C
C Go top
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.4)) THEN
	   NEXT_FUNCTION = DO_GO_TOP
	ENDIF
C
C Loop to repeat this menu, if the next function semaphore has
C been set to indicate that this is required
C
	IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	   NEXT_FUNCTION = DO_ERROR
	   GOTO 10
	ENDIF
C
C Exit
C
900	RETURN
	END
