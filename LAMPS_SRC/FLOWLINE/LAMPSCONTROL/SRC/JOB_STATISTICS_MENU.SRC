C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-10-08 17:14:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION JOB_STATISTICS_MENU(PROJ_ID)
C
***	MODULE JOB_STATISTICS_MENU
***	IDENT 08OC91
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C Author: J.M. Billing			12 September 1988
C
C Routine to put up menu of jobs, and allow user to request 
C output of statistics on jobs, or to select one job
C to examine the statistics of the tasks/sessions within it.
C
C The jobs will be all those, past and present, in the project
C passed to this routine as an argument
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$CMNFLOWLINE:FLOWLINEMSG.PAR'
	INCLUDE 'LSL$CMNFLOWLINE:FLOW.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$LAMPSCONTROL:NEXT_FUNCTION.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:INTERACTIVE_IO.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LARGE_ARRAYS.CMN'
C
C argument
	CHARACTER*(*)	PROJ_ID		! project identifier of 
					! interest
C
C w/s
	INTEGER		JOB_NUM		! number of jobs
	CHARACTER*80	INVARIANTS(10)	! menu invariant options
	INTEGER		INV_NUM		! number of invariants
C
	CHARACTER*80	DESCR_LINE	! description line of menu
	INTEGER		TERM		! field terminator found
	LOGICAL		REDO		! .T. if to redisplay menu
	INTEGER		CURRENT_OPT	! current option
	INTEGER		CURRENT_INV	! current invariant
	LOGICAL		PRINT		! .T. if report to be printed
	LOGICAL		ABORT		! .T. if report to be aborted
	CHARACTER*50	FVAL		! field value
	INTEGER		FLEN		! length
C
C The following arrays have been transfered to 'LARGE_ARRAYS.CMN', which allows
C the program's storage requirements to be reduced by sharing the larger arrays
C among a number of routines.
C Since these arrays can be used by other routines, care must be taken that 
C their values are not overwritten by any of the routines called by this
C routine.
C
CCC	CHARACTER*20	A_JOB_NAME(FLN_MAX_JOB)! job names
CCC	INTEGER		A_JOB_ID(FLN_MAX_JOB)  ! job identifiers
C
C function
	INTEGER		DISPLAY_MENU
	INTEGER		GET_MENU_OPTION
	INTEGER		OPEN_REPORT_FILE
	INTEGER		CLOSE_REPORT_FILE
	INTEGER		JOB_STATISTICS_REPORT
	INTEGER		TASK_STATISTICS_MENU
	INTEGER		FLN_RETRIEVE_JOB_HIST_PROJECT
	INTEGER		WIDE_SCREEN
	INTEGER		FLN_CHANGE_JOB_HIST_NAME
	INTEGER		FLN_REMOVE_SPACES
C
C Assume success
C
	JOB_STATISTICS_MENU = LSC__NORMAL
C
C Set up description line for menu complete with project name
C
10	CALL EXPAND('%WS% Selection of job in project %S',
     &			DESCR_LINE, PROJ_ID)
C
C Now cause the menu form to be displayed with title etc
C
	JOB_STATISTICS_MENU = DISPLAY_MENU(
     &		'                     Job Statistics Menu',
     &		DESCR_LINE,
     &		'Available options are :')
C
C Check for errors
C
	IF (.NOT.JOB_STATISTICS_MENU) GOTO 900
C
C Now set up the invariant options list (go top, move up and output
C report on all jobs)
C
	INV_NUM = 4
	INVARIANTS(1)  = 'Display job statistics report on screen'
	INVARIANTS(2)  = 'Print job statistics report'
	INVARIANTS(3)  = 'Move up to project statistics menu'
	INVARIANTS(4)  = 'Jump to top level menu'
C
C Now attempt to read all the jobs, past and present, in the project
C
	JOB_STATISTICS_MENU = FLN_RETRIEVE_JOB_HIST_PROJECT(
     &			PROJ_ID,	! project ident of interest
     &			A_JOB_NAME,	! job names found
     &			A_JOB_ID,	! identifiers of jobs found
     &			JOB_NUM)	! number of jobs
C
C Check for errors
C
	IF (.NOT.JOB_STATISTICS_MENU) THEN
	   CALL LCONT_PUTMSG(LSC__UNRETJOB,0)
	   CALL LCONT_ADDMSG(JOB_STATISTICS_MENU,0)
	   GOTO 900
	ENDIF
C
C Set display flag to indicate doing for first time
C
	REDO = .TRUE.
C
C And set current option to be first item on menu
C
	CURRENT_OPT = 1
C
C Get required option
C
20	JOB_STATISTICS_MENU = GET_MENU_OPTION(
     &		A_JOB_NAME,		! job name list
     &		JOB_NUM,		! number of jobs
     &		INVARIANTS,		! invariant list
     &		INV_NUM,		! number of invariants
     &		CURRENT_OPT,		! current option
     &		CURRENT_INV,		! current invariant option
     &		OPT_AREA_LEN,		! number of lines in scroll area
     &		OPT_FIELD,		! field name
     &		TERM,			! field terminator found
     &		REDO)			! .T. if to redisplay menu
C
C Check for errors
C
	IF (.NOT.JOB_STATISTICS_MENU) GOTO 900
C
C Set display flag to indicate don't need to redisplay
C
	REDO = .FALSE.
C
C---------------------------------------------------------------------
C Deal with job name alteration i.e. GOLD N
C
	IF (((TERM.EQ.(GOLD_BASE + ICHAR('N'))).OR.
     &	     (TERM.EQ.(GOLD_BASE + ICHAR('n')))).AND.
     &		(CURRENT_OPT.GT.0)) THEN
C
C Prompt the user determine the new job name
C
30	   CALL FORM_GETLINE(FVAL,TERM,0,'New job name : ')
C
	   JOB_STATISTICS_MENU = FLN_REMOVE_SPACES(FVAL,FVAL,FLEN)
	   IF (.NOT.JOB_STATISTICS_MENU) THEN
	      CALL FORM_PUTMSG('Illegal job name',-1,0)
	      GOTO 30
	   ENDIF
	   CALL STR$UPCASE(FVAL,FVAL)
C
C Change the name (historical jobs only)
C
	   JOB_STATISTICS_MENU = FLN_CHANGE_JOB_HIST_NAME(
     &		A_JOB_ID(CURRENT_OPT),
     &		FVAL(:FLEN))
C
C Deal with errors
	   IF (.NOT.JOB_STATISTICS_MENU) THEN
	      IF (JOB_STATISTICS_MENU.EQ.FLN__NOSUCHJOB) THEN
	         CALL FORM_PUTMSG(
     &		'Can only change the name of historical jobs',-1,0)
	      ELSEIF (JOB_STATISTICS_MENU.EQ.FLN__DUPJOB) THEN
	         CALL FORM_PUTMSG('Duplicate job name',-1,0)
	      ELSE
	         CALL LCONT_PUTMSG(JOB_STATISTICS_MENU,0)
	      ENDIF
	      REDO = .FALSE.
	      GOTO 20
	   ENDIF
C
C The job has now been renamed, so must get new list of jobs
C and display it.
C
	   GOTO 10
	ENDIF
C
C Check if have required field terminator, that is, the return key
C
	IF (TERM.NE.RETURN_KEY) GOTO 20
C
C Decide which option was actually selected
C
C First check if an invariant option was selected
C
C Compile and output report
C If invariant 1 was chosen, report is to be displayed on screen
C If invariant 2 was chosen, report is to be printed
C
	IF ((CURRENT_OPT.LE.0).AND.
     &	    ((CURRENT_INV.EQ.1).OR.(CURRENT_INV.EQ.2))) THEN
C
C Check if report is to be printed, and set flag accordingly
C If report is to be displayed on screen, set flag to indicate
C that the current menu has been destroyed and needs redisplaying,
C and set the screen to 132 columns
C
	   IF (CURRENT_INV.EQ.2) THEN
	      PRINT = .TRUE.
	   ELSE
	      PRINT = .FALSE.
	      REDO = .TRUE.	! menu on screen needs redisplaying
C
C Set screen to wide (132 columns)
C
	      JOB_STATISTICS_MENU = WIDE_SCREEN(.TRUE.)
C
C Check for errors - if any are found, redisplay the menu, including
C the error message.
C
	      IF (.NOT.JOB_STATISTICS_MENU) THEN
	         CALL WIDE_SCREEN(.FALSE.)
	         CALL LCONT_PUTMSG(JOB_STATISTICS_MENU,0)
	         GOTO 20
	      ENDIF
	   ENDIF
C
C Set flag to indicate that, if close report file procedure is reached, 
C before the flag can be cleared, the report is to be aborted
C
	   ABORT = .TRUE.
C
C Open the report file, for screen or printing depending on argument
C
	   JOB_STATISTICS_MENU = OPEN_REPORT_FILE(PRINT)
C
C Check for errors - if any are found, jump to closing the report file
C
	   IF (.NOT.JOB_STATISTICS_MENU) GOTO 40
C
C Output the job statistics report
C
	   JOB_STATISTICS_MENU = JOB_STATISTICS_REPORT(PROJ_ID)
C
C If report has been completed successfully, clear flag to 
C indicate we do not want to abort the report
C
	   IF (JOB_STATISTICS_MENU) ABORT = .FALSE.
C
C Close the report file - ignore any errors which arise
C
40	   CALL CLOSE_REPORT_FILE(PRINT,ABORT)
C
C Set screen to be 80 columns, if report was output to screen
C
	   IF (.NOT.PRINT) THEN
	      CALL WIDE_SCREEN(.FALSE.)
C
C Check for any errors which occured during output of report, and,
C if report was output on screen, display them again, since the screen
C will have been cleared by resetting to 80 columns.
C Set semaphore to indicate redisplay of job statistics menu is
C required.
C
	      IF (ABORT.AND.(.NOT.JOB_STATISTICS_MENU)) THEN
C	         CALL LCONT_PUTMSG(JOB_STATISTICS_MENU,0)
	         NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	      ENDIF
	   ENDIF
C
C Move up to higher level menu
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.3)) THEN
	   NEXT_FUNCTION = DO_MOVE_UP_LEVEL
	   GOTO 900
C
C Go top
C
	ELSEIF ((CURRENT_OPT.LE.0).AND.
     &		(CURRENT_INV.EQ.4)) THEN
	   NEXT_FUNCTION = DO_GO_TOP
C
C Selection of job option
C Enter task statistics menu for the selected job
C
	ELSE
	   JOB_STATISTICS_MENU = 
     &		TASK_STATISTICS_MENU(
     &			PROJ_ID,		! project ident
     &			A_JOB_ID(CURRENT_OPT),	! job ident
     &			A_JOB_NAME(CURRENT_OPT))! job name
C
C Check for errors - if any are found, redisplay the menu
C
	   IF (.NOT.JOB_STATISTICS_MENU) GOTO 10
	ENDIF
C
C Loop to repeat this menu, if the next function semaphore has
C been set to indicate that this is required
C
	IF (NEXT_FUNCTION.EQ.DO_MOVE_UP_LEVEL) THEN
	   NEXT_FUNCTION = DO_ERROR
	   GOTO 10
	ENDIF
C
C Exit
C
900	RETURN
	END
