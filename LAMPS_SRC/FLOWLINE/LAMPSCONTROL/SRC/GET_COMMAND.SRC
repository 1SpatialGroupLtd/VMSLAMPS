C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1993-01-29 12:00:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER FUNCTION GET_COMMAND()
C
***	MODULE	GET_COMMAND
***	IDENT	29JA93
C
C Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C Author : J.M. Billing		6 Jan 1987
C
	IMPLICIT NONE
C
	INCLUDE 'LSL$LAMPSCONTROL:QUALIFIERS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:CURRENT_ITEMS.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:FILES.CMN'
	INCLUDE 'LSL$LAMPSCONTROL:LAMPSCONTROLMSG.PAR'
	INCLUDE 'LSL$CMNLSL:CLD.CMN'
C
C Command Language Definitions:
	EXTERNAL	LAMPSCONTROL_CLD
C
C w/s variables
	LOGICAL		ABSENT	   ! .T. if file param. not found
	LOGICAL		THERE	   ! .T. if qual found
	LOGICAL		LOCAL      ! .T. if qual. is local
	LOGICAL		LOCNEG     ! set .T. if qual. locally negated
C
        LOGICAL		LOCERR     ! .T. - local error reporting
	INTEGER		COUNT	   ! count variable
C
	LOGICAL		WANT_PARAM ! .T. if want parameters
C
C Functions called:
        INTEGER*4       DCL_STARTUP! looks for command line
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
	INTEGER*4	DCL_INT	   ! gets integer arguments
	INTEGER*4	DCL_STR	   ! gets string arguments
	INTEGER*4	DCL_FILE   ! gets file spec
	INTEGER		SIGNCH	   ! determine signif chars in string
	INTEGER		DEFINE_PARAMETERS
C
C...................................................................
C
C Initialise things
C
	LOCERR =.TRUE.		 ! local error reporting
	LOCAL  =.FALSE.          ! set .T. if qual. is local
        LOCNEG =.FALSE.          ! set .T. if qual. locally negated
C
C....................................................................
C
C Get command line for verb LAMPSCONTROL. DCL_STARTUP will return set to
C SS$_NORMAL if all well.
C
	GET_COMMAND=DCL_STARTUP('LAMPSCONTROL'	! command verb
     &      		,.FALSE.		! don't split par lists
     &      		,LAMPSCONTROL_CLD	! CLD module name
     &      		,LOCERR)        	! local error reporting
        IF (.NOT.GET_COMMAND) GOTO 10 		! return
C
C.......................................................................
C
C Check for qualifiers
C
C
C.......................................................................
C
C Check for /COMMAND_FILE = file-spec list
C
	GET_COMMAND=DCL_QUAL('COMMAND_FILE'	! label
     &	             ,WANT_COMFIL	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C Find file specification
C
	IF (WANT_COMFIL) THEN
C
C Read in string list
C
	   GET_COMMAND=DCL_FILE(
     &		'COMMAND_FILE'		! label
     &		,'LSL$FLN_JACKET:FLN_JACKET.COM'! default command file
     &		,ABSENT			! .T. if no spec
     &		,.FALSE.		! not a list
     &		,LOCERR)		! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
C Transfer file name to common block variables
C
	   COMFIL = FILARY(1)(1:FIL_LEN(1))
	   COMFIL_LEN = FIL_LEN(1)
C
C Otherwise, set up a default
C
	ELSE
	   COMFIL = 'LSL$FLN_JACKET:FLN_JACKET.COM'
	   COMFIL_LEN = SIGNCH(COMFIL)
	ENDIF
C
C Check for /WAIT_TIME = delta-time
C
C N.B. /WAIT_TIME should only occur if /COMMAND_FILE is present
C The wait time is used by the wait command procedure to determine
C how long to wait for.
C The default is 1 minute (00:01:00.00)
C The format of a delta time is DDDD-HH:MM:SS.CC
C
	GET_COMMAND=DCL_QUAL('WAIT_TIME'! label
     &		,THERE		! returned .T. if qual found
     &		,LOCAL		! .T. if qual local to parameter
     &		,LOCNEG      	! .T. if qual locally negated
     &  	,LOCERR)      	! .T.-local error reporting
C
C Check for errors
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_STR(
     &		'WAIT_TIME'	! label
     &		,LOCERR)	! .T. local error reporting
C
C Check for errors
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
C Get wait time string from common block
C
	   WAIT_COMPROC_TIME = CARRAY(1)(1:STR_LEN(1))
C
C Otherwise, set up the default to be 1 minute
C
	ELSE
	   WAIT_COMPROC_TIME = '00:01:00.00'
	ENDIF
C
C.......................................................................
C
C Check for /LOG = file-spec list
C
	GET_COMMAND=DCL_QUAL('LOG'	! label
     &	             ,WANT_LOG		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C Check for /[NO]FAST_AUTHORISE
C
	GET_COMMAND = DCL_QUAL('FAST_AUTHORISE'	! qual. name
     &     	,HAD_FAST		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C Find file specification
C
	IF (WANT_LOG) THEN
C
C Read in string list
C
	   GET_COMMAND=DCL_FILE(
     &		'LOG'			! label
     &		,'LSL$FLN_LOG:FLN.LOG'	! default command file
     &		,ABSENT			! .T. if no spec
     &		,.FALSE.		! not a list
     &		,LOCERR)		! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
C Transfer file name to common block variables
C
	   LOGFIL = FILARY(1)(1:FIL_LEN(1))
	   LOGFIL_LEN = FIL_LEN(1)
C
C Otherwise, set up a default
C
	ELSE
	   LOGFIL = 'LSL$FLN_LOG:FLN.LOG'
	   LOGFIL_LEN = SIGNCH(LOGFIL)
	ENDIF
C
C
C.......................................................................
C Check for /REQUEST
C
	GET_COMMAND = DCL_QUAL('REQUEST'! qual. name
     &     	,REQUEST		! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG			! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C.......................................................................
C
C Check for /REPORT
C
	GET_COMMAND = DCL_QUAL('REPORT' ! qual. name
     &     	,REPORT			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C.......................................................................
C
C Check for /NOTIFY
C
	GET_COMMAND = DCL_QUAL('NOTIFY'	! qual. name
     &     	,NOTIFY			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C
C Check for /SESSION_ID = numeric id
C
	GET_COMMAND=DCL_QUAL('SESSION_ID'! label
     &	             ,NOTIFY_SESSION	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch integer session id
C
	IF (NOTIFY_SESSION) THEN
	   GET_COMMAND=DCL_INT('SESSION_ID'! label
     &				,LOCERR)   ! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
	   NOTIFY_SESSION_ID = IARRAY(1)
	ENDIF
C
C
C Check for /SESSION_RESULT.CONTINUE
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.CONTINUE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_CONTINUE
C
C
C Check for /SESSION_RESULT.COMPLETE
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.COMPLETE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_COMPLETE
C
C
C Check for /SESSION_RESULT.ERROR
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.ERROR'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_ERROR
C
C
C Check for /SESSION_RESULT.RESTART
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.RESTART'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_RESTART
C
C
C Check for /SESSION_RESULT.OFFLINE
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.OFFLINE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_OFFLINE
C
C
C Check for /SESSION_RESULT.SUBFLOWLINE
C
	GET_COMMAND=DCL_QUAL('SESSION_RESULT.SUBFLOWLINE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_SESSION_RESULT = TASK_SUBFLOWLINE
C
C
C Check for /OUTCOME = numeric return code
C
	GET_COMMAND=DCL_QUAL('OUTCOME'	! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch integer outcome code
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_INT('OUTCOME' ! label
     &				,LOCERR) ! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
	   NOTIFY_OUTCOME = IARRAY(1)
	ENDIF
C
C
C Check for /PARAMETERS qualifier
C
	GET_COMMAND=DCL_QUAL('PARAMETERS'! label
     &	             ,WANT_PARAM	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C
C Check for /CPU = integer hundredths of seconds
C
	GET_COMMAND=DCL_QUAL('CPU'	! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_INT(
     &			'CPU'		! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
	   NOTIFY_CPU = IARRAY(1)
	ENDIF
C
C
C Check for /PROBLEM = string
C
	GET_COMMAND=DCL_QUAL('PROBLEM'	! label
     &	             ,NOTIFY_PROBLEM	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (NOTIFY_PROBLEM) THEN
	   GET_COMMAND=DCL_STR(
     &			'PROBLEM'		! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
	   NOTIFY_PROBLEM_TEXT = CARRAY(1)(1:STR_LEN(1))
	   NOTIFY_PROBLEM_LEN  = STR_LEN(1)
	ENDIF
C
C
C Check for /JOB_ID = numeric id
C
	GET_COMMAND=DCL_QUAL('JOB_ID'	! label
     &	             ,NOTIFY_JOB	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch integer job id
C
	IF (NOTIFY_JOB) THEN
	   GET_COMMAND=DCL_INT('JOB_ID'	! label
     &				,LOCERR)! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
	   NOTIFY_JOB_ID = IARRAY(1)
	ENDIF
C
C
C Check for /NEW_COMMAND_PROCEDURE = name string
C
	GET_COMMAND=DCL_QUAL('NEW_COMMAND_PROCEDURE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_STR(
     &			'NEW_COMMAND_PROCEDURE'! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
	   NOTIFY_COMPROC = CARRAY(1)(1:STR_LEN(1))
	   NOTIFY_COMPROC_LEN = STR_LEN(1)
	ENDIF
C
C
C Check for /CREATION_RESULT.SUCCESS
C
	GET_COMMAND=DCL_QUAL('CREATION_RESULT.SUCCESS'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_CREATION_RESULT = CREATION_SUCCESS
C
C
C Check for /CREATION_RESULT.FAILURE
C
	GET_COMMAND=DCL_QUAL('CREATION_RESULT.FAILURE'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
	IF (THERE) NOTIFY_CREATION_RESULT = CREATION_FAILURE
C
C
C Check for /PROJECT_ID = project-id string, if have found /NOTIFY
C
C N.B. /PROJECT_ID may occur with either /MANAGE or /NOTIFY, and
C it is checked for again later, with different variables being set
C up
C
	IF (NOTIFY) THEN
	   GET_COMMAND=DCL_QUAL('PROJECT_ID'! label
     &	             ,NOTIFY_PROJECT	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
C If qualifier there, fetch string associated with qualifier
C
	   IF (NOTIFY_PROJECT) THEN
	      GET_COMMAND=DCL_STR(
     &			'PROJECT_ID'! label
     &			,LOCERR)	! .T. local error reporting
C
	      IF (.NOT.GET_COMMAND) GOTO 10! return
C
	      NOTIFY_PROJECT_ID = CARRAY(1)(1:STR_LEN(1))
	      NOTIFY_PROJECT_ID_LEN = STR_LEN(1)
	   ENDIF
C
	ENDIF
C
C.......................................................................
C
C Check for /MANAGE
C
	GET_COMMAND=DCL_QUAL('MANAGE'	! label
     &	             ,MANAGE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C
C Check for /CREATE_JOB = name string
C
	GET_COMMAND=DCL_QUAL('CREATE_JOB'! label
     &	             ,CREATE_JOB	! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (CREATE_JOB) THEN
	   GET_COMMAND=DCL_STR(
     &			'CREATE_JOB'	! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
	   NEW_JOB = CARRAY(1)(1:STR_LEN(1))
	   NEW_JOB_LEN = STR_LEN(1)
	ENDIF
C
C
C Check for /FLOWLINE_ID = name string
C
	GET_COMMAND=DCL_QUAL('FLOWLINE_ID'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_STR(
     &			'FLOWLINE_ID'	! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10! return
C
	   NEW_JOB_FLOWLINE = CARRAY(1)(1:STR_LEN(1))
	   NEW_JOB_FLOWLINE_LEN = STR_LEN(1)
	ENDIF
C
C
C Check for /OUTER_TASK_ID = numeric id
C
	GET_COMMAND=DCL_QUAL('OUTER_TASK_ID'	! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch integer outer (enclosing) task id
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_INT(
     &			'OUTER_TASK_ID'	! label
     &			,LOCERR)	! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
	   NEW_JOB_OUTER_TASK_ID = IARRAY(1)
	ENDIF
C
C
C Check for /PRIORITY = numeric priority
C
	GET_COMMAND=DCL_QUAL('PRIORITY'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch integer session id
C
	IF (THERE) THEN
	   GET_COMMAND=DCL_INT('PRIORITY'! label
     &				,LOCERR)   ! .T. local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10
C
	   NEW_JOB_PRIORITY = IARRAY(1)
C
C Set up default
C
	ELSE
	   NEW_JOB_PRIORITY = 4
	ENDIF
C
C
C Check for /PROJECT_ID = name string, if have found /MANAGE
C
C N.B. /PROJECT_ID may occur with either /MANAGE or /NOTIFY, and
C it is checked for earlier, with different variables being set
C up
C
	IF (MANAGE) THEN
	   GET_COMMAND=DCL_QUAL('PROJECT_ID'! label
     &	             ,THERE		! returned .T. if qual found
     &	             ,LOCAL		! .T. if qual local to parameter
     &	             ,LOCNEG      	! .T. if qual locally negated
     &               ,LOCERR)      	! .T.-local error reporting
C
	   IF (.NOT.GET_COMMAND) GOTO 10 	! return
C
C If qualifier there, fetch string associated with qualifier
C
	   IF (THERE) THEN
	      GET_COMMAND=DCL_STR(
     &			'PROJECT_ID'	! label
     &			,LOCERR)	! .T. local error reporting
C
	      IF (.NOT.GET_COMMAND) GOTO 10! return
C
	      NEW_JOB_PROJ = CARRAY(1)(1:STR_LEN(1))
	      NEW_JOB_PROJ_LEN = STR_LEN(1)
	   ENDIF
C
	ENDIF
C
C.......................................................................
C
C Check for /[NO]MENU
C
	GET_COMMAND = DCL_QUAL('MENU'	! qual. name
     &     	,MENU			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C.......................................................................
C
C Check for /[NO]LOGOFF
C
	GET_COMMAND = DCL_QUAL('LOGOFF'	! qual. name
     &     	,LOGOFF			! returned .T. if qual. found
     &          ,LOCAL		  	! .T. if qual local to parameter
     &		,LOCNEG		  	! .T. if qual locally negated
     &          ,LOCERR)		! .T.-local error reporting
	IF (.NOT.GET_COMMAND) GOTO 10	! return
C
C.......................................................................
C
C Finally, if we want parameters to be defined, call the routine to do
C this by means of command lines
C
	IF (WANT_PARAM) GET_COMMAND = DEFINE_PARAMETERS()
	GOTO 20
C
C.......................................................................
C			
C Errors, set to no menu mode, because may not be interactive,
C and generate LAMPSCONTROL message and log file entry
C
10	MENU = .FALSE.
	CALL LCONT_PUTMSG(LSC__INCOMLINE,0)
C
C.......................................................................
C			
C Exit
C
20	RETURN
   	END
