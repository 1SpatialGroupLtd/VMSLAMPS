;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1987-10-02 10:45:58.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	$IFFEC
	.IDENT	'02OC87'
;
; Copyright Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Paul Hardy after PDP11 version by P. Cross.
;
; IFF binary/letter code mapping for entries

; Local macros

	.MACRO	IFNTRY,LETC,BINC
	.WORD	BINC&255,^A/LETC/
	.ENDM

	CODE_PSECT	IFF

; translation table

	.WORD	NENTS
ENTBL:
;** NB IENDS bits stored in binary code for ST,ZS
; ST is really 0-7 and ZS is 16-23
	IFNTRY	ST,0.		; special case
	IFNTRY	ZS,16.		; another special case
	IFNTRY	NF,32.		; new feature
	IFNTRY	FS,33.		; feature status
	IFNTRY	TH,34.		; feature thickness
	IFNTRY	TX,35.		; text within feature
	IFNTRY	JP,36.		; junction pointer
	IFNTRY	RO,37.		; text rotation
	IFNTRY	AC,38.		; ancillary code
	IFNTRY	TS,39.		; text status
	IFNTRY	CB,40.		; coordinate block

	IFNTRY	EF,-1.		; end of feature
	IFNTRY	EO,-2.		; end of overlay
	IFNTRY	EJ,-3.		; end of job
	IFNTRY	EM,-4.		; end of map
;** NB binary code -128 for VO is used explicitly in IFFEST (IFFPVT.SRC)
	IFNTRY	VO,-128.	; void

	IFNTRY	NS,64.		; new section
	IFNTRY	CC,65.		; calibration coefficients
	IFNTRY	CP,66.		; corner points
	IFNTRY	TC,67.		; transmitted comment
	IFNTRY	CH,68.		; literal characters (to user's format)
	IFNTRY	SS,69.		; symbol select
	IFNTRY	SL,70.		; symbol library select
	IFNTRY	RA,71.		; range of coordinates
	IFNTRY	CS,72.		; character size / spacing
	IFNTRY	NO,73.		; new overlay
	IFNTRY	MD,74.		; map descriptor
	IFNTRY	JB,75.		; junction block
	IFNTRY	SH,76.		; sector headers
	IFNTRY	MH,77.		; map header
	IFNTRY	HI,78.		; history

NENTS=.-ENTBL/4

; conversion functions

; IFFBIN(ILETC) - convert letter code to binary

	.ENTRY	IFFBIN,^M<R2,R3>
	MOVW	@4(AP),R1		; two letter code
	MOVAW	ENTBL-2,R3		; start of table
	MOVZWL	(R3)+,R2		; number of entries
10$:	TSTW	(R3)+			; skip to next entry
	CMPW	R1,(R3)+		; the one we want ?
	BEQL	20$			; j if found
	SOBGTR	R2,10$			; keep looking
; not found
15$:	MOVL	#^A'LETC',IERCD
	JSB	IF$ERR			; moan
	CLRL	R0
	RET

20$:	CVTBL	-4(R3),R0		; sign extend binary code
	RET

; IFFLET(IBINC) - convert binary to letter code
	.ENABL	LSB

	.ENTRY	IFFLET,^M<R2,R3>
	MOVZBW	@4(AP),R1		; get binary code
	MOVL	#NENTS-1,R2		; size of table
	MOVAW	ENTBL+2,R3		; address of first entry
; 0-31 reserved for 'strings' ST 0-7, ZS 16-23 so far
	CMPW	R1,#31.
	BGEQU	10$			; not ST or ZS (special case)
	BICW2	#7,R1			; clear IENDS bits
	BEQL	20$			; ST
10$:	TSTW	(R3)+			; skip to next entry
	CMPW	R1,(R3)+		; is it ours ?
	BEQL	20$			; yes - ok then
	SOBGTR	R2,10$			; keep looking
; not found
15$:	MOVL	#^A'BINC',IERCD
	JSB	IF$ERR			; moan
	MOVZWL	#^A'XX',R0		; return unknown code
	RET

20$:	MOVZWL	(R3),R0			; return binary value
	RET

	.PSECT
	.END
