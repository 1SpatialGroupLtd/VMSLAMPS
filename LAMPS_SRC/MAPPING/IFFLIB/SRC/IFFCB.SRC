C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-06-09 10:50:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: Clarke Brunt
C
C***********************************************************************
C
	SUBROUTINE IFFCB(CBH,CBD)
C
***	MODULE	IFFCB
***	IDENT	09JN89
C
C Create a CB entry
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	RECORD/IFF_CBH/CBH
	RECORD/IFF_CBD/CBD
C
C workspace
	INTEGER*4	I
	INTEGER*4	NDIM
	LOGICAL*4	SIMPLE
	INTEGER*4	COL(3),TCOL(3)
	DATA		COL/IFF_C_X,IFF_C_Y,IFF_C_Z/
C
C convert to ST/ZS depending on output revision level
	IF (ORVLEV.NE.0) THEN
	   CALL IFFEST('CB',2+CBH.NCOL*(1+2*CBH.NROW)+3*CBH.NATT)
	   IF (REJ) RETURN
C
C write the fixed length part of the header, and the column headers
	   CB_HEAD.FLAGS = CBH.FLAGS
	   CB_HEAD.GTYPE = CBH.GTYPE
	   CB_HEAD.NATT = CBH.NATT
	   CB_HEAD.NCOL = CBH.NCOL
	   DO 10 I=1,CBH.NCOL
	      CB_HEAD.COLH(I) = CBH.COLH(I)
10	   CONTINUE
	   CALL IFFWW2(CB_HEAD,2+CBH.NCOL)
C
C write fixed attributes
	   DO 20 I=1,CBH.NATT
	      CB_ATT(I).ATTC = CBH.ATT(I).ATTC
	      CB_ATT(I).IATTV = CBH.ATT(I).IATTV
20	   CONTINUE
	   CALL IFFWW2(CB_ATT,3*CBH.NATT)
C
C write data
	   CALL IFFWL2(CBD,CBH.NCOL*CBH.NROW)
	ELSE
C
C check that the CB will make a viable ST/ZS
	   CALL IFF_FIND_XYZ(CBH,NDIM,TCOL,SIMPLE)
	   IF (SIMPLE) THEN
	      IF (NDIM.EQ.2) THEN
	         CALL IFFST(CBD,CBH.NROW,CBH.FLAGS)
	      ELSE
	         CALL IFFZS(CBD,CBH.NROW,CBH.FLAGS)
	      ENDIF
	   ELSE
	      IF (NDIM.EQ.2.OR.NDIM.EQ.3) THEN
	         CALL IFS_CB_READ(
     &				CBH,CBD,CB_BUF,NDIM,COL,1,CBH.NROW)
	         IF (NDIM.EQ.2) THEN
	            CALL IFFST(CB_BUF,CBH.NROW,CBH.FLAGS)
	         ELSE
	            CALL IFFZS(CB_BUF,CBH.NROW,CBH.FLAGS)
	         ENDIF
C
C set 'attributes lost' flag for this file perhaps
	         IF (NDIM.NE.CBH.NCOL+CBH.NATT) CALL IFFLOST
	      ELSE
	         CALL IFFERR('LETC')
	      ENDIF
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHRCB_HEAD(CBH)
C
***	MODULE	EIHRCB_HEAD
***	IDENT	16OC87
C
C Read the header of a CB entry into the user supplied structure
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C argument
	RECORD/IFF_CBH/CBH
C
C workspace
	INTEGER*2	PTS,ENDS
	INTEGER*4	I
C
C check that entry is a CB and get length
	NDATA(2)=0
	CALL IFFEIH(ILETC,NDATA)
	IF (IERCD.NE.0) RETURN
C
	IF (ILETC.EQ.'CB') THEN
C
C read the fixed length part of the header
	   CALL IFFR2(CB_HEAD,2)
C
C transfer results to user buffer
	   CBH.FLAGS = CB_HEAD.FLAGS
	   CBH.GTYPE = CB_HEAD.GTYPE
	   CBH.NATT  = CB_HEAD.NATT
	   CBH.NCOL  = CB_HEAD.NCOL
C
C calculate number of rows
C nb -CBH.NCOL is omitted from numerator, since it does not affect
C the integer value of NROW
	   CBH.NROW = (MDATA-3*CBH.NATT-2) / (2*CBH.NCOL)
C
C read column headers
	   CALL IFFR2(CB_HEAD.COLH,CBH.NCOL)
C
C and transfer to user buffer
	   DO 10 I=1,CBH.NCOL
	      CBH.COLH(I) = CB_HEAD.COLH(I)
10	   CONTINUE
C
C read fixed attributes
	   CALL IFFR2(CB_ATT,3*CBH.NATT)
C
C and transfer to user buffer
	   DO 20 I=1,CBH.NATT
	      CBH.ATT(I).ATTC = CB_ATT(I).ATTC
	      CBH.ATT(I).IATTV = CB_ATT(I).IATTV
20	   CONTINUE
C
	ELSEIF (ILETC.EQ.'ST'.OR.ILETC.EQ.'ZS') THEN
	   IF (ILETC.EQ.'ST') THEN
	      CBH.NCOL  = 2
	   ELSE
	      CBH.NCOL  = 3
	   ENDIF
	   CBH.GTYPE = 1
	   CBH.NATT  = 0
C
	   CALL EIHRS(PTS,ENDS)
	   CBH.FLAGS = ENDS
	   CBH.NROW = PTS
C
	   CBH.COLH(1) = IFF_C_X
	   CBH.COLH(2) = IFF_C_Y
	   CBH.COLH(3) = IFF_C_Z
	ELSE
	   CALL IFFERR('NOCB')
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHRCB_DATA(CBD)
C
***	MODULE	EIHRCB_DATA
***	IDENT	14OC87
C
C Read the data part of a CB entry into the user supplied buffer
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C argument
	RECORD/IFF_CBD/CBD
C
C workspace
	INTEGER*4	NATT,NCOL
	INTEGER*4	I
C
C check that entry is a CB and get length
	NDATA(2)=0
	CALL IFFEIH(ILETC,NDATA)
	IF (IERCD.NE.0) RETURN
C
	IF (ILETC.EQ.'CB') THEN
C
C read the number of columns and attributes
	   LPOSR = LPOSR+1
	   CALL IFFR2(CB_HEAD.NATT,1)
	   NATT  = CB_HEAD.NATT
	   NCOL  = CB_HEAD.NCOL
C
C step on to start of data and read it
	   LPOSR = LPOSR+NCOL+3*NATT
	   CALL IFFR2(CBD,MDATA-NCOL-3*NATT-2)
C
	ELSEIF (ILETC.EQ.'ST'.OR.ILETC.EQ.'ZS') THEN
	   CALL IFFR2(CBD,MDATA)
	ELSE
	   CALL IFFERR('NOCB')
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHWCB(CBH,CBD)
C
***	MODULE	EIHWCB
***	IDENT	16OC87
C
C Re-write a CB entry
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	RECORD/IFF_CBH/CBH
	RECORD/IFF_CBH/CBD
C
C workspace
	INTEGER*4	I
	INTEGER*4	NDIM
	LOGICAL*4	SIMPLE
	INTEGER*4	COL(3),TCOL(3)
	DATA		COL/IFF_C_X,IFF_C_Y,IFF_C_Z/
C
C read header of CB from file
	CALL EIHRCB_HEAD(CB_H)
	IF (IERCD.NE.0) RETURN
C
C check that new header is compatible with old
	IF (CBH.NROW.NE.CB_H.NROW .OR.
     &	    CBH.NCOL.NE.CB_H.NCOL .OR.
     &	    CBH.NATT.NE.CB_H.NATT .OR.
     &	    CBH.NCOL.NE.CB_H.NCOL) THEN
	   CALL IFFERR('OE')
	   RETURN
	ENDIF
C
	IF (ILETC.EQ.'CB') THEN		! it's a real CB
C
C write the fixed length part of the header, and the column headers
	   CB_HEAD.FLAGS = CBH.FLAGS
	   CB_HEAD.GTYPE = CBH.GTYPE
	   DO 10 I=1,CBH.NCOL
	      CB_HEAD.COLH(I) = CBH.COLH(I)
10	   CONTINUE
	   CALL IFFWW2(CB_HEAD,2+CBH.NCOL)
C
C write fixed attributes
	   DO 20 I=1,CBH.NATT
	      CB_ATT(I).ATTC = CBH.ATT(I).ATTC
	      CB_ATT(I).IATTV = CBH.ATT(I).IATTV
20	   CONTINUE
	   CALL IFFWW2(CB_ATT,3*CBH.NATT)
C
C write data
	   CALL IFFWL2(CBD,CBH.NCOL*CBH.NROW)
	ELSE					! ST or ZS
C
C check that the new CB still makes a viable ST/ZS
	   CALL IFF_FIND_XYZ(CBH,NDIM,TCOL,SIMPLE)
	   IF (SIMPLE) THEN
	      CALL IFFWL2(CBD,CBH.NCOL*CBH.NROW)
	   ELSE
	      IF (NDIM.EQ.2.OR.NDIM.EQ.3) THEN
	         CALL IFS_CB_READ(
     &				CBH,CBD,CB_BUF,NDIM,COL,1,CBH.NROW)
	         CALL IFFWL2(CB_BUF,CBH.NCOL*CBH.NROW)
	      ELSE
	         CALL IFFERR('LETC')
	      ENDIF
	   ENDIF
C
C amend IENDS bits if required
	   IF (IERCD.EQ.0.AND.CBH.FLAGS.NE.CB_H.FLAGS) THEN
	      CB(2) = (CB(2).AND..NOT.7).OR.(CBH.FLAGS.AND.7)
	      LPOSW = LPOSH
	      CALL IFFWW2(CB,1)
	   ENDIF
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	INTEGER*4 FUNCTION IFS_CB_READ(CBH,CBD,BUF,NCOL,COLH,FIRST,LAST)
C
***	MODULE	IFS_CB_READ
***	IDENT	08OC87
C
C Utility routine to extract data from CB structure into user buffer
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFHAN/
C
C arguments
	RECORD/IFF_CBH/CBH
	RECORD/IFF_CBD/CBD
	INTEGER*4	FIRST,LAST
	INTEGER*4	NCOL
	INTEGER*4	BUF(NCOL,LAST-FIRST+1)
	INTEGER*4	COLH(NCOL)
C
C error codes
	EXTERNAL	IFF__NORMAL,IFF__FIXATT,IFF__MISSING
C
C workspace
	INTEGER*4	I,J
	INTEGER*4	IND(IFF_MAXCBCOL)
C
C extract data as required into user buffer
C
C first form array relating user columns to IFF columns
	IFS_CB_READ = %LOC(IFF__NORMAL)
	DO 10 I=1,NCOL
	   IND(I) = 0
C
C check if the requested attribute is a CB column
	   DO 20 J=1,CBH.NCOL
	      IF (CBH.COLH(J).EQ.COLH(I)) THEN
	         IND(I) = J
	         GOTO 10
	      ENDIF
20	   CONTINUE
C
C check if the requested attribute is a fixed attribute
	   IF (IFS_CB_READ) IFS_CB_READ = %LOC(IFF__FIXATT)
	   DO 30 J=1,CBH.NATT
	      IF (CBH.ATT(J).ATTC.EQ.COLH(I)) THEN
	         IND(I) = -J
	         GOTO 10
	      ENDIF
30	   CONTINUE
	   IFS_CB_READ = %LOC(IFF__MISSING)
10	CONTINUE
C
	DO 40 I=FIRST,LAST
	   DO 50 J=1,NCOL
	      IF (IND(J).GT.0) THEN
	         BUF(J,I-FIRST+1)=CBD.I((I-1)*CBH.NCOL+IND(J))
	      ELSEIF (IND(J).LT.0) THEN
	         BUF(J,I-FIRST+1)=CBH.ATT(-IND(J)).IATTV
	      ELSE
	         BUF(J,I-FIRST+1)=IFF_ABSENT
	      ENDIF
50	   CONTINUE
40	CONTINUE
	RETURN
	END
C
C***********************************************************************
C
	INTEGER*4 FUNCTION IFS_CB_WRITE(CBH,CBD,BUF,NCOL,COLH,FIRST,LAST)
C
***	MODULE	IFS_CB_WRITE
***	IDENT	08OC87
C
C Utility routine to fill in CB data structure from user buffer
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFHAN/
C
C arguments
	RECORD/IFF_CBH/CBH
	RECORD/IFF_CBD/CBD
	INTEGER*4	FIRST,LAST
	INTEGER*4	NCOL
	INTEGER*4	BUF(NCOL,LAST-FIRST+1)
	INTEGER*4	COLH(NCOL)
C
C error codes
	EXTERNAL	IFF__NORMAL,IFF__FIXATT,IFF__MISSING
C
C workspace
	INTEGER*4	I,J
	INTEGER*4	IND(IFF_MAXCBCOL)
C
C move data from user buffer to CB data structure
C
C first form array relating user columns to IFF columns
	IFS_CB_WRITE = %LOC(IFF__NORMAL)
	DO 10 I=1,NCOL
	   IND(I) = 0
C
C check if the requested attribute is a CB column
	   DO 20 J=1,CBH.NCOL
	      IF (CBH.COLH(J).EQ.COLH(I)) THEN
	         IND(I) = J
	         GOTO 10
	      ENDIF
20	   CONTINUE
C
C check if the requested attribute is a fixed attribute
	   IF (IFS_CB_WRITE) IFS_CB_WRITE = %LOC(IFF__FIXATT)
	   DO 30 J=1,CBH.NATT
	      IF (CBH.ATT(J).ATTC.EQ.COLH(I)) THEN
	         IND(I) = -J
	         GOTO 10
	      ENDIF
30	   CONTINUE
	   IFS_CB_WRITE = %LOC(IFF__MISSING)
10	CONTINUE
C
	DO 40 I=FIRST,LAST
	   DO 50 J=1,NCOL
	      IF (IND(J).GT.0) THEN
	         CBD.I((I-1)*CBH.NCOL+IND(J)) = BUF(J,I-FIRST+1)
	      ELSEIF (IND(J).LT.0) THEN
	         CBH.ATT(-IND(J)).IATTV = BUF(J,I-FIRST+1)
	      ENDIF
50	   CONTINUE
40	CONTINUE
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE IFS_CB_COMPRESS(CBH,CBD)
C
***	MODULE	IFS_CB_COMPRESS
***	IDENT	30NO87
C
C Utility routine to compress CB data structure
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
C
C arguments
	RECORD/IFF_CBH/CBH
	RECORD/IFF_CBD/CBD
C
C workspace
	INTEGER*4	COL,ROW,ATT
	INTEGER*4	IVAL
	INTEGER*4	NVAR
	INTEGER*4	NCON
	INTEGER*4	NATT
	INTEGER*4	NDAT
	BYTE	COLFLG(IFF_MAXCBCOL)
C
C Values in COLFLG are:  0 - constant absent value
C			-1 - constant value
C			 1 - varying value
C
C Check for constant columns and move to fixed attribute.
C Check for unset columns/fixed attributes and remove.
C
C Initialise column flags as absent
	NVAR = 0
	DO 10 COL=1,CBH.NCOL
	   IF (CBH.COLH(COL).EQ.IFF_C_X .OR.
     &	       CBH.COLH(COL).EQ.IFF_C_Y) THEN
	      COLFLG(COL) = 1			! do not compress X or Y
	      NVAR = NVAR+1
	   ELSE
	      COLFLG(COL) = 0
	   ENDIF
10	CONTINUE
C
	NCON = 0				! no constant columns
	IF (CBH.NCOL.NE.NVAR) THEN		! something to do
C
C now check data values
	   DO 30 ROW=1,CBH.NROW
	      DO 20 COL=1,CBH.NCOL
	         IF (COLFLG(COL).LE.0) THEN	! absent or constant
	            IVAL = CBD.I((ROW-1)*CBH.NCOL+COL)
	            IF (ROW.EQ.1) THEN
	               IF (IVAL.NE.IFF_ABSENT) THEN
	                  COLFLG(COL) = -1	! change to constant
	                  NCON = NCON+1
	               ENDIF
	            ELSE
	               IF (COLFLG(COL).EQ.0) THEN	! absent
	                  IF (IVAL.NE.IFF_ABSENT) THEN
	                     COLFLG(COL) = 1	! change to varying
	                     NVAR = NVAR+1
	                  ENDIF
	               ELSE			! constant
	                  IF (IVAL.NE.CBD.I(COL)) THEN
	                     COLFLG(COL) = 1	! change to varying
	                     NVAR = NVAR+1
	                     NCON = NCON-1
	                  ENDIF
	               ENDIF
	            ENDIF
	         ENDIF
20	      CONTINUE
30	   CONTINUE
	ENDIF
C
C Now pass through fixed attributes
	NATT = 0
	DO 50 ATT=1,CBH.NATT
C
C Check in case fixed attribute is also in data columns
	   DO 40 COL=1,CBH.NCOL
	      IF (CBH.ATT(ATT).ATTC.EQ.CBH.COLH(COL)) GOTO 45
40	   CONTINUE
	   COL = 0
45	   IF (COL.NE.0) THEN			! present in data
	      IF (COLFLG(COL).LT.0) THEN	! as a constant
	         COLFLG(COL) = 0	! dealt with, so unset
	         NCON = NCON-1
	         NATT = NATT+1
	         CBH.ATT(NATT).ATTC = CBH.ATT(ATT).ATTC
	         CBH.ATT(NATT).IATTV = CBD.I(COL)! change value
	      ENDIF
	   ELSE					! not in data
	      IF (CBH.ATT(ATT).IATTV.NE.IFF_ABSENT) THEN
	         NATT = NATT+1
	         CBH.ATT(NATT).ATTC = CBH.ATT(ATT).ATTC
	         CBH.ATT(NATT).IATTV = CBH.ATT(ATT).IATTV
	      ENDIF
	   ENDIF
50	CONTINUE
C
C Add fixed attributes for any remaining constant values
	IF (NCON.GT.0) THEN
	   DO 60 COL=1,CBH.NCOL
	      IF (COLFLG(COL).LT.0) THEN
	         IF (NATT.LT.IFF_MAXCBATT) THEN
	            NATT = NATT+1
	            CBH.ATT(NATT).ATTC = CBH.COLH(COL)
	            CBH.ATT(NATT).IATTV = CBD.I(COL)
	         ELSE
	            COLFLG(COL) = 1	! change to varying
	            NVAR = NVAR+1
	         ENDIF
	      ENDIF
60	   CONTINUE
	ENDIF
	CBH.NATT = NATT		! new number of fixed attributes
C
C Now pass through data values removing non-varying columns
	IF (NVAR.LT.CBH.NCOL) THEN
	   NDAT = 0
	   DO 80 ROW=1,CBH.NROW
	      DO 70 COL=1,CBH.NCOL
	         IF (COLFLG(COL).GT.0) THEN	! varying
	            NDAT = NDAT+1
	            IF (ROW.EQ.1) CBH.COLH(NDAT) = CBH.COLH(COL)
	            CBD.I(NDAT) = CBD.I((ROW-1)*CBH.NCOL+COL)
	         ENDIF
70	      CONTINUE
80	   CONTINUE
	   CBH.NCOL = NVAR	! new number of columns
	ENDIF
C
999	RETURN
	END
C
C***********************************************************************
C
	INTEGER*4 FUNCTION IFS_CB_SCAN( NCOLS, COLS, NCBS, NROWS, SIMPLE )
C
***	IDENT	18DE87
***	MODULE	IFS_CB_SCAN
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 7 December 1987
C
C This routine scans the CB in a feature or text component
C to find out
C		1) how many columns are used in the whole feature
C		2) how many CBs there are
C		3) how many rows (points) there are
C		4) whether the feature is simple (ie X,Y,[Z] data
C		   only)
C
C Note that in case (1), fixed attributes will also count as columns,
C since they may or may not be fixed in all of the CBs
C
C It assumes that the first CB entry is already in-hand. It then IFFNXTs
C through the feature, until it finds an entry that is not a CB (voids
C and junction pointers are ignored). Finally, it repositions back to the
C CB that it started from.
C
C It returns IFF__NORMAL if all goes well, and other codes as
C appropriate if things go amiss
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'	! CB structure definitions
C
***	COMMON/IFFCB/			! for workspace
***	COMMON/IFFHAN/			! for LPOSH
***	COMMON/IFFSTR/			! for SIMPLE_xx
C
C Arguments
C
	INTEGER*4	NCOLS			! out - number of columns
	INTEGER*4	COLS(IFF_MAXCBCOL)	! out - the column headers
	INTEGER*4	NCBS			! out - how many CBs
	INTEGER*4	NROWS			! out - how many rows
	LOGICAL*4	SIMPLE			! out - is the featue simple?
C
C Declare the messages we use
C
	EXTERNAL	IFF__NORMAL
	EXTERNAL	IFF__POSERR
C
C We need a function
C
	INTEGER*4	IFS_CB_SCAN_ADDCOL	! to add a column
C
C Workspace
C
	INTEGER*2	IECODE			! IFF entry code
	INTEGER*2	IELEN			! entry length
	INTEGER*4	FIRST_CB		! address of our start
	INTEGER*4	I			! for a DO loop
	INTEGER*4	COL			! the current column header
C
C **********************************************************************
C assume that we will succeed
C
	IFS_CB_SCAN = %LOC(IFF__NORMAL)
C
C set up our starting conditions
C
	FIRST_CB = LPOSH	! remember where we start from
	NCBS     = 0		! haven't looked at any CBs yet
	NROWS    = 0		! no rows counted yet
	NCOLS    = 0		! and no columns either
	SIMPLE   = .TRUE.	! assume that it is a SIMPLE feature
C
C ----------------------------------------------------------------------
C loop round for each CB entry
C
2000	CONTINUE
C
C count this CB
C
	NCBS = NCBS + 1
C
C if we find a non-simple CB, then the whole feature is non-simple
C
	IF ( .NOT.SIMPLE_XY .AND. .NOT.SIMPLE_XYZ ) SIMPLE = .FALSE.
C
C read in the CB header
C
	CALL EIHRCB_HEAD( CB_H )
C
C add the number of rows in this CB to the running count
C
	NROWS = NROWS + CB_H.NROW
C
C now check whether we have any new columns to add to our list
C - since we don't expect to deal with many columns at any time,
C   we'll just do some very simple code
C
	DO 3000 I = 1,CB_H.NCOL
C
C	 extract the next column header from the CB header
C
	   COL = CB_H.COLH(I)
C
C	 try to add it to our list
C	 - if it won't fit, then skip to looking for the next entry
C
	   IFS_CB_SCAN = IFS_CB_SCAN_ADDCOL( COL,NCOLS,COLS )
	   IF (.NOT.IFS_CB_SCAN) GOTO 5000
C   
3000	CONTINUE
C
C and we must now treat the fixed attributes in the same way
C (since so far as we are concerned, they represent columns)
C
	DO 4000 I = 1,CB_H.NATT
C
	   COL = CB_H.ATT(I).ATTC	! extract the next attribute header
C
	   IFS_CB_SCAN = IFS_CB_SCAN_ADDCOL( COL,NCOLS,COLS )
	   IF (.NOT.IFS_CB_SCAN) GOTO 5000
C   
4000	CONTINUE
C
C and now look for the next entry
C - if it is another CB, go back to the start of the loop
C - if it is a void or junction pointer, ignore it and get another entry
C
5000	CALL IFFNXT( IECODE, IELEN )
	IF ( IELEN.NE.-1 ) THEN
	   IF ( IECODE.EQ.'CB' ) GOTO 2000
	   IF ( IECODE.EQ.'VO' .OR. IECODE.EQ.'JP' ) GOTO 5000
	ENDIF
C
C otherwise, position back to the original entry
C
	CALL IFFPKE( IECODE, IELEN, FIRST_CB )
C
	IF (IELEN.EQ.-1 .OR. IECODE.NE.'CB') THEN
	   IFS_CB_SCAN = %LOC(IFF__POSERR)
	ENDIF
C
	RETURN
	END
C
C***********************************************************************
C
	INTEGER*4 FUNCTION IFS_CB_SCAN_ADDCOL( NEW, NCOLS, COLS )
C
***	IDENT	18DE87
***	MODULE	IFS_CB_SCAN_ADDCOL
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C Author TJ Ibbs, 18 December 1987 (abstracted from IFS_CB_SCAN)
C
C This routine attempts to add the new column to the list of columns
C found by IFS_CB_SCAN. It returns IFF__TOOMANY if it cannot add the
C column (because there is no room left in the array), and IFF__NORMAL
C if it succeeded
C
	IMPLICIT NONE
C
	INCLUDE	'LSL$CMNIFF:CB.STR'	! CB structure definitions
C
C Arguments
C
	INTEGER*4	NEW			!  in - the column to add
	INTEGER*4	NCOLS			! i/o - number of columns
	INTEGER*4	COLS(IFF_MAXCBCOL)	! i/o - the column headers
C
C Declare the messages we use
C
	EXTERNAL	IFF__NORMAL
	EXTERNAL	IFF__TOOMANY
C
C Workspace
C
	INTEGER*4	J			! for a DO loop
C
C **********************************************************************
C attempt to add the new column to our list
C - we do this in a very simple manner - we don't expect to ever have
C   very many columns
C
	DO 3000 J = 1,NCOLS		! look through our list
	   IF (NEW.EQ.COLS(J)) THEN	! it's already there
	      GOTO 9000			! succeeded (nowt to do)
	   ENDIF
3000	CONTINUE
C
C if we reach here, then it wasn't in the current list
C - we must try to add it
C
	IF (NCOLS.GE.IFF_MAXCBCOL) THEN
	   IFS_CB_SCAN_ADDCOL = %LOC(IFF__TOOMANY)
	   GOTO 9999				! no room - return at once
	ELSE
	   NCOLS = NCOLS +1			! count another column
	   COLS(NCOLS) = NEW			! add the header to our list
	ENDIF
C
9000	IFS_CB_SCAN_ADDCOL = %LOC(IFF__NORMAL)	! succeeded
C
9999	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE IFFST_TO_CB(SBUF,NCOL,NPTS,IENDS)
C
***	MODULE	IFFST_TO_CB
***	IDENT	10OC87
C
C Create a CB entry from ST or ZS arguments (called from IFFST/IFFZS)
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	REAL*4		SBUF(*)
	INTEGER*2	NCOL,NPTS,IENDS
C
	CALL IFFEST ('CB',2+NCOL*(1+2*NPTS))
	IF (REJ) RETURN
C
C write the header
	CB_HEAD.FLAGS = IENDS
	CB_HEAD.GTYPE = 1
	CB_HEAD.NATT = 0
	CB_HEAD.NCOL = NCOL
	CB_HEAD.COLH(1) = IFF_C_X
	CB_HEAD.COLH(2) = IFF_C_Y
	CB_HEAD.COLH(3) = IFF_C_Z
	CALL IFFWW2(CB_HEAD,2+NCOL)
C
C write data
	CALL IFFWL2(SBUF,NCOL*NPTS)
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHR_ST_FROM_CB(DST,NWDS,IWNO)
C
***	MODULE	EIHR_ST_FROM_CB
***	IDENT	10OC87
C
C Read from a CB entry, pretending that it is an ST/ZS
C Called from EIHR of a CB
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
C
C arguments
	INTEGER*4	DST(*)
	INTEGER*2	NWDS,IWNO
C
C workspace
	INTEGER*4	I
	INTEGER*4	NDIM
	INTEGER*4	COL(3)
	LOGICAL*4	SIMPLE
	INTEGER*2	IFWD
	INTEGER*4	IND
	INTEGER*4	ROW
	INTEGER*4	LSAVR
C
C locate x,y,z columns
	CALL EIHRCB_HEAD(CB_H)
	CALL IFF_FIND_XYZ(CB_H,NDIM,COL,SIMPLE)
	IF (IERCD.NE.0) RETURN
	IFWD=IWNO-1
	IF (IFWD.LT.0) GOTO 90
	IF (SIMPLE) THEN
	   IF (IFWD+NWDS.GT.2*CB_H.NCOL*CB_H.NROW) GOTO 90
	   LPOSR=LPOSR+IFWD
	   CALL IFFR2(DST,NWDS)
	ELSE
	   IF (MOD(IWNO,2).EQ.0) GOTO 90
	   IF (NDIM.EQ.2) THEN
	      IND = MOD(IWNO,4)/2+1
	      ROW = IWNO/4
	   ELSE
	      IND = MOD(IWNO,6)/3+1
	      ROW = IWNO/6
	   ENDIF
	   LSAVR = LPOSR
	   DO 10 I=1,NWDS/2
	      IF (COL(IND).LT.0) THEN
	         DST(I) = CB_H.ATT(-COL(IND)).IATTV
	      ELSE
	         IFWD = 2*(ROW*CB_H.NCOL+COL(IND)-1)
	         IF (IFWD.GE.2*CB_H.NCOL*CB_H.NROW) GOTO 90
	         LPOSR = LSAVR + IFWD
	         CALL IFFR2(DST(I),2)
	      ENDIF
	      IND = IND+1
	      IF (IND.GT.NDIM) THEN
	         IND = 1
	         ROW = ROW+1
	      ENDIF
10	   CONTINUE
	ENDIF
	RETURN
C  reference outside data
90	CALL IFFERR('OE')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHW_ST_TO_CB(SRC,NWDS,IWNO)
C
***	MODULE	EIHW_ST_TO_CB
***	IDENT	10OC87
C
C Write to a CB, pretending it is an ST/ZS
C Called from EIHW on a CB
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
C
C arguments
	INTEGER*4	SRC(*)
	INTEGER*2	NWDS,IWNO
C
C workspace
	INTEGER*4	I
	INTEGER*4	NDIM
	INTEGER*4	COL(3)
	LOGICAL*4	SIMPLE
	INTEGER*2	IFWD
	INTEGER*4	IND
	INTEGER*4	ROW
	INTEGER*4	LSAVW
C
C locate x,y,z columns
	CALL EIHRCB_HEAD(CB_H)
	CALL IFF_FIND_XYZ(CB_H,NDIM,COL,SIMPLE)
	IF (IERCD.NE.0) RETURN
	IFWD=IWNO-1
	IF (IFWD.LT.0) GOTO 90
	IF (SIMPLE) THEN
	   IF (IFWD+NWDS.GT.2*CB_H.NCOL*CB_H.NROW) GOTO 90
	   LPOSW=LPOSR+IFWD
	   CALL IFFWW2(SRC,NWDS)
	ELSE
	   IF (MOD(IWNO,2).EQ.0) GOTO 90
	   LSAVW = LPOSR
	   IF (NDIM.EQ.2) THEN
	      IND = MOD(IWNO,4)/2+1
	      ROW = IWNO/4
	   ELSE
	      IND = MOD(IWNO,6)/3+1
	      ROW = IWNO/6
	   ENDIF
	   DO 10 I=1,NWDS/2
	      IF (COL(IND).LT.0) GOTO 90	! fixed attribute
	      IFWD = 2*(ROW*CB_H.NCOL+COL(IND)-1)
	      IF (IFWD.GE.2*CB_H.NCOL*CB_H.NROW) GOTO 90
	      LPOSW = LSAVW + IFWD
	      CALL IFFWL2(SRC(I),1)
	      IND = IND+1
	      IF (IND.GT.NDIM) THEN
	         IND = 1
	         ROW = ROW+1
	      ENDIF
10	   CONTINUE
	ENDIF
	RETURN
C  reference outside data
90	CALL IFFERR('OE')
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE IFF_FIND_XYZ(CBH,NDIM,COL,SIMPLE)
C
***	MODULE	IFF_FIND_XYZ
***	IDENT	10OC87
C
C Locate x,y,z in a CB to see whether it can emulate an ST/ZS
C Simple format means a CB in which the x,y,(z) coordinates are
C arranged as in an ST,(ZS).
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
C
C arguments
	RECORD/IFF_CBH/CBH	! input - CB header
	INTEGER*4	NDIM	! output - 2 for ST, 3 for ZS, else ?
	INTEGER*4	COL(3)	! output - columns containing x,y,z
	LOGICAL*4	SIMPLE	! output - true if 'simple' format
C
C workspace
	INTEGER*4	I,J
	INTEGER*4	COLH(3)
	DATA		COLH/IFF_C_X,IFF_C_Y,IFF_C_Z/
C
	NDIM = 0
	SIMPLE = .TRUE.
	DO 10 I=1,3
	   COL(I) = 0
C
C check if the attribute is a CB column
	   DO 20 J=1,CBH.NCOL
	      IF (CBH.COLH(J).EQ.COLH(I)) THEN
	         COL(I) = J
	         GOTO 10
	      ENDIF
20	   CONTINUE
C
C check if the requested attribute is a fixed attribute,
C if so then save as negative column number
	   DO 30 J=1,CBH.NATT
	      IF (CBH.ATT(J).ATTC.EQ.COLH(I)) THEN
	         COL(I) = -J
	         GOTO 10
	      ENDIF
30	   CONTINUE
	   GOTO 40				! not found
10	   NDIM = NDIM+1
C
C if attribute not in it's 'own' column, then not simple format
	   IF (COL(I).NE.I) SIMPLE = .FALSE.
	CONTINUE
C
C if number of found dimensions not equal to number of columns,
C then not simple format
40	IF (NDIM.NE.CBH.NCOL) SIMPLE = .FALSE.
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHRS_CB(NPTS,IENDS)
C
***	MODULE	EIHRS_CB
***	IDENT	10OC87
C
C Emulate EIHRS on a CB entry (called from EIHRS)
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	INTEGER*2	NPTS,IENDS
C
C workspace
	INTEGER*4	NATT,NCOL
C
C read the fixed length part of the header
	CALL IFFR2(CB_HEAD,2)
C
	IENDS = CB_HEAD.FLAGS
	NATT  = CB_HEAD.NATT
	NCOL  = CB_HEAD.NCOL
C
C calculate number of rows
C nb -NCOL is omitted from numerator, since it does not affect
C the integer value of NPTS
	NPTS = (MDATA-3*NATT-2) / (2*NCOL)
C
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHCPY_ST_TO_CB(ILUN)
C
***	MODULE	EIHCPY_ST_TO_CB
***	IDENT	10OC87
C
C Copy an ST/ZS converting to CB (called from EIHCPY)
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	INTEGER*2	ILUN
C
C workspace
	INTEGER*4	LSAVF
	INTEGER*2	LUN
	INTEGER*2	NPTS,IENDS,NDAT,NWDS
C
	NDAT = NDATA(1)
	NWDS = NDAT+4
	CB_HEAD.GTYPE = 1
	CB_HEAD.NATT = 0
	CB_HEAD.NCOL = 2
	IF (ILETC.EQ.'ZS') THEN
	   NWDS = NWDS+1
	   CB_HEAD.NCOL = 3
	ENDIF
	CALL EIHRS(NPTS,IENDS)
	IF (NPTS.EQ.0) RETURN
	CB_HEAD.FLAGS = IENDS
	CB_HEAD.COLH(1) = IFF_C_X
	CB_HEAD.COLH(2) = IFF_C_Y
	CB_HEAD.COLH(3) = IFF_C_Z
	CALL IFFLUN(LUN)	! get present selection
	CALL IFFSEL(ILUN)	! select output LUN
	LSAVF = LPOSF		! save start of feature
	IF (LPOSF.EQ.0) CALL IFFUPP(1)
	CALL IFFEST('CB',NWDS)
	IF (LSAVF.EQ.0) CALL IFFUPP(0)
	NWDS = 2+CB_HEAD.NCOL	! convert byte -> word
	CALL IFFWW2(CB_HEAD,NWDS)
	CALL IFFSEL(LUN)
	CALL IFFEIH(ILETC,NDATA)! get LPOSR correct after IFFSELs
	CALL IFFCP2(ILUN,NDAT)
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE EIHCPY_CB_TO_ST(ILUN)
C
***	MODULE	EIHCPY_CB_TO_ST
***	IDENT	10OC87
C
C Copy a CB converting to ST/ZS (called from EIHCPY)
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C arguments
	INTEGER*2	ILUN
C
C workspace
	INTEGER*4	LSAVF
	INTEGER*2	LUN
	INTEGER*2	NDAT
	INTEGER*4	I
	INTEGER*4	NDIM
	LOGICAL*4	SIMPLE
	INTEGER*4	COL(3),TCOL(3)
	DATA		COL/IFF_C_X,IFF_C_Y,IFF_C_Z/
C
C check that the CB will make a viable ST/ZS
	CALL EIHRCB_HEAD(CB_H)
	CALL IFF_FIND_XYZ(CB_H,NDIM,TCOL,SIMPLE)
	CALL IFFLUN(LUN)	! get present selection
	CALL IFFSEL(ILUN)	! select output LUN
	LSAVF = LPOSF		! save start of feature
	IF (LPOSF.EQ.0) CALL IFFUPP(1)
	IF (NDIM.EQ.2.OR.NDIM.EQ.3) THEN
	   IWS(3) = CB_H.FLAGS
	   IF (NDIM.EQ.2) THEN
	      NDAT = 4*CB_H.NROW
	      CALL IFFEST('ST',NDAT)
	   ELSE
	      NDAT = 6*CB_H.NROW
	      CALL IFFEST('ZS',6*CB_H.NROW)
	   ENDIF
C
C set 'attributes lost' flag for this file perhaps
	   IF (NDIM.NE.CB_H.NCOL+CB_H.NATT) CALL IFFLOST
	ELSE
	   CALL IFFERR('LETC')
	   RETURN
	ENDIF
	IF (LSAVF.EQ.0) CALL IFFUPP(0)
	CALL IFFSEL(LUN)
	IF (SIMPLE) THEN
	   CALL IFFCP2(ILUN,NDAT)
	ELSE
	   CALL EIHRCB_DATA(CB_D)
	   CALL IFS_CB_READ(CB_H,CB_D,CB_BUF,NDIM,COL,1,CB_H.NROW)
	   CALL IFFSEL(ILUN)
	   CALL IFFWW2(CB_BUF,NDAT)
	   CALL IFFSEL(LUN)
	ENDIF
	RETURN
	END
C
C***********************************************************************
C
	SUBROUTINE IFFCVT(IECODE,IELEN)
C
***	MODULE	IFFCVT
***	IDENT	20OC87
C
	IMPLICIT NONE
C
	INCLUDE	'CMN:CB.STR'
***	COMMON/IFFCB/
***	COMMON/IFFHAN/
***	COMMON/IFFSTR/
***	COMMON/IFFWS/
C
C arguments
	INTEGER*2	IECODE,IELEN
C
C workspace
	INTEGER*4	NCOL,COL(3)
	LOGICAL*4	SIMPLE
C
C Convert entry code and length according to input revision level
C
	IF ((IECODE.EQ.'ST'.OR.IECODE.EQ.'ZS').AND.IRVLEV.EQ.1) THEN
	   IF (IECODE.EQ.'ZS') THEN
	      IELEN = IELEN+1
	      SIMPLE_XY = .FALSE.
	      SIMPLE_XYZ = .TRUE.
	   ELSE
	      SIMPLE_XY = .TRUE.
	      SIMPLE_XYZ = .FALSE.
	   ENDIF
	   IECODE = 'CB'
	   IELEN = IELEN+4
	ELSEIF (IECODE.EQ.'CB') THEN
C
C NB This leaves LPOSR not at start of entry. Should not matter to users
	   CALL EIHRCB_HEAD(CB_H)
	   CALL IFF_FIND_XYZ(CB_H,NCOL,COL,SIMPLE)
	   IF (NCOL.EQ.2) THEN
	      SIMPLE_XY = SIMPLE.AND.(CB_H.NATT.EQ.0)
	      SIMPLE_XYZ = .FALSE.
	      IF (IRVLEV.EQ.0) THEN
	         IECODE = 'ST'
	         IELEN = 4*CB_H.NROW
	      ENDIF
	   ELSEIF (NCOL.EQ.3) THEN
	      SIMPLE_XY = .FALSE.
	      SIMPLE_XYZ = SIMPLE.AND.(CB_H.NATT.EQ.0)
	      IF (IRVLEV.EQ.0) THEN
	         IECODE = 'ZS'
	         IELEN = 6*CB_H.NROW
	      ENDIF
	   ELSE
	      CALL IFFERR('BINC')
	      IECODE = 'XX'
	   ENDIF
	ENDIF
	RETURN
	END
