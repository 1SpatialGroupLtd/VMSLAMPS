	.TITLE	IFFDCL
	.IDENT	'05OC93'
;
; Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Paul Hardy after P. Cross.
;

; I F F   H a n d l e r   d e c l a r a t i o n s

;Mod	Make B.VBNx long not word to allow big IFF files	PGH  23-Jul-1992

	.LIBRARY	/LSL$LIBRARY:LSLMACLIB/

; equated symbols

DFLEN = 100.				; default initial length
DFEXT = 50.				; default extension
IFBKSZ=512.				; block size in bytes

.TRUE. = -1				; FORTRAN 'TRUE'

; IFF control block layout
;  (IFCB)
	$DEFINI	IFCB

; first part - core only

	$DEF	I.FCBL	.BLKL	1	; link to next IFCB
	$DEF	I.ADR	.BLKL	2	; mapped virtual address
	$DEF	I.FLG	.BLKL	1	; CRMPSC flags
	$DEF	I.STS	.BLKW	1	; status bits
; all zero => IFCB not in use
	_VIELD	IFC,0,<-		; of the form IFC_M_BSY
		<BSY,,M>,-		; IFCB in use
		<RLA,,M>,-		; read look-ahead
		<HOV,,M>,-		; history overwrite
		<MAP,,M>,-		; mapped file
		<IRVT,,M>,-		; transparent input (revision -1)
		<IRV,2,>,-		; input revision level
		<RO,,M>,-		; file is readonly
		<LOST,,M>,-		; attributes lost
		>
	$DEF	I.LUN	.BLKB	1	; Unit number
			.BLKB	1	; pad to longword aligned
; NB I.STS and I.LUN are sometimes cleared together as a longword
			.BLKW	1	; more padding

; second part - written to disc as 'forepart' of file

	$DEF	I.FORE	.BLKW	1	; 'IFF' nameplate
	$DEF	I.FEXT	.BLKW	1	; default extension
	$DEF	I.FSEQ	.BLKW	1	; internal feature sequence nr
; the next block of entries are reflected in /IFFHAN/
	$DEF	I.POSE	.BLKL	1	; EOF position
	$DEF	I.POSR	.BLKL	1	; reading position
	$DEF	I.POSW	.BLKL	1	; writing position
	$DEF	I.POSH	.BLKL	1	; entry-in-hand position
	$DEF	I.POSM	.BLKL	1	; marked position
	$DEF	I.POSF	.BLKL	1	; current feature start
	$DEF	I.EDAT	.BLKW	3	; "current entry" data
I.NWED=.-I.EDAT/2			; nr words of "entry data"
			.BLKW	1	; pad to longword aligned

; This block reflected in IFFJUN
	$DEF	I.POSJ	.BLKW	1	; junction-in-hand offset from LPOSH
	$DEF	I.SHSZ	.BLKW	1	; sector header block size
	$DEF	I.SHAD	.BLKL	1	; sector header block address
	$DEF	I.SORI	.BLKW	4	; sector origin
	$DEF	I.SSTP	.BLKW	4	; sector sizes
	$DEF	I.SNUM	.BLKL	1	; no of sectors

; History control
	$DEF	I.HIS	.BLKW	1	; 'HIS' nameplate
	$DEF	I.HFLG	.BLKB	1	; flags
	_VIELD	HIS,0,<-		; of the form HIS_M_HI
		<HI,,M>,-		; HI in this file
		<CL,,M>,-		; file was closed
		<ORV,2,>,-		; output revision level
		>
			.BLKB	1	; pad to quad (actually long!) align
	$DEF	I.ELAI	.BLKQ	1	; time at initial open
	$DEF	I.ELAT	.BLKQ	1	; total elapsed
	$DEF	I.ELAO	.BLKQ	1	; time at open
	$DEF	I.CPUT	.BLKL	1	; total CPU
	$DEF	I.CPUO	.BLKL	1	; CPU at open

; now an actual history record
	HDATLEN = 17
	HUSRLEN = 12
	HIMGLEN = 9
	HFNCLEN = 12
	HELALEN = 8
	HCPULEN = 8
	HSTSLEN = 8
	$DEF	I.HDAT	.BLKB	HDATLEN	; date (to seconds)
			.BLKB	1
	$DEF	I.HUSR	.BLKB	HUSRLEN	; user
			.BLKB	1
	$DEF	I.HIMG	.BLKB	HIMGLEN	; image
			.BLKB	1
	$DEF	I.HFNC	.BLKB	HFNCLEN	; function
			.BLKB	1
	$DEF	I.HELA	.BLKB	HELALEN	; elapsed
			.BLKB	1
	$DEF	I.HCPU	.BLKB	HCPULEN	; CPU
			.BLKB	1
	$DEF	I.HSTS	.BLKB	HSTSLEN	; status
I.LGHIS=.-I.HDAT
	ASSUMEQ	I.LGHIS,80		; should be 80 long

I.LGFO=.-I.FORE				; length of forepart

; third part - FAB
;  when R0 points here it is called  IFAB

	$FABDEF
I.FAB:	.BLKB	FAB$K_BLN

; NAM block

	$NAMDEF
I.NAM:	.BLKB	NAM$K_BLN

; Resultant string area

I.RSA:	.BLKB	NAM$C_MAXRSS+1	; add one for alignment

;  and XAB

	$XABDEF
	$XABDATDEF
I.XAB:	.BLKB	XAB$K_DATLEN

;  and RAB

	$RABDEF
I.RAB:	.BLKB	RAB$K_BLN

I.LGTH=.

	$DEFEND	IFCB


; IFF buffer layout
;  (IBCB)

	$DEFINI	IBCB

	$DEF	B.BUFL	.BLKL	1	; link to next buffer
					; (chain through all buffers)
;	$DEF	B.STS	.BLKL	1	; status bits, long but only byte used
;	_VIELD	IBC,0,<-		; of the form IBC_M_WTR
;		<WTR,,M>,-		; write requested (at VBNW)
;		<RDR,,M>,-		; read requested (at VBNR)
;		<,,>,-			; one free
;		<WTG,,M>,-		; writing
;		<RDG,,M>,-		; reading
;		<,2,>,-			; 2 free
;		<1ST,,M>,-		; primary buffer for this file
;		>
; trial with a longword for each
	$DEF	B.WTR	.BLKL	1	; write requested (at VBNW)
	$DEF	B.RDR	.BLKL	1	; read requested (at VBNR)
	$DEF	B.WTG	.BLKL	1	; writing
	$DEF	B.RDG	.BLKL	1	; reading
	$DEF	B.1ST	.BLKL	1	; primary buffer for this file
	
	$DEF	B.VBNW	.BLKL	1	; VBN for writing (=VBNR after reading)
	$DEF	B.VBNR	.BLKL	1	; VBN for next read (after write, if nec)
	$DEF	B.IFCB	.BLKL	1	; pointer to IFCB
	$DEF	B.BUF	.BLKB	IFBKSZ	; block buffer

B.LGTH=.
	$DEFEND	IBCB

; IFF handler common block layout

	.MACRO	OFF$,SYM,OFF
SYM=$$OFF
$$OFF=$$OFF+OFF
	.ENDM

; common IFFHAN, available in LSL$CMNIFF:IFFHAN.CMN
	COMMON	IFFHAN
$$OFF=.

; state of currently selected file
	OFF$	LPOSE,4			; EOF (next free word)
	OFF$	LPOSR,4			; reading position
	OFF$	LPOSW,4			; writing position
	OFF$	LPOSH,4			; entry-in-hand (0 if none)
	OFF$	LPOSM,4			; marked entry (0 if none)
	OFF$	LPOSF,4			; current feature (0 if none)
LPOSND=$$OFF				; end of variables copied from IFCB
; NB LPOSND is ignored in IFFUPC - just transfers 24 bytes
	OFF$	IERCD,4			; latest error code
	OFF$	IERAD,4			; location of last error call
	OFF$	IERNM,4			; error number if error detected by RSX
	OFF$	WATEOF,2 		; TRUE if writing at EOF, FALSE at marked void
	OFF$	IFOREL,2 		; nr of blocks in forepart
	OFF$	IRVLEV,4 		; input revision level
	OFF$	ORVLEV,4 		; output revision level

; common IFFJUN, available in LSL$CMNIFF:IFFJUN.CMN
	COMMON	IFFJUN
$$OFF=.
	OFF$	IFPOSJ,2   		; junction-in-hand (0 if none)
	OFF$	IFSHSZ,2   		; sector header size (0 if none)
	OFF$	IFSHAD,4   		; sector header block address
	OFF$	IFSORI,8.  		; sector origin
	OFF$	IFSSTP,8.  		; sector sizes
	OFF$	IFSNUM,4   		; sector numbers
LJUNND=$$OFF
; NB LJUNND ignored in IFFUPC - just transfers 28 bytes

; private common block
	COMMON	IFFPVT
$$OFF=.

; listheads  etc.
	OFF$	IFCHD,8			; IFCB chain head
	OFF$	IFFPT,4			; currently selected IFCB
	OFF$	IFBHD,8			; buffer chain head
	OFF$	BUFPT,4			; current buffer (at B.BUF)
	OFF$	IFFEF,4			; event flag

; global flags
	OFF$	IFFLG,4
	_VIELD	FLG,0,<-		; of the form FLG_M_MAP
		<MAP,,M>,-		; use mapped files
		<ERM,,M>,-		; error messages on
		<ORVG,,M>,-		; output revision given
		<ORV,2,>,-		; output revision level
		>

; storage for fast coordinate reading routine
	OFF$	LSTPT,4			; last used IFFPT
	OFF$	LSTBLK,4		; last memory block address used

; WS for error recovery  N.B. adjacency assumed
	OFF$	INAST,4			; non-zero (stack ptr) if in AST
	OFF$	TDYRT,4			; address of user's tidy-up routine (if declared)
	OFF$	TDYLB,4			; user's return address for IFFRET  ( "      "  )
					; ... in which case, the next 3 are also recorded
	OFF$	TDYSP,4			; stack pointer for recovery after error
	OFF$	TDYFP,4			; ditto frame pointer
	OFF$	TDYNM,4			; traceback chain head
	OFF$	TDYSQ,4			; sequence number

; workspace

	COMMON	IFFWS
IWS:	.BLKW	6

	COMMON
