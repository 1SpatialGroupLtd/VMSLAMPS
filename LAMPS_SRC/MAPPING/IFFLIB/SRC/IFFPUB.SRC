C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-11 19:47:30.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: P. Cross
C
C	IS_REAL_AC added			TJH	19-Feb-1987
C	IFFPKE optimised			CCB	23-May-1984
C	All internal IFFR, IFFW use fast two
C	argument versions			CCB	23-May-1984
C	IFFNO to have optional 3rd arg		PGH	08-Jul-1982
C	IFFNXC not use IFFWS			PGH	20-May-1982
C	Version numbering			 DM	24-Nov-1981
C	AC added				 DM	26-Oct-1981
C	JP added				AJW	21-Jan-1980
C	VAX/VMS version				PGH	   Jun-1980
C	JB added				MCF	   Apr-1980
C	MH,EM & RO added			MCF	   Feb-1980
C	Last edit by PC					   Jun-1979
C
C Calls to make new IFF entries
C
	SUBROUTINE IFFMD(IDESC,NWDS)
C
***	MODULE	IFFMD
***	IDENT	11OC87
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Map Description - a variable size entry of NWDS words
C
	CALL IFFEST('MD',NWDS)
	IF (REJ) RETURN
	CALL IFFWW2(IDESC,NWDS)
	RETURN
	END
C
	SUBROUTINE IFFNF(INF,ISQ)
C
***	MODULE	IFFNF
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C New Feature
C (terminate previous feature if any)
C
	IF (IFFCKF(.TRUE.)) CALL IFFEF
	IF (IERCD.NE.0) GOTO 90
C set start of new feature
	CALL IFFUPC
	LWS=LPOSM
	IF (WATEOF) LWS=LPOSE
	CALL IFFUPP(LWS)
C get next internal sequence number
C (unless explicit sequence number given)
	IF (ISQ.EQ.0) CALL IFFNSQ(ISQ)
	CALL IFFEST('NF',TWO)
	IF (REJ) GOTO 90
C entry accepted
	IWS(1)=INF
	IWS(2)=ISQ
	CALL IFFWW2(IWS,TWO)
	RETURN
C entry rejected
90	CALL IFFUPP(ZERO)
	RETURN
	END
C
	SUBROUTINE IFFFS(ISTAT)
C
***	MODULE	IFFFS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Feature Status
C (inside feature only)
C
	CALL IFFEST('FS',4)
	IF (REJ) RETURN
	CALL IFFWW2(ISTAT,4)
	RETURN
	END
C
	SUBROUTINE IFFTS(ISTAT)
C
***	MODULE	IFFTS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Text Status
C (inside feature only)
C
	CALL IFFEST('TS',4)
	IF (REJ) RETURN
	CALL IFFWW2(ISTAT,4)
	RETURN
	END
C
	SUBROUTINE IFFTH(ITHK)
C
***	MODULE	IFFTH
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C feature THickness
C (inside feature only)
C
	CALL IFFEST ('TH',ONE)
	IF (REJ) RETURN
	CALL IFFWW2(ITHK,ONE)
	RETURN
	END
C
	SUBROUTINE IFFRO(ROT)
C
***	MODULE	IFFRO
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C ROtation of text string
C (inside feature only)
C
	CALL IFFEST('RO',TWO)
	IF (REJ) RETURN
	CALL IFFWL2(ROT, ONE)
	RETURN
	END
C
	SUBROUTINE IFFTX(STR,NCH)
C
***	MODULE	IFFTX
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C TeXt string
C (inside feature only)
C
	CALL IFFECS('TX',STR,IFFLCS())
	RETURN
	END
C
	SUBROUTINE IFFST(SBUF,NPTS,IENDS)
C
***	MODULE	IFFST
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C point STring
C (inside feature only)
C
C convert to CB 2 depending on output revision level
	IF (ORVLEV.EQ.1) THEN
	   CALL IFFST_TO_CB(SBUF,2,NPTS,IENDS)
	   RETURN
	ENDIF
	IWS(3)=IENDS
	CALL IFFEST ('ST',NPTS*4)
	IF (REJ) RETURN
	CALL IFFWL2(SBUF,NPTS*2)
	RETURN
	END
C
	SUBROUTINE IFFZS(SBUF,NPTS,IENDS)
C
***	MODULE	IFFZS
***	IDENT	24OC84
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Z String (as ST but 3-dimensional)
C (inside feature only)
C
C convert to CB 3 depending on output revision level
	IF (ORVLEV.EQ.1) THEN
	   CALL IFFST_TO_CB(SBUF,3,NPTS,IENDS)
	   RETURN
	ENDIF
	IWS(3)=IENDS
	CALL IFFEST ('ZS',NPTS*6)
	IF (REJ) RETURN
	CALL IFFWL2(SBUF,NPTS*3)
	RETURN
	END
C
	SUBROUTINE IFFMH(MHARR,MHLEN)
C
***	MODULE	IFFMH
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
C Map Header
C
***	COMMON/IFFWS/
***	COMMON/IFFHAN/
C
	CALL IFFEST('MH',MHLEN)
	IF (REJ) RETURN
	CALL IFFWW2(MHARR,MHLEN)
	RETURN
	END
	SUBROUTINE IFFNS(SDATA,NCH)
C
***	MODULE	IFFNS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C New Section
C
C how long is the string ?
	CALL IFFECS('NS',SDATA,IFFLCS())
	RETURN
	END
C
	SUBROUTINE IFFNO(IOVN,IOVS,LNOPOS)
C
***	MODULE	IFFNO
***	IDENT	08JL82
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
**	IF VAX
	LOGICAL IFF_HAVARG	! function called (IFFFT.MAR)
	INTEGER*2 ILEN		! length in words
**	ENDC
C
C New Overlay
C
**	IF VAX
	ILEN = 2
	IF (IFF_HAVARG(3)) ILEN = 4
	CALL IFFEST('NO',ILEN)
**	IFF
	CALL IFFEST('NO',TWO)
**	ENDC
	IF (REJ) RETURN
	IWS(1)=IOVN
	IWS(2)=IOVS
	CALL IFFWW2(IWS,TWO)
**	IF VAX
	IF (ILEN.EQ.4) CALL IFFWL2(LNOPOS,1)
**	ENDC
	RETURN
	END
C
	SUBROUTINE IFFCC(CFT)
C
***	MODULE	IFFCC
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Calibration Coefficients
C
	CALL IFFEST('CC',40)
	IF (REJ) RETURN
C write twenty reals
	CALL IFFWL2(CFT,20)
	RETURN
	END
C
	SUBROUTINE IFFCP(XY)
C
***	MODULE	IFFCP
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Corner Points  (16 reals)
C
	CALL IFFEST('CP',32)
	IF (REJ) RETURN
	CALL IFFWL2(XY,16)
	RETURN
	END
C
	SUBROUTINE IFFTC(STR,NCH)
C
***	MODULE	IFFTC
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Transmitted Comment
C (may be either inside or outside a feature)
C
	CALL IFFECS('TC',STR,IFFLCS())
	RETURN
	END
C
	SUBROUTINE IFFCH(STR,NCH)
C
***	MODULE	IFFCH
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C literal CHaracter data
C
	CALL IFFECS('CH',STR,IFFLCS())
	RETURN
	END
C
	SUBROUTINE IFFSS(ISYM)
C
***	MODULE	IFFSS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Symbol Select
C
	CALL IFFEST('SS',ONE)
	IF (REJ) RETURN
	CALL IFFWW2(ISYM,ONE)
	RETURN
	END
C
	SUBROUTINE IFFSL(ILIB)
C
***	MODULE	IFFSL
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Symbol Library select
C
	CALL IFFEST('SL',ONE)
	IF (REJ) RETURN
	CALL IFFWW2(ILIB,ONE)
	RETURN
	END
C
	SUBROUTINE IFFRA(RXY)
C
***	MODULE	IFFRA
***	IDENT	24NO81
C
     	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C coordinate RAnge
C
	CALL IFFEST('RA',8)
	IF (REJ) RETURN
C 4 reals
	CALL IFFWL2(RXY,4)
	RETURN
	END
C
	SUBROUTINE IFFCS(CH,CS)
C
***	MODULE	IFFCS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Character height and Spacing
C
	CALL IFFEST('CS',4)
	IF (REJ) RETURN
C 2 reals
	RWS(1)=CH
	RWS(2)=CS
	CALL IFFWL2(RWS,TWO)
	RETURN
	END
C
	SUBROUTINE IFFEF
C
***	MODULE	IFFEF
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C End of Feature
C
	CALL IFFEST('EF',ZERO)
C now no current feature
	CALL IFFUPP(ZERO)
	RETURN
	END
C
	SUBROUTINE IFFEO
C
***	MODULE	IFFEO
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C End of Overlay
C
	IF (IFFCKF(.TRUE.)) CALL IFFEF
	CALL IFFEST('EO',ZERO)
	RETURN
	END
C
	SUBROUTINE IFFJB(JBLEN)
C
***	MODULE	IFFJB
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
C create Junction Block of length JBLEN
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	INTEGER*2 JBLEN		! length of block
C
	CALL IFFEST('JB', JBLEN)
	IF (REJ) RETURN
	DO 10 I = 1, JBLEN	! initialize with zeroes
	  CALL IFFWW2(ZERO, 1)
10	  CONTINUE
	RETURN
	END
C
	SUBROUTINE IFFJP(LPOSJB,IPOSJ)
C
***	MODULE	IFFJP
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
C create Junction Pointer to junction in JB
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	INTEGER*4 LPOSJB	! position of block
C	INTEGER*2 IPOSJ		! position in block
C
	CALL IFFEST('JP',   3)
	IF (REJ) RETURN
	CALL IFFWL2(LPOSJB , 1)
	CALL IFFWW2(IPOSJ  , 1)
	RETURN
	END
C
	SUBROUTINE IFFEM
C
***	MODULE	IFFEM
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
C End of Map
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	IF (IFFCKF(.TRUE.)) CALL IFFEF
	CALL IFFEST('EM',ZERO)
	RETURN
	END
C
	SUBROUTINE IFFEJ
C
***	MODULE	IFFEJ
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C End of Job
C
	IF (IFFCKF(.TRUE.)) CALL IFFEF
	CALL IFFEST('EJ',ZERO)
	RETURN
	END
C
C *****************************************************
C
C  calls to find things already in the file
C
	SUBROUTINE IFFNXT(IECODE,IELEN)
C
***	MODULE	IFFNXT
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
C find NeXT entry, return letter-code and length
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	CALL IFFUPC
C check rewound
	MDATA=0
	LPOSR=1
	IF (LPOSH.EQ.0) GOTO 10
C read header of current entry
	CALL IFFEI2(ILETC,NDATA)
C advance to next entry
10	CALL  IFFUPP(LPOSF,LPOSM,LPOSR+MDATA)
	CALL IFFUPJ(0)
C cancel write-into-void
	WATEOF=.TRUE.
C check EOF
	IELEN=-1
	IF (LPOSH.GE.LPOSE) RETURN
C there is another entry - get details
	CALL IFFEI3(IECODE,IELEN)
C convert data according to input revision level
	CALL IFFCVT(IECODE,IELEN)
	RETURN
	END
C
	SUBROUTINE IFFNXC(IECODE,IELEN)
C
***	MODULE	IFFNXC
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
	INTEGER*2 ICOD
C
C find NeXt entry of given type-Code
C
10	CALL IFFNXT(ICOD,IELEN)
	IF(ICOD.EQ.IECODE.OR.IELEN.EQ.-1) RETURN
	GOTO 10
	END
C
	SUBROUTINE IFFPKE(IECODE,IELEN,LWNO)
C
***	MODULE	IFFPKE
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	INTEGER*4 LWNO
C
C Position to Known Entry
C LWNO is assumed to be the start of an entry,
C derived from a previous IFFNXT or IFFNXC
C
	CALL IFFUPC
	CALL IFFUPP(LPOSF,LPOSM,LWNO)
	IF (LPOSH.EQ.0.OR.LPOSH.GT.LPOSE) GOTO 90
C take the entry into hand
	CALL IFFEI3(IECODE,IELEN)
C convert data according to input revision level
	CALL IFFCVT(IECODE,IELEN)
C cancel if error
	IF (IERCD.NE.0) CALL IFFUPP(LPOSF,LPOSM,ZERO)
	RETURN
90	CALL IFFERR('NE')
	RETURN
	END
C
	SUBROUTINE IFFRWD
C
***	MODULE	IFFRWD
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C "ReWinD" the IFF so as to find the first entry
C
	CALL IFFUPC
	CALL IFFUPP(LPOSF,LPOSM,ZERO)
	CALL IFFZED
	RETURN
	END
C
	SUBROUTINE IFFRWM
C
***	MODULE	IFFRWM
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C ReWind to Mark (=IFFRWD if no mark !)
C
	CALL IFFUPC
	CALL IFFUPP(LPOSF,LPOSM,LPOSM)
	CALL IFFZED
	RETURN
	END
C
	SUBROUTINE IFFDEL
C
***	MODULE	IFFDEL
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C 'DELete' current feature
C - reset EOF to start of current feature
C - no action if no feature, or if writing into void
C
	IF (IFFCKF(.FALSE.)) RETURN
	CALL IFFUPC
C Set LPOSE to LPOSF, and LPOSF to 0.
C Use LWS as temporary, as LPOSF will be set to zero before being
C moved to LPOSE.
	LWS = LPOSF
	IF (WATEOF) CALL IFFUPP (ZERO,LPOSM,LPOSH,LWS)
	RETURN
	END
C
	SUBROUTINE IFFVOM
C
***	MODULE	IFFVOM
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C VOid to Marked entry
C - if there is a marked entry and an entry-in-hand,
C - and mark < eih, create a void between them
C ?  not to allow if any EFs, NFs  etc between  ?
C
	CALL IFFUPC
	IF (LPOSM.EQ.0) GOTO 90
	IF (LPOSH.EQ.0) GOTO 90
	IF (LPOSH.LE.LPOSM) GOTO 90
C set for writing into the void
	WATEOF=.FALSE.
	CALL IFFEST('VO',ZERO)
C (which will do the actual void entry)
	RETURN
C
90	CALL IFFERR('IV')
	RETURN
	END
C
	SUBROUTINE IFFCLR
C
***	MODULE	IFFCLR
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C  "CLeaR" the IFF by resetting EOF to 1
C  and forget other positions
C
	CALL IFFUPP(ZERO,ZERO,ZERO,ONE)
	CALL IFFZED
	WATEOF=.TRUE.
	RETURN
	END
C
	SUBROUTINE IFFAC(ICTYPE,LCODE,STR,NCH)
C
***	MODULE	IFFAC
***	IDENT	24NO81
C
C Ancillary Code
C (inside feature only)
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	INTEGER*4 LCODE
C
	NCHARS=IFFACS()	      ! returns length of STR, else -1 if no STR
	CALL IFFEST('AC',3 + (NCHARS+1)/2)
	IF (REJ) RETURN
	CALL IFFWW2(ICTYPE,1)
	CALL IFFWL2(LCODE,1)
	IF (NCHARS.GT.0) CALL IFFWB2(STR,NCHARS)
	RETURN
	END
C
	SUBROUTINE IFFHI
C
***	MODULE	IFFHI
***	IDENT	24NO81
C
     	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C HIstory
C
	CALL IFFEST('HI',4001)
	IF (REJ) RETURN
C one word to say no records used yet
	CALL IFFWW2(ZERO,ONE)
C and a word to pad out the entry
	CALL IFFWW(ZERO,ONE,LPOSW+3999)
C fill in first record
	CALL IFFUPH
	RETURN
	END
C
	SUBROUTINE IFFUNO(POSNO)
C
***	MODULE	IFFUNO
***	IDENT	09JA86
C
     	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C Update an NO (by inserting an EO pointer)
C POSNO is the position of the NO
C
	INTEGER*4	POSNO
C
	CALL IFFPKE(IECODE,IELEN,POSNO)
	IF (IERCD.NE.0) RETURN
	IF (IECODE.NE.'NO') GOTO 990
	IF (IELEN.GE.4) CALL EIHWL(LPOSE,1,3)
	RETURN
990	CALL IFFERR('NE')
	RETURN
	END
C
	LOGICAL FUNCTION IS_REAL_AC( TYPE )
C
***	IDENT	17SE86
***	MODULE	IS_REAL_AC
C
C Copyright (C) LaserScan Laboratories Ltd, Cambridge, England
C
C Author TJ Ibbs, 17 September 1986
C
C To check if the given AC type represents a real AC code
C - returns TRUE if it does
C
	IMPLICIT NONE
C
C argument
C
	INTEGER*2	TYPE
C
C **********************************************************************
C so work out the answer...
C
	IS_REAL_AC = (TYPE.EQ.3) .OR. (TYPE.GE.80 .AND. TYPE.LE.99)
C
C and return with it
C
	RETURN
	END
