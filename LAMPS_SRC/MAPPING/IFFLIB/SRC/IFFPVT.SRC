C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-14 21:44:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C Copyright  Laser-Scan Laboratories Limited, Cambridge, England
C
C Author: P. Cross.
C
	SUBROUTINE IFFEST(CCODE,NWDS)
C
***	MODULE	IFFEST
***	IDENT	14NO85
C
C Start an entry of given code and size
C (LB or ZB format is used as appropriate).
C Sets REJ = TRUE if the entry is not acceptable
C (e.g. ST outside a feature).
C See IERCD for an explanation.
C
	IMPLICIT INTEGER*2 (I-N)
C
	CHARACTER*2 CCODE
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C  local WS
	INTEGER*4 MWS
C
C convert character string to byte array(2)
	CALL IFFS2I(CCODE,ICODE)
C  ensure positions up to date
	CALL IFFUPC
	IF (CCODE.NE.'VO') GOTO 1
C  special treatment for IFFVOM
	ICODE=0
	IWS(2)=0
	MDATA=LPOSH-LPOSM
	GOTO 32
C
C  convert entry code to binary
1	CB(2)=IFFBIN(ICODE)
C  allow anything in void, pro tem
	IF (WATEOF) GOTO 4
C  get space remaining in the void
	LPOSR=LPOSM
	CALL IFFR2(EB,TWO)
C  restore writing position
	LPOSW=LPOSM
C  error if not a void (nb -128 is binary code for VO, see IFFEC.MAR)
	IF (EB(2).NE.-128) GOTO 89
	IF (EB(1).EQ.0) GOTO 2
	MDATA = EB(1)
	GOTO 5
C
2	IF (MDATA.GE.2) GOTO 5
	GOTO 88
C  check for feature-context error
4	LPOSW=LPOSE
	IF (CB(2).LT.0) GOTO 5
	IF (CB(2).GE.64) GOTO 5
	IF (CB(2).EQ.32) GOTO 5
	IF (IFFCKF(.TRUE.)) GOTO 5
	CALL IFFERR('NF')
	GOTO 90
C  ST/ZS special case
C  ST has entry code 0, ZS 16. Add in 3 IENDS bits from IWS(3)
5	IF (CB(2).EQ.0.OR.CB(2).EQ.16) CB(2)=CB(2)+IAND(IWS(3),7)
10	IF (NWDS.GT.254) GOTO 20
C  short entry - LB format
	IF (WATEOF) GOTO 15
C  void overflow check
	IF (NWDS.GE.MDATA) GOTO 60
15	IWS(2)=NWDS+1
**	IF VAX
	CALL LIB$INSV(IWS(2),0,8,CB(1))	! avoid overflow
**	IFF
	CB(1)=IWS(2)
**	ENDC
	CALL IFFWW2(IWS,ONE)
	GOTO 30
C  long entry - ZB format
20	IF (WATEOF) GOTO 25
	IF (NWDS.GE.MDATA-1) GOTO 60
25	CB(1)=0
	IWS(2)=NWDS+2
	CALL IFFWW2(IWS,TWO)
C  entry is acceptable
30	IF (WATEOF) GOTO 50
C  make new void & update marker
	MDATA=MDATA-IWS(2)
32	LWS=LPOSW
	MWS=LPOSM+IWS(2)
	CALL IFFUPP(LPOSF,MWS)
C  the void may have disappeared
	IF (MDATA.EQ.0) GOTO 40
	LPOSW=LPOSM
C  nb -128 is binary code for VO (see IFFEC.MAR)
	EB(2)=-128
	IF (MDATA.GT.1) GOTO 35
	EB(1)=1
	CALL IFFWW2(EB,ONE)
	GOTO 40
C  ZB format if >1 word
35	EB(1)=0
	IF (NDATA(2).NE.0) GOTO 88
	CALL IFFWW2(EB,TWO)
C  restore writing position
40	LPOSW=LWS
C
50	REJ=.FALSE.
	RETURN
C
C  not enough room in void
60	GOTO 89
C  (pro tem)
C
C  bad ZB word count
88	CALL IFFERR('BW')
	GOTO 90
C  entry overflows void
89	CALL IFFERR('OV')
C  entry is rejected
90	REJ=.TRUE.
	RETURN
	END
C
	SUBROUTINE IFFECS(CCODE,STR,NCH)
C
***	MODULE	IFFECS
***	IDENT	24NO81
C
C  make new entry of character-string variety
C  (common to NS, TC, TX, CH, ...)
C
	IMPLICIT INTEGER*2 (I-N)
C
	CHARACTER*2 CCODE
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	CALL IFFEST(CCODE,(NCH+1)/2)
	IF (REJ) RETURN
	CALL IFFWB2(STR,NCH)
	RETURN
	END
C
	LOGICAL FUNCTION IFFCKF(BOOL)
C
***	MODULE	IFFCKF
***	IDENT	24NO81
C
C returns BOOL if in a feature, else .NOT.BOOL
C
	LOGICAL*1 BOOL
C
***	COMMON/IFFHAN/
C
	IFFCKF=((LPOSF.NE.0).EQV.BOOL)
	RETURN
	END
C
	SUBROUTINE IFFS2I(CCODE,ICODE)
C
***	MODULE	IFFS2I
***	IDENT	24NO81
C
C convert two character string to two bytes in a word
C
	CHARACTER*2 CCODE
	LOGICAL*1 ICODE(2)
C
	ICODE(1)=ICHAR(CCODE(1:1))
	ICODE(2)=ICHAR(CCODE(2:2))
	RETURN
	END
C
