C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-11-14 21:43:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C Copyright Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author M.C.Fulford
C
C	Version numbering			 DM	24-Nov-1981
C	Minor corrections			MCF	   Oct-1980
C	Converted from PDP-11 version		PGH	   Jun-1980
C	Created					MCF	   Feb-1980
C
C Routines to provide a link & node structure in IFF.
C These routines are all "tertiary" level, in that they use secondary
C level routines to access the IFF file (in a standard way).
C
	SUBROUTINE IFJCR(ISN,POSX,POSY,NARM)
C
***	MODULE	IFJCR
***	IDENT	14NO85
C
C Creates a new junction entry, creating a JB for it
C to live in if necessary.
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	INTEGER*2 ISN		! segment number
	REAL POSX, POSY		! position
	INTEGER*2 NARM		! number of arms to junction
C
C common blocks:
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
***	COMMON/IFFWS/
C
C workspace:
	INTEGER*4 IFCJC		! current junction chain
	INTEGER*4 JFCJC		! copy of IFCJC
C
C
C check for argument validity
	IF (ISN.LE.0 .OR. ISN.GT.IFSHSZ) GOTO 50
	IF (NARM.GT.10 .OR. NARM.LE.0) GOTO 60
CCC do we have address of JB already ?
CCC	IF (IFCSN .EQ. ISN) GOTO 10
C no - look for address in sector header block
	IFCSN = ISN
	CALL IFFPKE (IECODE, IELEN, IFSHAD)
	CALL EIHRL (IFCJC, 1, IFCSN*2-1)
C does chain of JBs exist ?
10	IF (IFCJC .NE. 0) GOTO 20
C no - create a new block & point header at it
	CALL IFCNJB (ISN, 0, IFCJC)
C we now have a valid JB to play with
20	CALL IFFPKE (IECODE, IELEN, IFCJC)
C room for sub-entry ?
	CALL EIHRI (JTMP, 1, JBFREE)
	CALL IFFUPJ(JTMP)	! thus updating IFPOSJ
	IF (IFPOSJ+JESPCE+JASIZE*NARM .LE. JBSIZE) GOTO 30
C no - create new JB
	JFCJC = IFCJC
	CALL IFCNJB (ISN, JFCJC, IFCJC)
	CALL IFFPKE (IECODE, IELEN, IFCJC)
	CALL EIHRI  (JTMP, 1, JBFREE)
	CALL IFFUPJ (JTMP)	! update IFPOSJ
C now add the new JE
30	CALL EIHWR (POSX, 1, IFPOSJ+JEPOSX)
	CALL EIHWR (POSY, 1, IFPOSJ+JEPOSY)
	CALL EIHW (NARM, 1,  IFPOSJ+JEARMS)
C give it null arms
	DO 40 I = 1,NARM
	  CALL EIHWI (0, 2, IFPOSJ+JESPCE+(I-1)*JASIZE)
40	  CONTINUE
C and point to reduced space
	CALL EIHWI (IFPOSJ+JESPCE+JASIZE*NARM, 1, JBFREE)
	RETURN
C
C errors
50	CALL IFFERR('BS')
	RETURN
C
60	CALL IFFERR('BJ')
	RETURN
	END
C
	SUBROUTINE IFCNJB(ISN,NP,LP)
C
***	MODULE	IFCNJB
***	IDENT	24NO81
C
C Creates a new junction block, chaining it in to the
C appropriate sector chain.
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	INTEGER*2 ISN		! sector number
	INTEGER*4 NP		! next block in chain
	INTEGER*4 LP		! this block
C
C common blocks:
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
***	COMMON/IFFWS/
C
C code:
	LP = LPOSE		! where this block goes
C create the new JB
	CALL IFFJB(JBSIZE)
C now take it in hand & initialise it
	CALL IFFPKE(IECODE,IELEN,LP)
	CALL EIHWI (   ISN, 1, JBSECT)	! sector
	CALL EIHWL (    NP, 1, JBNEXT)	! next
	CALL EIHWI (JBSPCE, 1, JBFREE)	! free space
C now add it to SH  block
	CALL IFFPKE (IECODE, IELEN, IFSHAD)
	CALL EIHWL  (LP, 1, ISN*2-1)
C
20	RETURN
	END
C
	SUBROUTINE JIHR(NARM,LSTRP,NVERTX)
C
***	MODULE	JIHR
***	IDENT	24NO81
C
C Reads details of junction in hand
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	INTEGER*2 NARM		! the arm to be accessed
	INTEGER*4 LSTRP		! ST address of arm
	INTEGER*2 NVERTX	! vertex where junction is
C
C common blocks:
***	COMMON/IFFWS/
***	COMMON/IFFJUN/
***	COMMON/IFFHAN/
C
C workspace:
	INTEGER*2 RWDEL		! read, write or delete arm
	INTEGER*2 N		! number of arms
	INTEGER*2 JB		! entry code
C
C data:
	DATA JB/'JB'/
C
C
	RWDEL = 1		! read
	GOTO 10
C
C The other two JIH routines join in
C
	ENTRY JIHW (NARM, LSTRP, NVERTX)
C
C To write details of junction arm
C
	RWDEL = 2		! write
	GOTO 10
C
C
	ENTRY JIHDEL
C
C Deletes the junction in hand
C
	RWDEL = 3		! delete
C
C
C examine entry in hand, ensure it's a JB
10	CALL IFFEIH (IECODE, IELEN)
	IF (IECODE .NE. JB) GOTO 60	! not JB
C
C check junction in hand
	IF (IFPOSJ .GT. JBSIZE .OR.
     *      IFPOSJ .LT. JBSPCE) GOTO 70	! duff IFPOSJ
C
C read, write or delete the sub-entry
	CALL EIHRI (N, 1, IFPOSJ+JEARMS)
	IF ((N.AND."100000) .NE. 0) GOTO 70	! entry deleted
	GOTO (20,30,40), RWDEL
	GOTO 80				! won't occur (ho ho !)
C
C read
20	CALL EIHRL (LSTRP, 1, IFPOSJ+JESPCE+(NARM-1)*JASIZE+JAPTR)
	CALL EIHRI (NVERTX,1,IFPOSJ+JESPCE+(NARM-1)*JASIZE+JAVTX)
	GOTO 50
C
C write
30	CALL EIHWL (LSTRP,1, IFPOSJ+JESPCE+(NARM-1)*JASIZE+JAPTR)
	CALL EIHWI (NVERTX,1,IFPOSJ+JESPCE+(NARM-1)*JASIZE+JAVTX)
	GOTO 50
C
C delete
40	CALL EIHWI (N+"100000,1, IFPOSJ+JESPCE+JEARMS)
C
50	RETURN
C
60	CALL IFFERR('NJ')
	RETURN
C
70	CALL IFFERR('BJ')
	RETURN
C
80	CALL IFFERR('IE')
	RETURN
C
	END
C
	SUBROUTINE IFJSCN (ISN, IFJFN)
C
***	MODULE	IFJSCN
***	IDENT	24NO81
C
C Scans a chain of JB entries, calling the function IFJFN with
C each junction entry as the junction in hand.
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	INTEGER*2 ISN
C
C common blocks:
***	COMMON/IFFWS/
***	COMMON/IFFJUN/
***	COMMON/IFFHAN/
C
C workspace:
	INTEGER*4 LFKEEP	! saved LPOSF
	INTEGER*4 LMKEEP	! saved LPOSM
	INTEGER*4 LHKEEP	! saved LPOSH
	INTEGER*4 IFCJC		! head of current junction chain
	INTEGER*4 LHSAVE	! JB address
	INTEGER*2   IHSAVE	! JE offset
C
C external routine:
	EXTERNAL IFJFN
	LOGICAL  IFJFN
C
C
C remember where we are
	LHKEEP = LPOSH
	LMKEEP = LPOSM
	LFKEEP = LPOSF
C check for argument validity
	IF (ISN.LE.0 .OR. ISN.GT.IFSHSZ) GOTO 50
CCC do we have address of JB already ?
CCC	IF (IFCSN .EQ. ISN) GOTO 10
C no - look for address in sector header block
	IFCSN = ISN
	CALL IFFPKE (IECODE, IELEN, IFSHAD)
	CALL EIHRL (IFCJC, 1, IFCSN*2-1)
C end of chain ?
10	IF (IFCJC .EQ. 0) GOTO 40
C no - move to entry
	CALL IFFPKE (IECODE, IELEN, IFCJC)
	CALL IFFUPJ(0)
C move to next junction in the block
20	CALL IFJNXT(RPOSX, RPOSY, NARMS)
	IF (NARMS .EQ. -1) GOTO 30
C remember where we are
	LHSAVE = LPOSH
	IHSAVE = IFPOSJ
C call our function
	IF (.NOT. IFJFN(RPOSX, RPOSY, NARMS)) GOTO 40
C recover context
	CALL IFJPKJ (RPOSX, RPOSY, NARMS, LHSAVE, IHSAVE)
	GOTO 20
C JB finished - get the next
30	CALL EIHRL (IFCJC, 1, JBNEXT)
	GOTO 10
C no more JBs, or IFJFN says stop
40	CALL IFFUPP(LFKEEP,LMKEEP,LHKEEP)
	RETURN
C
C errors:
50	CALL IFFERR('BS')
	RETURN
C
60	CALL IFFERR('BJ')
	RETURN
	END
C
C
	SUBROUTINE IFJNXT (RPOSX, RPOSY, NARMS)
C
***	MODULE	IFJNXT
***	IDENT	24NO81
C
C Moves to the next junction in a JB
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	REAL RPOSX, RPOSY	! the position
	INTEGER*2 NARMS		! multiplicity
C & for IFJPKJ
	INTEGER*4 LPOS		! JB address
	INTEGER*2 IPOS		! position in JB
C
C
C common blocks:
***	COMMON/IFFWS/
***	COMMON/IFFJUN/
***	COMMON/IFFHAN/
C
C workspace:
	LOGICAL*1 PKJ	! which entry
	LOGICAL*1 FIRST	! first call after IFFNXT, IFFNXC or IFFPKE
	INTEGER*2 JB
C data:
	DATA JB/'JB'/
C
C
	PKJ = .FALSE.
	FIRST = IFPOSJ.EQ.0
	IF (FIRST) IFPOSJ = JBSPCE
	CALL IFFUPJ(IFPOSJ)
	GOTO 10
C
C
	ENTRY IFJPKJ (RPOSX, RPOSY, NARMS, LPOS, IPOS)
C
C Move to known junction in the JB
C
	PKJ = .TRUE.
	FIRST = .FALSE.
C
C
C take JB in hand
	CALL IFFPKE (IECODE, IELEN,LPOS)
C examine entry in hand, ensure it's a JB
10	CALL IFFEIH (IECODE, IELEN)
	IF (IECODE .NE. JB) GOTO 50	! not JB
C
	IF (PKJ) CALL IFFUPJ (IPOS)
C check junction in hand
	IF (IFPOSJ .GT. JBSIZE .OR.
     *      IFPOSJ .LT. JBSPCE) GOTO 60	! duff IFPOSJ
	CALL EIHRI (N, 1, JBFREE)
	IF (IFPOSJ .LT. JBSPCE) GOTO 60
	IF (IFPOSJ .GE. N) GOTO 40
	IF (PKJ .OR. FIRST) GOTO 30
	CALL EIHRI (NARMS, 1, IFPOSJ+JEARMS)
20	NARMS = NARMS.AND."77777
	CALL IFFUPJ(IFPOSJ + JESPCE + NARMS*JASIZE)
	IF (IFPOSJ .GE. N) GOTO 40
C return info
30	CALL EIHRR (RPOSX, 1, IFPOSJ+JEPOSX)
	CALL EIHRR (RPOSY, 1, IFPOSJ+JEPOSY)
	CALL EIHRI (NARMS, 1, IFPOSJ+JEARMS)
	FIRST = .FALSE.
	IF ((NARMS.AND."100000) .EQ. 0) RETURN
C deleted node
	IF (.NOT. PKJ) GOTO 20
C no more
40	NARMS = -1
	RETURN
C
C errors:
50	CALL IFFERR('NJ')
	RETURN
C
60	CALL IFFERR('BJ')
	RETURN
	END
C
	SUBROUTINE IFFSH(OX,OY, SX,SY, NX,NY)
C
***	MODULE	IFFSH
***	IDENT	24NO81
C
C Creates a new sector header block and records a pointer
C to it in the file header (accessible in /IFFJUN/)
C
	IMPLICIT INTEGER*2 (I-N)
C
***	PARAMETER/IFFPAR/
C
C arguments:
	REAL OX, OY	! origin of sectors
	REAL SX, SY	! spacing of sectors
	INTEGER*2 NX, NY	! number of sectors per axis
C
C common blocks:
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
***	COMMON/IFFWS/
C
C workspace:
	INTEGER*2 NSEC	! size of block
	INTEGER*4 LP	! position of block
C
C
	NSEC = NX*NY
	LP = LPOSE
	CALL IFFEST('SH', NSEC*2)
	IF (REJ) GOTO 20
	DO 10 I=1,NSEC
	  CALL IFFWL2(0,1)
10	CONTINUE
	GOTO 30
C
20	LP = 0
	NSEC = 0
C
30	CALL IFFUPJ(0, NSEC, LP, OX,OY, SX,SY, NX,NY)
	RETURN
	END
C
	SUBROUTINE IFJSEC(PX,PY,ISN)
C
***	MODULE	IFJSEC
***	IDENT	24NO81
C
C Given a position, returns the sector number
C
	IMPLICIT INTEGER*2 (I-N)
C
	PARAMETER X=1, Y=2
C
***	PARAMETER/IFFPAR/
***	COMMON/IFFHAN/
***	COMMON/IFFJUN/
C
	NX = (PX-IFSORI(X))/IFSSTP(X)
	NY = (PY-IFSORI(Y))/IFSSTP(Y)
	ISN = NY*IFSNUM(X) + NX + 1
	RETURN
	END
