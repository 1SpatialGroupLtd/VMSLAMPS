;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1992-07-23 16:00:38.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	$IFFWT
	.IDENT	'22OC86'
;
; Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Paul Hardy after PDP11 version by P. Cross.
;
;Mod	Make B.VBNx long not word to allow big IFF files	PGH  23-Jul-1992

; I F F   b a s i c   w r i t e

	CODE_PSECT	IFF

; FORTRAN entries

; bytes

	.ENTRY	IFFWB,^M<R2,R3,R4,R5,R6,R9,R10,R11>
	CLRL	R4			; unit is bytes
	BSBB	IF$WAL			; common code
	RET

; fast two arg entry for bytes

	.ENTRY	IFFWB2,^M<R2,R3,R4,R5,R6,R9,R10>
	CLRL	R4			; unit is bytes
	MOVL	LPOSW,R3		; writing position
	JSB	IF$AR2			; get args
	BSBB	IF$WA2			; common code
	RET

; integers & words

IFFWI::					; entry for integers
IFFW::					; alternative entry name
	.ENTRY	IFFWW,^M<R2,R3,R4,R5,R6,R9,R10,R11> ; write words
	MOVL	#1,R4			; unit is words
	BSBB	IF$WAL			; common code
	RET

; fast entry for integers & words

	.ENTRY	IFFWW2,^M<R2,R3,R4,R5,R6,R9,R10> ; write words
	MOVL	#1,R4			; unit is words
	MOVL	LPOSW,R3		; writing position
	JSB	IF$AR2			; get args
	BSBB	IF$WA2			; common code
	RET

; reals and longwords

IFFWR::					; alternative entry for REALs
	.ENTRY	IFFWL,^M<R2,R3,R4,R5,R6,R9,R10,R11> ; write longwords
	MOVL	#2,R4			; unit is longwords
	BSBB	IF$WAL			; common code
	RET

; fast entry for reals and longwords

	.ENTRY	IFFWL2,^M<R2,R3,R4,R5,R6,R9,R10> ; write longwords
	MOVL	#2,R4			; unit is longwords
	MOVL	LPOSW,R3		; writing position
	JSB	IF$AR2			; get args
	BSBB	IF$WA2			; common code
	RET

WRTERR:	MOVL	#1,R0			; no system error
EXTERR:	TSTL	(SP)+			; ditch count from below
	MOVL	#^A'WRIT',IERCD
	MOVL	R0,IERNM		; VMS error code
	JSB	IF$ERR			; moan
	RSB

; common code
IF$WAL:					; general write
	MOVL	LPOSW,R3		; writing posn
	JSB	IF$ARG			; set up args in regs
IF$WA2:
	PUSHL	R2			; save no of bytes to xfr
	BBS	#IFC_V_RO,I.STS(R9),WRTERR	; read only
	ASHL	#-1,R2,R2		; cvt to words
	BLBC	(SP),5$			; even no of bytes
	INCL	R2			; round up odd bytes
5$:	MOVZBL	R3,R6			; low byte is word nr in block
	JSB	IF$CWB			; cvt to block/byte
	CVTWL	IFOREL,R0		; header size
	ADDL2	R0,R3			; allow for forepart
10$:	JSB	IF$LBF			; ensure block in core
	BBC	#IFC_V_MAP,I.STS(R9),20$; not mapped file
	CMPL	R4,I.ADR+4(R9)		; address within section?
	BLEQ	20$			; yes
	JSB	IF$EXT			; extend the file
	BLBC	R0,EXTERR		; failed
	BICL2	#^XFFFFFE00,R4		; byte offset
	BRB	10$			; round again
20$:	TSTL	R2			; owt left ?
	BEQL	30$			; j if done
	MOVW	(R5)+,(R4)+		; copy word at a time
	DECL	R2			; one word less
	INCB	R6			; count bytes in block
	BNEQ	20$			; j unless end of block
	TSTL	R2			; owt left ?
	BNEQ	25$			; j unless end of tfr also
	BLBC	(SP),25$		; j unless odd byte case
	CLRL	(SP)			; clr marker
	CLRB	-(R4)			; and extra byte
25$:	JSB	IF$WBF			; have this block written
	INCL	R3			; next block
	CLRL	R4			; byte zero
	BRB	10$			; carry on

; exit from write - 
;  update position(s) and ensure current block gets written

30$:	JSB	IF$UPW
	BLBC	(SP)+,40$		; j unless odd byte case
	CLRB	-(R4)			; clear extra byte
40$:	JMP	IF$WBF			; go write block


; IF$UPW - update the writing position
;  and EOF position if necessary

IF$UPW::PUSHR	#^M<R3,R4>
	JSB	IF$CCW			; cvt R3,R4 back to word nr R3
	MOVL	R3,I.POSW(R9)		; writing posn
	MOVL	R3,LPOSW		; also to /IFFHAN/
	CMPL	R3,I.POSE(R9)		; check against EOF
	BLSS	40$			; within file
	MOVL	R3,I.POSE(R9)		; update EOF if past old EOF
	MOVL	R3,LPOSE		; also in /IFFHAN/
40$:	POPR	#^M<R3,R4>		; restore positions
	RSB

	.PSECT
	.END
