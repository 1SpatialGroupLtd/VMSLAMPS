;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1992-07-23 16:00:42.000000000 +0100
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
	.TITLE	$IFFRD
	.IDENT	'23JL92'
;
; Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
;
; Author: Paul Hardy after PDP11 version by P. Cross.
;
;Mod	Make B.VBNx long not word to allow big IFF files	PGH  23-Jul-1992

; I F F   b a s i c   r e a d

	CODE_PSECT	IFF

; FORTRAN entries

; integers & words

IFFRI::					; entry for integers
IFFR::					; alternative entry name
	.ENTRY	IFFRW,^M<R2,R3,R4,R5,R6,R9,R10,R11> ; read words
	MOVL	#1,R4			; unit is words
	BSBB	IF$RAL			; common code
	RET

; fast entry point for two argument call

	.ENTRY	IFFR2,^M<R2,R3,R4,R5,R6,R9,R10> ; read words
	MOVL	#1,R4			; unit is words
	MOVL	LPOSR,R3		; reading position
	JSB	IF$AR2			; get args
	JSB	IF$RA2			; join common code
	RET

; reals and longwords

IFFRR::					; alternative entry for REALs
	.ENTRY	IFFRL,^M<R2,R3,R4,R5,R6,R9,R10,R11> ; read longwords
	MOVL	#2,R4			; unit is longwords
	BSBB	IF$RAL			; common code
	RET

; common code
IF$RAL:					; general read
	MOVL	LPOSR,R3		; reading position
	JSB	IF$ARG			; set up args in regs
IF$RA2:
	ASHL	#-1,R2,R2		; cvt to words
	MOVZBL	R3,R6			; low byte is word nr in block
	JSB	IF$CWB			; cvt to block/byte
	CVTWL	IFOREL,R0		; header size
	ADDL2	R0,R3			; allow for forepart
10$:	JSB	IF$LBF			; ensure block in core
	BBC	#IFC_V_MAP,I.STS(R9),20$; not mapped file
	CMPL	R4,I.ADR+4(R9)		; address within section?
	BGTR	50$			; no
20$:	TSTL	R2			; owt left ?
	BEQL	30$			; j if done
	MOVW	(R4)+,(R5)+		; copy word at a time
	DECL	R2			; one word less
	INCB	R6			; count bytes in block
	BNEQ	20$			; j unless end of block
	INCL	R3			; next block
	CLRL	R4			; byte zero
	BRB	10$			; carry on

; exit from read -  updating positions

30$:	JSB	IF$CCW			; cvt R3,R4 back to word nr R3
	CMPL	R3,I.POSE(R9)		; check against EOF
	BGTR	50$			; outside file
	MOVL	R3,I.POSR(R9)		; update reading posn
	MOVL	R3,LPOSR		; and in /IFFHAN/
40$:	RSB

50$:	MOVL	#^A'REOF',IERCD		; read beyond EOF
	MOVL	#1,IERNM		; no VMS error code
	JSB	IF$ERR			; moan
	BRB	40$
	
	.ENTRY	IFFRAD,^M<R2,R3,R4,R5,R6,R9,R10,R11> ; read words
	MOVL	@4(AP),R3		; position
	CLRL	IERCD			; no errors
	MOVL	#1,IERNM		; ditto
	MOVL	IFFPT,R9		; current selection
	MOVAL	I.FAB(R9),R10		; address of FAB
	JSB	IF$CWB			; cvt to block/byte
	CVTWL	IFOREL,R0		; header size
	ADDL2	R0,R3			; allow for forepart
	JSB	IF$LBF			; ensure block in core
	MOVAW	(R4),R0			; address of data
	RET

	.PSECT
	.END
