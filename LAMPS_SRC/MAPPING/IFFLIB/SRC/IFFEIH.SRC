C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-10-27 12:15:12.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C Copyright  Laser-Scan Laboratories Limited, Cambridge, England.
C
C Author: P. Cross
C
	SUBROUTINE IFFEIH(ICODE,NWDS)
C
***	MODULE	IFFEIH
***	IDENT	27OC87
C
C  Return details of the entry at LPOSH and position to
C  the first word of data.
C  The 1st 2 red-tape bytes are left in CB(1), CB(2)
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	CALL IFFUPC
C
C  entry omitting the IFFUPC
	ENTRY IFFEI2(ICODE,NWDS)
C  error if no entry in hand
	IF ((LPOSH.EQ.0).OR.(LPOSH.GE.LPOSE)) GOTO 90
C  read entry details
	CALL IFFRED(IWS(1),ICODE,NWDS)
	IF (ICODE.NE.0) GOTO 30
C
C  entry direct to take into hand
	ENTRY IFFEI3(ICODE,NWDS)
C  entry not yet recorded - take it into hand
	LPOSR = LPOSH
	CALL IFFR2(IWS,ONE)
C  convert entry code
	ICODE=IFFLET(CB(2))
C  j if ZB format
	IF (CB(1).EQ.0) GOTO 10
C deal with LB format
	IWS(2)=IAND(IWS(1),255)+1
	GOTO 20
C  deal with ZB format
10	CALL IFFR2(IWS(2),ONE)
	IWS(3)=0
	IF (LDATA.LT.2) GOTO 91
C  ( LDATA equiv IWS(2),(3) )
C  return nr of data words
20	NWDS=IWS(2)-2
C  write entry details
	CALL IFFWED(IWS(1),ICODE,NWDS)
	GOTO 35
C  position to start of data
30	LPOSR=LPOSH+1
	IF (CB(1).EQ.0) LPOSR=LPOSR+1
35	LPOSW=LPOSR
	RETURN
C no entry in hand
90	CALL IFFERR('NE')
	RETURN
C ZB format - bad word count
91	CALL IFFERR('BW')
	RETURN
	END
C
	SUBROUTINE EIHRI(DST,NWDS,IWNO)
C
***	MODULE	EIHRI
***	IDENT	21MY84
C
C  read word(s) from the entry-in-hand
C
	IMPLICIT INTEGER*2 (I-N)
C
	ENTRY EIHR(DST,NWDS,IWNO)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	NDATA(2)=0
	CALL IFFEIH(IBINC,NDATA)
C
C adjust for input revision level
C n.b. not allowed to EIHR a 'CB' which is actually a ST/ZS
	IF ((IBINC.EQ.'ST'.OR.IBINC.EQ.'ZS').AND.IRVLEV.EQ.1) GOTO 90
	IF (IBINC.EQ.'CB'.AND.IRVLEV.EQ.0) THEN
	   CALL EIHR_ST_FROM_CB(DST,NWDS,IWNO)
	   RETURN
	ENDIF
C
	IFWD=IWNO-1
	IF (IFWD.LT.0) GOTO 90
	IF (IFWD+NWDS.GT.MDATA) GOTO 90
	LPOSR=LPOSR+IFWD
	CALL IFFR2(DST,NWDS)
	RETURN
C  reference outside data
90	CALL IFFERR('OE')
	RETURN
	END
C
	SUBROUTINE EIHRL(RDST,NREALS,IWNO)
C
***	MODULE	EIHRL
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
	ENTRY EIHRR (RDST, NREALS, IWNO)
C
	CALL EIHR(RDST,NREALS*2,IWNO)
	RETURN
	END
C
	SUBROUTINE EIHRS(NPTS,IENDS)
C
***	MODULE	EIHRS
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFWS/
C
C  get string details (if EIH is a string ST or ZS)
C
	CALL IFFEIH(ILETC,NDATA)
C
C deal with CB
	IF (ILETC.EQ.'CB') THEN
	   CALL EIHRS_CB(NPTS,IENDS)
	   RETURN
	ENDIF
C
C  in this special case, we want the binary code
	IENDS=CB(2)
	IF (IAND(IENDS,16).NE.0) GOTO 10
C ST?
	NPTS=MDATA/4
	GOTO 20
C ZS? Remove the 16 bit
10	IENDS = IAND(IENDS,NOT(16))
	NPTS=MDATA/6
20	IF (IENDS.LT.0.OR.IENDS.GT.7) NPTS=0
	RETURN
	END
C
	SUBROUTINE EIHWI(SRC,NWDS,IWNO)
C
***	MODULE	EIHWI
***	IDENT	21MY84
C
C  write word(s) to the entry-in-hand
C
	IMPLICIT INTEGER*2 (I-N)
C
	ENTRY EIHW(SRC,NWDS,IWNO)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	CALL IFFEIH(ILETC,NDATA)
C
C adjust for input revision level
C n.b. not allowed to EIHW a 'CB' which is actually a ST/ZS
	IF ((IBINC.EQ.'ST'.OR.IBINC.EQ.'ZS').AND.IRVLEV.EQ.1) GOTO 90
	IF (IBINC.EQ.'CB'.AND.IRVLEV.EQ.0) THEN
	   CALL EIHW_ST_TO_CB(SRC,NWDS,IWNO)
	   RETURN
	ENDIF
C
	IFWD=IWNO-1
	IF (IFWD.LT.0) GOTO 90
	IF (IFWD+NWDS.GT.MDATA) GOTO 90
	LPOSW=LPOSW+IFWD
	CALL IFFWW2(SRC,NWDS)
	RETURN
C reference outside data
90	CALL IFFERR('OE')
	RETURN
	END
C
	SUBROUTINE EIHWL(RSRC,NREALS,IWNO)
C
***	MODULE	EIHWL
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
	ENTRY EIHWR(RSRC,NREALS,IWNO)
C
	CALL EIHW(RSRC,NREALS*2,IWNO)
	RETURN
	END
C
	SUBROUTINE EIHMK(N)
C
***	MODULE	EIHMK
***	IDENT	24NO81
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C  N=1  "mark" the current entry (remember its position)
C  N=0  remove marker
C
C  unset entry-into-void
	WATEOF=.TRUE.
	CALL IFFUPC
	IF (N.NE.0) GOTO 10
C  remove mark
	CALL IFFUPP(LPOSF,ZERO)
	RETURN
C  set mark if valid EIH
10	IF (LPOSH.EQ.0) GOTO 90
	CALL IFFUPP(LPOSF,LPOSH)
	RETURN
C  no entry in hand
90	CALL IFFERR('NE')
	RETURN
	END
C
	SUBROUTINE EIHCPY(ILUN)
C
***	MODULE	EIHCPY
***	IDENT	24NO81
C
C  copy the entry-in-hand to the file on ILUN (at EOF)
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
	INTEGER*4	ORV
	INTEGER*4	ERCD
C
C  first verify that there is an EIH, and get its length
	NDATA(2)=0
	CALL IFFEIH(ILETC,NDATA)
	IF (IERCD.NE.0) RETURN
	I=LPOSR-LPOSH
C
C convert to/from CB depending on output revision level
	IF (ILETC.EQ.'ST'.OR.ILETC.EQ.'ZS'.OR.ILETC.EQ.'CB') THEN
	   CALL IFFLUN(LUN)	! get present selection
	   CALL IFFSEL(ILUN)	! select output LUN
	   ERCD = IERCD		! save IERCD
	   ORV = ORVLEV		! save ORVLEV
	   CALL IFFSEL(LUN)	! restore selection
	   IF (ERCD.NE.0) RETURN
	   IF ((ILETC.EQ.'ST'.OR.ILETC.EQ.'ZS').AND.ORV.EQ.1) THEN
	      CALL EIHCPY_ST_TO_CB(ILUN)
	      RETURN
	   ENDIF
	   IF (ILETC.EQ.'CB'.AND.ORV.EQ.0) THEN
	      CALL EIHCPY_CB_TO_ST(ILUN)
	      RETURN
	   ENDIF
	ENDIF
C
C  step back to the start of the entry
	LPOSR=LPOSH
C
C  call basic subroutine to do the work
	CALL IFFCP2(ILUN,MDATA+I)
	IF (IERCD.NE.0) RETURN
C
C  if it was an HI, then update the output entry
	IF (ILETC.EQ.'HI') CALL IFFUPH(ILUN)
C
C  if it was an SH, then update the forepart stuff
	IF (ILETC.EQ.'SH') CALL IFFUPS(ILUN)
	RETURN
	END
C
	SUBROUTINE EIHPHI(PRTN,SUPH)
C
***	MODULE	EIHPHI
***	IDENT	24NO81
C
C  print out an HI (history entry)
C
	IMPLICIT INTEGER*2 (I-N)
C
***	COMMON/IFFHAN/
***	COMMON/IFFWS/
C
C
C PRTN is an (optional) routine to do the printing - it is
C called as CALL PRTN(STRING) with CHARACTER*(*) STRING
C If PRTN is not given, then LIB$PUT_OUTPUT is used.
C TTWSTR (in VIOLIB/LSLLIB) may be used as PRTN
C SUPH (optional) is true if header to be suppressed (default .FALSE.)
	LOGICAL*1	SUPH
C
	LOGICAL		IFF_HAVARG	! is argument present (IFFFT.MAR)
C
	CHARACTER*80	HEADER
	PARAMETER	(HEADER='Date        Time  Username     '//
     &		'Program   Function     Elapsed  CPU      STATUS  ')
	CHARACTER*80	BUFF
	LOGICAL*1	HADRTN
C
C  first verify that there is an EIH, and that it is an HI
	NDATA(2)=0
	CALL IFFEIH(ILETC,NDATA)
	IF (IERCD.NE.0) RETURN
	IF (ILETC.NE.'HI') RETURN
C
C Have we got a PRTN routine?
	HADRTN = IFF_HAVARG(1)
C
C Have we got a SUPH argument?
	IF (.NOT.IFF_HAVARG(2)) GOTO 10
	IF (SUPH) GOTO 50
10	IF (HADRTN) GOTO 20
	CALL LIB$PUT_OUTPUT(HEADER)
	GOTO 50
20	CALL PRTN(HEADER)
50	CALL EIHR(N,1,1)
	DO 80 I=1,N
	   CALL EIHR(%REF(BUFF),40,(I-1)*40+2)
	   IF (HADRTN) GOTO 70
	   CALL LIB$PUT_OUTPUT(BUFF)
	   GOTO 80
70	   CALL PRTN(BUFF)
80	CONTINUE
	RETURN
	END
