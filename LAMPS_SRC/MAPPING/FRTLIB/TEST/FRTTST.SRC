C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-08-15 12:24:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM FRTTST
C
***	MODULE	FRTTST
***	IDENT	15AU84
C
	IMPLICIT NONE
C
***	COMMON/<COMMON.FRTLIB>FRTGRP/
C
C	test prog for FRT library
C
	LOGICAL	FRTINI,FRTFND,SRIINI,SRIFND,SRIPLT,SRISCN,PATFND
	LOGICAL TRIINI,TRIFND,TRIPLT,TRITXT,TRISCN,FRTFGT
	LOGICAL	RETCOD
	REAL	XMIN,XMAX,YMIN,YMAX
	INTEGER	FC
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test FRT init')
	CALL LIB$INIT_TIMER
	RETCOD = FRTINI('LSL$FRT:FRTTST.FRT')
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test group definitions')
C
	IF (GRPCNT.GT.0) THEN
	   CALL CMDPRT(GRPCMT)
	ELSE
	   CALL WRITEF('---  No groups defined')
	ENDIF
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test finding FC')
	CALL LIB$INIT_TIMER
	RETCOD=FRTFND(103)
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test finding FC 0 and 9999')
	RETCOD=FRTFND(0)
	CALL FAILED(RETCOD)
	RETCOD=FRTFND(9999)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test failing to find FC')
	RETCOD=FRTFND(765)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test finding Pattern')
	RETCOD=PATFND(6)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test failing to find pattern')
	RETCOD=PATFND(123)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test finding graphical type 10')
	RETCOD=FRTFGT(10,FC)
	CALL WRITEF('Feature code %N',FC)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test failing to find graphical type 20')
	RETCOD=FRTFGT(20,FC)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test SRI init')
	CALL LIB$INIT_TIMER
	RETCOD = SRIINI('LSL$FRT:FRTTST.SRI')
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test SRI symbol finding')
	CALL LIB$INIT_TIMER
	RETCOD=SRIFND(4)
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test SRI failing to find')
	RETCOD=SRIFND(567)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test SRI plotting')
	RETCOD=SRIPLT(4,3.0,4.0,10.0,0.5)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test SRI scanning')
	RETCOD=SRISCN(4,XMIN,XMAX,YMIN,YMAX)
	CALL WRITEF('Symbol 4 extents, %F %F %F %F',XMIN,XMAX,YMIN,YMAX)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test TRI init')
	CALL LIB$INIT_TIMER
	RETCOD = TRIINI('LSL$FRT:FRTTST.TRI')
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test TRI character finding')
	CALL LIB$INIT_TIMER
	RETCOD=TRIFND(65,1)
	CALL LIB$SHOW_TIMER
	CALL FAILED(RETCOD)
	RETCOD=TRIFND(193,1)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test TRI finding at limits (33 and 245)')
	RETCOD=TRIFND(33,1)
	CALL FAILED(RETCOD)
	RETCOD=TRIFND(245,1)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test failing to find character')
	RETCOD=TRIFND(123,1)
	CALL FAILED(RETCOD)
	RETCOD=TRIFND(194,1)
	CALL FAILED(RETCOD)
	RETCOD=TRIFND(321,1)
	CALL FAILED(RETCOD)
	RETCOD=TRIFND(321,3)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test character plotting')
	RETCOD=TRIPLT(65,1,3.0,4.0,10.0,0.5)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test text string plotting')
	RETCOD=TRITXT(
     &     'AEIOU The quick brown fox jumps over the lazy dog.',
     &     1,3.0,4.0,10.0,0.5)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  Test text string scanning')
	RETCOD=TRISCN(
     &     'AEIOU The quick brown fox jumps over the lazy dog.',
     &     1,XMAX)
	CALL WRITEF('String width %F',XMAX)
	CALL FAILED(RETCOD)
C
	CALL WRITEF(' ')
	CALL WRITEF('...  All done')
	CALL EXIT
	END
C
C
	SUBROUTINE FAILED(RETCOD)
***	MODULE	FAILED
***	IDENT	09SE83
	LOGICAL RETCOD
	IF (RETCOD) THEN
	   CALL WRITEF('***  Routine FAILED  ***')
	ELSE
	   CALL WRITEF('+++  Routine succeeded')
	ENDIF
	RETURN
	END
C
C
	SUBROUTINE GPL(NC,X,Y)
***	MODULE	GPL
***	IDENT	22SE83
C
C dummy GKS plotter routine
C
	INTEGER*2	NC
	REAL		X(NC),Y(NC)
	RETURN
	END
C
	SUBROUTINE GSPLCI
***	MODULE	GSPLCI
***	IDENT	18JL84
C dummy GKS routines
	ENTRY	GSLWSC
	ENTRY	GQPLCI
	ENTRY	GQLWSC
	RETURN
	END
