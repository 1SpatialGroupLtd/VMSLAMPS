C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-27 16:10:24.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION TRIINI(TRINAM)
C
***	MODULE	TRIINI
***	IDENT	27OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C Reset LSTFSN between fonts for binary chop	PGH	11-Nov-1983
C Created					PGH	11-Oct-1983
C
C returns FALSE if it succeeds in opening, reading, and closing
C the specified Text Representation IFF file TRINAM
C and the associated text width table 
C The contents of the file are left set up in COMMON/TRICOM/
C
	IMPLICIT NONE
C
	CHARACTER*(*)	TRINAM			! filename
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTSCT/
***	COMMON/LSL$CMNFRT:FRTTRI/
***	COMMON/LSL$CMNIFF:IFFHAN/
**	IF LSLLIB
***	COMMON/LSL$CMNLSL:TXTC/
**	IFF
***	COMMON/LSL$CMNVIO:TXTC/
**	ENDC
C
C functions called
	LOGICAL*4	LIB$GET_EF
	LOGICAL*4	LIB$FREE_EF
	INTEGER		LIB$GET_VM,LIB$FREE_VM
	INTEGER		FRT_GET_MAX
C
C w/s
	LOGICAL*4	HADERR		! error return
	INTEGER*4	TRILUN		! IFF unit number
	INTEGER*2	IECODE,IELEN	! IFF variables
	INTEGER*2	IFSN,ISN	! feature number and serial
	INTEGER*2	LSTFSN		! previous FSN
	INTEGER*2	IFS		! feature status (char number)
	INTEGER*2	INO		! new overlay number
	INTEGER*2	ACTYP		! AC type
	INTEGER	I			! DO loop count
	INTEGER		NST		! number of STs this feature
	LOGICAL		HADAC		! had width AC yet
C
C Overlay CBH,CBD on the FRTWORK common block to save space
C Would have liked to equivalence them to the common variables,
C but the use of a record name there is illegal.
	INCLUDE	'LSL$CMNIFF:CB.STR'	! CB structure definitions
	RECORD		/IFF_CBH/CBH	! CB header
	RECORD		/IFF_CBD/CBD	! CB data
	COMMON/FRTWORK/CBH,CBD
	INTEGER		XYCOL(2)	! for extracting X and Y from CBD
	DATA		XYCOL/IFF_C_X,IFF_C_Y/
C
	TRIINI = .TRUE.		! assume failure
C
C get an IFF LUN (actually an event flag) to read file on
	HADERR = LIB$GET_EF(TRILUN)
	IF (.NOT.HADERR) THEN
***	IF LSLLIB
	   CALL LSL_PUTMSG(HADERR)
***	IFF
	   CALL GEN_SYSMSG(HADERR)
***	ENDC
	   GOTO 1000
	ENDIF
C
C Obtain dynamic memory for TRI storage
C free old TRI space
	IF (TRIMAX.GT.0) THEN
	   I = LIB$FREE_VM(TRIMAX*2*4,TRIBUF_LOC)	! coords
	   IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	   TRIBUF_LOC = 0
	   I = LIB$FREE_VM(TRIMAX*2,TRITAB_LOC)		! numbers
	   IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	   TRITAB_LOC = 0
	ENDIF
	TRIMAX = 0			! no TRI memory allocated
C
C Try for logical name LSL$FRT_TRIMAX to get maximum number of coords
	TRIMAX = FRT_GET_MAX('LSL$FRT_TRIMAX',TRIMAX_DEF,0,1000000)
C
C get memory for TRI tables
	IF (TRIMAX.GT.0) THEN
	   I = LIB$GET_VM(TRIMAX*2*4,TRIBUF_LOC)	! coords
	   IF (I)
     &	      I = LIB$GET_VM(TRIMAX*2,TRITAB_LOC)! numbers
	   IF (.NOT.I) THEN
	      CALL LIB$FREE_VM(TRIMAX*2*4,TRIBUF_LOC)
	      TRIBUF_LOC = 0
	      CALL LIB$FREE_VM(TRIMAX*2,TRITAB_LOC)
	      TRITAB_LOC = 0
	      CALL FRTWRT('Cannot allocate memory for TRI')
	      CALL LSL_PUTMSG(I)
	      TRIMAX = 0
	   ENDIF
	ENDIF
C
C free old font space
	IF (TRIMXF.GT.0) THEN
	   I = LIB$FREE_VM(TRIMXF*TRIMXC*4,TRIWID_LOC)	! widths
	   IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	   TRIWID_LOC = 0
	   I = LIB$FREE_VM(TRIMXF*2,TRIFNT_LOC)		! font numbers
	   IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	   TRIFNT_LOC = 0
	   I = LIB$FREE_VM(TRIMXF*4,TRIFNP_LOC)		! font pointers
	   IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	   TRIFNP_LOC = 0
	ENDIF
	TRIMXF = 0			! no font memory allocated
C
C Try for logical name LSL$FRT_FONTMAX to get maximum number of fonts
	TRIMXF = FRT_GET_MAX('LSL$FRT_FONTMAX',TRIMXF_DEF,0,127)
C
C get memory for font tables
	IF (TRIMXF.GT.0) THEN
	   I = LIB$GET_VM(TRIMXF*TRIMXC*4,TRIWID_LOC)	! widths
	   IF (I)
     &	      I = LIB$GET_VM(TRIMXF*2,TRIFNT_LOC)	! font numbers
	   IF (I)
     &	      I = LIB$GET_VM(TRIMXF*4,TRIFNP_LOC)	! font pointers
	   IF (.NOT.I) THEN
	      CALL LIB$FREE_VM(TRIMXF*TRIMXC*4,TRIWID_LOC)
	      TRIWID_LOC = 0
	      CALL LIB$FREE_VM(TRIMXF*2,TRIFNT_LOC)
	      TRIFNT_LOC = 0
	      CALL LIB$FREE_VM(TRIMXF*4,TRIFNP_LOC)
	      TRIFNP_LOC = 0
	      CALL FRTWRT('Cannot allocate memory for TRI fonts')
	      CALL LSL_PUTMSG(I)
	      TRIMXF = 0
	   ENDIF
	ENDIF
C
C init things
	TRICNT = 0		! no characters defined yet
	TRITOP = 0		! no character space used yet
	TRISEL = -1		! no character selected
	TRIIND = 0		! no current character
	IFSN   = -1		! ditto
	LSTFSN = -1		! no order check yet
	TRIFNC = 0		! no fonts defined yet
	HADAC = .TRUE.		! pretend we had width AC
C
C open up the TRI file
C
	CALL IFFOPN(TRILUN,TRINAM,0)	! open IFF file
	IF (IERCD.NE.0) THEN
	   CALL FRTWRT('Error opening TRI file %S',TRINAM)
	   GOTO 999
	ENDIF
C
C open for business now
C
	CALL IFFIRV(1)
	CALL IFFRWD
C
C now we read it in, feature by feature
C
50	CALL IFFNXT(IECODE,IELEN)
	IF (IELEN.EQ.-1) GOTO 910
	IF (IECODE.EQ.'NO') GOTO 110
	IF (IECODE.EQ.'NF') GOTO 200
	IF (IECODE.EQ.'FS') GOTO 210
	IF (IECODE.EQ.'AC') GOTO 220
	IF (IECODE.EQ.'CB') GOTO 230
	IF (IECODE.EQ.'TX') GOTO 80
	IF (IECODE.EQ.'EJ') GOTO 800
	GOTO 50
C
C unexpected things
C
80	CALL FRTWRT('Unexpected %A2 entry',IECODE)
	GOTO 900
C
C NO - new overlay
C
110	CALL EIHRI(INO,1,1)
	IF (INO.EQ.0) GOTO 117		! skip layer 0
	IF (INO.LT.1.OR.INO.GT.127) GOTO 115
	IF (TRIFNC.GE.TRIMXF) GOTO 118	! no more room for fonts
	TRIFNC = TRIFNC + 1		! we have another font
	CALL FRT_PUTWORD(INO,%VAL(TRIFNT_LOC+(TRIFNC-1)*2))! font number
	CALL FRT_PUTLONG(TRITOP,%VAL(TRIFNP_LOC+(TRIFNC-1)*4))! start of it
	LSTFSN = -1			! reset for binary chop
	GOTO 50
C
115	CALL FRTWRT('Font %^W%N out of range 1 to 127 ignored',INO)
116	CALL IFFNXC('EO',IELEN)		! skip this layer
	GOTO 900			! and give context
117	CALL IFFNXC('EO',IELEN)		! skip this layer
	GOTO 50				! layer 0 is expected
118	CALL FRTWRT('No room for font')
	GOTO 116
C
C NF - new feature
C
200	CALL EIHRI(IFSN,1,1)
	CALL EIHRI(ISN,1,2)
	IF (IFSN.NE.LSTFSN) THEN
	   IF (.NOT.HADAC) GOTO 899
	   HADAC = .FALSE.		! no width AC yet
	ENDIF
202	NST = 0				! no STs read yet
	IF (IFSN.EQ.0) THEN		! dummy feature
	   CALL IFFNXC('EF',IELEN)	! skip it
	   GOTO 50			! but dont moan
	ENDIF
	IF (IFSN.LE.0.OR.IFSN.GE.256) THEN
	   CALL FRTWRT('FSN outside range 1 to 255 ignored')
	   GOTO 209
	ENDIF
	IF (IFSN.LT.LSTFSN) THEN
	   CALL FRTWRT('Feature out of order ignored')
	   GOTO 209
	ENDIF
	LSTFSN = IFSN			! remember sequence
	GOTO 50				! and keep going
C skip and moan
209	IECODE = 0			! see use of IECODE at 900
	CALL IFFNXC('EF',IELEN)		! skip rest of this feature
	GOTO 900			! and moan
C
C FS - feature status
C
210	CALL EIHRI(IFS,1,1)
	GOTO 50
C
C AC - character width
C
220	CALL EIHRI(ACTYP,1,1)
	IF (HADAC) THEN
	   CALL FRTWRT('Repeated type 3 AC found')
	   GOTO 900
	ENDIF
	HADAC = .TRUE.
	CALL EIHRR(%VAL(TRIWID_LOC+((TRIFNC-1)*TRIMXC+LSTFSN-1)*4),1,2)
	GOTO 50
C
C ST - string of coords
C
230	IF (LSTFSN.EQ.32) GOTO 50	! ignore ST in space char
	CALL EIHRCB_HEAD(CBH)
	CALL EIHRCB_DATA(CBD)
C is there room ?
	IF (TRITOP+CBH.NROW.GT.TRIMAX) THEN
	   CALL FRTWRT('TRI buffer overflow (%N points)',TRITOP+CBH.NROW)
	   GOTO 900
	ENDIF
C read coords
	CALL IFS_CB_READ(CBH,CBD,
     &			%VAL(TRIBUF_LOC+TRITOP*8),2,XYCOL,1,CBH.NROW)
C set SCT flags
	DO 235 I=1,CBH.NROW
	   CALL FRT_PUTWORD(IFS,%VAL(TRITAB_LOC+(TRITOP+I-1)*2))
235	   CONTINUE
C
C if first ST of character component, then store -character number, or if
C this ST starts pen up, then flag by -32768
	NST = NST + 1
	IF (NST.EQ.1) THEN
	   CALL FRT_PUTWORD(-(IFSN+INO*256),%VAL(TRITAB_LOC+TRITOP*2))
	ELSEIF ((CBH.FLAGS.AND.1).EQ.0) THEN
	   CALL FRT_PUTWORD(-32768,%VAL(TRITAB_LOC+TRITOP*2))
	ENDIF
	TRITOP = TRITOP + CBH.NROW
	GOTO 50
C
C and finally, close the file
C
800	IF (.NOT.HADAC) GOTO 899
802	CALL IFFCLO(TRILUN)
	IF (IERCD.NE.0) THEN
	   CALL FRTWRT('Error closing TRI file %S',TRINAM)
	   GOTO 999
	ENDIF
	GOTO 998
C
C error recovery here
899	CALL FRTWRT('Width AC (type 3) missing')
900	CALL FRTWRT(
     &     'In or after feature %^W%N (ISN %N) of TRI file %S',
     &     LSTFSN,ISN,TRINAM)
	IF (IECODE.EQ.'NF') GOTO 202	! after missing AC message
	IF (IECODE.EQ.'EJ') GOTO 802	! ditto
	GOTO 50				! get next entry
C
C fatal errors
C
910	CALL FRTWRT('Unexpected end of TRI file')
	GOTO 800
C
C that's all
C
998	TRIINI = .FALSE.		! succeeded
999	HADERR = LIB$FREE_EF(TRILUN)
***	IF LSLLIB
	IF (.NOT. HADERR) CALL LSL_PUTMSG(HADERR)
***	IFF
	IF (.NOT.HADERR) CALL GEN_SYSMSG(HADERR)
***	ENDC
1000	RETURN
	END
