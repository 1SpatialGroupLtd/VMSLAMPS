C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-27 10:49:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
  	SUBROUTINE PATFIT(LENGTH,STG,RES,REP,SCALE)
C
***	MODULE	PATFIT
***	IDENT	27OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
	IMPLICIT NONE
C
C Called from PATGPL.
C Routine to calculate pattern scaling.
C Initial STG, RES, REP are passed. Routine steps along pattern
C until the end of LENGTH is reached.
C If the end falls in a pattern component that must not span
C corners, then pattern is scaled to nearest whole component.
C In any case STG, RES, and REP are returned with the values that
C should be reached at the end of this vector.
C
C If SCALE is false, then merely compute ending stage of pattern
C with no scaling.
***	COMMON/LSL$CMNFRT:FRTPAT/
***	COMMON/LSL$CMNFRT:PATDEF/
C
C arguments
	REAL		LENGTH		! length of vector
	INTEGER		STG		! stage of pattern
	REAL		RES		! residue of stage
	INTEGER		REP		! remaining repeats
	LOGICAL		SCALE		! scale pattern?
C
C workspace
	INTEGER		OLDSTG
	INTEGER		OLDREP
C
	REAL		OLDL
	REAL		L
	INTEGER		IND
C
C load default lengths
	DDCLEN = DEFLEN
	DSUBST = 1.0
	DDCMAJ = DEFMAJ
	DDCMIN = DEFMIN
	DDCGAP = DEFGAP
C
C If no fitting of whole dashes being done, then just want to scale
C a whole number of repeats into LENGTH
	IF (SCALE.AND..NOT.(DSHFIT(1).OR.DSHFIT(2))) THEN
	   IND = NINT(LENGTH/DEFLEN)
	   IF (IND.LE.0) THEN		! can't fit any
	      DSUBST = 0.0		! flag for PATGPL
	   ELSE
	      DDCLEN = LENGTH/IND	! scale to fit
	      DSUBST = DDCLEN/DEFLEN	! scaling factor
	      DDCMAJ = DEFMAJ*DSUBST	! scale other lengths
	      DDCMIN = DEFMIN*DSUBST
	      DDCGAP = DEFGAP*DSUBST
	   ENDIF
	   GOTO 1000
	ENDIF
C
C Otherwise, either the major or minor (or both) units must not be
C split at the end of LENGTH (or we are not scaling the pattern, but
C just want the correct ending phase)
C
C step along until we reach LENGTH
	OLDL = 0.0
	L = 0.0
C
C check if now past end of segment
10	L = L+RES
	IF (L.GT.LENGTH) GOTO 70
C
C remember state at start of major/minor units
	IF (STG.EQ.0.OR.STG.EQ.2.OR.STG.EQ.4) THEN
	   OLDL = L
	   OLDSTG = STG
	   OLDREP = REP
	ENDIF
C
C Dispatch on current stage:
C	       Initial Major-on Gap Minor-on Gap
11	GOTO (   41,     24,    30,   24,    40), STG+1
C
C *****************  from computed GOTO  *************************
C
C End of major (STG=1) or minor (STG=3) on
24	RES = DEFGAP
	GOTO 60
C
C *****************  from computed GOTO  *************************
C
C End of gap after major unit, see if any major repeats to do
C
30	REP = REP-1
	IF (REP.GE.0) GOTO 42
C
C Get control for minor dash
	REP = DREPCT(2)
C
C Set minor on
31	RES = DEFMIN
	GOTO 60
C
C *****************  from computed GOTO  *************************
C
C End of gap after minor unit, see if any minor repeats to do
C
40	REP = REP-1
	IF (REP.GE.0) THEN
C
C Set to repeat minor dash
	   STG = 2
	   GOTO 31
	ENDIF
C
C and fall through to set major on
C
C *****************  from computed GOTO  *************************
C
C Get control for major on
C Step on L by maxiumum number of DEFLEN whole repeats (DEFLEN)
41	L = L+INT((LENGTH-L)/DEFLEN)*DEFLEN
	OLDL = L
	REP = DREPCT(1)
C
C Set major on (perhaps again)
42	STG = 0
	RES = DEFMAJ
C
C Move on to next stage
60	STG = STG+1
	GOTO 10
C
C ******************************************************************
C Fallen off end
C Reach here having passed end of vector. STG is the stage just
C added. REP is number of repeated units to come.
70	IND = (STG+1)/2		! 1 for major, 2 for minor
C
C Check if the stage we have ended in needs scaling
	IF (SCALE.AND.DSHFIT(IND)) THEN	! yes
C
C If just added a major/minor dash, then add the following gap
	   IF (STG.EQ.1.OR.STG.EQ.3) THEN
	      L = L+DEFGAP
	      STG = STG+1
	   ENDIF
C
C See whether to stretch or squeeze the pattern
	   IF (L-LENGTH.GT.LENGTH-OLDL) THEN	! stretch
	      L = OLDL
	      STG = OLDSTG
	      REP = OLDREP
	   ENDIF
	   IF (L.EQ.0.0) THEN	! can't fit any pattern
	      DSUBST = 0.0	! flag for PATGPL
	   ELSE
	      DSUBST = LENGTH/L	! scale factor
	      DDCLEN = DEFLEN*DSUBST
	      DDCMAJ = DEFMAJ*DSUBST
	      DDCMIN = DEFMIN*DSUBST
	      DDCGAP = DEFGAP*DSUBST
	      DDCRES = DDCRES*DSUBST	! adjust initial residue
	   ENDIF
	   RES = 0.0		! will be at end of minor gap
	ELSE
C
C don't need to do any scaling, so just amend RES to get back
C to end of vector
	   RES = L-LENGTH
	ENDIF
C
1000	RETURN
	END
