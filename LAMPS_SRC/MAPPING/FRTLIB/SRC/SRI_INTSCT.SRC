C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-29 11:37:34.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SRI_INTSCT(LINE1,LINE2,POINT)
C
***	MODULE	SRI_INTSCT
***	IDENT	29NO94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author:   Clarke Brunt
C Modified: Tim Mulcahy - eliminate original IN1 and IN2 arguments
C
C To find the intersection point of two line segments
C
C LINE1 is the first line segment (first subscript x or y, second
C subscript point 1 or 2).
C LINE2 is the second line segment.
C POINT returns the intersecion point, if any.
C
C The function returns TRUE iff the lines are parallel
C
	IMPLICIT NONE
C
C arguments
	REAL	LINE1(2,2)
	REAL	LINE2(2,2)
	REAL	POINT(2)
C
C w/s
	REAL*8	DX1,DY1,DX2,DY2		! differences
	REAL*8	DX12,DY12
	REAL*8	DET
	REAL*8	S1,S2
	REAL*8	LTD1,LTD2		! small numbers for each line
	REAL*8	LTD			! a small number
	PARAMETER (LTD=1E-5)
C
C assume lines parallel
	SRI_INTSCT = .TRUE.
C
C calculate the differences
	DX1 = DBLE(LINE1(1,2)) - DBLE(LINE1(1,1))
	DY1 = DBLE(LINE1(2,2)) - DBLE(LINE1(2,1))
	DX2 = DBLE(LINE2(1,2)) - DBLE(LINE2(1,1))
	DY2 = DBLE(LINE2(2,2)) - DBLE(LINE2(2,1))
C
C calculate cross product (determinant)
	DET = DX1*DY2-DY1*DX2
C
C if too small, then the lines are parallel
	IF (ABS(DET).EQ.0.0) GOTO 999	! prevent zero-divide
C
C calculate fractional distances along vectors of the intersection point
	DX12 = DBLE(LINE2(1,1)) - DBLE(LINE1(1,1))
	DY12 = DBLE(LINE2(2,1)) - DBLE(LINE1(2,1))
	S1 = (DY2*DX12-DX2*DY12)/DET
	S2 = (DY1*DX12-DX1*DY12)/DET
C
C and calculate actual intersection using line 1
	DX1=DX1*S1
	DY1=DY1*S1
	POINT(1) = DBLE(LINE1(1,1)) + DX1
	POINT(2) = DBLE(LINE1(2,1)) + DY1
	SRI_INTSCT = .FALSE.			! valid intersection
C
999	RETURN
	END
