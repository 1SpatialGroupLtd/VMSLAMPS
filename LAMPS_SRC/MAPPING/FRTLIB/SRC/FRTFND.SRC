C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-02 10:44:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FRTFND(FC,OUTPUT_ERROR)
C
***	MODULE	FRTFND
***	IDENT	02NO94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C add optional OUTPUT_ERROR arg			CCB	 7-Mar-1991
C deal with flag and h/w fields			RWR	19-May-1986
C set up GT class				PGH	08-Jul-1983
C Created					PGH	20-Jun-1983
C
C returns TRUE if it fails to find Feature Code FC in the FRT,
C otherwise the attributes of FC are set up in COMMON/FRTCOM/.
C see FRTCOM.CMN for details
C
	IMPLICIT NONE
C
	INTEGER*2	FC		! Feature Code
	LOGICAL		OUTPUT_ERROR	! optional
C
***	COMMON/LSL$CMNFRT:FRTCOM/
C
C functions called
	LOGICAL		FRTFND_SUB
	LOGICAL		HAVE_I_AN_ARG
C
	LOGICAL		DOERR
C
	FRTFND = FRTFND_SUB(FC,%VAL(FRTINT_LOC),%VAL(FRTFLT_LOC))
	IF (FRTFND) THEN
	   IF (HAVE_I_AN_ARG(2)) THEN
	      DOERR = OUTPUT_ERROR
	   ELSE
	      DOERR = .TRUE.
	   ENDIF
	   IF (DOERR) CALL FRTWRT(
     &			'Feature Code %^W%N not found in FRT',FC)
	ENDIF
C
	RETURN
	END
C
	LOGICAL FUNCTION FRTFND_SUB(FC,FRTINT,FRTFLT)
C
***	MODULE	FRTFND_SUB
***	IDENT	10AU94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
	IMPLICIT NONE
C
	INTEGER*2	FC		! Feature Code
	INTEGER*2	FRTINT(6,*)	! integer array
	REAL*4		FRTFLT(2,*)	! float array
C
***	COMMON/LSL$CMNFRT:FRTCOM/
C
C functions called
C
C w/s
	INTEGER    I
	INTEGER	   LOLIM,HILIM		! bounds for binary chop
	INTEGER    BINPTR		! binary chop pointer
	INTEGER*2  TEMP(2)		! for I*4 - I*2 truncation
	INTEGER*4  LTEMP
	INTEGER	   LIB$EXTV
C
	EQUIVALENCE (LTEMP,TEMP)
C
C nothing to do if currently selected
C
	IF (FC.EQ.FRTFC) GOTO 50
C
C init things
C
	FRTFND_SUB = .TRUE.		! assume will fail
C
C as the FRT table is sorted, we can use binary chop
C
	IF (FRTCNT.LE.0) GOTO 999
	LOLIM = 1
	HILIM = FRTCNT
10	   BINPTR = (LOLIM+HILIM)/2		! next guess
	   IF (FRTINT(1,BINPTR).EQ.FC) GOTO 20	! found it
	   IF (LOLIM.GE.HILIM) GOTO 999		! no chopping room
	   IF (FC.GT.FRTINT(1,BINPTR)) THEN	! which side ?
	      IF (LOLIM.EQ.BINPTR) BINPTR = BINPTR+1
	      LOLIM = BINPTR			! too low
	   ELSE
	      HILIM = BINPTR			! too high
	   ENDIF
	   GOTO 10
C
C found the FC in table - set things up
C
20	FRTIND = BINPTR
	FRTFC  = FRTINT(1,BINPTR)
	FRTGT  = FRTINT(2,BINPTR)
	FRTCOL = FRTINT(3,BINPTR)
	FRTSC  = FRTINT(4,BINPTR)
	FRTWID = FRTFLT(1,BINPTR)
	FRTSIZ = FRTFLT(2,BINPTR)
C
C for FRTFLG make sure top 16 bits are cleared
C
	LTEMP  = FRTINT(5,BINPTR)
	TEMP(2)= 0			! only want bottom bits	
	FRTFLG = LTEMP
C
C bit  0 of FRTFLG = use hardware symbol
C bit  1 of FRTFLG = use hardware line type 2
C bit  2 of FRTFLG = use hardware line type 3
C bit  3 of FRTFLG = use hardware line type 4
C
C bit 10 of FRTFLG = clip symbols in patterened fill areas
C		     or, continue pattern phase through invisibles
C
C note: it is illegal to have more than one of bit 1,2 and 3 set
C
	FRTHWS = BTEST(FRTFLG,0)	! use hardware symbol
	I = IBITS(FRTFLG,1,3)		! extract bits 1,2 & 3
	IF (I.EQ.1) THEN
	   FRTHWL = 2
	ELSEIF (I.EQ.2) THEN
	   FRTHWL = 3
	ELSEIF (I.EQ.4) THEN
	   FRTHWL = 4
	ELSE
	   FRTHWL = 1			! catch all
	ENDIF
C
C clip symbols in patterened fill areas?
C or continue pattern phase through invisibles?
	FRTCLP = LIB$EXTV(10,1,FRTFLG)
C
	FRTHW = FRTINT(6,BINPTR)
C
C set up GT classes
C
	FRTLIN = (FRTGT.EQ.LINTYP)
	FRTARC = (FRTGT.GE.CLOTYP.AND.FRTGT.LE.FULTYP)
	FRTCUR = (FRTGT.EQ.CURTYP)
	FRTSYM = (FRTGT.GE.UNOTYP.AND.FRTGT.LE.SCATYP).OR.
     &           (FRTGT.EQ.STRTYP)
	FRTTEX = (FRTGT.EQ.TEXTYP)
	FRTARE = (FRTGT.EQ.ARETYP)
C
C for a fill area, deduce the interior style (FRTAST) and the style
C index (FRTAIX) from the secondary code (FRTSC)
C
	IF (FRTARE) THEN
	   IF (FRTSC.LT.-1) THEN
	      FRTAST = -1		! dummy value
	      FRTAIX = -1		! dummy value
	   ELSEIF (FRTSC.EQ.-1) THEN
	      FRTAST = 1		! style is SOLID
	      FRTAIX = 1
	   ELSEIF (FRTSC.EQ.0) THEN
	      FRTAST = 0		! style is HOLLOW
	      FRTAIX = 1
	   ELSEIF ((FRTSC.GE.1.AND.FRTSC.LE.6).OR.
     &		   (FRTSC.GE.101.AND.FRTSC.LE.106).OR.
     &		   (FRTSC.GE.10000.AND.FRTSC.LE.13600).OR.
     &		   (FRTSC.GE.20000.AND.FRTSC.LE.23600)) THEN
	      FRTAST = 3		! style is HATCH
	      FRTAIX = FRTSC		! choose hatch-style
	   ENDIF
	ENDIF
C
C all set up
C
50	FRTFND_SUB = .FALSE.		! success
C
C that's all
C
999	RETURN
	END
