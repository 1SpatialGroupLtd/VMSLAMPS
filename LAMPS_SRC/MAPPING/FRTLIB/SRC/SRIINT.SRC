	SUBROUTINE SRIINT(X,Y,NCOORD,FIRST,LAST,LOOPED)
C
***	MODULE	SRIINT
***	IDENT	27OC94
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author Paul Hardy
C
C Tidy and remove bugs with small STs in	CCB	26-Sep-1986
C closed loops.
C Bug fixed in point generation between buffers	 DM	13-Mar-1984
C Adapted for FPP (fast plotter program) which	 RD	07-Sep-1983
C requires no overlap of pts between blocks
C and has to be compatible with GKS library.
C Also, it already knows if ft is a loop.
C No longer restriction on no. of pts passed.
C Modified to make use of the 'first'		PGH	06-Jun-1977
C information that was already available.
C Modified to deal satisfactorily with Akima	PGH	13-Sep-1976
C POLATE routine.
C Created.					PGH	21-Jul-1976
C
C NB Please keep this routine in step with INTRPL in FPP AND LITES2
C
C Curve interpolation routine.
C Interpolates points between given master points in arrays X and Y.
C If last point = first point then closes loop for end conditions,
C else extrapolates two further points at each end for continuity.
C Calls routine SRIPOL to do the interpolation.
C The routine is split into 3 main sections which handle:-
C     - the start of the buffer which may or may not be the start
C	of the ft.
C     - the main chunk of coordinates in the middle of the buffer.
C     - the end of the buffer which may or may not be the end of 
C	the ft.
C Closed loops are drawn starting at the 3rd point, dealing with the
C first two at the end.
C
C Control arguments
C FIRST should be TRUE if first call to SRIINT
C LAST should be TRUE if feature is to be completed
C LOOPED should be TRUE if feature is a closed loop
C
C SRIPOL is passed the start of an array of 6 points. It interpolates
C between the 3rd and 4th, putting in last point but not first.
C
C SRIEXT is passed start of an array of 5 points. It extrapolates either
C the first two or the last two from the other 3.
C
	IMPLICIT NONE
C
C arguments
	INTEGER NCOORD		! number of coords in X,Y
	REAL X(NCOORD),Y(NCOORD)! coords to be interpolated between
	LOGICAL FIRST,LAST,LOOPED
C
C saved variables (could be in common)
	REAL XS(4),YS(4)	! hold points 2-5 for closed loops
	REAL XE(11),YE(11)	! hold the continuity points
	INTEGER INTTOT		! coord count
	SAVE XS,YS,XE,YE,INTTOT
C
C workspace
	INTEGER LASTOT		! last INTTOT (no. coords already held)
	INTEGER I,J		! loop control variables
C
	IF (FIRST) THEN
	   INTTOT=0		! no points so far
	   CALL SRIBFF(0)	! nothing in buffer
	ENDIF
C
C Update the coord count for this ft
	LASTOT=INTTOT		! remember no. of pts prior to this
	INTTOT=INTTOT+NCOORD	! count total number of pts
C
C
C***********************************************************************
C
C Save the first 5 points passed to us in XYE(,3:7) for use with
C extra points extrapolated in XYE(,1:2).
C
	IF (LASTOT.GE.5) GOTO 200	! already got 5 or more
C
	J=MIN(5-LASTOT,NCOORD)
	DO 40 I=1,J
	      XE(I+LASTOT+2)=X(I)
	      YE(I+LASTOT+2)=Y(I)
40	CONTINUE
C
C If just had 3rd point, then move to first point,
C which is actual first point for open curve, but third point for loop
	IF (LASTOT.LT.3.AND.INTTOT.GE.3) THEN
	   IF (LOOPED) THEN
	      CALL SRIBFA(1,XE(5),YE(5))
	   ELSE
	      CALL SRIBFA(1,XE(3),YE(3))
	   ENDIF
	ENDIF
C
	IF (INTTOT.LT.5) THEN
C
C Still not got 5 points - if not last bit then that's all for now
	   IF (.NOT.LAST) GOTO 1000
	   GOTO 2000		! deal with features  with <5 points
	ENDIF
C
C Here when just had 5th point
C For loops, we save points 2-5 in XYS for use at end.
C For open curves, extrapolate extra points and interpolate the
C first two spans
	IF (LOOPED) THEN
	   DO 91 I=1,4
	         XS(I)=XE(I+3)
	         YS(I)=YE(I+3)
91	   CONTINUE
	ELSE
	   CALL SRIEXT(.TRUE.,XE(1),YE(1))	! Akima only
	   CALL SRIPOL(XE(1),YE(1))
	   CALL SRIPOL(XE(2),YE(2))
	ENDIF
C
C Check if we need to use the first 5 points stored in XYE(,3:7)
C This will be provoked when first buffer contains less than 5 points
	IF (LASTOT.LE.0) GOTO 230	! no points in XYE
	J=MIN(LASTOT,NCOORD-(5-LASTOT))
C
C Insert up to 4 points from XY into XYE(,8:11)
	DO 110 I=1,J
	      XE(I+7)=X(I+5-LASTOT)
	      YE(I+7)=Y(I+5-LASTOT)
110	CONTINUE
	DO 120 I=3,J+2
	   CALL SRIPOL(XE(I),YE(I))
120	CONTINUE
	GOTO 230
C
C Here when already had 5 or more points. The last 5 are in
C XYE(,1:5). Generate points 'between' buffers to ensure continuity
200	J=MIN(5,NCOORD)
	DO 210 I=1,J
	      XE(I+5)=X(I)
	      YE(I+5)=Y(I)
210	CONTINUE
	DO 220 I=1,J
	   CALL SRIPOL(XE(I),YE(I))
220	CONTINUE
C
C***********************************************************************
C
C This section handles the main chunk of the data
C
230	DO 240 I=1,NCOORD-5
	   CALL SRIPOL(X(I),Y(I))
240	CONTINUE
C
C***********************************************************************
C
C This final section handles the end of the buffer
C Get last 5 points into XYE(,1:5)
C
	IF (LASTOT.GE.5.OR.NCOORD.GE.5) THEN
	   J=MIN(5,NCOORD)
	   DO 310 I=1,5-J		! extract anything from XE/YE
	         XE(I)=XE(I+J)
	         YE(I)=YE(I+J)
310	   CONTINUE
	   DO 320 I=1,J			! extract anything from X/Y
	         XE(I+5-J)=X(NCOORD-J+I)
	         YE(I+5-J)=Y(NCOORD-J+I)
320	   CONTINUE
	ELSE
C
C If had less than 5 points before this call (still in XYE(,3:7)), and
C this buffer has less than 5, then all the points so far are in
C XYE(,3:11)
	   DO 331 I=1,5
	         XE(I)=XE(INTTOT-3+I)
	         YE(I)=YE(INTTOT-3+I)
331	   CONTINUE
	ENDIF
C
C If not last buffer, then that's all
	IF (.NOT.LAST) GOTO 1000
C
C Generate points depending on whether it is a closed loop or not.
	IF (LOOPED) THEN
C
C Closed loop - last 5 points are in XYE(,1:5). Add on points 2-5 from
C start of feature, and interpolate
	   DO 370 I=1,4
	         XE(I+5)=XS(I)
	         YE(I+5)=YS(I)
370	   CONTINUE
	   DO 380 I=1,4
	      CALL SRIPOL(XE(I),YE(I))
380	   CONTINUE
	ELSE
C
C Open feature - extrapolate 2 extra points at end, and interpolate
	   CALL SRIEXT(.FALSE.,XE(3),YE(3))
	   CALL SRIPOL(XE(1),YE(1))
	   CALL SRIPOL(XE(2),YE(2))
	ENDIF
C
C***********************************************************************
C
1000	IF (LAST) CALL SRIBFF(2)	! flush buffer
	RETURN
C
C***********************************************************************
C
C Deal with features with <5 points
2000	IF (LOOPED) GOTO(1000,1000,2010,2030),INTTOT
	GOTO (1000,2010,2020,2020),INTTOT
C
C 2 point open line or 3 point loop - just output straight line
2010	CALL SRIBFA(2,XE(3),YE(3))
	GOTO 1000
C
C Got 3 or 4 point open line
2020	CALL SRIEXT(.TRUE.,XE(1),YE(1))
	CALL SRIEXT(.FALSE.,XE(INTTOT),YE(INTTOT))
C
	CALL SRIPOL(XE(1),YE(1))
	DO 2022 I=2,INTTOT-2
	   CALL SRIPOL(XE(I),YE(I))
2022	CONTINUE
	CALL SRIPOL(XE(INTTOT-1),YE(INTTOT-1))
	GOTO 1000
C
C Got 4 point loop (have to wrap points around)
2030	DO 2031 I=3,5
	      XE(I+3)=XE(I)
	      YE(I+3)=YE(I)
	      XE(I+6)=XE(I)
	      YE(I+6)=YE(I)
2031	CONTINUE
	DO 2032 I=3,5
	   CALL SRIPOL(XE(I),YE(I))
2032	CONTINUE
	GOTO 1000
C
	END
