C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-21 12:05:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SRI_LOWER_HULL( N, P, M, Q, L )
C
***	IDENT	10NO94
***	MODULE	SRI_LOWER_HULL
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author: Tim Mulcahy, 10-Nov-1994
C
C Find the LOWER convex hull Q(1..L) of the simple polygon P(1..N)
C
C Note: The variable names below correspond to those in the Mehlhorn algorithm.
C
C Error code: return L = -1
C
	IMPLICIT NONE
C
	INTEGER N			 ! Size of point set array
	REAL P(2,N)		         ! Array of point set coordinates
C
	INTEGER M		         ! Max size of convex hull result array
	REAL Q(2,M)                      ! Convex hull point set result array
	INTEGER L                        ! Actual size of convex hull array
C
	INTEGER S                        ! Source point set pointer  (array P)
	INTEGER T                        ! Convex hull stack pointer (array Q)
C
C Declare vector `cross' product function V1 X V2 where V1, V2 are the vectors
C P1->P2, P1->P3 and P1, P2, P3 are the points (X1,Y1), (X2,Y2), (X3,Y3).
C
        REAL SRI_VECTOR_PRODUCT
C
C Find the LOWER convex hull, adding it to the already found UPPER convex hull
C
	T = L                          ! Set stack pointer to end of UPPER hull
C
	IF ( T.EQ.M ) GOTO 900
	T = T + 1
	Q(1,T) = P(1,1)                ! Push q(0) on convex hull stack
	Q(2,T) = P(2,1)
C
	IF ( T.EQ.M ) GOTO 900
	T = T + 1
	Q(1,T) = P(1,N)                ! Push q(1) on stack
	Q(2,T) = P(2,N)
C
C Find first point q(2) below line q(0)->q(1) and push it onto stack
C
	S = N - 1
 10	IF ( SRI_VECTOR_PRODUCT( Q(1,T-1), Q(2,T-1),
     &                           Q(1,T),   Q(2,T),
     &                           P(1,S),   P(2,S) ).GT.0.0 ) THEN
	   S = S - 1
	   GOTO 10
	ENDIF
C
C Push p(s) (i.e. q(2)) onto stack
C
	IF ( T.EQ.M ) GOTO 900
	T = T + 1
	Q(1,T) = P(1,S)
	Q(2,T) = P(2,S)
C
C Find the next polygon point p(s) which is
C either to the left of (or on) the line q(t)->q(0)
C or is to the left of the line q(t-1)->q(t)
C
 30	IF ( S.GT.1 ) THEN
 40	   S = S - 1
 	IF ( SRI_VECTOR_PRODUCT( Q(1,T),   Q(2,T),
     &                           Q(1,1),   Q(2,1),
     &                           P(1,S),   P(2,S) ).GE.0.0 .OR.
     &	     SRI_VECTOR_PRODUCT( Q(1,T-1), Q(2,T-1),
     &                           Q(1,T),   Q(2,T),
     &                           P(1,S),   P(2,S) ).GT.0.0 ) GOTO 50
	   GOTO 40
C
C If necessary, pop q(t) off the stack whenever p(s) is
C either to the left of or on the line q(t-1)->q(t)
C
 50	   CONTINUE
	   IF ( SRI_VECTOR_PRODUCT( Q(1,T-1), Q(2,T-1),
     &                              Q(1,T),   Q(2,T),
     &                              P(1,S),   P(2,S) ).GE.0.0 ) THEN
	      IF ( T.GT.L+2 ) THEN
		 T = T - 1
		 GOTO 50
	      ENDIF
	   ENDIF
C
C Now push p(s) onto convex hull stack
C
	   IF ( T.EQ.M ) GOTO 900
	   T = T + 1
	   Q(1,T) = P(1,S)
	   Q(2,T) = P(2,S)
	   GOTO 30
	ENDIF
C
C Success: return current size of convex hull
C
 	L = T
	GOTO 999
C
C Error: stack overflow (error code -1)
C
 900	CONTINUE
	L = -1
C
 999	RETURN
	END
