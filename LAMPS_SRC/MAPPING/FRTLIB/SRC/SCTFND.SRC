C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-02 11:44:16.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SCTFND(SYMCC)
C
***	MODULE	SCTFND
***	IDENT	02NO94
C
C Symbol Component Table FiND
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
CMOD M691 Allow fill area types 101-106		RWR	25-Oct-1988
C hardware lines and slugs			RWR        Jun-1986
C Created					PGH	09-Sep-1983
C
C returns TRUE if it fails to find Symbol component SYMCC in the SCT,
C otherwise the attributes of SYMCC are set up in COMMON/FRTSCT/.
C
	IMPLICIT NONE
C
	INTEGER*2	SYMCC		! symbol component code
C
***	COMMON/LSL$CMNFRT:FRTSCT/
C
C functions called
	LOGICAL		SCTFND_SUB
C
	SCTFND = SCTFND_SUB(SYMCC,%VAL(SCTINT_LOC),%VAL(SCTFLT_LOC))
C
	RETURN
	END
C
	LOGICAL FUNCTION SCTFND_SUB(SYMCC,SCTINT,SCTFLT)
C
***	MODULE	SCTFND_SUB
***	IDENT	23JA90
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
	IMPLICIT NONE
C
	INTEGER*2	SYMCC		! symbol component code
	INTEGER*2	SCTINT(6,*)	! integer array
	REAL*4		SCTFLT(2,*)	! real array
C
***	COMMON/LSL$CMNFRT:FRTSCT/
***	COMMON/LSL$CMNFRT:FRTCOM/	! for ARETYP
C
C functions called
C
C w/s
	INTEGER    I
	INTEGER    HILIM,LOLIM,BINPTR	! binary chop pointers
C
C nothing to do if currently selected
C
	IF (SYMCC.EQ.SCTCC) GOTO 50
C
C init things
C
	SCTFND_SUB = .TRUE.		! assume will fail
C
C as the SCT table is sorted, we can use binary chop
C
	IF (SCTCNT.LE.0) GOTO 19
	LOLIM = 1
	HILIM = SCTCNT
10	   BINPTR = (LOLIM+HILIM)/2		! next guess
	   IF (SCTINT(1,BINPTR).EQ.SYMCC) GOTO 20 ! found it
	   IF (LOLIM.GE.HILIM) GOTO 19		! no chopping room
	   IF (SYMCC.GT.SCTINT(1,BINPTR)) THEN
	      IF (LOLIM.EQ.BINPTR) BINPTR = BINPTR+1
	      LOLIM = BINPTR			! too low
	   ELSE
	      HILIM = BINPTR			! too high
	   ENDIF
	   GOTO 10
C
C not found
19	CALL FRTWRT('Symbol Component Code %^W%N not found in SCT'
     &	,SYMCC)
	GOTO 999		! failed - FC not in table
C
C found the FC in table - set things up
C
20	SCTIND = BINPTR
	SCTCC  = SCTINT(1,BINPTR)
	SCTGT  = SCTINT(2,BINPTR)
	SCTCOL = SCTINT(3,BINPTR)
	SCTSC  = SCTINT(4,BINPTR)
	SCTWID = SCTFLT(1,BINPTR)
	SCTSIZ = SCTFLT(2,BINPTR)
C
C for SCTFLG only 16 bits are significant, but allow to sign extend
C
	SCTFLG  = SCTINT(5,BINPTR)
C
C bit 0 of SCTFLG = use hardware symbol
C bit 1 of SCTFLG = use hardware line type 2
C bit 2 of SCTFLG = use hardware line type 3
C bit 3 of SCTFLG = use hardware line type 4
C
C note: it is illegal to have more than one of bit 1,2 and 3 set
C
	IF (SCTFLG.GE.0.0) THEN
	   SCTHWS = BTEST(SCTFLG,0)	! use hardware symbol
	   I = IBITS(SCTFLG,1,3)	! extract bits 1,2 & 3
	   IF (I.EQ.1) THEN
	      SCTHWL = 2
	   ELSEIF (I.EQ.2) THEN
	      SCTHWL = 3
	   ELSEIF (I.EQ.4) THEN
	      SCTHWL = 4
	   ELSE
	      SCTHWL = 1		! catch all
	   ENDIF
	ENDIF
C
	SCTHW = SCTINT(6,BINPTR)
C
C and if it's a fill area, then...
C
	IF ( SCTGT.EQ.ARETYP ) THEN
	   IF (	(SCTSC.GE.1.AND.SCTSC.LE.6).OR.
     &		(SCTSC.GE.101 .AND. SCTSC.LE.106).OR.
     &		(SCTSC.GE.10000.AND.SCTSC.LE.13600).OR.
     &		(SCTSC.GE.20000.AND.SCTSC.LE.23600)) THEN
	      SCTAST = 3		! style is HATCH
	      SCTAIX = SCTSC		! choose hatch-style
	   ELSEIF (SCTSC.EQ.-1) THEN
	      SCTAST = 1		! style is SOLID
	      SCTAIX = 1
	   ELSEIF (SCTSC.EQ.0) THEN
	      SCTAST = 0		! style is HOLLOW
	      SCTAIX = 1
	   ELSE
	      CALL FRTWRT(
     &	'Symbol Component secondary code %N illegal for fill area',
     &					 SCTSC )
	      GOTO 999
	   ENDIF
	ENDIF
C
C all set up
C
50	SCTFND_SUB = .FALSE.		! success
C
C that's all
C
999	RETURN
	END
