	LOGICAL FUNCTION TRITXT(CHARST,THS_FONT,X,Y,SIZE,ANGLE,HWTXT)
C
***	MODULE	TRITXT
***	IDENT	20NO97
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C Created					PGH	11-Oct-1983
C
C returns FALSE if it succeeds in plotting character string CHARST
C using the TRI table, at position X,Y, of size SIZE, and at angle ANGLE
C 
C
	IMPLICIT NONE
C
C args
C
	CHARACTER*(*)	CHARST		! character string
	INTEGER*2	THS_FONT	! font number (-ve for italic)
	REAL		X,Y		! position
	REAL		SIZE		! size
	REAL		ANGLE		! angle in radians
	LOGICAL		HWTXT		! use hardware text
C					! (optional, default false)
C common
C
***	COMMON/HERE:FRTTMP/
***	COMMON/HERE:FRTTRI_PRIVATE/
***	COMMON/LSL$CMNFRT:SRIVEC/
C
C functions called
	LOGICAL		TRITXT_SUB
	LOGICAL		HAVE_I_AN_ARG
C
C workspace
	LOGICAL		LHWTXT
C
C get optional argument stuff done before calling subroutine,
C otherwise tends to access violate, trying to use missing arguments
C
C draw text using hardware?
	LHWTXT = .FALSE.
	IF (HAVE_I_AN_ARG(7)) LHWTXT = HWTXT
C
C translate string if required
	IF (TRITRN) THEN
	   CALL LIB$MOVTC(CHARST,' ',TRNTAB,TRNSTR(:LEN(CHARST)))
	   TRITXT = TRITXT_SUB(TRNSTR(:LEN(CHARST)),
     &			THS_FONT,X,Y,SIZE,ANGLE,
     &			%VAL(TRIWID_LOC),%VAL(TRIFNT_LOC),LHWTXT,
     &			%VAL(SRIVEC(XSRIGST)),%VAL(SRIVEC(XSRIGTX)))
	ELSE
	   TRITXT = TRITXT_SUB(CHARST,THS_FONT,X,Y,SIZE,ANGLE,
     &			%VAL(TRIWID_LOC),%VAL(TRIFNT_LOC),LHWTXT,
     &			%VAL(SRIVEC(XSRIGST)),%VAL(SRIVEC(XSRIGTX)))
	ENDIF
C
999	RETURN
	END
C
	LOGICAL FUNCTION TRITXT_SUB(CHARST,THS_FONT,X,Y,SIZE,ANGLE,
     &		TRIWID,TRIFNT,HWTXT,SRIGST,SRIGTX)
C
***	MODULE	TRITXT_SUB
***	IDENT	04AP95
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/HERE:FRTTRI_PRIVATE/	! for text widths
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/HERE:FRTTMP/		! for TMPSTR
C
C args
C
	CHARACTER*(*)	CHARST		! character string
	INTEGER*2	THS_FONT	! font number (-ve for italic)
	REAL		X,Y		! position
	REAL		SIZE		! size
	REAL		ANGLE		! angle in radians
	REAL		TRIWID(TRIMXC,*)! widths for spacing
	INTEGER*2	TRIFNT(*)	! font numbers
	LOGICAL		HWTXT		! use hardware text
	EXTERNAL	SRIGST,SRIGTX	! passed routines
C
C functions called
C
	LOGICAL		TRIFND		! find character
	LOGICAL		TRIPLT		! plot character
	INTEGER		TRITXT_SUB3
C
C w/s
	INTEGER		I,N,L
	INTEGER		FONT
	INTEGER		CHARNO		! character number
	INTEGER		FONTPT		! font pointer
	REAL		XX,YY		! temporary position
	REAL		SINA,COSA	! sine,cosine of angle
	REAL		CHWID		! character width
	INTEGER		OURCOL		! our copy of colour
C
C init things
C
	TRITXT_SUB = .FALSE.		! assume will succeed
	FONT   = ABS(THS_FONT)		! ignore -ve fonts here
C
	IF (HWTXT) THEN
	   CALL TRITXT_SUB2(CHARST,TMPSTR,L)
	   IF (L.GT.0) THEN
C
C the colour is taken from SRISYC if the user passed an overriding value
C >=0, otherwise FRTCOL
C
	      IF (SRISYC.GE.0) THEN
	         OURCOL = SRISYC
	      ELSE
	         OURCOL = MAX(FRTCOL,1)
	      ENDIF
	      CALL SRIGST(FONT,OURCOL,SIZE,ANGLE)
	      CALL SRIGTX(X,Y,SRI_Z,TMPSTR(:L))	! draw text
	      GOTO 999
	   ENDIF
	ENDIF
C
	XX = X
	YY = Y
	SINA = SIN(ANGLE)
	COSA = COS(ANGLE)
C
C check valid font, and get pointer to it for accessing TRIWID
C
	DO 10 FONTPT=1,TRIFNC
	   IF (TRIFNT(FONTPT).EQ.FONT) GOTO 15
10	CONTINUE
	CALL FRTWRT('Font %N is not defined, text string is :',FONT)
	CALL FRTWRT('"%S"',CHARST)
	TRITXT_SUB = .TRUE.		! failed
	GOTO 999
C
C loop for each character in the string
C
15	I = 0
20	I = I+1
	IF (I.GT.LEN(CHARST)) GOTO 999
	   CHARNO = ICHAR(CHARST(I:I))
	   IF ((CHARST(I:I).EQ.'$'.AND.TRIESC) .OR.
     &	       (CHARST(I:I).EQ.'{'.AND.TRICC)) THEN ! its an escape sequence
	      N = TRITXT_SUB3(CHARST(I:),CHARNO)
	      I = I+N-1
	   ENDIF
	   IF (CHARNO.EQ.0) GOTO 20	! skip nulls
	   IF (CHARNO.NE.32) THEN	! skip spaces
	      IF (TRIPLT(CHARNO,FONT,XX,YY,SIZE,ANGLE)) TRITXT_SUB = .TRUE.
	   ENDIF
	   CHWID = TRIWID(CHARNO,FONTPT)*SIZE	! spacing
	   XX = XX + CHWID*COSA		! add spacing vector
	   YY = YY + CHWID*SINA
	GOTO 20
C
C that's all
C
999	RETURN
	END
C
	SUBROUTINE TRITXT_SUB2(C,T,L)
C
***	MODULE	TRITXT_SUB2
***	IDENT	04AP95
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created					CCB	29-Oct-1992
C
C Translate the $ escape sequences in a string
C
	IMPLICIT NONE
C
***	COMMON/HERE:FRTTRI_PRIVATE/
C
C args
C
	CHARACTER*(*)	C		! input string
	CHARACTER*(*)	T		! output string
	INTEGER		L		! output number of chars
C
C workspace
C
	INTEGER		I
	INTEGER		CHARNO
	LOGICAL		HADESC		! in escape character sequence
C
	L = 0
	HADESC = .FALSE.
	DO 10 I=1,LEN(C)
	   CHARNO = ICHAR(C(I:I))
	   IF (C(I:I).EQ.'$'.AND.TRIESC) THEN ! its an escape sequence
	      HADESC = .NOT.HADESC
	      IF (HADESC) GOTO 10	 ! set escaped flag and wait
	   ENDIF
	   IF (HADESC) THEN
	      CHARNO = CHARNO + 128	! this char is escaped
	      HADESC = .FALSE.		! but no others
	   ENDIF
	   L = L+1
	   T(L:L) = CHAR(CHARNO)
	   IF (L.EQ.LEN(T)) GOTO 20	! string is full
10	CONTINUE
C
20	RETURN
	END
C
	INTEGER FUNCTION TRITXT_SUB3(STRING,CH)
C
***	MODULE	TRITXT_SUB3
***	IDENT	04AP95
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C Returns the number of characters at the start of STRING which will
C comprise a single 'character' when displayed.
C (i.e. allowing for $ escapes, and composites.)
C and return the corresponding character in CH
C
	IMPLICIT NONE
C
***	COMMON/HERE:FRTTRI_PRIVATE/
C
C arguments
	CHARACTER*(*)	STRING
	INTEGER		CH
C
C workspace
	INTEGER		L,I
C
	L = LEN(STRING)
C
C set defaults, 1 ordinary character
	TRITXT_SUB3 = 1
	CH = ICHAR(STRING(1:1))
C
	IF (STRING(1:1).EQ.'$'.AND.TRIESC) THEN
C process $ escape
C find first non-null, and add 128 to it, but $$ -> $
	   CH = 0		! return null if $ at end of string
	   I = 1
10	   I = I+1
	   IF (I.GT.L) GOTO 999
	   TRITXT_SUB3 = TRITXT_SUB3+1
	   CH = ICHAR(STRING(I:I))
	   IF (CH.EQ.0) GOTO 10
	   IF (CH.NE.ICHAR('$')) CH = CH+128
	ELSEIF (TRICC.AND.STRING(1:1).EQ.'{') THEN
C process { composite
	   CH = 32			! default to space
	   IF (L.LE.1) GOTO 999		! { at end of string
	   CH = ICHAR(STRING(2:2))
	   IF (STRING(2:2).EQ.'{') THEN
	      TRITXT_SUB3 = 2		! {{ -> {
	      GOTO 999
	   ENDIF
C
C read up to } or end of string returning first sig char after {
	   TRITXT_SUB3 = INDEX(STRING,'}')
	   IF (TRITXT_SUB3.EQ.0) TRITXT_SUB3 = L
	   I = 2
20	   IF (CH.NE.32.AND.CH.NE.9) GOTO 999
	   CH = 32
	   I = I+1
	   IF (I.GT.TRITXT_SUB3) GOTO 999
	   CH = ICHAR(STRING(I:I))
	   GOTO 20
	ENDIF
C
999	RETURN
	END
