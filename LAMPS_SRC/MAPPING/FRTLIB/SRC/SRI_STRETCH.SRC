C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-14 13:08:06.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SRI_STRETCH(NCOORD,XCOORD,YCOORD)
C
***	MODULE	SRI_STRETCH
***	IDENT	14NO86
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created					14-Nov-1986
C
C stretches symbol coordinates in x axis
C
	IMPLICIT NONE
C
C args
C
	INTEGER*4	NCOORD		! number of coordinates
	REAL*4		XCOORD(NCOORD)	! X coords
	REAL*4		YCOORD(NCOORD)	! Y coords
C
***	COMMON/LSL$CMNFRT:FRTTRI/
***	COMMON/LSL$CMNFRT:SRISCL/
C
C w/s
	INTEGER		I		! loop counter
	REAL*4		XX		! temporary X
	REAL*4		A1,A2,B1,B2	! transformation parameters
	SAVE		A1,A2,B1,B2	! keep them from one call to next
C
	REAL		COSANG,SINANG
	REAL		COS2ANG,SIN2ANG,COSINANG
	REAL		ANGLE,FACTOR
	SAVE		ANGLE,FACTOR	! keep from one call till next
	DATA		ANGLE/-1E32/	! starting with an unlikely value
	DATA		FACTOR/0.0/
C
C take account of any rotation of this symbol
C
C set up transformation for producing stretched symbol
C	X = a1*x + a2*y
C	Y = b1*x + b2*y
C
C If the coordinates we are working on have been rotated, they have
C to be "unrotated", then transformed, and rotated again. This is 
C achieved by premultiplying the transformation matrix by the inverse 
C rotation matrix and post multiplying by the rotation matrix, ie
C
C	|+cos(rot) +sin(rot)| * |a1   0| * |+cos(rot) -sin(rot)|
C	|                   |   |      |   |                   |
C	|-sin(rot) +cos(rot)|   |0    1|   |+sin(rot) +cos(rot)|
C
C don't work out transformation if nothing changed
	IF (TRIANG.EQ.ANGLE.AND.SRISFAC.EQ.FACTOR) GOTO 10
	ANGLE = TRIANG
	FACTOR = SRISFAC
	IF (TRIANG.EQ.0.0) THEN
	   A1 = FACTOR
	   A2 = 0.0
	   B1 = 0.0
	   B2 = 1.0
	ELSE
	   COSANG = COS(TRIANG)
	   SINANG = SIN(TRIANG)
	   COS2ANG = COSANG*COSANG
	   SIN2ANG = SINANG*SINANG
	   COSINANG = COSANG*SINANG
C
	   A1 = COS2ANG*FACTOR + SIN2ANG
	   A2 = COSINANG*(FACTOR-1.0)
	   B1 = COSINANG*(FACTOR-1.0)
	   B2 = COS2ANG + SIN2ANG*FACTOR
	ENDIF
C
C now do transformation
C
10	CONTINUE
	DO 20, I=1,NCOORD
	   XCOORD(I) = XCOORD(I) - TRIPOSX	! get relative
	   YCOORD(I) = YCOORD(I) - TRIPOSY	! coordinates
C
	   XX        = A1*XCOORD(I) + A2*YCOORD(I)
	   YCOORD(I) = B1*XCOORD(I) + B2*YCOORD(I)
C
	   XCOORD(I) = XX + TRIPOSX		! back to world
	   YCOORD(I) = YCOORD(I) +TRIPOSY	! coordinates
20	CONTINUE
C
	RETURN
	END
