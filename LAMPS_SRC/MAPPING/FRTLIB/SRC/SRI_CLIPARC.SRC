C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-26 17:29:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SRI_CLIPARC(
     &		XCENTRE,YCENTRE,RADIUS,STAANG,TOTANG,
     &		NPOL,POLXY,PX,PY,INTANG)
C
***	MODULE	SRI_CLIPARC
***	IDENT	26OC94
C
C	Copyright (C) 1987, Laser-Scan Laboratories Ltd.,
C	Cambridge, England
C
C	Created					RWR	 4-Oct-1988
C
C Subroutine to clip an arc to a polygon. The results are output
C by calls to SRIGDP
C
C the polygon (POLXY) must be closed - ie first point = last point
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FFABUF/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
C
C Arguments:
	REAL XCENTRE,YCENTRE	! coords of centre pt of arc/circle.
	REAL RADIUS		! radius (from 1st pt to centre).
	REAL STAANG		! initial angle (ac'wise from east).
	REAL TOTANG		! total angle of arc/circle.
	INTEGER	NPOL		! number of points in polygon
	REAL	POLXY(2,NPOL)	! points is polygon; point 1 = point NPOL
	REAL	PX(2),PY(2)	! bounding box of arc/circle
	REAL	INTANG(4*FFASCT) ! the intersection angles
C
C Local workspace:
	REAL	TWOPI,PIBY2
	PARAMETER	(TWOPI=6.283185307)
	PARAMETER	(PIBY2=TWOPI/4.0)
	REAL	PXY(2)
	INTEGER	NINTER			! number of intersections
C
	REAL	V1(2),V2(2),LV1
	LOGICAL	OK(2)
	REAL	DL,D,D1,THETA,DELTA,ANG(2),DIR,A,T
	LOGICAL	FULL
	INTEGER	STACK(20)	! for sorting - this is far too big!!
	LOGICAL	INSIDE
	INTEGER	I,J
C
C functions
	INTEGER	PNTPOL
C
	EXTERNAL CF_CLIPARC
	EXTERNAL SWAP_CLIPARC
C
C ......................................................................
C
	IF (RADIUS.EQ.0.0) GOTO 900	! avoid any problem later
C
C does the bounding box of the arc intersect that of the polygon -
C if not do nothing
	IF (PX(2).LE.FILLCLIP_XMIN.OR.
     &	    PX(1).GE.FILLCLIP_XMAX.OR.
     &	    PY(2).LE.FILLCLIP_YMIN.OR.
     &	    PY(1).GE.FILLCLIP_YMAX) GOTO 900
C
C does arc start inside or outside polygon?
	PXY(1) = XCENTRE + RADIUS*COS(STAANG)
	PXY(2) = YCENTRE + RADIUS*SIN(STAANG)
	I = PNTPOL(PXY,POLXY,NPOL)
C
C if point lies on polygon, then we have a problem - so don't output
C anything. This is only a valid approach because of the way this routine
C is being used in FRTLIB; here it is most unlikely that a point will
C lie on the polygon
	IF (I.EQ.0) GOTO 900
	INSIDE = I.EQ.1
	FULL = ABS(ABS(TOTANG)-TWOPI).LT.1E-5
	NINTER = 0
C 
C look at each vector in the polygon in turn
	DO 500 I = 1,NPOL-1
C
C does this segment cut the arc; if so where?
C it cannot cut the arc if it lies outside its limits
C
	   IF (MAX(POLXY(1,I),POLXY(1,I+1)).LT.PX(1).OR.
     &	       MIN(POLXY(1,I),POLXY(1,I+1)).GT.PX(2).OR.
     &	       MAX(POLXY(2,I),POLXY(2,I+1)).LT.PY(1).OR.
     &	       MIN(POLXY(2,I),POLXY(2,I+1)).GT.PY(2)) GOTO 500
C
C V1 is vector from first point to second
C V2 is vector from first point to centre of arc
	   V1(1) = POLXY(1,I+1) - POLXY(1,I)
	   V1(2) = POLXY(2,I+1) - POLXY(2,I)
	   LV1 = SQRT(V1(1)**2+V1(2)**2)
	   IF (LV1.EQ.0.0) GOTO 500
	   V2(1) = XCENTRE - POLXY(1,I)
	   V2(2) = YCENTRE - POLXY(2,I)
C
C minimum distance of line to centre
	   DL = (V1(1)*V2(2)-V1(2)*V2(1))/LV1
C
	   IF (ABS(DL).GE.RADIUS) GOTO 500	! doesn't intersect
C
C distance along line of perp from centre
	   D = (V1(1)*V2(1)+V1(2)*V2(2))/LV1
C
C angle either side of this of two intersection points (0-180)
	   DELTA = ACOS(DL/RADIUS)
C
C distance either side of this of two intersection points
	   D1 = RADIUS*SIN(DELTA)
C
C are the points within the line
	   OK(1) = (D+D1).GT.0.0.AND.(D+D1).LT.LV1
	   OK(2) = (D-D1).GT.0.0.AND.(D-D1).LT.LV1
	   IF (.NOT.(OK(1).OR.OK(2))) GOTO 500
C
	   IF (TOTANG.GE.0.0) THEN
	      DIR = 1.0
	   ELSE
	      DIR = -1.0
	   ENDIF
C
C angle of line from centre to closest point (-180 to +180)
	   THETA = ATAN2(-V1(1),V1(2))
C
	   ANG(1) = (THETA+DELTA-STAANG)*DIR
	   ANG(2) = (THETA-DELTA-STAANG)*DIR
C
C are the points within the arc
	   DO 50 J=1,2
	      IF (.NOT.OK(J)) GOTO 10
10	      IF (ANG(J).LT.0.0) THEN
	         ANG(J) = ANG(J)+TWOPI
	         GOTO 10
	      ENDIF
20	      IF (ANG(J).GE.TWOPI) THEN
	         ANG(J) = ANG(J)-TWOPI
	         GOTO 20
	      ENDIF
	      IF (.NOT.FULL.AND.ANG(J).GE.ABS(TOTANG)) GOTO 50
	      NINTER = NINTER+1
	      IF (NINTER.GE.4*FFASCT) GOTO 900
	      INTANG(NINTER) = ANG(J)
50	   CONTINUE
C
500	CONTINUE
C
C sort the angles of intersection
C
	IF (NINTER.EQ.0) GOTO 800	! unclipped
	IF (NINTER.GT.1) CALL QUICK_SORT(
     &		INTANG,NINTER,CF_CLIPARC,SWAP_CLIPARC,STACK)
C
C output the clipped sections
	IF (INSIDE) THEN
C
C begin inside polygon
	   IF (FULL) THEN
C
C for a full circle, then avoid a break at the start point by beginning
C at the next point where circle enters poly. Add first exit point to the
C end of the list - drawing will finish here
	      IF (NINTER.LT.2.OR.NINTER.GE.4*FFASCT) GOTO 900
	      A = STAANG+INTANG(2)*DIR
	      NINTER = NINTER+1
	      INTANG(NINTER) = INTANG(1)+TWOPI
	      I = 3
	   ELSE
	      A = STAANG
	      I = 1
	   ENDIF
	ELSE
	   A = STAANG+INTANG(1)*DIR
	   I = 2
	   INSIDE = .TRUE.
	ENDIF
C
600	IF (I.LE.NINTER) THEN
	   IF (INSIDE) THEN
	      T = STAANG+INTANG(I)*DIR-A
	      CALL SRI_CIRC(XCENTRE,YCENTRE,RADIUS,A,T,
     &			%VAL(SRIVEC(XSRIGDP)))
	      INSIDE = .FALSE.
	   ELSE
	      A = STAANG+INTANG(I)*DIR
	      INSIDE = .TRUE.
	   ENDIF
	   I = I+1
	   GOTO 600
	ENDIF
C
C run out of intersections
	IF (INSIDE) THEN
	   T = STAANG+TOTANG-A
	   CALL SRI_CIRC(XCENTRE,YCENTRE,RADIUS,A,T,
     &			%VAL(SRIVEC(XSRIGDP)))
	ENDIF
	GOTO 900
C
C output unclipped circle
800	IF (INSIDE) CALL SRI_CIRC(XCENTRE,YCENTRE,RADIUS,STAANG,TOTANG,
     &			%VAL(SRIVEC(XSRIGDP)))
C
900	RETURN
	END
