C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-08-10 13:45:08.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FILL_CLIP( NUMPTS, PTS, HATCH, SC, SPACE, ANG)
C
***	MODULE	FILL_CLIP
***	IDENT	10AU94
C
	IMPLICIT NONE
C
C Copyright Laser-Scan Laboratories Ltd, Cambridge, England
C
C Created by RW Russell, 5-Oct-1988
C
C This routine is intended to hatch a polygon feature, which it does
C by drawing patterened lines across its maximum extent. These lines
C are clipped by the output routines (SRI_LINE and SRI_AREA)
C
C The polygon is passed in the common block FFABUF
C
C *********************************************************************
C
C parameters
C
	PARAMETER	 X = 1		! X coordinate index
	PARAMETER	 Y = 2		! Y coordinate index
C
C arguments
C
	INTEGER		NUMPTS
	REAL		PTS(2,NUMPTS)
	LOGICAL		HATCH
	INTEGER		SC
	REAL		SPACE
	REAL		ANG
C
C NUMPTS  is the number of points in PTS, and is used to determine the
C	  size of SIDES and SIDPTR
C
C PTS	  is the array of points defining this feature
C	  - the last and first points are assumed to be equal
C	    (ie the polygon is assumed closed)
C
C HATCH   is the type of fill to do
C
C		1 => horizontal lines		----
C		2 => vertical lines		||||
C		3 =>  45 degrees		////
C		4 => -45 degrees		\\\\
C		5 => crosshatch vertical	++++
C		6 => crosshatch 45 degrees	xxxx
C
C SC is the line pattern number 
C
C SPACE  is the gap between adjacent lines
C
C ANG is the angle to the horizontal of the hatching
C
C functions called
C
	LOGICAL		PATSET		! sets up line pattern defn.
C
C *********************************************************************
C
C workspace:
C
	INTEGER	NSIDES		! the number of sides in the polygon
C
C the limits of the rotated feature
	REAL	UMIN,UMAX	! horizontal range of points in feature
	REAL	VMIN,VMAX	! vertical range of points in feature
C
	REAL	VSLICE		! current raster line
	REAL	VTEMP(2)	! copies of VSLICE 
	REAL	UTEMP(2)	! ends of VSLICE	
C
	LOGICAL		HORIZ	! fill to be horizontal/vertical
	LOGICAL		ROTATE	! should the polygon be rotated
	REAL		ROTANG	! rotation angle
	INTEGER		LHATCH	! local copy of HATCH
	INTEGER		I,J,K	! DO loop variables
C
C
	INTEGER		 U, V	! shield  X and  Y from us
C
***	COMMON/LSL$CMNFRT:FFABUF/
***	COMMON/LSL$CMNFRT:PATDEF/
C
C *********************************************************************
C
C make output routines clip any output to the polygon
	FILLCLIP_ON = .TRUE.
C
C check our arguments
C
	IF (	NUMPTS.LT.4	.OR.		! less than a triangle
     &		HATCH.LT.1	.OR.
     &		HATCH.GT.6	.OR.
     &		SPACE.LE.0.0			! no line separation
     &	   ) THEN
	   CALL FRTWRT('FILL_CLIP - Bad argument list')
	   GOTO 9999			! just give up
	ENDIF
C
C now, check what sort of hatching is required
C
	IF (HATCH.LT.5) THEN
	   LHATCH = HATCH		! in one direction only
	ELSEIF (HATCH.EQ.5) THEN
	   LHATCH = 1			! fill horizontal first
	ELSE
	   LHATCH = 3			! fill +45 degrees first
	ENDIF
C
C and thus deduce what we need to do...
C for horizontal/vertical fill, we don't need to rotate the
C polygon. If we are doing 45 degree fill, then we rotate the
C polygon, and choose which direction to fill it in.
C
	ROTANG = 0.0
	IF ( LHATCH.EQ.1 ) THEN
	   HORIZ  = .TRUE.
	   ROTATE = .FALSE.
	ELSEIF ( LHATCH.EQ.2 ) THEN
	   HORIZ  = .FALSE.
	   ROTATE = .FALSE.
	ELSEIF ( LHATCH.EQ.3 ) THEN
	   HORIZ  = .FALSE.
	   ROTATE = .TRUE.
	ELSEIF ( LHATCH.EQ.4 ) THEN
	   HORIZ  = .TRUE.
	   ROTATE = .TRUE.
	ENDIF
	IF (ROTATE) ROTANG = 3.14159265/4.0	! 45 deg.
C
C we might want to rotate anyway, if whole plot is rotated
C
	IF (ANG.NE.0) THEN
	   ROTATE = .TRUE.
	   ROTANG = ROTANG-ANG
	ENDIF
C
C initialise the suppress line pattern flag
C
	SUPCPT = .FALSE.
C
C *********************************************************************
C
C decide on which way round we see our data
C
10	CONTINUE
C
	IF ( HORIZ ) THEN
	   U  = X			! horizontal fill
	   V  = Y
	ELSE
	   U  = Y			! vertical fill
	   V  = X
	ENDIF
C
C *********************************************************************
C
C horizontal or vertical fill - we must determine the range
C use UTEMP as temporary variable
C
	UTEMP(X) = PTS(X,1)
	UTEMP(Y) = PTS(Y,1)
	IF ( ROTATE ) THEN
	   CALL FILL_ROTATE( ROTANG, UTEMP(X), UTEMP(Y) )
	ENDIF
C
	UMIN = UTEMP(U)
	UMAX = UTEMP(U)
C
	VMIN = UTEMP(V)
	VMAX = UTEMP(V)
C
C only need to get real limits if polygon is going to be rotated
	IF (ROTATE) THEN
	   FILLCLIP_XMIN = PTS(X,1)
	   FILLCLIP_XMAX = FILLCLIP_XMIN
	   FILLCLIP_YMIN = PTS(Y,1)
	   FILLCLIP_YMAX = FILLCLIP_YMIN
	ENDIF
C
C get limits between which our points range
C
	DO 25 I = 2, NUMPTS
	   UTEMP(X) = PTS(X,I)
	   UTEMP(Y) = PTS(Y,I)
	   IF ( ROTATE ) THEN
	      CALL FILL_ROTATE( ROTANG, UTEMP(X), UTEMP(Y) )
	   ENDIF
C
C rotated points
	   UMIN = MIN(UMIN,UTEMP(U))
	   UMAX = MAX(UMAX,UTEMP(U))
	   VMIN = MIN(VMIN,UTEMP(V))
	   VMAX = MAX(VMAX,UTEMP(V))
C
C unrotated points
	   IF (ROTATE) THEN
	      FILLCLIP_XMIN = MIN(FILLCLIP_XMIN,PTS(X,I))
	      FILLCLIP_XMAX = MAX(FILLCLIP_XMAX,PTS(X,I))
	      FILLCLIP_YMIN = MIN(FILLCLIP_YMIN,PTS(Y,I))
	      FILLCLIP_YMAX = MAX(FILLCLIP_YMAX,PTS(Y,I))
	   ENDIF
25	CONTINUE
C
C for unrotated points, actual limits of poygon are the same
	IF (.NOT.ROTATE) THEN
	   IF (HORIZ) THEN
	      FILLCLIP_XMIN = UMIN
	      FILLCLIP_XMAX = UMAX
	      FILLCLIP_YMIN = VMIN
	      FILLCLIP_YMAX = VMAX
	   ELSE
	      FILLCLIP_XMIN = VMIN
	      FILLCLIP_XMAX = VMAX
	      FILLCLIP_YMIN = UMIN
	      FILLCLIP_YMAX = UMAX
	   ENDIF
	ENDIF
C
C extend limits by factor of scan width
	FILLCLIP_XMIN = FILLCLIP_XMIN - 1.5*SPACE
	FILLCLIP_XMAX = FILLCLIP_XMAX + 1.5*SPACE
	FILLCLIP_YMIN = FILLCLIP_YMIN - 1.5*SPACE
	FILLCLIP_YMAX = FILLCLIP_YMAX + 1.5*SPACE
C
C set area to 0.0; The area will be calculated if neccessay by CLIPGFA
	FILLCLIP_AREA = 0.0
C
C if extent is zero, then give up
	IF (VMAX.EQ.VMIN) GOTO 9999
C
C start raster scan at 'top' of feature
C if the extent is less than one hatch spacing, then do solitary hatch
C half way between min and max (ensures that something is drawn)
C
C (in fact start outside limits)
C
	IF (VMAX-VMIN.LT.SPACE) THEN
	   VSLICE = (VMAX+VMIN)/2 + SPACE
	ELSE
	   VSLICE = VMAX-SPACE/2  + SPACE ! half line thickness above top
	ENDIF
C
C *********************************************************************
C
C draw "slices" over maximum U extent
100	CONTINUE
C
C extend area by one hatch in U direction (should perhaps use pattern
C size)
	UTEMP(1) = UMIN - SPACE
	UTEMP(2) = UMAX + SPACE
C
C and now draw the slice - first set up the 'other'
C coordinate we shall use...
	VTEMP(1) = VSLICE
	VTEMP(2) = VSLICE
C
C set up the line pattern
C
	IF (.NOT. SUPCPT) THEN
	   IF (PATSET(SC)) GOTO 9999
	ENDIF
C
C ensure the line is not scaled
	PATSCL = .FALSE.
	DRALIN = .FALSE.
C
C transform back if required
C
	IF ( ROTATE ) THEN
	   DO 135 I = 1,2
	      IF (HORIZ) THEN
	         CALL FILL_ROTATE(-ROTANG,UTEMP(I),VTEMP(I))
	      ELSE
	         CALL FILL_ROTATE(-ROTANG,VTEMP(I),UTEMP(I))
	      ENDIF
135	   CONTINUE
	ENDIF
C
C and do the actual drawing
	IF (HORIZ) THEN
	   CALL PATGPL( 2, UTEMP, VTEMP )
	ELSE
	   CALL PATGPL( 2, VTEMP, UTEMP )
	ENDIF
C
C if we haven't yet reached the end, then go back for another scan
	VSLICE = VSLICE - SPACE
	IF (VSLICE.GE.(VMIN-SPACE)) GOTO 100
C
C and we finally reach here when we have scanned the whole feature
C - do we need to scan it again?
C
	IF (LHATCH.NE.HATCH) THEN
	   IF (LHATCH.EQ.1.OR.LHATCH.EQ.3) THEN
	      LHATCH = LHATCH+1		! 'next' sort of hatch
	      HORIZ  = .NOT.HORIZ	! fill it crosswise
	      GOTO 10
	   ENDIF
	ENDIF
C
C reset the relevant things for normal pattern line drawing
	DEFOFF = SAVOFF
	PATSCL = SAVSCL
	DRALIN = .TRUE.
C
9999	FILLCLIP_ON = .FALSE.
	RETURN
	END
