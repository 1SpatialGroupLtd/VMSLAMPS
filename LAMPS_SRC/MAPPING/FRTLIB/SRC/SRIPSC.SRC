C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-27 10:49:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SRIPSC(NCOORD,COORDS,SCCODE,OX,OY,SIZE,ANGLE,
     &				SRIGSL,SRIGSA,SRIGSP)
C
***	MODULE	SRIPSC
***	IDENT	27OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C SRI - plot symbol component
C
C returns FALSE if it succeeds in plotting the given symbol component
C at position OX,OY, of size SIZE, and at angle ANGLE
C 
C
	IMPLICIT NONE
C
	PARAMETER	PSCMAX=1000
C
C args
C
	INTEGER		NCOORD		! number of coords
	REAL		COORDS(2,NCOORD) ! coordinate buffer
	INTEGER*2	SCCODE		! symbol component code
	REAL		OX,OY		! position
	REAL		SIZE		! size
	REAL		ANGLE		! angle in radians
	REAL		TMPX
	EXTERNAL	SRIGSL,SRIGSA,SRIGSP
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTSCT/
***	COMMON/LSL$CMNFRT:FRTSRI/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
***	COMMON/LSL$CMNFRT:TRIEXT/
C
C functions called
C
	LOGICAL		SCTFND		! find component in SCT
	LOGICAL		SRICIR		! draw a circle
C
C w/s
	INTEGER*4	I		! loop count
	INTEGER*4	NPT		! our copy of point count
	REAL		PSCX(PSCMAX)	! transformed positions
	REAL		PSCY(PSCMAX)
	REAL		PSCZ(PSCMAX)
	REAL		SINA,COSA	! angle multipliers
	REAL		OURWID		! our copy of width
	INTEGER		OURCOL		! our copy of colour
	INTEGER		OURHWL		! our copy of line type
	INTEGER		OURHW		! our copy of hardware tool
	REAL		OURHAT(2)	! our copy of hatching
	LOGICAL		ISCIRC		! is it a circle arc ?
C
C init things
C
	NPT    = NCOORD			! our own copy
	SRIPSC = .FALSE.		! assume will succeed
C
C find the attributes of the component
C
	IF (SCTFND(SCCODE)) THEN
	  CALL FRTWRT('Unknown symbol component %^W%N - assumed linear',
     *          SCCODE)
	   SCTCC = -1			! invalidate
	   SCTGT = LINTYP
	   SCTSC = 0
	   SCTWID = 0
	   SCTFLG = -1			! use line type from FRT entry
	   SCTHW  = -1			! use slug from FRT entry
	   SRIPSC = .TRUE.		! failed
	ENDIF
C
C check that it is a valid component
C - illegal types are symbol and text
C
	IF (SCTGT.GE.UNOTYP.AND.SCTGT.NE.ARETYP) THEN
	   CALL FRTWRT(
     *     'Symbol component %^W%N has bad type %^L%N - assumed linear',
     *          SCCODE,SCTGT)
	   SCTCC = -1			! invalidate
	   SCTGT = LINTYP
	   SCTSC = 0
	   SCTWID = 0
	   SRIPSC = .TRUE.		! failed
	ENDIF
C
C throw out patterned lines
C
	IF (SCTGT.NE.ARETYP.AND.SCTSC.NE.0) THEN
	   CALL FRTWRT('Symbol component %^W%N. Line pattern ignored',
     *          SCCODE)
	   SCTCC = -1			! invalidate
	   SCTSC = 0
	   SRIPSC = .TRUE.		! failed
	ENDIF
C
C check number of coords
C
	IF (NCOORD.LE.1.AND.SCTGT.NE.ARETYP) THEN
	   CALL FRTWRT('Symbol component %^W%N has less than 2 points',
     *          SCCODE)
	   SRIPSC = .TRUE.		! failed
	   GOTO 999
	ENDIF
C
	IF (NCOORD.GT.PSCMAX) THEN
	   CALL FRTWRT('Symbol component %^W%N has too many points'
     &	    ,SCCODE)
	   NPT = PSCMAX
	   SRIPSC = .TRUE.		! failed
	ENDIF
C
	ISCIRC = (SCTGT.GE.CLOTYP).AND.(SCTGT.LE.FULTYP)
	IF (ISCIRC.AND.NCOORD.NE.3) THEN
	   CALL FRTWRT('Symbol component %^W%N. Bad circle arc',SCCODE)
	   SRIPSC = .TRUE.		! failed
	   IF (NCOORD.LT.3) GOTO 999	! fatal if not enough coords
	   NPT = 3			! otherwise just use enough
	ENDIF
C
C apply scale, rotation and offset
C
	SINA = SIN(ANGLE)
	COSA = COS(ANGLE)
	DO 30 I=1,NPT
	   PSCX(I) = OX + (COORDS(1,I)*COSA - COORDS(2,I)*SINA)*SIZE
	   PSCY(I) = OY + (COORDS(1,I)*SINA + COORDS(2,I)*COSA)*SIZE
	   PSCZ(I) = SRI_Z
30	CONTINUE
C
C set up colour and hardware to be used for drawing
C
C the line type (solid, dashed etc) and the h/w tool to draw it with
C are taken from the SCT entry, unless there was none, when the entry
C from the FRT is taken (if no entry in FRT, 0 is used - see FRTINI)
C
	IF (SCTFLG.GE.0) THEN		! valid entry
	   OURHWL = SCTHWL
	ELSE
	   OURHWL = FRTHWL
	ENDIF
C
C compare with number of available line types (if SRIHWL=0, then SRIGSL
C below will use type 1)
	OURHWL = MIN(OURHWL,SRIHWL)
C
	IF (SCTHW.GE.0) THEN
	   OURHW = SCTHW
	ELSE
	   OURHW = FRTHW
	ENDIF
C
C and set them
C
	CALL SRIGSL(OURHWL,OURHW+1,0.0)	! angle of tool set to 0.0
C
C the colour is taken from SRISYC if the user passed an overriding value
C >=0, otherwise SCTCOL if >0, otherwise FRTCOL
C
	IF (SRISYC.GE.0) THEN
	   OURCOL = SRISYC
	ELSEIF (SCTCOL.GT.0) THEN
	   OURCOL = SCTCOL
	ELSE
	   OURCOL = MAX(FRTCOL,1)
	ENDIF
C
	IF (SCTGT.EQ.ARETYP) THEN
C
C for a fill area type, we must set the interior style, style index,
C colour and hatching characteristics.
C For the hatching use the values from the SCT entry, if non-zero,
C otherwise use the defaults that we entered TRI/SRIPLT with
C
	   IF (FRTHKS) OURHAT(1) = SRIWID*SRISCL*PLTSCL/1000.0
	   IF (SCTWID.EQ.0.0.AND.SCTSIZ.EQ.0.0) THEN ! use default values
	      IF (.NOT.FRTHKS) OURHAT(1) = SRIHAT(1)
	      OURHAT(2) = SRIHAT(2)
	   ELSE
C
C take sizes from FRT (mm on map sheet), convert to world units (*SRISCL)
C and then to plotter mm (*PLTSCL) and finally to plotter metres (/1000)
C
	      IF (.NOT.FRTHKS) OURHAT(1) = SCTWID*SRISCL*PLTSCL/1000.0
	      OURHAT(2) = SCTSIZ*SRISCL*PLTSCL/1000.0
	   ENDIF
	   CALL SRIGSA(SCTAST,SCTAIX,OURCOL,OURHAT)
	ELSE
C
C for a line type, we must set the line thickness and colour
C
	   IF (FRTHKS) THEN
	      OURWID = 0.0		! thick lines suppressed
	   ELSEIF (SCTWID.GT.0.0) THEN
	      OURWID = SCTWID 		! overriding width from SCT
	   ELSE
	      OURWID = FRTWID		! assume width from FRT
	   ENDIF
	   CALL SRIGSP(OURWID/SRIWID,OURCOL)
	ENDIF
C
C plot the coords
C
	IF (ISCIRC) THEN		! circle arcs
C
	   IF (SRICIR(PSCX,PSCY,SCTGT)) THEN
	      CALL FRTWRT('Symbol component %^W%N. Bad circle arc'
     &	,SCCODE)
	      SCTGT = LINTYP		! force linear
	      SRIPSC = .TRUE.		! failed
	   ENDIF
C
	ELSEIF (SCTGT.EQ.CURTYP) THEN	! curved lines
C
	   CALL SRICUR(PSCX,PSCY,PSCZ,NPT)
C
	ELSEIF (SCTGT.EQ.ARETYP) THEN	! fill area
	   IF (FRTTEX.AND.FRTSC.LT.0) CALL TRI_ITALIC(NPT,PSCX,PSCY)
	   IF (SRISTR.AND.SRISFAC.NE.1.0)CALL SRI_STRETCH(NPT,PSCX,PSCY)
	   CALL SRI_AREA(NPT,PSCX,PSCY,PSCZ,%VAL(SRIVEC(XSRI_BEGIN_AREA)),
     &			%VAL(SRIVEC(XSRIGFA)))
C
	ELSE				! must be an ordinary line then
	   IF (FRTTEX.AND.FRTSC.LT.0) CALL TRI_ITALIC(NPT,PSCX,PSCY)
	   IF (SRISTR.AND.SRISFAC.NE.1.0)CALL SRI_STRETCH(NPT,PSCX,PSCY)
	   CALL SRI_LINE(NPT,PSCX,PSCY,PSCZ,%VAL(SRIVEC(XSRIGPL)))
C
	ENDIF
C
999	RETURN
	END
