C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-02-13 17:40:08.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FRT_ACDINI
C
***	MODULE	FRT_ACDINI
***	IDENT	13FE91
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Ron Russell
C
C Created					RWR	 7-Oct-1987
C
C initialises AC definitions (LSL standard ones) table
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/LSL$CMNLSL:TBLFLG/
C
***	COMMON/LSL$CMNFRT:FRTACD_PRIVATE/
C
	EXTERNAL	FRT_CMD_TABLE		! command table
C
C functions
	LOGICAL		RDCOMM
	LOGICAL 	FRTRAC
	INTEGER		LIB$GET_VM
	INTEGER		FRT_GET_MAX
C
C w/s
	INTEGER		I		! loop counter
	INTEGER		RET
	INTEGER		ACDNUM,ACDLEN
	INTEGER*4	ADDR
C
	FRT_ACDINI = .TRUE.		! assume failure
C
	CALL FRT_FREEACD(%VAL(ACD_LOC))	! free memory
C
C obtain details of default ACDs from IFFLIB (address, length, number)
	CALL IFF_GETACD(ADDR,ACDLEN,ACDNUM)
C
C initialise things
	ACDBASE = 0
C
C Try for logical name LSL$FRT_ACDMAX to get maximum number of ACDs
C By default, allow for ACD_USER ACDs in addition to the default ones
	ACDMAX = ACDNUM+FRT_GET_MAX('LSL$FRT_ACDMAX',ACD_USER,0,32767)
C
C get memory for ACDs
	I = LIB$GET_VM((ACDMAX*2+16)*4,ACDCMT)		! command table
	IF (I) I = LIB$GET_VM(ACDMAX*12,ACDNAM_LOC)	! name table
	IF (I) I = LIB$GET_VM(ACDMAX*ACDSIZ,ACD_LOC)	! main structure
	IF (.NOT.I) THEN
	   CALL LIB$FREE_VM((ACDMAX*2+16)*4,ACDCMT)
	   CALL LIB$FREE_VM(ACDMAX*12,ACDNAM_LOC)
	   CALL LIB$FREE_VM(ACDMAX*ACDSIZ,ACD_LOC)
	   CALL FRTWRT('Cannot allocate memory for ACD')
	   CALL LSL_PUTMSG(I)
	   ACDMAX = 0
	   GOTO 999
	ENDIF
C
	CALL INITAB(%VAL(ACDCMT),ACDMAX*2+16,%VAL(ACDNAM_LOC),ACDMAX*12)
	CALL SAVTAB(ACDSAV)
C
C Set the 'exact match' command table flag
C (We actually set the bit in the 'save' array, since the actual table
C is reset from here when we next SELTAB and ADDNAM)
	ACDSAV(16) = ACDSAV(16).OR.CMT$M_EXACT	! exact match
C
C now add the data from the data statements
C
	CALL SELTAB(ACDSAV)
C
	DO 100 I=1,ACDNUM
	   CALL SETAUX(%VAL(ADDR),ACDLEN)
	   RET = RDCOMM(FRT_CMD_TABLE)		! had better not fail!
	   IF (RET.LE.0) GOTO 100
C
C read and process the rest of the line - note: no error checking is
C done as the data must be right!
C
	   IF (FRTRAC(.TRUE.,%VAL(ACD_LOC))) THEN
	      CALL FRTWRT(
     &			'In line %N of LSL specific ACD definitions',I)
	      CALL FRTWRT('Please inform Laser-Scan')
	   ENDIF
C	      
	   ADDR = ADDR+ACDLEN
100	CONTINUE
C
C Clear the 'exact match' command table flag
	CALL SAVTAB(ACDSAV)		! save table
C
C make the command table "no exact match" by clearing the bit
C in the command table header
C
	CALL LIB$INSV(0,CMT$V_EXACT+16,1,%VAL(ACDCMT))
C
C and the saved array
C (We set the bit in the 'save' array, since the actual table
C is reset from here when we next SELTAB and ADDNAM)
	ACDSAV(16) = ACDSAV(16).AND..NOT.CMT$M_EXACT
C
C now looking at TABLE 1
	ACDBASE = 1
	ACD_HAD_TABLE = .FALSE.
	FRT_ACDINI = .FALSE.		! success
C
999	RETURN
	END
