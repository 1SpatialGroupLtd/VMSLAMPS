	SUBROUTINE SRIPOL(X,Y)
C
***	MODULE	SRIPOL
***	IDENT	20JL84
C
C Copyright Laser Scan Laboratories Ltd, Cambridge, England.
C Author Paul Hardy
C
C Adapted for SRI symbol plotting.		PGH	23-Sep-1983
C Adapted for FPP (ie made GKS compatible).	RD	 7-Sep-1983
C Upgraded to clip.					16-Aug-1978
C Upgraded not to buffer.				 2-Aug-1978
C Rewritten for SOLADI.				PGH	 7-Sep-1976
C Created.					PGH	   May-1976
C
C AKIMA interpolation routine. Based on algorithm in CACM (433)
C You may think this program is inscrutable. Before you complain,
C try a look at the original in CACM.
C The routine interpolates SRIAKT points/mm on the enlarged plot.
C Input consists of 6 'master' points, the 3rd and 4th of which
C are the ones being interpolated between. The other points are
C used to work out the angle which the interpolated line should
C pass through the 3rd and 4th points at.
C The start of the line (3rd master pt) is not output but the end
C of the line (4th master pt) is output.
C
	IMPLICIT NONE
C
	REAL X(6),Y(6)		! X,Y hold the master points.
C
***	COMMON/LSL$CMNFRT:SRISCL/
C
C W/s.
	REAL LENGTH		! length of segment.
	INTEGER*2 INTERP	! number of points to be generated.
	REAL	X0,X1,X2,X3,X4,X5,Y0,Y1,Y2,Y3,Y4,Y5
	REAL	W1,W2,W3,P0,P1,P2,P3,A1,A2,A3,A4,B1,B2,B3,B4
	REAL	SIN2,SIN3,COS2,COS3,Q0,Q1,Q2,Q3
	REAL	DZ,SW,R,Z,U,V,T2
	INTEGER	I,J
C
	EQUIVALENCE (X2,P0),(Y2,Q0),(T2,Q1)
	EQUIVALENCE (W2,Q2),(W3,Q3),(A1,P2),(B1,P3)
	EQUIVALENCE (A2,DZ),(SW,R,Z)
C
C
C Evaluate number of points to interpolate (this is a crude,
C linear, approximation: we would do better to approximate after
C finding a bit out about the curvature of this segment).
	LENGTH=SQRT((X(4)-X(3))**2+(Y(4)-Y(3))**2) ! segment length.	
	INTERP=IFIX(SRIAKT*LENGTH)	! number of points required.
	IF (INTERP.EQ.0) GOTO 80	! is straight line adequate?
C
C Main DO loop.
C
	DO 70 I = 1,2
C Calculate slopes at first end of span.
	   IF (I.GT.1) GOTO 20
	   X3 = X(3)
	   Y3 = Y(3)
	   X4 = X(4)
	   Y4 = Y(4)
	   X5 = X(5)
	   Y5 = Y(5)
	   A3 = X4 - X3
	   B3 = Y4 - Y3
	   A2 = X3 - X(2)
	   A1 = X(2) - X(1)
	   B2 = Y3 - Y(2)
	   B1 = Y(2) - Y(1)
	   A4 = X5 - X4
	   B4 = Y5 - Y4
	   GOTO 30
C Other end.
20	   X2 = X3
	   Y2 = Y3
	   X3 = X4
	   Y3 = Y4
	   X4 = X5
	   Y4 = Y5
	   X5 = X(6)
	   Y5 = Y(6)
	   A1 = A2
	   B1 = B2
	   A2 = A3
	   B2 = B3
	   A3 = A4
	   B3 = B4
	   A4 = X5 - X4
	   B4 = Y5 - Y4
C
C Numerical differentiation.
C
	   COS2 = COS3
	   SIN2 = SIN3
30	   W2 = ABS(A3*B4 - A4*B3)
	   W3 = ABS(A1*B2 - A2*B1)
	   IF (W2  +  W3.NE.0.0) GOTO 40
	   W2 = SQRT(A3*A3  +  B3*B3)
	   W3 = SQRT(A2*A2  +  B2*B2)
40	   COS3 = W2*A2  +  W3*A3
	   SIN3 = W2*B2  +  W3*B3
	   R = COS3*COS3  +  SIN3*SIN3
	   IF (R.EQ.0.0) GOTO 50
	   R = SQRT(R)
	   COS3 = COS3/R
	   SIN3 = SIN3/R
50	   IF (I.EQ.1) GOTO 70
C
C Determine the coefficients.
C
	   R = SQRT(A2*A2  +  B2*B2)
	   P1 = R*COS2
	   P2 = 3.0*A2 - R*(COS2  +  COS2  +  COS3)
	   P3 = A2 - P1 - P2
	   Q1 = R*SIN2
	   Q2 = 3.0*B2 - R*(SIN2  +  SIN2  +  SIN3)
	   Q3 = B2 - Q1 - Q2
C
C Compute the polynomials and draw.
C
	   Z = 0.0
	   DZ = 1.0/INTERP
	   DO 60 J = 1,INTERP-1
	      Z = Z  +  DZ
	      U = P0  +  Z*(P1  +  Z*(P2  +  Z*P3))
	      V = Q0  +  Z*(Q1  +  Z*(Q2  +  Z*Q3))
	      CALL SRIBFA(1,U,V)	! output new point.
60	   CONTINUE
70	CONTINUE
C Finish off by falling through to draw last point.
C
C
C Special case of straight line - interpolate zero points.
80	CALL SRIBFA(1,X(4),Y(4))	! output last point.
	RETURN
C
	END
