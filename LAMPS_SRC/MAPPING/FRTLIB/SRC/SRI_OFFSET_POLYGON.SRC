	SUBROUTINE SRI_OFFSET_POLYGON( MAXPOINTS, POINTS, NPOINTS, DIST )
C
***	IDENT	07DE94
***	MODULE	SRI_OFFSET_POLYGON
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author: Tim Mulcahy, 7-Dec-1994
C
C Create the polygon offset by a given distance from an input polygon.
C
C The input polygon is assumed to be anti-clockwise, and so a positive offset
C distance will result in an `outside' offset polygon. If the input polygon
C self-intersects then the offset polygon may be degenerate.
C
C Algorithm: Each point on the input polygon is processed as follows:
C            (1) fetch a triplet of consecutive points on the input polygon with
C                the current point as the middle point
C            (2) offset the pair of lines formed by the triplet of points
C            (3) compute the intersection point of the pair of offset lines
C            (4) write the intersection point back into the input polygon array.
C
C Notes: (i)  Since the input polygon is anti-clockwise, the offset distance
C             must be positive to produce an `outside' offset polygon. A zero
C             offset distance is permitted for the special cases where NPOINTS
C             is 1 or 2.
C
C        (ii) An additional output work array (for the offset polygon) is
C             avoided by overwriting input polygon array (step (4)).
C             Since a `triplet' of polygon points is required for each offset
C             point, care is necessary when overwriting polygon points!
C
C Error code: NPOINTS = -1
C
	IMPLICIT NONE
C
	INTEGER MAXPOINTS		! Max. size of offset polygon
	REAL POINTS(2,MAXPOINTS)        ! Input polygon/offset polygon
	INTEGER NPOINTS			! Actual size offset polygon
	REAL DIST                       ! Offset distance
C
	REAL XF, YF                     ! Saved coords of 1st point on polygon
	REAL X1, Y1, X2, Y2, X3, Y3     ! Next triplet of polygon points
	REAL SEG(2,2)                   ! Next `edge' of the polygon
	REAL LINE1(2,2), LINE2(2,2)     ! Next pair of offset lines
	REAL PT(2)                      ! Intesection point
	REAL DX, DY, DD
C
	INTEGER I
C
	LOGICAL SRI_OFFSEG, SRI_INTSCT
C
C Check consistency of INPUT parameters
C
	IF ( MAXPOINTS.LE.0 .OR.
     &       NPOINTS.LE.0 .OR.
     &       MAXPOINTS.LT.NPOINTS ) GOTO 900
C
C Dispose of the trivial cases (i.e NPOINTS = 1 or 2)
C
 10	IF ( NPOINTS.EQ.1 ) THEN
C
C Offset to a single point (i.e. generate a square)
C
	   IF ( MAXPOINTS.LT.4 ) GOTO 900
	   XF = POINTS(1,1)
	   YF = POINTS(2,1)
	   POINTS(1,1) = XF - DIST
	   POINTS(2,1) = YF - DIST
	   POINTS(1,2) = XF + DIST
	   POINTS(2,2) = YF - DIST
	   POINTS(1,3) = XF + DIST
	   POINTS(2,3) = YF + DIST
	   POINTS(1,4) = XF - DIST
	   POINTS(2,4) = YF + DIST
	   NPOINTS = 4
	   GOTO 999
C
	ELSEIF ( NPOINTS.EQ.2 ) THEN
C
C Offset to a single line (i.e. generate a rectangle)
C
	   IF ( MAXPOINTS.LT.4 ) GOTO 900
	   DX = POINTS(1,2) - POINTS(1,1)
	   DY = POINTS(2,2) - POINTS(2,1)
	   DD = SQRT( DX**2 + DX**2 )
	   IF ( DD.EQ.0.0 ) THEN
	      NPOINTS = 1
	      GOTO 10
	   ENDIF
	   DX = DIST*DX/DD               ! line end-point X-Y extensions
	   DY = DIST*DY/DD
	   SEG(1,1) = POINTS(1,1) - DX
	   SEG(2,1) = POINTS(2,1) - DY
	   SEG(1,2) = POINTS(1,2) + DX
	   SEG(2,2) = POINTS(2,2) + DY
	   IF ( SRI_OFFSEG(  DIST, SEG, LINE1 ) ) GOTO 900
	   IF ( SRI_OFFSEG( -DIST, SEG, LINE2 ) ) GOTO 900
	   POINTS(1,1) = LINE1(1,1)
	   POINTS(2,1) = LINE1(2,1)
	   POINTS(1,2) = LINE1(1,2)
	   POINTS(2,2) = LINE1(2,2)
	   POINTS(1,3) = LINE2(1,2)
	   POINTS(2,3) = LINE2(2,2)
	   POINTS(1,4) = LINE2(1,1)
	   POINTS(2,4) = LINE2(2,1)
	   NPOINTS = 4
	   GOTO 999
	ENDIF
C
C General case of a non-trivial polygon (i.e. NPOINTS > 2 )
C
C Check that the offset distance is non-zero.
C
	IF ( DIST.EQ.0.0 ) GOTO 999
C
C Save the 1st point on the polygon - it's used again for the last intersect
C
	XF = POINTS(1,1)
	YF = POINTS(2,1)
C
C Initialise the first two points of the first `triplet' (see (iii) above)
C
	X1 = POINTS(1,NPOINTS)
	Y1 = POINTS(2,NPOINTS)
	X2 = POINTS(1,1)
	Y2 = POINTS(2,1)
C
	DO 20 I = 1, NPOINTS
C
C Set the third point of next triplet
C
	   IF ( I.LT.NPOINTS ) THEN
	      X3 = POINTS(1,I+1)
	      Y3 = POINTS(2,I+1)
	   ELSE
	      X3 = XF
	      Y3 = YF
	   ENDIF
C
C Offset the first line
C
	   SEG(1,1) = X1
	   SEG(2,1) = Y1
	   SEG(1,2) = X2
	   SEG(2,2) = Y2
	   IF ( SRI_OFFSEG( DIST, SEG, LINE1 ) ) GOTO 900
C
C Offset the second line
C
	   SEG(1,1) = X2
	   SEG(2,1) = Y2
	   SEG(1,2) = X3
	   SEG(2,2) = Y3
	   IF ( SRI_OFFSEG( DIST, SEG, LINE2 ) ) GOTO 900
C
C Find the intersection point of the two offset lines
C
	   IF ( SRI_INTSCT( LINE1, LINE2, PT ) ) THEN
C
C   ...if the intersection does not exist, then add the midpoint of the offset
C   segment to the output array
C
	      SEG(1,1) = X1
	      SEG(2,1) = Y1
	      SEG(1,2) = X3
	      SEG(2,2) = Y3
	      IF ( SRI_OFFSEG( DIST, SEG, LINE1 ) ) GOTO 900
C
	      POINTS(1,I) = 0.5*( LINE1(1,1) + LINE1(1,2) )
	      POINTS(2,I) = 0.5*( LINE1(2,1) + LINE1(2,2) )
C
	   ELSE
C
C  ...otherwise the intersection exists, so add it to the output array
C
	      POINTS(1,I) = PT(1)
	      POINTS(2,I) = PT(2)
	   ENDIF
C
C Initialise the first two points of the next triplet
C
	   X1 = X2
	   Y1 = Y2
	   X2 = X3
	   Y2 = Y3
 20	CONTINUE
	GOTO 999
C
C Error condition:
C
 900	CONTINUE
	NPOINTS = -1
C
 999	RETURN
	END
