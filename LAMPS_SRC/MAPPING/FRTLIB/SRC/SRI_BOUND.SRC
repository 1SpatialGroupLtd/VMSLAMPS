	LOGICAL FUNCTION SRI_BOUND(SYMNO,NPTS,XY,BORDER,BOUND_TYPE)
C
***	MODULE	SRI_BOUND
***	IDENT	07DE94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt
C
C Created					CCB	3-Nov-1994
C
C returns FALSE if it succeeds in returning NPTS points in XY, the local
C coordinates of the bounding polygon of symbol SYMNO.
C The coordinates are with respect to the defining point of the symbol.
C
C Note: Processing the symbol bounds is done in 3 steps
C       1 - Initialisation
C       2 - Calculation of the bounding polygon
C       3 - Return of the bounding polygon coordinates
C
	IMPLICIT NONE
C
C args
C
	INTEGER		SYMNO		! the symbol number
	INTEGER*4	NPTS		! no. of coordinates
	REAL		XY(2,*)		! coordinates
	REAL		BORDER		! border as proportion of height
	INTEGER         BOUND_TYPE      ! type of bounding polygon
                                        ! BOUND_TYPE = 1 => scanned box
                                        !              2    extents box
                                        !              3    convex hull
C
C common
C
***	COMMON/LSL$CMNFRT:TRIEXT/	! for character extent
***	COMMON/HERE:FRTWORK/		! for complex hull
C
C functions called
C
	LOGICAL         SRISCN          ! scans a symbol
	LOGICAL		SRIPLT		! plots a symbol
	LOGICAL         HAVE_I_AN_ARG   ! checks for optional 5th argument
	INTEGER		LIB$GET_VM      ! allocate memory
	INTEGER		FRT_GET_MAX	! get value from logical name
C
C w/s
C
	REAL            XMIN            ! bounds of scanned sysmbol
	REAL            XMAX
	REAL            YMIN
	REAL            YMAX
C
	INTEGER		NHULLXY		! actual size of convex hull
	INTEGER         BTYPE
C
	SRI_BOUND = .TRUE.		! assume failure
C
C Initialise type of bounding box to convex hull (type = 3)
C
	BTYPE = 3
C
C Overwrite it (optionally) with supplied type
C
	IF ( HAVE_I_AN_ARG(5) ) BTYPE = BOUND_TYPE
C
C Check the validity of type - must be in range 1..3
C
	IF ( BTYPE.LT.1 .OR. BTYPE.GT.3 ) BTYPE = 3
C
C Step 1 - initialisation
C
	IF ( BTYPE.EQ.3 ) THEN
C
C ...convex hull, so check whether work array has already been allocated
C
	   IF ( MAXPOINTS.EQ.0 ) THEN
C
C     Use logical name LSL$FRT_MAX_HULL to define the symbol max. array size
C
	      MAXPOINTS = FRT_GET_MAX('LSL$FRT_HULLMAX',1000,1,1000000)
C
C     Allocate memory for the symbol array %VAL(POINTS_LOC)(2,*)
C
	      IF ( LIB$GET_VM(MAXPOINTS*2*4,POINTS_LOC).EQ.0 ) THEN
		 CALL FRTWRT(
     &		   'Cannot allocate memory to calculate convex hull')
		 BTYPE = 2
		 GOTO 10
	      ENDIF
	   ENDIF
C
	   NPOINTS = 0		! Initialise current size of hull
	   GET_HULL = .TRUE.	! Activate the hull
C
	ELSE
	   GET_HULL = .FALSE.
	ENDIF
C
C Step 2 - calculation of the bounding polygon
C
 10	IF ( BTYPE.EQ.1 ) THEN
C
C ...scanned bounds
C
	   IF ( SRISCN(SYMNO,XMIN,XMAX,YMIN,YMAX) ) GOTO 999
	   MIN_X_EXT = XMIN
	   MAX_X_EXT = XMAX
	   MIN_Y_EXT = YMIN
	   MAX_Y_EXT = YMAX
C
	ELSE
C
C ...otherwise extent or convex hull bounds
C
	   GET_EXTENT = .TRUE.           ! signal getting extents
	   IF ( SRIPLT(SYMNO,0.0,0.0,1.0,0.0) ) GOTO 999
	   GET_EXTENT = .FALSE.	         ! no longer getting extent
	ENDIF
C
C Step 3 - return of the bounding polygon coordinates
C
 20	IF ( BTYPE.EQ.1 .OR. BTYPE.EQ.2 ) THEN
C
C ...scanned or extent bounds
C
	   MIN_X_EXT = MIN_X_EXT - BORDER
	   MAX_X_EXT = MAX_X_EXT + BORDER
	   MIN_Y_EXT = MIN_Y_EXT - BORDER
	   MAX_Y_EXT = MAX_Y_EXT + BORDER
C
	   IF (NPTS.LT.4) THEN
	      CALL FRTWRT(
     &		'Too many points defining boundary of symbol %N',SYMNO)
	      GOTO 999
	   ENDIF
C
	   XY(1,1) = MIN_X_EXT
	   XY(2,1) = MIN_Y_EXT
	   XY(1,2) = MAX_X_EXT
	   XY(2,2) = MIN_Y_EXT
	   XY(1,3) = MAX_X_EXT
	   XY(2,3) = MAX_Y_EXT
	   XY(1,4) = MIN_X_EXT
	   XY(2,4) = MAX_Y_EXT
C
C     return the number of points
C
	   NPTS = 4
C
	ELSE
C
C ...otherwise convex hull bounds
C
	   CALL SRI_CALCULATE_HULL( MAXPOINTS, %VAL(POINTS_LOC), NPOINTS,
     &                              NPTS, XY, NHULLXY )
C
C   if hull is too large, then revert to ordinary extents
C
	   IF ( NHULLXY.LE.0 ) THEN
	      CALL FRTWRT(
     &		'Too many points defining convex hull of symbol %N',
     &          SYMNO)
C
	      GET_HULL = .FALSE.
	      BTYPE = 2
	      GOTO 20
	   ENDIF
C
C   now offset the hull
C
	   CALL SRI_OFFSET_POLYGON( NPTS, XY, NHULLXY, BORDER )
	   IF ( NHULLXY.LE.0 ) THEN
	      CALL FRTWRT('Cannot generate offset to convex hull')
	      GOTO 999
	   ENDIF
	   NPTS = NHULLXY
	ENDIF
C
C that's all
C
	SRI_BOUND = .FALSE.		! success
C
999	CONTINUE
C
C Reset flags
C
	GET_EXTENT = .FALSE.
	GET_HULL = .FALSE.
C
	RETURN
	END
