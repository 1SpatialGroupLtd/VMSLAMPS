C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-26 15:48:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION PATSET(PATSC,HWP)
C
***	MODULE	PATSET
***	IDENT	26OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C R.W. Russell	(from SETPTN in LITES2)			13-May-1986
C
C To set a line pattern according to the given pattern number
C Returns TRUE if it fails to find Pattern PATSC
C in the Pattern definition table,
C otherwise the common blocks FRTPAT.CMN and PATDEF.CMN are set up
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FRTPAT/
***	COMMON/LSL$CMNFRT:FRTSRI/
***	COMMON/LSL$CMNFRT:PATDEF/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
C
C arguments
	INTEGER*4	PATSC		! pattern number
	INTEGER		HWP		! optional
					! if present, returns a number
					! to pass to GSLN
					! if hw pattern set up
C
C functions called
	LOGICAL	PATFND			! FRTLIB find pattern
	LOGICAL	SRIFND			! FRTLIB find symbol
	LOGICAL	HAVE_I_AN_ARG		! LSLLIB
	INTEGER	LIB$CALLG		! to call SRI_SET_PATTERN
C
C workspace
	INTEGER	NGAPS
	INTEGER	SAVHWP
	SAVE	SAVHWP
	INTEGER	ARGS(7)
C
	PATSET = .FALSE.
C
C set last value of suppressed major and minor symbols
	SAVSUP(1)=SUPSUB(1)
	SAVSUP(2)=SUPSUB(2)
C
C allow the pattern to be drawn (until we know otherwise)
	SUPCPT = .FALSE.
C
C catch no pattern case
	IF (PATSC.EQ.0) THEN
	   SUPCPT = .TRUE.
	   SAVHWP = 0			! no hardware pattern
	   GOTO 1000
	ENDIF
C
C Is the required pattern already set up?
	IF (PATSC.EQ.CURPAT) GOTO 1000
	SAVHWP = 0			! assume no hardware pattern
C
C find this pattern
	IF (PATFND(PATSC)) THEN		! pattern doesn't exist
	   PATSET = .TRUE.
	   SUPCPT = .TRUE.		! suppress the pattern
	   GOTO 1000
	ENDIF
C
C set it up
	CURPAT = PATSC
C
C DEFLEN, DEFMAJ, DEFMIN, DEFGAP are the lengths of the pattern units
C and may be scaled to fit in PATGPL
	DEFLEN = PATSIZ*SRISCL
	DEFMAJ = PMASIZ*SRISCL
	DEFMIN = PMISIZ*SRISCL
	DEFOFF = PATOFF*SRISCL
	SAVOFF = DEFOFF
C
	DREPCT(1) = PMAREP
	DREPCT(2) = PMIREP
	DSUBSS(1) = PATMAJ
	DSUBSS(2) = PATMIN
	DSUBSZ(1) = PMAWID*SRISCL
	DSUBSZ(2) = PMIWID*SRISCL
	SUPSUB(1) = .FALSE.		! allow major symbol
	SUPSUB(2) = .FALSE.		! allow minor symbol
	SAVSUP(1) = .FALSE.
	SAVSUP(2) = .FALSE.
	DRALIN    = .TRUE.
C
C get flags out of Flag word
C
	PHSRES    = BTEST(PATFLG,0)	! phase restore at vertex
	PATSCL    = BTEST(PATFLG,1)	! scale pattern
	SAVSCL    = PATSCL
	SYINVT(1) = BTEST(PATFLG,2)	! invert alternate symbols
	SYINVT(2) = BTEST(PATFLG,3)
	SYHORZ(1) = BTEST(PATFLG,4)	! draw symbols horizontal
	SYHORZ(2) = BTEST(PATFLG,5)
	SYHDWR(1) = BTEST(PATFLG,6)	! use hardware symbol
	SYHDWR(2) = BTEST(PATFLG,7)
C					! stretch symbol
	SYSTRT(1) = BTEST(PATFLG,8).AND.PATSCL.AND..NOT.SYHORZ(1)
	SYSTRT(2) = BTEST(PATFLG,9).AND.PATSCL.AND..NOT.SYHORZ(2)
	DSHFIT(1) = BTEST(PATFLG,10)	! fit whole number of dashes
	DSHFIT(2) = BTEST(PATFLG,11)
	DSHDRW(1) = BTEST(PATFLG,12)	! draw/suppress dash
	DSHDRW(2) = BTEST(PATFLG,13)
C
C
C calculate gap size (length of free space/no. of gaps)
	NGAPS = PMAREP+PMIREP+2
	DEFGAP = (DEFLEN-DEFMAJ*(PMAREP+1)-DEFMIN*(PMIREP+1))/NGAPS
C
C set hardware pattern if required/possible
	IF (SRIHWP .AND. 		! hardware patterns allowed?
     &	    BTEST(PATFLG,15) .AND.	! and wanted for this pattern?
     &      PATMAJ.EQ.0 .AND. PATMIN.EQ.0 ! no symbols
     &				) THEN 
C
C horrid way to manage to call SRI_SET_PATTERN
	   ARGS(1) = 6
	   ARGS(2) = %LOC(DEFLEN)
	   ARGS(3) = %LOC(DEFMAJ)
	   ARGS(4) = %LOC(DEFMIN)
	   ARGS(5) = %LOC(PMAREP)
	   ARGS(6) = %LOC(PMIREP)
	   ARGS(7) = %LOC(PATFLG)
	   SAVHWP = LIB$CALLG(ARGS,%VAL(SRIVEC(XSRI_SET_PATTERN)))
	ENDIF
C
C Check that any substitution symbols given are sensible. If not
C then suppress them (though do not suppress the current pattern).
C
C Major symbol
	SUPSUB(1) = .FALSE.
	IF (PATMAJ.NE.0.AND..NOT.(SYHDWR(1).AND.SRIHWS)) THEN
	   SUPSUB(1) = SRIFND(PATMAJ)	! suppress major symbol if not
					! found
	ENDIF
C
C Minor symbol
	SUPSUB(2) = .FALSE.
	IF (PATMIN.NE.0.AND..NOT.(SYHDWR(2).AND.SRIHWS)) THEN
	   SUPSUB(2) = SRIFND(PATMIN)	! suppress minor symbol if not
					! found
	ENDIF
C
C if required, return the hardware pattern number
1000	IF (HAVE_I_AN_ARG(2)) HWP = SAVHWP
C
	PATFST = .TRUE.		! signal first point to PATGPL
	PATON = .TRUE.		! begin with output turned on
	RETURN
	END
