C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-11-16 14:53:52.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION SRIPLT(SYMNO,X,Y,SIZE,ANGLE,HWSYM,STRETCH)
C
***	MODULE	SRIPLT
***	IDENT	16NO94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C Created					PGH	01-Sep-1983
C
C returns FALSE if it succeeds in plotting symbol SYMNO from the SRI
C table, at position X,Y, of size SIZE, and at angle ANGLE
C
	IMPLICIT NONE
C
C args
	INTEGER*2	SYMNO		! Symbol number
	REAL		X,Y		! position
	REAL		SIZE		! size
	REAL		ANGLE		! angle in radians
	LOGICAL		HWSYM		! optional - if true, use
					! hardware symbol
					! false by default
	REAL		STRETCH		! optional - stretch symbol in
					! x by this factor
C
***	COMMON/LSL$CMNFRT:FRTSRI/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
C
C functions called
C
	LOGICAL		SRIPLT_SUB
	LOGICAL		HAVE_I_AN_ARG
C
C w/s
	LOGICAL		LHWSYM		! local copy
C
C get optional argument stuff done before calling subroutine,
C otherwise tends to access violate, trying to use missing arguments
C
C draw symbol using hardware?
	LHWSYM = .FALSE.
	IF (HAVE_I_AN_ARG(6)) LHWSYM = HWSYM
C
C stretch symbol?
	SRISTR = HAVE_I_AN_ARG(7)
	IF (SRISTR) SRISFAC = STRETCH
C
	SRIPLT = SRIPLT_SUB(SYMNO,X,Y,SIZE,ANGLE,
     &		%VAL(SRIBUF_LOC),%VAL(SRITAB_LOC),LHWSYM,
     &		%VAL(SRIVEC(XSRIGQM)),%VAL(SRIVEC(XSRIGSM)),
     &		%VAL(SRIVEC(XSRIGQP)),%VAL(SRIVEC(XSRIGSP)),
     &		%VAL(SRIVEC(XSRIGQL)),%VAL(SRIVEC(XSRIGSL)),
     &		%VAL(SRIVEC(XSRIGQA)),%VAL(SRIVEC(XSRIGSA)),
     &		%VAL(SRIVEC(XSRI_END_AREA)))
C
999	RETURN
	END
C
	LOGICAL FUNCTION SRIPLT_SUB(SYMNO,X,Y,SIZE,ANGLE,
     &		SRIBUF,SRITAB,HWSYM,
     &		SRIGQM,SRIGSM,SRIGQP,SRIGSP,
     &		SRIGQL,SRIGSL,SRIGQA,SRIGSA,
     &		SRI_END_AREA)
C
***	MODULE	SRIPLT_SUB
***	IDENT	26OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
	IMPLICIT NONE
C
C args
	INTEGER*2	SYMNO		! Symbol number
	REAL		X,Y		! position
	REAL		SIZE		! size
	REAL		ANGLE		! angle in radians
	REAL		SRIBUF(2,*)	! coord array
	INTEGER*2	SRITAB(*)	! SCTs etc.
	LOGICAL		HWSYM
	EXTERNAL	SRIGQM		! passed routine
	EXTERNAL	SRIGSM
	EXTERNAL	SRIGQP
	EXTERNAL	SRIGSP
	EXTERNAL	SRIGQL
	EXTERNAL	SRIGSL
	EXTERNAL	SRIGQA
	EXTERNAL	SRIGSA
	EXTERNAL	SRI_END_AREA
C
***	COMMON/LSL$CMNFRT:FFABUF/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTSCT/
***	COMMON/LSL$CMNFRT:FRTSRI/
***	COMMON/LSL$CMNFRT:FRTTRI/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
***	COMMON/LSL$CMNFRT:TRIEXT/
C
C functions called
C
	LOGICAL		SRIFND		! find symbol
	LOGICAL		SRIPSC		! plot symbol component
	LOGICAL		SCTFND		! find symbol code
C
C w/s
	INTEGER		COLOUR		! hardware symbol colour
	INTEGER		SYM		! symbol number
	REAL		ANG		! angle tool is at
	INTEGER*4	I
	INTEGER*4	FSNPTR		! start of new component
	INTEGER*4	NCOORD		! coords this component
	INTEGER*4	SCCODE		! component code
	REAL		LWIDTH		! linewidth scale factor
	INTEGER		PLCOLI		! polyline colour index
	INTEGER		FASTYLE		! fill area internal style
	INTEGER		FAINDEX		! fill area style index
	INTEGER		FACOLI		! fill area colour index
	INTEGER		LTYPE		! line type
	INTEGER		HW		! hardware tool
C
C init things
C
	SRIPLT_SUB= .TRUE.		! assume will fail
C
C if getting the coordinate extent, signal starting new character
C
	IF (GET_EXTENT) START_IT = .TRUE.
C
C draw symbol using hardware?
	IF (HWSYM.AND.SRIHWS) THEN
	   CALL SRIGQM(SYM,ANG,COLOUR)	! save current settings
	   CALL SRIGSM(SYMNO+1,ANGLE,FRTCOL)
	   CALL SRI_MARKER(1,X,Y,SRI_Z,
     &			%VAL(SRIVEC(XSRIGPM)))	! plot symbol
	   CALL SRIGSM(SYM,ANG,COLOUR)	! reset what we had
	   SRIPLT_SUB = .FALSE.
	   GOTO 999
	ENDIF
C
	NCOORD = 0
	SCCODE = -1
C
C check symbol currently selected
C
	IF (SRIFND(SYMNO)) GOTO 999
C
C save position of symbol, in case it is stretched
C
	TRIPOSX = X
	TRIPOSY = Y
	TRIANG  = ANGLE
C
C preserve polyline and fill area attributes
C
	CALL SRIGQP( LWIDTH, PLCOLI )
	CALL SRIGQL( LTYPE, HW, ANG)		! line characteristics
C
C preserve hatching characteristics in common, as they may be
C needed as default in SRIPSC
	CALL SRIGQA( FASTYLE, FAINDEX, FACOLI, SRIHAT )
C
C find the component parts and switch on action code
C
	DO 10 I=SRIIND,SRITOP
	   IF (SRITAB(I).LT.0) THEN	! start new component
	      IF (NCOORD.GT.0.AND.SCCODE.GE.0) THEN
C
C nasty bit of code to ensure that when clipping to a polygon,
C composite areas are passed to the clipping routines as all one piece -
C this produces better (but not perfect) results than trying to clip
C the components one by one. Boundary lines which should be invisible will
C be drawn.
	         IF (FILLCLIP_ON) THEN
	            IF (.NOT.SCTFND(SCCODE)) THEN
	               IF (SCTGT.EQ.ARETYP.AND.
     &			   SRITAB(I).EQ.-32768) GOTO 5
	            ENDIF
	         ENDIF
C
	         IF(SRIPSC(NCOORD,SRIBUF(1,FSNPTR),SCCODE,
     &              X,Y,SIZE,ANGLE,
     &		    SRIGSL,SRIGSA,SRIGSP)) GOTO 998	! plot component
	      ENDIF
	      IF (SRITAB(I).NE.-32768) THEN
	         IF (SRIAREA) THEN
	            CALL SRI_END_AREA
	            SRIAREA = .FALSE.
	         ENDIF
	         IF (SRITAB(I).NE.-SYMNO) GOTO 50 ! end of this symbol
	         SCCODE = -1		! don't know code yet
	      ENDIF
	      FSNPTR = I		! start of this component
	      NCOORD = 1
	   ELSE				! continuing component
5	      NCOORD = NCOORD + 1	! coords this component
	      SCCODE = SRITAB(I)
	   ENDIF
10	   CONTINUE
C
C if get to here then SYMNO is last symbol in file (we hope)
C but there is still a component not yet plotted
C
	IF (SCCODE.GE.0) THEN
	   IF (SRIPSC(NCOORD,SRIBUF(1,FSNPTR),SCCODE,X,Y,SIZE,ANGLE,
     &		    SRIGSL,SRIGSA,SRIGSP)) GOTO 998	! plot component
	ENDIF
C
C all done
C
50	SRIPLT_SUB = .FALSE.		! success
C
C that's all
C restore the polyline and fill area attributes - restore colour
C also, just in case
C
998	IF (SRIAREA) THEN
	   CALL SRI_END_AREA
	   SRIAREA = .FALSE.
	ENDIF
	CALL SRIGSP( LWIDTH, PLCOLI )
	CALL SRIGSL( LTYPE, HW, ANG)		! line characteristics
	CALL SRIGSA( FASTYLE, FAINDEX, FACOLI, SRIHAT)
C
999	RETURN
	END
