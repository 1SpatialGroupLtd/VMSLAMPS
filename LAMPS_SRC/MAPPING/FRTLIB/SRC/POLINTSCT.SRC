C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-04-10 09:51:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION POLINTSCT(
     &	               LINE,NPTS,POLXY,MAXINTER,NINTER,INTERXY)
C
***	MODULE	POLINTSCT
***	IDENT	10AP92
C
C	Copyright (C) 1987, Laser-Scan Laboratories Ltd.,
C	Cambridge, England
C
C	Created						RWR  3-Oct-1988
C
C Function to determine whether a LINE (x1,y1,x2,y2) intersects a
C polygon POLXY(x,y). The intersections are stored in INTERXY(x,y)
C
C Function is .TRUE. if at least one intersection is found
C
C::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C:									:
C: NOTE: This algorithm does not cope with special cases -- lines	:
C:       stopping or starting on polygon boundaries or vertices		:
C:									:
C::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
C This is coded somewhat strangely (one dim array, no DO loop etc.) in
C the interests of efficiency.
C
	IMPLICIT NONE
C
C Arguments:
C (in)
	INTEGER	NPTS		! no. of vertices defining the polygon
	REAL	POLXY(2*NPTS)	! the polygon (1D array for efficiency)
	REAL	LINE(2,2)	! the LINE
	INTEGER MAXINTER	! maximum number of crossings
C
C (out)
	INTEGER NINTER		! number of intersections
	REAL	INTERXY(2,MAXINTER) ! intersection points
C
C Local workspace:
	INTEGER	I,J		! loop variable, counter
	INTEGER VECTOR
	REAL	XK,YK		! first point of line
	REAL	XL,YL		! second point of line
	REAL	XLK,YLK		! differences
	REAL	MAXLINE(2)	! limits of line
	REAL	MINLINE(2)	!   "    "   "
C
	REAL	XM,YM		! first point of current vector
	REAL	XN,YN		! second point of current vector
	REAL	XNM,YNM
	REAL	XMK,YMK
	REAL	DET,DETINV	! determinant and its inverse
	REAL	S,T		! fractions of line intersections
	INTEGER	LIMIT
C
C ......................................................................
C
	NINTER = 0			! no intersections yet
C
	XK = LINE(1,1)
	YK = LINE(2,1)
	XL = LINE(1,2)
	YL = LINE(2,2)
	XLK = XL - XK
	YLK = YL - YK
	MAXLINE(1) = MAX(XK,XL)
	MAXLINE(2) = MAX(YK,YL)
	MINLINE(1) = MIN(XK,XL)
	MINLINE(2) = MIN(YK,YL)
C
C scan polygon
	VECTOR = 2
	LIMIT = 2*NPTS
	XN = POLXY(1)
	YN = POLXY(2)
C
200	IF (VECTOR.GE.LIMIT) GOTO 900
C
	   XM = XN
	   YM = YN
	   VECTOR = VECTOR+2
	   XN = POLXY(VECTOR-1)
	   YN = POLXY(VECTOR)
C
C is there the possibility of an intersection?
	   IF (XM.GT.XN) THEN
	      IF (XM.LT.MINLINE(1)) GOTO 200
	      IF (XN.GT.MAXLINE(1)) GOTO 200
	   ELSE
	      IF (XN.LT.MINLINE(1)) GOTO 200
	      IF (XM.GT.MAXLINE(1)) GOTO 200
	   ENDIF
	   IF (YM.GT.YN) THEN
	      IF (YM.LT.MINLINE(2)) GOTO 200
	      IF (YN.GT.MAXLINE(2)) GOTO 200
	   ELSE
	      IF (YN.LT.MINLINE(2)) GOTO 200
	      IF (YM.GT.MAXLINE(2)) GOTO 200
	   ENDIF
C
C compute intersection
	   XNM = XN - XM
	   YNM = YN - YM
	   XMK = XM - XK
	   YMK = YM - YK
C
	   DET = XNM*YLK - YNM*XLK
C
C lines parallel, no intersection  -- SHOULD CHECK AGAINST A LIMIT
	   IF (ABS(DET).LE.0.0) GOTO 200
	   DETINV = 1.0/DET
	   S = (XNM*YMK - YNM*XMK) * DETINV
	   T = (XLK*YMK - YLK*XMK) * DETINV
C
C are intersections within line segments?
	   IF (S.LT.0.0.OR.S.GT.1.0.OR.
     &	       T.LT.0.0.OR.T.GT.1.0) GOTO  200
C
C got an intersection, so increment count and add it to list
	   NINTER = NINTER + 1
	   INTERXY(1,NINTER) = XK + XLK*S
	   INTERXY(2,NINTER) = YK + YLK*S
C
C if array of intersections is full, that is all intersections possible!!
	   IF (NINTER.EQ.MAXINTER) GOTO 900
	   GOTO 200
900	CONTINUE	
	POLINTSCT = NINTER.GT.0
	RETURN
C
	END
