C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-25 14:42:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FRTRAC(FAST,ACD)
C
**	IDENT	25AU88
**	MODULE	FRTRAC
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Created				RWR	 7-Oct-1987
C
C to deal with a ACD directive in a FRT file
C
	IMPLICIT NONE
C
***	PARAMETER/LSL$CMNLSL:READSTR/
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
C
***	COMMON/LSL$CMNLSL:EXCEPTION.CMN/	!for ERRNUM
***	COMMON/LSL$CMNFRT:FRTACD_PRIVATE/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
	INCLUDE	'($DSCDEF)'
C
C argument
	LOGICAL		FAST	! set to TRUE if no checking is to be
				! done, and table to add names to is 
				! already selected. This should only
				! be set if the data is known to be
				! correct
	RECORD/ACD/	ACD(*)	! main ACD data structure
C
C
C workspace
C
	INTEGER		RET
	INTEGER		I
	INTEGER		LENGTH
	INTEGER		LENGTH2
	BYTE		CH
	INTEGER		DAY		! day number
	INTEGER		TIME		! time in 1/100ths seconds
	INTEGER		LEN
	REAL		VAL
	INTEGER		INTLEN
	REAL		RINTLEN
	CHARACTER*11	TIME_STRING1
	CHARACTER*11	TIME_STRING2
	CHARACTER*4	CHAR_STRING
	INTEGER		CHAR_STRING_I
	EQUIVALENCE	(CHAR_STRING,CHAR_STRING_I)
	INTEGER*4	LONG
	BYTE		LONGB(4)
	EQUIVALENCE	(LONG,LONGB)	! for setting dynamic descriptors
C
	DATA		LONGB/0,0,0,DSC$K_CLASS_D/
C
C functions
	INTEGER*4	RDCOMM
	LOGICAL		RDREAL
	LOGICAL		RDLONG
	LOGICAL		RDCHS
	LOGICAL		READSTR
	INTEGER		ADDNAM
	LOGICAL		CVT_DATE
	INTEGER		EXPAND
C
C init things
C
	FRTRAC = .TRUE.			! assume error
C
C check for secondary command TABLE
	IF (SECMDN.EQ.6) THEN
C
C is table number in valid range?
	   IF (INTARG(1).LT.0.OR.
     &	       (INTARG(1)*ACDOFFSET).GT.ACD_CODE_MAX) THEN
	      CALL FRTWRT('Invalid ACD table number %N',INTARG(1))
	      I = ACD_CODE_MAX/ACDOFFSET
	      CALL FRTWRT('Table numbers must be between %N and %N',1,I)
C
C check that value is higher than current value (but allow Table 0)
	   ELSEIF (INTARG(1).LT.ACDBASE.AND.ACD_HAD_TABLE) THEN
	      CALL FRTWRT('ACD table number %N out of order in FRT',
     &	                  INTARG(1))
C
C ok, so use this value in future	      
	   ELSE
	      ACDBASE = INTARG(1)
	      ACD_HAD_TABLE = .TRUE.
	      FRTRAC = .FALSE.			! success
	   ENDIF
	   GOTO 999
	ENDIF
C
C========================================================================
C
C must be reading ACD I,R,C,D or T 
C
C get the data type
	ACD_DATA_TYPE = SECMDN
C
C check that there is room in the table
	IF (ACDCNT.GE.ACDMAX) THEN
	   CALL FRTWRT('No room in ACD block')
	   GOTO 999
	ENDIF
C 
C read the code
	IF (RDLONG(ACD_CODE)) THEN
	   CALL FRTWRT('Error reading code in ACD')
	   GOTO 999
	ENDIF
C
C read the name
	IF (RDCHS(CH)) THEN			! nothing there
	   CALL FRTWRT('Missing NAME in ACD entry')
	   GOTO 999
	ENDIF
C
	CALL BSCH
C
C when reading fast, use READSTR, as RDCOMM will sort the table every
C time
C
	IF (FAST) THEN				! read string directly
	   ACD_NAME_LEN = READSTR(ACD_NAME,0,ON_CMD,I,RET)
	   IF (.NOT.RET) THEN
	      CALL FRTWRT('Error reading NAME from ACD entry')
	      CALL LSL_PUTMSG(RET)
	      GOTO 999
	   ENDIF
	ELSE					! check
	   NOMESS = .TRUE.			! disable CMDLIB moans
	   RET = RDCOMM(%VAL(ACDCMT))		! what is it ?
	   NOMESS = .FALSE.			! re-enable CMDLIB moans
	   IF (RET.GT.1) THEN
	      CALL FRTWRT('ACD name "%S" already defined',CMDNST)
	      GOTO 999
	   ELSEIF (ERRNUM.NE.LSL__UNEXPCMD) THEN
	      CALL FRTWRT('Error reading NAME from ACD entry')
	      CALL LSL_CMDERR
	      GOTO 999
	   ENDIF
	ENDIF
C
	ACD_INTERVAL = 0			! default interval
C
C read the maximum and minimum
	GOTO (10,20,30,40,50) ACD_DATA_TYPE
C
C read integers
10	IF (RDCHS(CH)) THEN
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINI
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXI
	   GOTO 100
	ENDIF
	IF ((CH).EQ.'?') THEN
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINI
	   GOTO 15
	ENDIF
	CALL BSCH
	IF (RDLONG(ACD_MIN_MAX_I(1))) THEN
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINI
	ENDIF
C
15	IF (RDCHS(CH)) THEN
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXI
	   GOTO 100
	ENDIF
	IF ((CH).EQ.'?') THEN
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXI
	   GOTO 100
	ENDIF
	CALL BSCH
	IF (RDLONG(ACD_MIN_MAX_I(2))) THEN
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXI
	ENDIF
	GOTO 100
C
C read reals
20	IF (RDCHS(CH)) THEN
	   ACD_MIN_MAX_R(1) = ACD_DEF_MINR
	   ACD_MIN_MAX_R(2) = ACD_DEF_MAXR
	   GOTO 100
	ENDIF
	IF ((CH).EQ.'?') THEN
	   ACD_MIN_MAX_R(1) = ACD_DEF_MINR
	   GOTO 25
	ENDIF
	CALL BSCH
	IF (RDREAL(ACD_MIN_MAX_R(1))) THEN
	   ACD_MIN_MAX_R(1) = ACD_DEF_MINR
	ENDIF
C
25	IF (RDCHS(CH)) THEN
	   ACD_MIN_MAX_R(2) = ACD_DEF_MAXR
	   GOTO 100
	ENDIF
	IF ((CH).EQ.'?') THEN
	   ACD_MIN_MAX_R(2) = ACD_DEF_MAXR
	   GOTO 26
	ENDIF
	CALL BSCH
	IF (RDREAL(ACD_MIN_MAX_R(2))) THEN
	   ACD_MIN_MAX_R(2) = ACD_DEF_MAXR
	   GOTO 100
	ENDIF
C
C read interval
26	IF (RDREAL(ACD_INTERVAL)) ACD_INTERVAL = 0
	GOTO 100
C
C reading characters
30	CONTINUE
C
	CHAR_STRING = '    '
	IF (RDCHS(CH)) THEN			! nothing there
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINC
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	   GOTO 100
	ELSEIF (CH.EQ.'?') THEN
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINC
	   GOTO 35
	ELSEIF (CH.NE.'''') THEN		! must have quoted string
	   ACD_MIN_MAX_I(1) = ACD_DEF_MINC
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	   GOTO 100
	ELSE
	   LENGTH = READSTR(CHAR_STRING,CH,ON_CHAR,.FALSE.,RET)
	   IF (.NOT.RET) THEN
	      CALL LSL_PUTMSG(RET)
	      ACD_MIN_MAX_I(1) = ACD_DEF_MINC
	      ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	      GOTO 100
	   ELSE
	      ACD_MIN_MAX_I(1) = CHAR_STRING_I
	   ENDIF
	ENDIF
C
35	IF (RDCHS(CH)) THEN			! nothing there
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	   GOTO 100
	ELSEIF (CH.EQ.'?') THEN
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	   GOTO 100
	ELSEIF (CH.NE.'''') THEN		! must have quoted string
	   ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	   GOTO 100
	ELSE
	   LENGTH = READSTR(CHAR_STRING,CH,ON_CHAR,.FALSE.,RET)
	   IF (.NOT.RET) THEN
	      CALL LSL_PUTMSG(RET)
	      ACD_MIN_MAX_I(2) = ACD_DEF_MAXC
	      GOTO 100
	   ELSE
	      ACD_MIN_MAX_I(2) = CHAR_STRING_I
	   ENDIF
	ENDIF
C
	GOTO 100
C
C reading date 
40	CONTINUE
	TIME_STRING1 = ' '			! make sure empty
	TIME_STRING2 = ' '
	IF (RDCHS(CH)) THEN
	   TIME_STRING1 = ACD_DEF_MIND
	   TIME_STRING2 = ACD_DEF_MAXD
	   GOTO 45
	ELSEIF (CH.EQ.'?') THEN
	   TIME_STRING1 = ACD_DEF_MIND
	   GOTO 42
	ELSE
	   CALL BSCH
	ENDIF
	LENGTH = READSTR(TIME_STRING1,-1,ON_SPACE)
	IF (LENGTH.LE.0) THEN			! use defaults
	   TIME_STRING1 = ACD_DEF_MIND
	   TIME_STRING2 = ACD_DEF_MAXD
	   GOTO 45
	ENDIF
42	IF (RDCHS(CH)) THEN
	   TIME_STRING2 = ACD_DEF_MAXD
	   GOTO 45
	ELSEIF (CH.EQ.'?') THEN
	   TIME_STRING2 = ACD_DEF_MAXD
	   GOTO 45
	ELSE
	   CALL BSCH
	ENDIF
	LENGTH2 = READSTR(TIME_STRING2,-1,ON_SPACE)
	IF (LENGTH2.LE.0) THEN
	   TIME_STRING2 = ACD_DEF_MAXD
	ENDIF
C
45	CONTINUE
	IF (CVT_DATE(TIME_STRING1,ACD_MIN_MAX_I(1),TIME)) THEN
	   IF (.NOT.CVT_DATE(TIME_STRING2,ACD_MIN_MAX_I(2),TIME)) THEN
	      CALL FRTWRT(
     &	         'Date format wrong in "%S"; using default of "%S"',
     &	         TIME_STRING2(1:LENGTH2),ACD_DEF_MAXD)
	      TIME_STRING2 = ACD_DEF_MAXD
	      GOTO 45
	   ENDIF
	ELSE
	   CALL FRTWRT(
     &	      'Date format wrong in "%S"; using default of "%DD"',
     &	      TIME_STRING1(1:LENGTH),ACD_DEF_MIND)
	      TIME_STRING1 = ACD_DEF_MIND
	   GOTO 45
	ENDIF
	GOTO 100
C
C reading time
50	CONTINUE
	TIME_STRING1 = ' '			! make sure empty
	TIME_STRING2 = ' '
	IF (RDCHS(CH)) THEN
	   TIME_STRING1 = ACD_DEF_MINT
	   TIME_STRING2 = ACD_DEF_MAXT
	   GOTO 55
	ELSEIF (CH.EQ.'?') THEN
	   TIME_STRING1 = ACD_DEF_MINT
	   GOTO 52
	ELSE
	   CALL BSCH
	ENDIF
	LENGTH = READSTR(TIME_STRING1,-1,ON_SPACE)
	IF (LENGTH.LE.0) THEN			! use defaults
	   TIME_STRING1 = ACD_DEF_MINT
	   TIME_STRING2 = ACD_DEF_MAXT
	   GOTO 55
	ENDIF
52	IF (RDCHS(CH)) THEN
	   TIME_STRING2 = ACD_DEF_MAXT
	   GOTO 55
	ELSEIF (CH.EQ.'?') THEN
	   TIME_STRING2 = ACD_DEF_MAXT
	   GOTO 55
	ELSE
	   CALL BSCH
	ENDIF
	LENGTH2 = READSTR(TIME_STRING2,-1,ON_SPACE)
	IF (LENGTH2.LE.0) THEN
	   TIME_STRING2 = ACD_DEF_MAXT
	ENDIF
C
55	CONTINUE
C
C add "-- " to time to make it a valid VMS (absolute) date time string
	IF (CVT_DATE('-- '//TIME_STRING1,DAY,ACD_MIN_MAX_I(1))) THEN
	   IF (.NOT.CVT_DATE('-- '//TIME_STRING2,DAY,
     &	                            ACD_MIN_MAX_I(2))) THEN
	      CALL FRTWRT(
     &	         'Time format wrong in "%S"; using default of "%DT"',
     &	         TIME_STRING2(1:LENGTH2),ACD_DEF_MAXT)
	      TIME_STRING2 = ACD_DEF_MAXT
	      GOTO 55
	   ENDIF
	ELSE
	   CALL FRTWRT(
     &	      'Time format wrong in "%S"; using default of "%S"',
     &	      TIME_STRING1(1:LENGTH),ACD_DEF_MINT)
	   TIME_STRING1 = ACD_DEF_MINT
	   GOTO 55
	ENDIF
	GOTO 100
C
C now have read all entries, so check them
C
100	CONTINUE
C
C code must be between 0 and 999 ( or 767 in case of table 32)
	IF (ACD_CODE.LT.0.OR.ACD_CODE.GE.ACDOFFSET) THEN
	   CALL FRTWRT('Invalid ACD code %N',ACD_CODE)
	   CALL FRTWRT('ACD entries must have codes between %N and %N',
     &	                0,ACDOFFSET-1)
	   GOTO 999
	ENDIF
C
C only allowed to define codes 100-139 in table 0
	IF (ACDBASE.EQ.0.AND.
     &	      (ACD_CODE.LT.ACD_COM_BOT.OR.ACD_CODE.GT.ACD_COM_TOP).AND.
     &	         .NOT.FAST) THEN
	   CALL FRTWRT('Invalid ACD code %N',ACD_CODE)
	   CALL FRTWRT('ACD entries in table 0 may only '//
     &	               'have codes between %N and %N',
     &	                ACD_COM_BOT,ACD_COM_TOP)
	   GOTO 999
	ENDIF
C
C add on current base
	ACD_CODE = ACD_CODE + (ACDOFFSET*ACDBASE)
C 
C is CODE within range?
	IF (ACD_CODE.LE.0.OR.ACD_CODE.GT.ACD_CODE_MAX) THEN
	   CALL FRTWRT('Invalid ACD code %N',ACD_CODE)
	   CALL FRTWRT('ACD codes must be between %N and %N',
     &	                1,ACD_CODE_MAX)
	   GOTO 999
	ENDIF
C
C check that code is in order
	IF (ACDCNT.NE.0) THEN
	   IF (ACD_CODE.LE.ACD(ACDCNT).CODE) THEN
	      CALL FRTWRT('ACD code %N out of order in FRT',ACD_CODE)
	      GOTO 999
	   ENDIF
	ENDIF
C
C increment count
C
	ACDCNT = ACDCNT + 1
C
C Store name in command table, and in our own table
C Index (ACDCNT) is command number
C
	ACD(ACDCNT).NAME(1) = LONG	! init dynamic descriptor
	ACD(ACDCNT).NAME(2) = 0
	IF (FAST) THEN
	   RET = ADDNAM(ACD_NAME,ACD_NAME_LEN,ACDCNT)	   
	   CALL LIB$SCOPY_DXDX(ACD_NAME(1:ACD_NAME_LEN),
     &						ACD(ACDCNT).NAME)
	ELSE
	   CALL SELTAB(ACDSAV)
	   I = CMDNLE
	   RET = ADDNAM(CMDNST,I,ACDCNT)
	   CALL SAVTAB(ACDSAV)
	   CALL LIB$SCOPY_DXDX(CMDNST,ACD(ACDCNT).NAME)
	ENDIF
C
	IF (RET.EQ.0.OR.RET.EQ.-1) THEN
	   CALL FRTWRT('No room in ACD table')
	   GOTO 999
	ENDIF
C
C initialise format descriptor to be a dynamic string
C
	ACD(ACDCNT).FORMAT(1) = LONG
	ACD(ACDCNT).FORMAT(2) = 0
C
C everything OK, so add to ACD table
C
	ACD(ACDCNT).DATATYPE = ACD_DATA_TYPE
	ACD(ACDCNT).CODE     = ACD_CODE
C
	ACD(ACDCNT).MINMAXI(1) = ACD_MIN_MAX_I(1)
	ACD(ACDCNT).MINMAXI(2) = ACD_MIN_MAX_I(2)
C
	ACD(ACDCNT).INTERVAL = ACD_INTERVAL
C
C set up format
C ...integer - calculate maximum number of characters in output
C              from the maximum and minimum values
	IF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_I) THEN
	   VAL = MAX(ABS(ACD_MIN_MAX_I(1)),ABS(ACD_MIN_MAX_I(2)))
	   IF (VAL.EQ.0) THEN			! use default
	      LEN = 1
	   ELSE
	      LEN = INT(LOG10(VAL)) + 1
	   ENDIF
C
C add 1 if possibility of -ve number
	   IF (ACD_MIN_MAX_I(1).LT.0.OR.ACD_MIN_MAX_I(2).LT.0) LEN=LEN+1
	   ACD_FORMAT_LEN   = EXPAND('%WS%%I%N',ACD_FORMAT,LEN)
C
C...real - use the maximum and minimum values and the specified interval
	ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_R) THEN
	   IF (ACD_INTERVAL.EQ.0.0) THEN	! use default
	      LEN = 8
	      GOTO 105
	   ENDIF
C
C calculate the number of characters in the max and min values
C (if these are less than 1.0, then this will be -ve)
	   VAL = MAX(ABS(ACD_MIN_MAX_R(1)),ABS(ACD_MIN_MAX_R(2)))
	   ACD_INTERVAL = ABS(ACD_INTERVAL)
	   VAL = VAL + ACD_INTERVAL
	   IF (VAL.EQ.0.0) THEN
	      LEN = 1
	   ELSE
	      LEN = INT(LOG10(VAL)) + 1
	   ENDIF
C
C calculate the number of characters in the interval 
	   IF (ACD_INTERVAL.EQ.0.0) THEN
	      INTLEN = 0
	   ELSEIF (ACD_INTERVAL.GE.1.0) THEN
	      INTLEN = 0
	   ELSE
C
C need to take care that LOG(0.01) is -2.0, so don't subtract 1 in this
C case
	      RINTLEN = LOG10(ACD_INTERVAL)
	      IF (INT(RINTLEN).NE.RINTLEN) RINTLEN = RINTLEN -1
	      INTLEN = -INT(RINTLEN)
	   ENDIF
C
C don't use any negative lengths in calculation
	   LEN = MAX(0,LEN) + MAX(0,INTLEN)
C
C maximum length is 8
	   LEN = MIN(LEN,8)
105	   ACD_FORMAT_LEN   = EXPAND('%WS%%G0.%N',ACD_FORMAT,LEN)
C
C... character - fixed format 
	ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_C) THEN
	   ACD_FORMAT = '%A4'
	   ACD_FORMAT_LEN = 3
C
C... date - fixed format 
	ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_D) THEN
	   ACD_FORMAT = '%DD'
	   ACD_FORMAT_LEN = 3
C
C... time - fixed format (for present)
	ELSEIF (ACD_DATA_TYPE.EQ.ACD_DATATYPE_T) THEN
	   ACD_FORMAT = '%DT'
	   ACD_FORMAT_LEN = 3
	ELSE
	   ACD_FORMAT = '????'
	   ACD_FORMAT_LEN = 0
	ENDIF
C
C copy format into table
	CALL LIB$SCOPY_DXDX(ACD_FORMAT(1:ACD_FORMAT_LEN),
     &						ACD(ACDCNT).FORMAT)
C
C success
	FRTRAC = .FALSE.
C
999	RETURN
	END
