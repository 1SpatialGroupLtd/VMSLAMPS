	SUBROUTINE CLIPGPL(N,X,Y,Z,NPOL,POLXY,CURVE)
C
***	MODULE	CLIPGPL
***	IDENT	27OC94
C
C	Copyright (C) 1987, Laser-Scan Laboratories Ltd.,
C	Cambridge, England
C
C	Created					RWR	 4-Oct-1988
C
C Subroutine to clip a poly-line to a polygon. The results are output
C by calls to SRIGPL or SRIGDP (depending on CURVE)
C
C the polygon (POLXY) must be closed - ie first point = last point
C
C This is a jacket routine calling subroutine below
C
	IMPLICIT NONE
C
C Arguments:
	INTEGER	N		! number of points
	REAL	X(N)		! x coords
	REAL	Y(N)		! y coords
	REAL	Z(N)		! y coords
	INTEGER	NPOL		! number of points in polygon
	REAL	POLXY(2,NPOL)	! points is polygon; point 1 = point NPOL
	LOGICAL	CURVE		! output line, or curve
C
***	COMMON/LSL$CMNFRT:FFABUF/
***	COMMON/LSL$CMNFRT:SRIVEC/
C
	CALL CLIPGPL_SUB(N,X,Y,Z,NPOL,POLXY,CURVE,%VAL(INTSCT_ADDR),
     &		%VAL(SRIVEC(XSRIGPL)),%VAL(SRIVEC(XSRIGDP)))
	RETURN
	END
C
	SUBROUTINE CLIPGPL_SUB(N,X,Y,Z,NPOL,POLXY,CURVE,INTERXY,
     &				SRIGPL,SRIGDP)
C
***	MODULE	CLIPGPL_SUB
***	IDENT	26OC94
C
C	Copyright (C) 1987, Laser-Scan Laboratories Ltd.,
C	Cambridge, England
C
C	Created					RWR	 4-Oct-1988
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FFABUF/
***	COMMON/LSL$CMNFRT:SRISCL/
C
C Arguments:
	INTEGER	N		! number of points
	REAL	X(N)		! x coords
	REAL	Y(N)		! y coords
	REAL	Z(N)		! y coords
	INTEGER	NPOL		! number of points in polygon
	REAL	POLXY(2,NPOL)	! points is polygon; point 1 = point NPOL
	LOGICAL	CURVE		! output line, or curve
	REAL	INTERXY(2,2*FFASCT)	! the intersections
	EXTERNAL SRIGPL,SRIGDP	! passed routines
C
C Local workspace:
	INTEGER	VECTOR
	REAL	LINE(2,2)
	INTEGER	NINTER		! number of intersections in vector
	INTEGER	STACK(20)	! for sorting - this is far too big!!
	LOGICAL	INSIDE
	INTEGER	I,J
	INTEGER	INDEX
	REAL	TMPX(2)		! temp arrays for SRIGPL
	REAL	TMPY(2)
	REAL	TMPZ(2)
C
C functions
	INTEGER	PNTPOL
	LOGICAL POLINTSCT
C
	EXTERNAL CF_CLIPGPL
	EXTERNAL SWAP_CLIPGPL
C
C ......................................................................
C
	IF (N.LE.1) GOTO 900		! can't do anything
C
C does poly-line start inside or outside polygon?
	LINE(1,1) = X(1)		! use LINE and I as temps
	LINE(2,1) = Y(1)
	I = PNTPOL(LINE,POLXY,NPOL)
C
C if point lies on polygon, then we have a problem - so don't output
C anything. This is only a valid approach because of the way this routine
C is being used in FRTLIB; here it is most unlikely that a point will
C lie on the polygon
	IF (I.EQ.0) GOTO 900
	INSIDE = I.EQ.1
	INDEX = 1
C 
C look at each vector in the poly-line in turn
	DO 500, VECTOR = 1,N-1
	   LINE(1,1) = X(VECTOR)
	   LINE(2,1) = Y(VECTOR)
	   LINE(1,2) = X(VECTOR+1)
	   LINE(2,2) = Y(VECTOR+1)
C
C does this line cut the polygon; if so where?
C
C it cannot clip the polygon if it lies outside its limits

	IF ((MAX(LINE(1,1),LINE(1,2)).LT.FILLCLIP_XMIN).OR.
     &	    (MIN(LINE(1,1),LINE(1,2)).GT.FILLCLIP_XMAX).OR.
     &	    (MAX(LINE(2,1),LINE(2,2)).LT.FILLCLIP_YMIN).OR.
     &	    (MIN(LINE(2,1),LINE(2,2)).GT.FILLCLIP_YMAX)) GOTO 500
C
C so have to check with complete polygon	   
	   IF (.NOT.POLINTSCT(LINE,NPOL,POLXY,2*FFASCT-2,NINTER,INTERXY))
     &	                      GOTO 500
C
C set up things for comparison routine
C
C is line east-west or north-south?
	   IF (ABS(LINE(1,2)-LINE(1,1)).GE.ABS(LINE(2,2)-LINE(2,1))) THEN
	      FILLCLIP_INDEP = 1
	   ELSE
	      FILLCLIP_INDEP = 2
	   ENDIF
C
C is it positive or negative
	   FILLCLIP_POS=LINE(FILLCLIP_INDEP,2).GE.LINE(FILLCLIP_INDEP,1)
C
C if poly-line is currently visible, output from last index up to
C start of this line
	   IF (INSIDE) THEN
	      IF (VECTOR.GT.INDEX) THEN
	         IF (CURVE) THEN
	            CALL SRIGDP(
     &			VECTOR-INDEX+1,X(INDEX),Y(INDEX),Z(INDEX),6)
	         ELSE
	            CALL SRIGPL(
     &			VECTOR-INDEX+1,X(INDEX),Y(INDEX),Z(INDEX))
	         ENDIF
	      ENDIF
	   ENDIF
C
C update index for next time
	   INDEX = VECTOR + 1
C
C add start and end of line to list of intersections, and then sort
C them
	   DO 100, I = 1,2
	      INTERXY(1,NINTER+I) = LINE(1,I)
	      INTERXY(2,NINTER+I) = LINE(2,I)
100	   CONTINUE
C
	   NINTER = NINTER + 2
C
	   CALL QUICK_SORT(INTERXY,NINTER,CF_CLIPGPL,SWAP_CLIPGPL,STACK)
C
C if currently visible, output from first point, otherwise do invisible
C move to second point, and start there
	   IF (INSIDE) THEN
	      J = 1
	   ELSE
	      J = 2
	   ENDIF
C
C output alternate segments of clipped line
	   DO 200, I = J,NINTER-1,2
	      TMPX(1) = INTERXY(1,I)
	      TMPX(2) = INTERXY(1,I+1)
	      TMPY(1) = INTERXY(2,I)
	      TMPY(2) = INTERXY(2,I+1)
	      TMPZ(1) = SRI_Z		! always drawing fill areas flat
	      TMPZ(2) = SRI_Z
	      IF (CURVE) THEN
	         CALL SRIGDP(2,TMPX,TMPY,TMPZ,6)
	      ELSE
	         CALL SRIGPL(2,TMPX,TMPY,TMPZ)
	      ENDIF
200	   CONTINUE
C
C will have changed visibility if there were an odd number of
C intersections
	   IF ((NINTER.AND.1).NE.0) INSIDE = .NOT.INSIDE
500	CONTINUE
C
C are there any more chunks of poly-line to output?
	I = N - INDEX + 1
	IF (INSIDE.AND.I.GT.1) THEN
	   IF (CURVE) THEN
	      CALL SRIGDP(I,X(INDEX),Y(INDEX),Z(INDEX),6)
	   ELSE
	      CALL SRIGPL(I,X(INDEX),Y(INDEX),Z(INDEX))
	   ENDIF
	ENDIF
C
900	RETURN
	END
