C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1997-11-21 16:44:42.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FRTINI(FRTNAM)
C
***	MODULE	FRTINI
***	IDENT	21NO97
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Paul Hardy
C
C area fill pattern facility		RJH	09-Dec-1986
C hardware symbols and lines		RWR	   Jun-1986
C amended for use of PATFND		PGH	16-Sep-1983
C Coded and typed 			PGH	16-Jun-1983
C
C returns FALSE if it succeeds in opening, reading, and closing
C the specified Feature Representation Table file FRTNAM
C The contents of the file are left set up in COMMON/FRTCOM/
C
	IMPLICIT NONE
C
	CHARACTER*(*)	FRTNAM			! filename
C
C parameters
C
	PARAMETER	TXTBFS=132		! increased TXTBUF size
C
***	COMMON/LSL$CMNFRT:FRTACD_PRIVATE/
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTFIL/
***	COMMON/LSL$CMNFRT:FRTGRP/
***	COMMON/LSL$CMNFRT:FRTPAT/
***	COMMON/LSL$CMNFRT:FRTPRIO/
***	COMMON/LSL$CMNFRT:FRTSCT/
***	COMMON/HERE:FRTTRI_PRIVATE/
***	COMMON/LSL$CMNFRT:PATDEF/
***	COMMON/LSL$CMNFRT:SRISCL/
**      IF LSLLIB
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***	PARAMETER/LSL$CMNLSL:TBLFLG/
**	IFF
***	COMMON/LSL$CMNVIO:TXTC/
**	ENDC
C
C functions called
	LOGICAL		FLROPN
	LOGICAL		FLRCLO
	INTEGER*4	FLRLIN
	INTEGER*4	RDCOMM
	LOGICAL		RDCH
	LOGICAL		RDCHS
	LOGICAL		RDREAL
	LOGICAL		RDLONG
	LOGICAL		FRTRGP		! read group
	LOGICAL		FRTRLP		! read pattern
	LOGICAL		FRTRFL		! read area fill pattern
	LOGICAL		FRTRAC		! read attribute code record
	LOGICAL		FRTRPR		! read feature code priority record
	LOGICAL*4	LIB$GET_LUN
	LOGICAL*4	LIB$FREE_LUN
	LOGICAL		TRNALL
	INTEGER		SIGCHS
	INTEGER		LIB$GET_VM,LIB$FREE_VM
	INTEGER		FRT_GET_MAX	! get value from logical name
C
C command table
	EXTERNAL	FRT_CMD_TABLE
C
C w/s
	LOGICAL*4	HADERR		! error return
	INTEGER*4	RETCOD		! return code
	INTEGER*4	ERROR		! error code
	INTEGER*4	LASTFC		! previous FC
	INTEGER*4	LASTSC		! previous SC
	INTEGER		LINE		! line in cmd file
	INTEGER*4	FRTLUN		! unit number
	INTEGER		CMD		! command number from RDCOMM.
	INTEGER		TXLSAV		! save TXTLIM
	INTEGER*2	NCHS		! number of chrs read by FLRLIN
	BYTE		C1,C2		! last-read character.
	BYTE		TXTBFL(TXTBFS)	! extended TXTBUF
	REAL		ANGLE
	INTEGER		I
	INTEGER		PTR
	LOGICAL		FRTMEM,SCTMEM,GRPMEM,PATMEM,FILMEM,PRIOMEM
C
	REAL		PI
	PARAMETER	(PI=3.14159265)
C
C equivalenced onto the real TXTBUF
	EQUIVALENCE	(TXTBUF,TXTBFL)
C
	FRTINI = .TRUE.		! assume failure
C
C get a LUN to read the file on
C
	HADERR = LIB$GET_LUN(FRTLUN)
	IF (.NOT.HADERR) THEN		! failed
C
***	IF LSLLIB
	   CALL LSL_PUTMSG(HADERR)
***	IFF
	   CALL GEN_SYSMSG(HADERR)
***	ENDC
C
	   GOTO 1000
	ENDIF
C
C extend TXTBUF
	TXLSAV = TXTLIM		! save TXTLIM
	TXTLIM = TXTBFS		! extend TXTBUF size
C
C init things
	FRTCNT = 0		! no feature codes defined yet
	FRTMEM = .FALSE.	! no FRT memory yet
	GRPCNT = 0		! no groups defined yet
	GRPMEM = .FALSE.	! no GROUP memory yet
	PATCNT = 0		! no patterns defined
	PATMEM = .FALSE.	! no PATTERN  memory yet
	FILCNT = 0		! no patterned areas defined
	FILMEM = .FALSE.	! no FILL memory yet
	PRIOCNT = 0		! no priorities defined
	PRIOMEM = .FALSE.	! no PRIORITY memory yet
	PRIO_DEFAULT = PRIO_DEFAULT_DEFAULT
	PRIO_MAX = 0		! no priorities set yet
	LASTFC = -1		! no previous FC
	LASTSC = -1		! no previous SC
	SCTCNT = 0		! no component codes defined yet
	SCTMEM = .FALSE.	! no SCT memory yet
	FRTHKS = .FALSE.	! thick lines not suppressed
	SRIWID = 1.0		! default nominal line width in SCTWID
C				! units (reset using SRISLW)
	SRIBKT = 4.0		! base AKIMA points/unit
	SRIAKT = SRIBKT		! actual AKIMA points/unit
	SRIBTO = 500.0		! base circle tolerance parameter
	SRICTO = SRIBTO		! actual circle tolerance parameter
	SRISYC = -1		! symbol colour, -1 means use FRTCOL
	SRISCL = 1		! ratio between FRT units and world units
	PLTSCL = 1		! ratio between plotting mms and world
				! units
	ENLSCL = 1		! ratio between enl plotting mms and world
				! units
	SRIROT = 0.0		! rotation of data relative to GKS window
C
C patdef
	CURPAT = -1		! make sure PATSET doesn't think it has
				! a pattern
C
C things in FRTTRI that must be set even before a call to TRIINI
	TRIA1 = ITALIC_A1
	TRIA2 = ITALIC_A2
	TRIB1 = ITALIC_B1
	TRIB2 = ITALIC_B2
	TRICC = .FALSE.		! no composite characters
	TRIESC = .TRUE.		! allow $ escape
	TRITRN = .FALSE.	! no translation
C
C check if LSL$ITALIC_ANGLE has been set up
*** 	IF LSLLIB
	TXTPTR = TXTLIM
	IF (TRNALL('LSL$ITALIC_ANGLE',TXTDSC)) THEN
	   TXTPTR = SIGCHS(TXTDSC)
	   CALL BSLN
	   IF (.NOT.RDREAL(ANGLE)) THEN
	      IF (RDCHS(C1)) THEN
C
C force angle to be in range -45 to + 45
	         IF (ANGLE.GT.45.0) THEN
	            ANGLE = 45.0
	            CALL FRTWRT('Invalid angle %S for italic texts; '//
     &	                        'defaulting to 45 degrees',TXTDSC)
	         ELSEIF (ANGLE.LT.0.0) THEN
	            ANGLE = 0.0
	            CALL FRTWRT('Invalid angle %S for italic texts; '//
     &	                        'defaulting to 0 degrees',TXTDSC)
	         ENDIF
	         TRIA2 = TAN(ANGLE*PI/180.0)
	      ELSE
	         CALL FRTWRT('Unexpected character %A1 while reading'//
     &	                  ' "LSL$ITALIC_ANGLE"',C1)
	      ENDIF
	   ELSE
	      CALL FRTWRT(
     &	'Error reading %S, the translation of "LSL$ITALIC_ANGLE"',
     &	            TXTDSC)
	   ENDIF
	ENDIF
	TXTPTR = TXTLIM
	IF (TRNALL('LSL$COMPOSITE_CHARACTERS',TXTDSC)) THEN
	   TXTPTR = SIGCHS(TXTDSC)
	   CALL BSLN
	   I = -1
	   IF (.NOT.RDLONG(I)) THEN
	      IF (RDCHS(C1)) THEN
	         IF (I.LT.0.OR.I.GT.1) I = -1
	      ELSE
	         I = -1
	      ENDIF
	   ELSE
	      I = -1
	   ENDIF
	   IF (I.LT.0) CALL FRTWRT('Error reading "%S", '//
     &	'the translation of "LSL$COMPOSITE_CHARACTERS"',TXTDSC)
	   IF (I.EQ.1) TRICC = .TRUE.
	ENDIF
	TXTPTR = TXTLIM
	IF (TRNALL('LSL$DOLLAR_ESCAPE',TXTDSC)) THEN
	   TXTPTR = SIGCHS(TXTDSC)
	   CALL BSLN
	   I = -1
	   IF (.NOT.RDLONG(I)) THEN
	      IF (RDCHS(C1)) THEN
	         IF (I.LT.0.OR.I.GT.1) I = -1
	      ELSE
	         I = -1
	      ENDIF
	   ELSE
	      I = -1
	   ENDIF
	   IF (I.LT.0) CALL FRTWRT('Error reading "%S", '//
     &	'the translation of "LSL$DOLLAR_ESCAPE"',TXTDSC)
	   IF (I.EQ.0) TRIESC = .FALSE.
	ENDIF
C
	TXTPTR = TXTLIM
	IF (TRNALL('LSL$SUBSTITUTE_CHARACTERS',TXTDSC)) THEN
	   DO 10 I=1,256
	      TRNTAB(I:I) = CHAR(I-1)
10	   CONTINUE
	   TXTPTR = SIGCHS(TXTDSC)
	   CALL BSLN
20	   IF (RDCH(C1)) GOTO 30
	   IF (RDCH(C2)) C2 = 32
	   I = (C1.AND.255)+1	! stretch to long
	   TRNTAB(I:I) = CHAR(C2.AND.255)
	   GOTO 20
C
30	   IF (TXTPTR.GT.0) TRITRN = .TRUE.
	ENDIF
***	ENDC
C
C open up the file
C
	HADERR = FLROPN(FRTLUN,FRTNAM,ERROR)	! open command file
C
*** 	IF LSLLIB
	IF (.NOT. HADERR) THEN
	   CALL FRTWRT('Error opening FRT file %S',FRTNAM)
	   CALL LSL_PUTMSG(HADERR)		! moan
	   GOTO 999
	ENDIF
***	IFF
	IF (HADERR) THEN
	   CALL FRTWRT('Error opening FRT file %S',FRTNAM)
	   CALL GEN_SYSMSG(ERROR)		! moan
	   GOTO 999
	ENDIF
***	ENDC
C
C initialise ACD table
**	IF LSLLIB
	CALL FRT_ACDINI
C
C Set the 'exact match' command table flag
C (We actually set the bit in the 'save' array, since the actual table
C is reset from here when we next SELTAB and ADDNAM)
	ACDSAV(16) = ACDSAV(16).OR.CMT$M_EXACT	! exact match
C
**	ENDC
C
C open for business now
C
	LINE = 0
C
C now we read it in, line by line, and obey each line
C
50	LINE = LINE+1				! next line 
C
***	IF LSLLIB
	RETCOD = FLRLIN(TXTBUF,TXTPTR,TXTBFS,ERROR)
	IF (.NOT. RETCOD) THEN
	   IF (RETCOD .EQ. LSL__EOF) GOTO 800
	 CALL FRTWRT('Error with line %N of FRT file %S',LINE,FRTNAM)
	   CALL LSL_PUTMSG(ERROR)
	   GOTO 999
	ENDIF
***	IFF
	RETCOD = FLRLIN(TXTBUF,TXTPTR,TXTBFS,ERROR) ! read into TXT
	IF (RETCOD.LT.0) THEN
	   IF (RETCOD.EQ.-10) GOTO 800		! end of file
	   CALL FRTWRT('Error with line %N of FRT file %S',LINE,FRTNAM)
	   CALL GEN_SYSMSG(ERROR)		! moan
	   GOTO 999
	ENDIF
***	ENDC
C
C we have a line - what is it ?
C
	CALL BSLN				! start of line
	IF (RDCHS(C1)) GOTO 50		! empty line
	IF (C1.EQ.33) GOTO 50			! comment starting "!"
	CALL BSCH				! something there
	CMD = RDCOMM(FRT_CMD_TABLE)		! what is it ?
	IF (CMD.EQ.0) GOTO 900			! error reading command.
C
C dispatch on the basis of command line
C
	GOTO (100,200,300,400,500,600,700),CMD
	CALL FRTWRT('Command %N out of range in "%S"',CMD,TXTDSC)
	GOTO 50				! keep reading the file
C
C FRT command - the feature representation table itself
C
C      FC   GT   Colour   Width   Size   SC   Flag   H/w line   Description
C
100	IF (RDLONG(FRTFC)) GOTO 190
	IF (RDLONG(FRTGT)) GOTO 190
	IF (RDLONG(FRTCOL)) GOTO 190
	IF (RDREAL(FRTWID)) GOTO 190
	IF (RDREAL(FRTSIZ)) GOTO 190
	IF (RDLONG(FRTSC)) GOTO 190
	IF (FRTSC.LT.0.AND.
     &	     FRTGT.NE.TEXTYP.AND.FRTGT.NE.ARETYP) GOTO 193
	IF (FRTGT.EQ.ARETYP.AND..NOT.
     &	    (FRTSC.LE.6.OR.(FRTSC.GE.101.AND.FRTSC.LE.106).OR.
     &	     (FRTSC.GE.10000.AND.FRTSC.LE.13600).OR.
     &	     (FRTSC.GE.20000.AND.FRTSC.LE.23600))) GOTO 194
	IF (RDLONG(FRTFLG)) FRTFLG = 0	! only use if there
	IF (RDLONG(FRTHW))  FRTHW  = 0
	IF (FRTFC.LE.LASTFC) GOTO 192
C
C Obtain dynamic memory for FRT storage
	IF (.NOT.FRTMEM) THEN
	   FRTMEM = .TRUE.
C
C free old FRT space
	   IF (FRTMAX.GT.0) THEN
	      I = LIB$FREE_VM(FRTMAX*6*2,FRTINT_LOC)! integers
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      FRTINT_LOC = 0
	      I = LIB$FREE_VM(FRTMAX*2*4,FRTFLT_LOC)! floats
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      FRTFLT_LOC = 0
	   ENDIF
	   FRTMAX = 0			! no FRT memory allocated
C
C Try for logical name LSL$FRT_FRTMAX to get maximum number of FCs
	   FRTMAX = FRT_GET_MAX('LSL$FRT_FRTMAX',FRTMAX_DEF,0,32767)
C
C get memory for FRT
	   IF (FRTMAX.GT.0) THEN
	      I = LIB$GET_VM(FRTMAX*6*2,FRTINT_LOC)! integers
	      IF (I)
     &	         I = LIB$GET_VM(FRTMAX*2*4,FRTFLT_LOC)! floats
	      IF (.NOT.I) THEN
	         CALL LIB$FREE_VM(FRTMAX*6*2,FRTINT_LOC)! integers
	         FRTINT_LOC = 0
	         CALL LIB$FREE_VM(FRTMAX*2*4,FRTFLT_LOC)! floats
	         FRTFLT_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for FRT')
	         CALL LSL_PUTMSG(I)
	         FRTMAX = 0
	      ENDIF
	   ENDIF
	ENDIF
	IF (FRTCNT.GT.FRTMAX) GOTO 191
	LASTFC = FRTFC
	FRTCNT = FRTCNT + 1
C
C note I*4 -> I*2 conversion
C
	PTR = FRTINT_LOC+(FRTCNT-1)*6*2
	CALL FRT_PUTWORD(FRTFC,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(FRTGT,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(FRTCOL,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(FRTSC,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(FRTFLG,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(FRTHW,%VAL(PTR))
	PTR = FRTFLT_LOC+(FRTCNT-1)*2*4
	CALL FRT_PUTLONG(FRTWID,%VAL(PTR))
	PTR = PTR+4
	CALL FRT_PUTLONG(FRTSIZ,%VAL(PTR))
	GOTO 50
C
C errors in FRT
C
190	CALL FRTWRT('Error in FRT definition')
	GOTO 900
191	CALL FRTWRT('No room in FRT block')
	GOTO 900
192	CALL FRTWRT('Feature code %N out of order in FRT',FRTFC)
	GOTO 900
193	CALL FRTWRT('Secondary code %N negative for non text/area',
     &	               FRTSC)
	GOTO 900
194	CALL FRTWRT('Illegal fill area secondary code %N',FRTSC)
	GOTO 900
C
C SCT command - the symbol component table (as for FRT)
C
200	IF (RDLONG(SCTCC)) GOTO 290
	IF (RDLONG(SCTGT)) GOTO 290
	IF (RDLONG(SCTCOL)) GOTO 290
	IF (RDREAL(SCTWID)) GOTO 290
	IF (RDREAL(SCTSIZ)) GOTO 290
	IF (RDLONG(SCTSC)) GOTO 290
	IF (RDLONG(SCTFLG)) SCTFLG = -1	! (can use -1 at present, since
					!  only line type flags used in
					!  SRIPSC)
	IF (RDLONG(SCTHW))  SCTHW  = -1
C
	IF (.NOT.SCTMEM) THEN
	   SCTMEM = .TRUE.
C
C Obtain dynamic memory for SCT storage
C free old SCT space
	   IF (SCTMAX.GT.0) THEN
	      I = LIB$FREE_VM(SCTMAX*6*2,SCTINT_LOC)! integers
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      SCTINT_LOC = 0
	      I = LIB$FREE_VM(SCTMAX*2*4,SCTFLT_LOC)! floats
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      SCTFLT_LOC = 0
	   ENDIF
	   SCTMAX = 0			! no SCT memory allocated
C
C Try for logical name LSL$FRT_SCTMAX to get maximum number of SCTs
	   SCTMAX = FRT_GET_MAX('LSL$FRT_SCTMAX',SCTMAX_DEF,0,32767)
C
C get memory for SCT
	   IF (SCTMAX.GT.0) THEN
	      I = LIB$GET_VM(SCTMAX*6*2,SCTINT_LOC)! integers
	      IF (I)
     &		 I = LIB$GET_VM(SCTMAX*2*4,SCTFLT_LOC)! floats
	      IF (.NOT.I) THEN
	         CALL LIB$FREE_VM(SCTMAX*6*2,SCTINT_LOC)! integers
	         SCTINT_LOC = 0
	         CALL LIB$FREE_VM(SCTMAX*2*4,SCTFLT_LOC)! floats
	         SCTFLT_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for SCT')
	         CALL LSL_PUTMSG(I)
	         SCTMAX = 0
	      ENDIF
	   ENDIF
	ENDIF
	IF (SCTCNT.GT.SCTMAX) GOTO 291
	IF (SCTCC.LE.LASTSC) GOTO 292
	LASTSC = SCTCC
	SCTCNT = SCTCNT + 1
C
C note I*4 -> I*2 conversion
C
	PTR = SCTINT_LOC+(SCTCNT-1)*6*2
	CALL FRT_PUTWORD(SCTCC,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(SCTGT,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(SCTCOL,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(SCTSC,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(SCTFLG,%VAL(PTR))
	PTR = PTR+2
	CALL FRT_PUTWORD(SCTHW,%VAL(PTR))
	PTR = SCTFLT_LOC+(SCTCNT-1)*2*4
	CALL FRT_PUTLONG(SCTWID,%VAL(PTR))
	PTR = PTR+4
	CALL FRT_PUTLONG(SCTSIZ,%VAL(PTR))
	GOTO 50
C
C errors in SCT
C
290	CALL FRTWRT('Error in SCT definition')
	GOTO 900
291	CALL FRTWRT('No room in SCT block')
	GOTO 900
292	CALL FRTWRT('SCT code %N out of order in FRT',SCTCC)
	GOTO 900
C
C GROUP command - the group definition table
C
300	IF (.NOT.GRPMEM) THEN
	   GRPMEM = .TRUE.
C
C Obtain dynamic memory for group storage
C free old group space
	   IF (GRPMAX.GT.0) THEN
	      I = LIB$FREE_VM((GRPMAX*2+2)*4,GRPCMT_LOC)! command table
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      GRPCMT_LOC = 0
	      I = LIB$FREE_VM(GRPMXC/32*GRPMAX*4,GRPFCT_LOC)! bit array
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      GRPFCT_LOC = 0
	   ENDIF
	   GRPMAX = 0			! no group memory allocated
C
C Try for logical name LSL$FRT_GRPMAX to get maximum number of groups
	   GRPMAX = FRT_GET_MAX('LSL$FRT_GRPMAX',GRPMAX_DEF,0,32767)
C
C get memory for groups
	   IF (GRPMAX.GT.0) THEN
	      I = LIB$GET_VM((GRPMAX*2+2)*4,GRPCMT_LOC)	! command table
	      IF (I)
     &		 I = LIB$GET_VM(GRPMXC/32*GRPMAX*4,GRPFCT_LOC)! bit array
	      IF (.NOT.I) THEN
	         CALL LIB$FREE_VM((GRPMAX*2+2)*4,GRPCMT_LOC)! command table
	         GRPCMT_LOC = 0
	         CALL LIB$FREE_VM(GRPMXC/32*GRPMAX*4,GRPFCT_LOC)! bit array
	         GRPFCT_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for GROUP')
	         CALL LSL_PUTMSG(I)
	         GRPMAX = 0
	      ENDIF
	   ENDIF
	ENDIF
	IF (FRTRGP()) GOTO 900		! read a group command
	GOTO 50
C
C PATTERN command - the pattern definition table
C
400	IF (.NOT.PATMEM) THEN
	   PATMEM = .TRUE.
C
C Obtain dynamic memory for PATT storage
C free old PATT space
	   IF (PATLIM.GT.0) THEN
	      I = LIB$FREE_VM(PATLIM*6*2,PATINT_LOC)! integers
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      PATINT_LOC = 0
	      I = LIB$FREE_VM(PATLIM*6*4,PATDIM_LOC)! floats
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      PATDIM_LOC = 0
	   ENDIF
	   PATLIM = 0			! no PATT memory allocated
C
C Try for logical name LSL$FRT_PATMAX to get maximum number of PATTs
	   PATLIM = FRT_GET_MAX('LSL$FRT_PATMAX',PATLIM_DEF,0,32767)
C
C get memory for PATT
	   IF (PATLIM.GT.0) THEN
	      I = LIB$GET_VM(PATLIM*6*2,PATINT_LOC)! integers
	      IF (I)
     &		 I = LIB$GET_VM(PATLIM*6*4,PATDIM_LOC)! floats
	      IF (.NOT.I) THEN
	         CALL LIB$FREE_VM(PATLIM*6*2,PATINT_LOC)! integers
	         PATINT_LOC = 0
	         CALL LIB$FREE_VM(PATLIM*6*4,PATDIM_LOC)! floats
	         PATDIM_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for PATTERN')
	         CALL LSL_PUTMSG(I)
	         PATLIM = 0
	      ENDIF
	   ENDIF
	ENDIF
	IF (FRTRLP(%VAL(PATINT_LOC),%VAL(PATDIM_LOC))) GOTO 900! read PATT
	GOTO 50
C
C FILL command - the area fill pattern definition table
C
500	IF (.NOT.FILMEM) THEN
	   FILMEM = .TRUE.
C
C Obtain dynamic memory for FILL storage
C free old FILL space
	   IF (FILMAX.GT.0) THEN
	      I = LIB$FREE_VM(FILMAX*3*2,FILINT_LOC)! integers
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      FILINT_LOC = 0
	   ENDIF
	   FILMAX = 0			! no FILL memory allocated
C
C Try for logical name LSL$FRT_FILMAX to get maximum number of FILLs
	   FILMAX = FRT_GET_MAX('LSL$FRT_FILMAX',FILMAX_DEF,0,32767)
C
C get memory for FILL
	   IF (FILMAX.GT.0) THEN
	      I = LIB$GET_VM(FILMAX*3*2,FILINT_LOC)! integers
	      IF (.NOT.I) THEN
	         CALL LIB$FREE_VM(FILMAX*3*2,FILINT_LOC)! integers
	         FILINT_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for FILL')
	         CALL LSL_PUTMSG(I)
	         FILMAX = 0
	      ENDIF
	   ENDIF
	ENDIF
	IF (FRTRFL(%VAL(FILINT_LOC))) GOTO 900	! read an area fill command
	GOTO 50
C
C ACD command - the attribute code definition
C
600	CONTINUE
**	IF LSLLIB
	IF (FRTRAC(.FALSE.,%VAL(ACD_LOC))) GOTO 900 ! read command
**	IFF
	CALL FRTWRT(
     &	      'ACD commands not valid with VIOLIB version of FRTLIB')
**	ENDC
	GOTO 50
C
C PRIORITY command - the pattern definition table
C
700	IF (.NOT.PRIOMEM) THEN
	   PRIOMEM = .TRUE.
C
C Obtain dynamic memory for PRIO storage
C free old PRIO space
	   IF (PRIOLIM.GT.0) THEN
! integers
	      I = LIB$FREE_VM(PRIOLIM*2*(2+2*PRIO_PER_FC_MAX),PRIOINT_LOC)
	      IF (.NOT.I) CALL LIB$SIGNAL(%VAL(I))
	      PRIOINT_LOC = 0
	   ENDIF
	   PRIOLIM = 0			! no PRIO memory allocated
C
C Try for logical name LSL$FRT_PRIOMAX to get maximum number of PRIOTs
	   PRIOLIM = FRT_GET_MAX('LSL$FRT_PRIOMAX',PRIOLIM_DEF,0,32767)
C
C get memory for PRIO
	   IF (PRIOLIM.GT.0) THEN
	      I = LIB$GET_VM(PRIOLIM*2*(2+2*PRIO_PER_FC_MAX),PRIOINT_LOC)
	      IF (.NOT.I) THEN
	         PRIOINT_LOC = 0
	         CALL FRTWRT('Cannot allocate memory for PRIORITY entries')
	         CALL LSL_PUTMSG(I)
	         PRIOLIM = 0
	      ENDIF
C
C clear the bit map for the priorities
	      CALL VIOCLR(PRIOPRBMAP,PRIO_PRBM_SIZE*4,0)
	   ENDIF
	ENDIF
	IF (FRTRPR(%VAL(PRIOINT_LOC))) GOTO 900! read PRIO
	GOTO 50
C
C and finally, close the file
C
800	HADERR = FLRCLO(FRTLUN,ERROR)
C
***	IF LSLLIB
	IF (.NOT. HADERR) THEN
	   CALL FRTWRT('Error closing FRT file %S',FRTNAM)
	   CALL LSL_PUTMSG(ERROR)
	   GOTO 999
	ENDIF
***	IFF    
	IF (HADERR) THEN
	   CALL FRTWRT('Error closing FRT file %S',FRTNAM)
	   CALL GEN_SYSMSG(ERROR)		! moan
	   GOTO 999
	ENDIF
***	ENDC
	GOTO 998
C
C error recovery here
900	CALL FRTWRT('In line %N of FRT file %S',LINE,FRTNAM)
	CALL FRTWRT('"%S"',TXTDSC)		! lets see what we have
	GOTO 50				! get next line
C
C that's all
C
998	FRTINI = .FALSE.	! succeeded
***	IF LSLLIB
C
C make the command table "no exact match" by clearing the bit
C in the command table header
C
	CALL LIB$INSV(0,CMT$V_EXACT+16,1,%VAL(ACDCMT))
***	ENDC
999	FRTFC  = -1		! no FC selected
	SCTCC  = -1		! no component selected
	PATSEL = -1		! no pattern selected
	FILSEL = +1		! no fill area pattern selected
	PRIO_SEL = -1		! no priority selected
***	IF LSLLIB
	ACD_CODE = -1		! no ac code selected
***	ENDC
	TXTLIM = TXLSAV		! restore TXTLIM
	HADERR = LIB$FREE_LUN(FRTLUN)	! free LUN
***	IF LSLLIB
	IF (.NOT.HADERR) CALL LSL_PUTMSG(HADERR)
***	IFF
	IF (.NOT.HADERR) CALL GEN_SYSMSG(HADERR)
***	ENDC
1000	RETURN
	END
C
