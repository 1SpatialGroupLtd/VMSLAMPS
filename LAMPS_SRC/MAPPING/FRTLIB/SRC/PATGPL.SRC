  	SUBROUTINE PATGPL(NCOORD,XCOORD,YCOORD,ZCOORD)
C
***	MODULE	PATGPL
***	IDENT	16DE96
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  R. Fairbairns
C
C Add DRALIN for default straight line		RJH	15-Dec-1986
C More control of patterns         		RWR	   May-1986
C Transferred to FRTLIB and renamed 
C (from PGENGO)					RWR	13-May-1986
C Transferred to LITES2				CCB	 6-Jul-1984
C Adapted for use by FPP (using GKS plotting	RD	16-Sep-1983
C commands and FRT feature code representation
C Stolen and amended for use in I2X		TJI	23-Mar-1982
C 'Buffer generated' scrub code added			23-Feb-1981
C Adapted for VAX LDLIB					11-Feb-1981
C Adapted as line pattern generator for MCE		17-Jan-1980
C plotting package
C Created as CalComp tape output dot/dash	RF	27-Nov-1978
C /chain generator
C
C Dot/dash/chain generator for GKS-compatible plotting programs.
C Plotting is effected by passing points to GKS routine GPL.
C Note that the gap length is considered to be that of a chained
C line (ie a dashed line contains 2 gaps).
C The size of substituted symbols is not related to the dash size but is
C specified in the FRT pattern definition table. If a symbol
C substitution fails then all subsequent attempts to plot that
C symbol within the current feature are suppressed.
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:FRTCOM/
***	COMMON/LSL$CMNFRT:FRTPAT/
***	COMMON/LSL$CMNFRT:PATDEF/
***	COMMON/LSL$CMNFRT:SRISCL/
***	COMMON/LSL$CMNFRT:SRIVEC/
	INCLUDE 'LSL$CMNIFF:CB.STR'	! For IFF_ABSENT
C
C arguments
	INTEGER		NCOORD		! number of coords
	REAL		XCOORD(NCOORD)	! coordinate buffer
	REAL		YCOORD(NCOORD)	! ditto
	REAL		ZCOORD(NCOORD)	! optional z coords
C
C function called
	LOGICAL		SRIPLT		! plot symbol
	LOGICAL		HAVE_I_AN_ARG
C
C workspace
	INTEGER		I
	INTEGER*4	IADR
	INTEGER		START		! where to start in STBUF
	REAL		D
	REAL		LENGTH		! remaining length of
					! current segment
	REAL		DX,DY		! components of LEN
	REAL		DZ
	INTEGER		IDZ		! Integer copy to check for IFF_ABSENT
	EQUIVALENCE	(DZ,IDZ)
	REAL		NX,NY		! current segment end point
	REAL		NZ
	INTEGER		INZ		! Integer copy to check for IFF_ABSENT
	EQUIVALENCE	(NZ,INZ)
	REAL		TMPX(2),TMPY(2)	! for remembering vector
	REAL		TMPZ(2)
	REAL		PI
	PARAMETER	(PI=3.14159265)
	LOGICAL		SOME_PAT_OUT	! something output
	INTEGER		NEWSTG
	REAL		NEWRES
	INTEGER		NEWREP
	REAL		L
	INTEGER		SUB
	LOGICAL		FRIG
	LOGICAL		GOT_Z
	INTEGER		ICZ(2)		! Integer copy to check for IFF_ABSENT
	EQUIVALENCE	(CZ,ICZ)
	INTEGER		ISUBSTZ		! Integer copy to set IFF_ABSENT
	EQUIVALENCE	(SUBSTZ,ISUBSTZ)
C
	GOT_Z = HAVE_I_AN_ARG(4)
	IF (.NOT.GOT_Z) THEN
	   CZ(1) = SRI_Z
	   CZ(2) = SRI_Z
	ENDIF
C
C set last value of suppressed major and minor symbols
C so that any change can be detected by PATERR
	SAVSUP(1)=SUPSUB(1)
	SAVSUP(2)=SUPSUB(2)
C
C if no pattern, then default to SRIGPL (via SRI_LINE)
	IF (SUPCPT.OR.(FRTSC.EQ.0)) THEN
	   IF (PATON) THEN
	      IF (.NOT.PATFST) THEN
	         TMPX(1) = CX(2)
	         TMPY(1) = CY(2)
	         TMPX(2) = XCOORD(1)
	         TMPY(2) = YCOORD(1)
	         IF (GOT_Z) THEN
	            TMPZ(1) = CZ(2)
	            TMPZ(2) = ZCOORD(1)
	            CALL SRI_LINE(2,TMPX,TMPY,TMPZ,
     &				%VAL(SRIVEC(XSRIGPL)))
	         ELSE
	            CALL SRI_LINE(2,TMPX,TMPY,,
     &				%VAL(SRIVEC(XSRIGPL)))
	         ENDIF
	      ENDIF
	      IF (GOT_Z) THEN
	         CALL SRI_LINE(NCOORD,XCOORD,YCOORD,ZCOORD,
     &				%VAL(SRIVEC(XSRIGPL)))
	      ELSE
	         CALL SRI_LINE(NCOORD,XCOORD,YCOORD,,
     &				%VAL(SRIVEC(XSRIGPL)))
	      ENDIF
	   ENDIF
	   GOTO 999
	ENDIF
C
	SOME_PAT_OUT = .FALSE.	! nothing drawn yet
	FRIG = .FALSE.		! not frigged last symbol yet
C
C Only go through this bit at the start of a new feature
	IF (PATFST) THEN
C
	   NEWSTG = 0		! initialise starting phase
	   NEWRES = 0.0		! and residue
	   NEWREP = 0		! and repeats
C
C Calculate starting phase if there is an offset
	   IF (DEFOFF.GT.0.0) CALL PATFIT(
     &				DEFOFF,NEWSTG,NEWRES,NEWREP,.FALSE.)
	   INISTG = NEWSTG	! copy over to 'initial' values
	   INIRES = NEWRES
	   INIREP = NEWREP
	   CX(1) = XCOORD(1)
	   CX(2) = XCOORD(1)
	   CY(1) = YCOORD(1)
	   CY(2) = YCOORD(1)
	   IF (GOT_Z) THEN
	      CZ(1) = ZCOORD(1)
	      CZ(2) = ZCOORD(1)
	   ENDIF
	   SUPSYM = .TRUE.	! suppress first symbol in case offset
	   START = 2
	   DDCSTG = INISTG	! starting stage
	   DDCRES = INIRES	! starting residue
	   DREPOS = INIREP	! starting repeat count
	   SYTURN(1) = .FALSE.	! draw major symbol the right way up
	   SYTURN(2) = .FALSE.	! draw minor symbol the right way up
	   IF (.NOT.PATSCL) THEN! load default lengths
	      DDCLEN = DEFLEN
	      DDCMAJ = DEFMAJ
	      DDCMIN = DEFMIN
	      DDCGAP = DEFGAP
	   ENDIF
	   PATFST = .FALSE.
	ELSE
C
C subsequent bit of feature
	   START = 1			! start with next point as
C					! first point in XCOORD/Y
	ENDIF
C
C if scaling pattern to total length of this lot of coordinates, then
C work out total length and force integral number of patterns. Note that
C repeated calls of PATGPL will result in different pieces of feature
C being plotted with different pattern lengths, but as this usually
C only happens when large buffers are full, this difference will be
C very small, and the join will not show, as it will be at end of a
C pattern.
C
	IF (PATSCL.AND..NOT.PHSRES) THEN
	   LENGTH = SQRT((XCOORD(1)-CX(2))**2 + (YCOORD(1)-CY(2))**2)
	   DO 2, I=1,NCOORD-1
	      LENGTH = LENGTH + SQRT((XCOORD(I+1)-XCOORD(I))**2 +
     &	                             (YCOORD(I+1)-YCOORD(I))**2)
   2	   CONTINUE
C
C work out scaling
	   CALL PATFIT(LENGTH,NEWSTG,NEWRES,NEWREP,.TRUE.)
	   IF (DSUBST.EQ.0.0) GOTO 100	! can't fit - draw line
	ENDIF
C
C Mark not stretching symbols, because our linework goes out
C through SRI_LINE and we don't want it stretched. This
C flag is not cleared by SRIPLT after use.
	SRISTR = .FALSE.
	CALL SRIBFF(0)		! empty line buffer
C
C Loop to process points in buffer
	DO 90 I = START,NCOORD
C
C Extract 'current' point.
	   NX = XCOORD(I)
	   NY = YCOORD(I)
	   IF (GOT_Z) THEN
	      NZ = ZCOORD(I)
	   ELSE
	      NZ = SRI_Z
	   ENDIF
C
C Resetting pattern at each vertex?
	   IF (PHSRES) THEN
	      SOME_PAT_OUT = .FALSE.	! nothing output yet
	      TMPX(1) = CX(2)		! remember this vector,
	      TMPY(1) = CY(2)		! in case no pattern is
	      TMPX(2) = NX		! output
	      TMPY(2) = NY
	      IF (GOT_Z) THEN
	         TMPZ(1) = CZ(2)
	         TMPZ(2) = NZ
	      ENDIF
C
C scaling to each individual vector?
	      IF (PATSCL) THEN
	         LENGTH = SQRT((NX-CX(2))**2 + (NY-CY(2))**2)
C
C restore phase to that which we calculated for the start of this vector
C (in case it has wandered off due to floating arithmetic)
	         DDCSTG = NEWSTG
	         DDCRES = NEWRES
	         DREPOS = NEWREP
C
C work out scaling
	         CALL PATFIT(LENGTH,NEWSTG,NEWRES,NEWREP,.TRUE.)
	         IF (DSUBST.EQ.0.0) GOTO 80	! can't fit - draw line
	      ELSE
C
C not scaling - just restart completely at vertex
	         DDCSTG = INISTG
	         DDCRES = INIRES
	         DREPOS = INIREP
	         SYTURN(1) = .FALSE.	! major symbol the right way up
	         SYTURN(2) = .FALSE.	! minor symbol the right way up
	      ENDIF
	   ENDIF
C
C Get next vector and work out its length. Checks included for IFF_ABSENT
C which would crash AXP (WI/CC 1566).
C
10	   DX = NX-CX(2)
	   DY = NY-CY(2)
	   IF (INZ.EQ.IFF_ABSENT .OR. ICZ(2).EQ.IFF_ABSENT) THEN
	      IDZ = IFF_ABSENT
	   ELSE
	      DZ = NZ - CZ(2)
	   ENDIF
	   LENGTH = SQRT(DX**2+DY**2)
C
C Ignore tiny segments
	   IF (LENGTH.LE.1E-5) GOTO 80
C
C If length of segment remaining does not take us up to the end
C of the current component (dash or gap) then off to deal with it
	   IF (LENGTH.LE.DDCRES) GOTO 70	! jump if not so
C
C Otherwise we have reached the end of a dash or gap.
C Work out what fraction of vector takes us to end of component and step along
C to there. Another IFF_ABSENT check here (WI/CC 1566).
C
11	   D = DDCRES/LENGTH
	   CX(2) = CX(2)+D*DX
	   CY(2) = CY(2)+D*DY
	   IF (ICZ(2).EQ.IFF_ABSENT .OR. IDZ.EQ.IFF_ABSENT) THEN
	      ICZ(2) = IFF_ABSENT
	   ELSE
	      CZ(2) = CZ(2)+D*DZ
	   ENDIF
C
C Dispatch on current stage:
C		 Initial Major-on Gap Minor-on Gap
	   GOTO (   41,     24,    30,   24,    40), DDCSTG+1
C
C *****************  from computed GOTO  *************************
C
C End of major (DDCSTG=1) or minor (DDCSTG=3) on
C Draw something
C
C Normal action is to draw line if not substituted by a symbol,
C but if DSHDRW flag bit is set, then reverse normal action
C i.e. draw line as well as symbol, or draw nothing
24	   SUB = (DDCSTG+1)/2	! get subscript
	   IF (DSHDRW(SUB).NEQV.DSUBSS(SUB).EQ.0) THEN
	      IF (PATON) CALL PATBFA(CX,CY,CZ)
	   ENDIF
C
C Substitute dash with a symbol
C First work out position and angle of symbol (if not already done so)
C Another IFF_ABSENT trap added here (WI/CC 1566)
C
	   IF (DSUBSS(SUB).NE.0) THEN
	      IF (.NOT.GOTPSN) THEN
	         SUBSTX=CX(1)+DX*(DDCRES-HLFDSH)/LENGTH
	         SUBSTY=CY(1)+DY*(DDCRES-HLFDSH)/LENGTH
	         IF (IDZ.EQ.IFF_ABSENT .OR. ICZ(1).EQ.IFF_ABSENT) THEN
	            ISUBSTZ=IFF_ABSENT
	         ELSE
	            SUBSTZ=CZ(1)+DZ*(DDCRES-HLFDSH)/LENGTH
	         ENDIF
C
C symbol is horizontal if 
C  a) it lies on a vertex, or
C  b) horizontal flag was set in pattern table
	         IF ((DX.EQ.0.0.AND.DY.EQ.0.0).OR.SYHORZ(SUB)) THEN
	            SUBANG=SRIROT
	         ELSE
	            SUBANG=ATAN2(DY,DX)
	         ENDIF
C
C perhaps symbol has to be inverted
	         IF (SYINVT(SUB)) THEN
	            IF (SYTURN(SUB)) SUBANG = SUBANG - PI
	         ENDIF
	      ENDIF
C
C now plot symbol unless it failed previously, or is suppressed
	      IF (.NOT.(SUPSUB(SUB).OR.SUPSYM)) THEN
C
C set height for plotting symbol
	         CALL SRI_SET_Z(SUBSTZ)
C
C If stretching this symbol, then pass DSUBST as optional argument
C to SRIPLT, otherwise pass %VAL(0), which will be taken as absent.
C (Could be changed to two alternative calls to SRIPLT instead)
	         IADR = 0
	         IF (SYSTRT(SUB)) IADR = %LOC(DSUBST)
	         IF (PATON) THEN
	            CALL SRIBFF(2)	! flush out any linework
	            IF (SRIPLT(DSUBSS(SUB),SUBSTX,SUBSTY,DSUBSZ(SUB),
     &				SUBANG,SYHDWR(SUB),%VAL(IADR))) THEN
C
C If the symbol fails to plot then suppress subsequent occurences
	               CALL FRTWRT('Bad symbol %^L%N in line pattern %N',
     &					DSUBSS(SUB),CURPAT)
	               SUPSUB(SUB)=.TRUE.
	            ENDIF
	            SRISTR = .FALSE.	! SRIPLT does not turn this off
	            CALL SRIBFF(0)	! empty line buffer
	         ENDIF
	      ENDIF
	   ENDIF
	   CX(1)=CX(2)			! update the 'last' point
	   CY(1)=CY(2)
	   CZ(1)=CZ(2)
C
	   SOME_PAT_OUT = .TRUE.	! something now output
C
C and now we are in gap
	   DDCRES = DDCGAP
	   GOTO 60
C
C *****************  from computed GOTO  *************************
C
C End of gap after major unit, see if any major repeats to do
C
30	   DREPOS = DREPOS-1
	   IF (DREPOS.GE.0) GOTO 42
C
C invert major unit next time
	   SYTURN(1) = .NOT.SYTURN(1)
C
C Get control for minor dash
	   DREPOS = DREPCT(2)
C
C Set minor on?
31	   IF ((DDCMIN.EQ.0.0).AND.(DSUBSS(2).EQ.0)) GOTO 56
	   DDCRES = DDCMIN
	   HLFDSH = DDCMIN/2	! for finding position of subs symbol
	   GOTPSN = .FALSE.
	   GOTO 55
C
C *****************  from computed GOTO  *************************
C
C End of gap after minor unit, see if any minor repeats to do
C
40	   DREPOS = DREPOS-1
	   IF (DREPOS.GE.0) THEN
C
C Set to repeat minor dash
	      DDCSTG = 2
	      GOTO 31
	   ELSE
C
C invert minor unit next time
	      SYTURN(2) = .NOT.SYTURN(2)
	   ENDIF
C
C and fall through to set major on
C
C *****************  from computed GOTO  *************************
C
C Get control for major on
41	   DREPOS = DREPCT(1)
C
C Set major on (perhaps again)
42	   DDCSTG = 0
	   IF ((DDCMAJ.EQ.0.0).AND.(DSUBSS(1).EQ.0)) GOTO 56
	   DDCRES = DDCMAJ
	   HLFDSH = DDCMAJ/2	! for finding position of subs symbol
	   GOTPSN = .FALSE.
C
C End 'off' period - move up to end of gap
55	   SUPSYM = .NOT.PATON	! don't suppress symbol, unless in invisible
	   CX(1)=CX(2)
	   CY(1)=CY(2)
	   CZ(1)=CZ(2)
	   GOTO 60
C
C Zero major or minor on - suppress it altogether
56	   DDCSTG = DDCSTG+1
	   DDCRES = DDCGAP
C
C Move on to next stage
60	   DDCSTG = DDCSTG+1
	   GOTO 10
C
C ******************************************************************
C Segment length remaining less than what's left of current dash/gap.
C If there is any chance that we have just missed off the final symbol
C because of floating point rounding, then go back and pretend that we
C did reach the end of the dash.
C
C If ( scaling and ( on last vertex, or every vertex ) and
C    ( doing major or minor dash ) and
C    ( were expecting no left over bit) and (not frigged already) and
C    ( are nearer the end of the dash than the start) ...
C
70	   IF ((PATSCL.AND.(I.EQ.NCOORD.OR.PHSRES)).AND.
     &		(DDCSTG.EQ.1.OR.DDCSTG.EQ.3).AND.
     &		NEWRES.EQ.0.0.AND..NOT.FRIG.AND.
     &		(DDCRES-LENGTH.LT.LENGTH)) THEN
	      FRIG = .TRUE.	! mark frig as done
	      GOTO 11
	   ENDIF
C
	   CX(2)=NX
	   CY(2)=NY
	   CZ(2)=NZ
C
C if in a gap, just move to next vertex, otherwise either draw a line
C to next vertex, or get ready to plot a symbol
C
	   IF (DDCSTG.EQ.1.OR.DDCSTG.EQ.3) THEN	! major or minor dash
C
C draw something
C
C Normal action is to draw line if not substituted by a symbol,
C but if DSHDRW flag bit is set, then reverse normal action
C i.e. draw line as well as symbol, or draw nothing
	      SUB = (DDCSTG+1)/2		! get subscript
	      IF (DSHDRW(SUB).NEQV.DSUBSS(SUB).EQ.0) THEN
	         IF (PATON) CALL PATBFA(CX,CY,CZ)
	         SOME_PAT_OUT = .TRUE.
	      ENDIF
C
C See if we can now work out the symbol position and angle
C Another IFF_ABSENT trap added here (WI/CC 1566)
C
	      IF (DSUBSS(SUB).NE.0) THEN	! symbol substitution
	         IF (.NOT.GOTPSN.AND.DDCRES-LENGTH.LT.HLFDSH) THEN
	            SUBSTX=CX(1)+DX*(DDCRES-HLFDSH)/LENGTH
	            SUBSTY=CY(1)+DY*(DDCRES-HLFDSH)/LENGTH
	            IF (IDZ.EQ.IFF_ABSENT .OR. ICZ(1).EQ.IFF_ABSENT) THEN
	               ISUBSTZ=IFF_ABSENT
	            ELSE
	               SUBSTZ=CZ(1)+DZ*(DDCRES-HLFDSH)/LENGTH
	            ENDIF
C
C symbol is horizontal if 
C  a) it lies on a vertex, or
C  b) horizontal flag was set in pattern table
C
	            IF ((DX.EQ.0.0.AND.DY.EQ.0.0).OR.SYHORZ(SUB)) THEN
	               SUBANG = SRIROT
	            ELSE
	               SUBANG = ATAN2(DY,DX)
	            ENDIF
C
C perhaps symbol has to be inverted
	            IF (SYINVT(SUB)) THEN
	               IF (SYTURN(SUB)) SUBANG = SUBANG - PI
	            ENDIF
C
C now we know position
	            GOTPSN = .TRUE.
	         ENDIF
	      ENDIF
	   ENDIF
C
	   CX(1)=CX(2)		! update the 'last' point
	   CY(1)=CY(2)
	   CZ(1)=CZ(2)
	   DDCRES = DDCRES-LENGTH ! count down the residue of this stage
C
C End of loop - move on to next segment of line
80	   CX(2)=NX
	   CY(2)=NY
	   CZ(2)=NZ
	   FRIG = .FALSE.	! ready to frig next time
C
C Check that when resetting pattern at each vertex, something has 
C been output (but OK not to output anything if dash fitting)
	   IF (PHSRES.AND.
     &		.NOT.(PATSCL.AND.(DSHFIT(1).OR.DSHFIT(2))).AND.
     &		.NOT.SOME_PAT_OUT.AND.PATON) CALL PATBFA(
     &				TMPX,TMPY,TMPZ)
90	CONTINUE
	CALL SRIBFF(2)		! flush out any linework
C
C if no pattern output, draw feature as a line
100	IF (.NOT.PHSRES.AND..NOT.SOME_PAT_OUT.AND.DRALIN) THEN
	   IF (PATON) THEN
	      TMPX(1) = CX(2)
	      TMPY(1) = CY(2)
	      TMPX(2) = XCOORD(1)
	      TMPY(2) = YCOORD(1)
	      IF (GOT_Z) THEN
	         TMPZ(1) = CZ(2)
	         TMPZ(2) = ZCOORD(1)
	         CALL SRI_LINE(2,TMPX,TMPY,TMPZ,
     &				%VAL(SRIVEC(XSRIGPL)))
	      ELSE
	         CALL SRI_LINE(2,TMPX,TMPY,,
     &				%VAL(SRIVEC(XSRIGPL)))
	      ENDIF
	      IF (GOT_Z) THEN
	         CALL SRI_LINE(NCOORD,XCOORD,YCOORD,ZCOORD,
     &				%VAL(SRIVEC(XSRIGPL)))

	      ELSE
	         CALL SRI_LINE(NCOORD,XCOORD,YCOORD,,
     &				%VAL(SRIVEC(XSRIGPL)))

	      ENDIF
	   ENDIF
	ENDIF
C
C ensure that last point always preserved
999	CX(2) = XCOORD(NCOORD)
	CY(2) = YCOORD(NCOORD)
	IF (GOT_Z) THEN
	   CZ(2) = ZCOORD(NCOORD)
	ELSE
	   CZ(2) = SRI_Z
	ENDIF
C
	RETURN
C
	END
C
C
C
  	SUBROUTINE PATBFA(XX,YY,ZZ)
C
***	MODULE	PATBFA
***	IDENT	28OC94
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C Author  Clarke Brunt				28-Oct-1994
C
C Buffer up points for patterned lines, so they can be output
C in more than 2-point lines. We are still passed the 2-point
C lines here to avoid huge upheaval to the structure of PATGPL.
C See also SRIBFA (used similarly for curves and circles).
C
	IMPLICIT NONE
C
***	COMMON/LSL$CMNFRT:SRIBFC/	! holds buffer
C
C arguments
	REAL		XX(2)
	REAL		YY(2)
	REAL		ZZ(2)
C
C workspace
	REAL		LAST_X,LAST_Y
	SAVE		LAST_X,LAST_Y
	LOGICAL		GAP
C
	GAP = .TRUE.
	IF (SRIBFP.GT.0) THEN
	   IF (SRIBFX(SRIBFP).EQ.XX(1).AND.SRIBFY(SRIBFP).EQ.YY(1)
     &				) GAP = .FALSE.
	ENDIF
C
C if we have a gap, then flush out previous bits, and buffer
C out first point
	IF (GAP) THEN
	   CALL SRIBFF(2)
	   SRIBFP = 1
	   SRIBFX(1) = XX(1)
	   SRIBFY(1) = YY(1)
	   SRIBFZ(1) = ZZ(1)
	ENDIF
C
C buffer second point
	IF (SRIBFP.GE.SRIBFM) CALL SRIBFF(1)	! flush buffer
	SRIBFP = SRIBFP + 1
	SRIBFX(SRIBFP) = XX(2)
	SRIBFY(SRIBFP) = YY(2)
	SRIBFZ(SRIBFP) = ZZ(2)
C
	RETURN
	END
