C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1994-10-27 11:49:48.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION FRTRGP
C
**	IDENT	27OC94
**	MODULE	FRTRGP
C
C Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author Paul Hardy after SOL version by TJI
C Created				PGH	17-Jun-1983
C
C to set up a GROup of FCs, for feature code selection
C
	IMPLICIT NONE
C
C
**	IF LSLLIB
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNLSL:EXCEPTION.CMN/	!for ERRNUM
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
**	IFF
***	COMMON/LSL$CMNVIO:CMDCOM/	! for CMDLIB stuff
**	ENDC
***	COMMON/LSL$CMNFRT:FRTGRP/	! for the group tables
C
C functions called
C
	LOGICAL		RDINT, RDCH, RDCHS
	INTEGER*4	RDCOMM
	INTEGER*4	ADDNAM
C
C workspace
C
	INTEGER		PLACE		! place in array of GROup names
	BYTE		CH		! character read
	INTEGER*2	IARG,IARG1,IARG2! the integer arguments
	INTEGER		I		! loop variable
	LOGICAL 	NEWGRO		! T if new group
	LOGICAL		GOTONE,GOTTWO	! got any FCs?
C
C init things
C
	FRTRGP = .FALSE.		! assume will succeed
	IF (GRPMAX.LE.0) GOTO 920	! no room for any groups
	NEWGRO = .FALSE.		! assume not new group
	PLACE = 0			! no position for name yet
	GOTONE = .FALSE.		! not got any FCs yet
	GOTTWO = .FALSE.
	IF (GRPCNT.LE.0) CALL INITAB(%VAL(GRPCMT_LOC),GRPMAX*2+2)
**	IF LSLLIB
	CALL SAVTAB(GRPSAV)		! save table, as ACDx may ADDNAM
**	ENDC
C
C get hold of a group name and look it up in the table
C
	IF (RDCHS(CH)) GOTO 910	! nothing there
	CALL BSCH
	NOMESS = .TRUE.			! disable CMDLIB moans
	PLACE = RDCOMM(%VAL(GRPCMT_LOC))! what is it ?
	NOMESS = .FALSE.		! re-enable CMDLIB moans
	IF (PLACE.LT.0) GOTO 910	! integer cmd (shouldn't happen)
***	IF LSLLIB
	NEWGRO = (ERRNUM.EQ.LSL__UNEXPCMD) ! is it a new group ?
***	IFF
	NEWGRO = (ERRNUM.EQ.ERRUXS)
***	ENDC
	IF ((PLACE.EQ.0).AND.(.NOT.NEWGRO)) THEN ! something wrong
C
***	IF LSLLIB
	   CALL LSL_CMDERR
***	IFF
	   CALL CMDERR
***	ENDC
C
	   GOTO 910
	ENDIF
C
C and it must have at least one argument
C
	IF (RDINT(IARG1)) GOTO 910	! missing arg
	IF (IARG1.LT.0.OR.IARG1.GE.GRPMXC) GOTO 910 ! out of range
	IARG2 = IARG1
C
	IF (NEWGRO) THEN
C
C here, didn't find the word in the table - start it anew
C
	   IF (GRPCNT.GE.GRPMAX) GOTO 920 ! no room for more
**	IF LSLLIB
	   CALL SELTAB(GRPSAV)		! select table, - ACDx may ADDNAM
**	ENDC
	   PLACE = ADDNAM(CMDNST)	! add it to the table
**	IF LSLLIB
	   CALL SAVTAB(GRPSAV)		! save table, as ACDx may ADDNAM
**	ENDC
	   IF (PLACE.LE.0) GOTO 920	! no room for more
	   GRPCNT = GRPCNT + 1		! keep track of how many
C
C clear this group
	   CALL VIOCLR(%VAL(GRPFCT_LOC+(PLACE-1)*GRPMXC/8),GRPMXC/8)
	ENDIF
C
C here, we have found the name we looked for, so continue to add
C selections into this place in the table
C
	GOTONE = .TRUE.			! already got half of a range
	GOTTWO = .FALSE.
C
C now get numbers of other FC(s)
C
130	IF (GOTONE) GOTO 131
	IF (RDCHS(CH)) GOTO 150
	IF (CH.NE.44) CALL BSCH		! skip comma
131	IF (RDINT(IARG)) GOTO 150	! get number, jump if absent
	IF (IARG.LT.0) THEN
	   IF (.NOT.GOTONE) GOTO 910	! can't start with '-'
	   GOTTWO = .TRUE.		! second part of range
	   IARG = -IARG
	ENDIF
	IF (IARG.LT.0.OR.IARG.GE.GRPMXC) GOTO 920
	IARG2 = IARG			! guess end of range
	IF (GOTTWO) GOTO 150		! deal with what we have
	IARG1 = IARG			! start of range
	GOTONE = .TRUE.
	GOTO 131			! keep looking for range
C
C here with a range (possibly just of one)
C
150	IF (.NOT.GOTONE) GOTO 999	! nothing at all
	IF (IARG2.LT.IARG1) THEN	! swap them over
	   I = IARG2
	   IARG2 = IARG1
	   IARG1 = I
	ENDIF
C
C now set things up - we insert the new bits
C
	DO 180 I = IARG1,IARG2
	   CALL LIB$INSV(1,I,1,%VAL(GRPFCT_LOC+(PLACE-1)*GRPMXC/8))
180	CONTINUE
	GOTONE = .FALSE.
	GOTTWO = .FALSE.
	GOTO 130			! look to see if more numbers
C
C here if run out of places in the group table
C
920	CALL FRTWRT('Insufficient space in group table')
	GOTO 990
C
910	CALL FRTWRT('Bad group command')
990	FRTRGP = .TRUE.
999	RETURN
	END
