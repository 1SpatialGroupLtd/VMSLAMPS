C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-09-04 18:55:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION STOP_TAB( IERR )
C
***	IDENT	04SE84
***	MODULE	STOP_TAB
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 21 August 1984
C
C This is the closedown routine for the TABLE_MONITOR library
C - it puts the table monitor process back to sleep, and sets a null
C lock on the relevant resource
C
C it does not unmap from the global section, nor does it disassociate
C from the common event flag cluster
C
C we return FALSE if it all works, and TRUE if we fail
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C and our own parameters
C
***	PARAMETER/CMN:TABMON/		! names, offsets, etc
C
C we were passed
C
	INTEGER*4	IERR		! error return
C
C and we call
C
	INTEGER*4	SYS$SETEF	! set the 'hibernate' flag
	LOGICAL		UNLOCK		! unlock the resource
	LOGICAL		CHECK_STATE	! is it hibernating?
C
C workspace
C
	LOGICAL		IN_HIB		! well, is it?
C
C
C assume that things go badly
C
	STOP_TAB = .TRUE.
C
C check if the thing is already hibernating (ie we have presumably
C been called spuriously...)
C
	IF ( CHECK_STATE( IN_HIB, IERR ) ) GOTO 9999
	IF ( IN_HIB ) THEN
	   IERR = -2		! our own error if already asleep
	   GOTO 9999
	ENDIF
C
C so we must set the event flag saying 'go to sleep'
C
	IERR = SYS$SETEF( %VAL( HIBERNATE ) )
	IF ( .NOT.IERR ) GOTO 9999
C
C and next we attempt a null lock on the global section
C
	IF ( UNLOCK( IERR ) ) GOTO 9999
C
C so we have presumably succeeded in stopping things...
C
	STOP_TAB = .FALSE.
C
C failure joins us here
C
9999	RETURN
	END

