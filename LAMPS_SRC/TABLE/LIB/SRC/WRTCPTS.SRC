	LOGICAL FUNCTION WRITE_CPTS( CPTS, IERR )
C
***	IDENT	04SE84
***	MODULE	WRITE_CPTS
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 3 September 1984
C
C This routine writes the 'corner points' array to the global section,
C and sets a flag in the global section to show it has done so
C
C we return FALSE if it all works, and TRUE if we fail
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C and our own parameters
C
***	PARAMETER/CMN:TABMON/		! names, offsets, etc
C
C and common
C
***	COMMON/CMN:SECTION/		! global section base, etc
C
C we were passed
C
	INTEGER*4	CPTS( MAP_CPTS_SIZ )	! the array
	INTEGER*4	IERR			! error return
C
C and we call
C
	LOGICAL		WRITE_LOCK	! establish an exclusive lock
	LOGICAL		UNLOCK		! release it again
	INTEGER*4	SYS$UPDSEC	! force update of section
C
C and workspace
C
	INTEGER		I		! for the DO loop
C
C assume that things go badly
C
	WRITE_CPTS = .TRUE.
C
C and now assert an exclusive lock on the global section...
C
	IF ( WRITE_LOCK(IERR) ) GOTO 9999
C
C and so let us copy the array over
C
	DO 100 I = 1, MAP_CPTS_SIZ
	   CALL COPY_LONG( CPTS(I), %VAL( SEC_BASE +
     &					  MAP_CPTS +
     &					  (I-1)*LONG_WORD ) )
100	CONTINUE
C
C and note that we have done this
C
	CALL COPY_BYTE( .TRUE., %VAL( SEC_BASE+SET_CPTS ) )
C
C and now unlock the lock
C
	IF ( UNLOCK(IERR) ) GOTO 9999
C
C and force an update of the section
C
	IERR = SYS$UPDSEC( SEC_BASE,,,,,,,)
	IF ( .NOT.IERR ) GOTO 9999
C
C so we have presumably succeeded
C
	WRITE_CPTS = .FALSE.
C
C failure joins us here
C
9999	RETURN
	END
