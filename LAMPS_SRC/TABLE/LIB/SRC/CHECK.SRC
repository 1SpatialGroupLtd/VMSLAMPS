C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-08-13 14:56:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CHECK_STATE( IN_HIB, IERR )
C
***	IDENT	13AU85
***	MODULE	CHECK_STATE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 September 1984
C
C This function checks whether the TABLE_MONITOR is currently in
C HIBERNATE state
C
C We return TRUE if something goes wrong, FALSE if all is OK
C
	IMPLICIT NONE
C
C we are passed
C
	LOGICAL		IN_HIB		! true if monitor hibernating
	INTEGER*4	IERR		! error return
C
C system parameters
C
	INCLUDE		'($SSDEF)'
	INCLUDE		'($JPIDEF)'
C
C common blocks
C
***	COMMON/CMN:TABNAMES/
C
C and the ones Fortran doesn't believe in (silly DEC)
C
	INTEGER		SCH$C_HIB
	INTEGER		SCH$C_HIBO
	EXTERNAL	SCH$C_HIB
	EXTERNAL	SCH$C_HIBO
C
C functions we shall need
C
	INTEGER*4	SYS$GETJPI	! get info about a process
	INTEGER*4	LIB$GET_EF	! get a spare efn
	INTEGER*4	LIB$FREE_EF	! free it again
	INTEGER*4	SYS$WAITFR	! wait for event flag
C
C workspace
C
	INTEGER*4	EFN		! event flag for synchronising
	INTEGER*4	ITMLST(4)	! item list
	INTEGER*2	CODLEN(2)	! first longword of item list
	INTEGER*4	RESULT		! results buffer
C
	EQUIVALENCE	(ITMLST(1),CODLEN(1))
C
	INTEGER*2	IOSB(4)		! IO status block
C
C be pessimistic
C
	CHECK_STATE = .TRUE.
C
C first, we get a spare event flag, for waiting with
C
	IERR = LIB$GET_EF( EFN )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999	! give up
C
C and set up the item list...
C
	CODLEN(1) = 4			! RESULT is 4 bytes long
	CODLEN(2) = JPI$_STATE		! we want the state
	ITMLST(2) = %LOC(RESULT)	! address of result buffer
	ITMLST(3) = 0			! assume length returned OK
	ITMLST(4) = 0			! terminate the item list
C
C so let us enquire about the current state of the table monitor
C
	IERR = SYS$GETJPI(
     &			%VAL(EFN),		! completion event flag
     &			,			! don't know PID
     &			MONITOR_NAME(1:MONITORL),! but do know its name
     &			ITMLST,			! item list
     &			IOSB,			! final status block
     &			,			! no AST address
     &			 )			! no AST parameter
C
C check whether that was submitted OK
C
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9990	! give up (free EFN)
C
C and wait for it to complete...
C
	IERR = SYS$WAITFR( %VAL(EFN) )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9990	! give up (free EFN)
C
C so check the status block...
C
	IF ( IOSB(1).NE.SS$_NORMAL ) THEN
	  IERR = IOSB(1)
	  GOTO 9990				! give up (free EFN)
	ENDIF
C
C and was the thing hibernating?
C
	IN_HIB = ( RESULT.EQ.%LOC(SCH$C_HIB) .OR.
     &		   RESULT.EQ.%LOC(SCH$C_HIBO) )
C
C and finally, free the event flag
C
	IERR = LIB$FREE_EF( EFN )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C so we have succeeded...
C
	CHECK_STATE = .FALSE.
C
9999	RETURN
C
C *********************************************************************
C
C error state - we had a spare event flag, so free it if we can
C
9990	CALL LIB$FREE_EF( EFN )		! no check if this works...
	GOTO 9999
C
	END
