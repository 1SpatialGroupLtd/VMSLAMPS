C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-16 11:49:50.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION CLOSE_TAB( IERR )
C
***	IDENT	16DE89
***	MODULE	CLOSE_TAB
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 September 1984
C
C This is the final closedown routine for the TABLE_MONITOR library
C - it puts the table monitor process back to sleep, and undoes
C everything in sight
C
C we return FALSE if it all works, and TRUE if we fail
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C and our own parameters
C
***	PARAMETER/CMN:TABMON/		! names, offsets, etc
***	COMMON/CMN:SECTION/
***	COMMON/CMN:LOCK/
***	COMMON/CMN:TABLE/
C
C we were passed
C
	INTEGER*4	IERR		! error return
C
C and we call
C
	INTEGER*4	SYS$SETEF	! set the 'hibernate' flag
	INTEGER*4	SYS$DELTVA	! remove ref to section
	INTEGER*4	SYS$DEQ		! undo our lock
	INTEGER*4	SYS$DACEFC	! lose common efc
	LOGICAL		STOP_TAB	! stop the thing down
C
C assume that things go badly
C
	CLOSE_TAB = .TRUE.
C
C stop things first
C - if we fail because the TABLE_MONITOR is already hibernating
C (ie IERR returns as -2) then we carry on - a call of STOP followed by
C a call of CLOSE is legal
C
	IF ( STOP_TAB( IERR ) ) THEN
	   IF (IERR.NE.-2) GOTO 9999
	ENDIF
C
C and now clear the rest up...
C unmap the global section
C
	IERR = SYS$DELTVA( SEC_ADDR, , )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C remove the associated event flag cluster
C
	IERR = SYS$DACEFC( %VAL(EFC_FIRST) )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C and finally, relinquish our locks on the section and the table
C
	IERR = SYS$DEQ( %VAL(LOCKID), , , )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
	IERR = SYS$DEQ( %VAL(TABLE_LOCKID), , , )
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C so we have presumably succeeded in stopping things altogether...
C
	CLOSE_TAB = .FALSE.
C
C failure joins us here
C
9999	RETURN
	END

