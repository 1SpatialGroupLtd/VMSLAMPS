	LOGICAL FUNCTION READ_LOCK( IERR )
C
***	IDENT	29AU84
***	MODULE	READ_LOCK
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 26 July 1984
C
C This routine attempts to place a protected read lock on the
C resource LSL_TABLE_LOCK
C
C It returns TRUE if it fails, but FALSE on success
C
	IMPLICIT NONE
C
C lock definitions and system definitions
C
	INCLUDE		'($SSDEF)'
	INCLUDE		'($LCKDEF)'
C
C we were passed
C
	INTEGER*4	IERR		! return from function
C
C other parameters
C
***	PARAMETER/CMN:TABMON/		! for LOCK_NAME
C
C common
C
***	COMMON/CMN:LOCK/		! for STATUS/LOCKID
C
C functions used
C
	INTEGER*4	SYS$ENQW	! enqueue a lock request
C					! and wait for result
C
C
C start off with pessimism
C
	READ_LOCK = .TRUE.
C
C now let us attempt the lock...
C
	IERR = SYS$ENQW(
     &			,			! efn
     &			%VAL(LCK$K_PRMODE),	! protected read
     &			STATUS,			! status block
     &			%VAL(LCK$M_CONVERT),	! flags - convert lock
     &			,			! resource name
     &			,			! parent lock ID
     &			,			! astadr
     &			,			! astprm
     &			,			! blocking ast
     &			,			! access mode
     &			 )			! final arg reserved
C
C what status do we have for the enqueue?
C
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C and what was the final status?
C
	IF ( STATUS(1).NE.SS$_NORMAL ) THEN
	   IERR = STATUS(1)
	   GOTO 9999
	ENDIF
C
C otherwise, we have success
C
	READ_LOCK = .FALSE.
C
9999	RETURN
	END
