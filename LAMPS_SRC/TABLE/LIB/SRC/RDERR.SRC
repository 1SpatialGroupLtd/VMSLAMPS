C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1991-10-23 12:16:44.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION READ_ERROR( ERRBUF, ERRLEN, ERRNUM, IERR )
C
***	IDENT	23OC91
***	MODULE	READ_ERROR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 13 August 1984
C
C This function reads the error message and number from the
C global section
C
C we return TRUE if something goes wrong (!), otherwise FALSE
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C define our offsets
C
***	PARAMETER/CMN:TABMON/
C
C and common which holds the relevant addresses for the section
C
***	COMMON/CMN:SECTION/
C
C and functions
C
	LOGICAL		READ_LOCK	! establish a protected read
C					! lock on the section
	LOGICAL		UNLOCK		! release the lock again
	LOGICAL		RELOCK_TABLE	! reprime blocking AST
	INTEGER*4	SYS$CLREF	! set an event flag
C
C passed
C
	BYTE		ERRBUF(ERROR_MESS_LEN+1)	! error buffer
	INTEGER*2	ERRLEN				! error length
	INTEGER*4	ERRNUM				! error number
	INTEGER*4	IERR		! error return
C
C workspace
C
	INTEGER*4	IERR2		! auxiliary error
	INTEGER*4	IERR3		! auxiliary error
C
C
C assume the worst
C
	READ_ERROR = .TRUE.
C
C and assume no auxiliary error
C
	IERR2 = SS$_NORMAL
	IERR3 = SS$_NORMAL
C
C unset the error length
C
	ERRLEN = 0
C
C first we must ensure that we have the lock
C
	IF ( READ_LOCK(IERR) ) GOTO 9999
C
C re-prime blocking AST
C
	IF ( RELOCK_TABLE( IERR ) ) IERR2 = IERR
C
C and so let us copy things over
C
	CALL COPY_BYTE( %VAL( SEC_BASE+ERROR_PTR ), ERRLEN )
	IF (ERRLEN.GT.0) THEN
	   CALL COPY_TEXT( %VAL( SEC_BASE+ERROR_MESSAGE ), ERRBUF,
     &							   ERRLEN )
	ENDIF
	CALL COPY_LONG( %VAL( SEC_BASE+ERROR_NUMBER ),  ERRNUM )
C
C now clear the 'got an error' event flag
C - note that the event flag already being clear is not treated as
C an error - the user is perfectly at liberty to read on spec, or
C play with the event flag themselves
C
	IERR = SYS$CLREF( %VAL(GOT_ERROR) )
	IF ( IERR.NE.SS$_WASSET .AND.
     &	     IERR.NE.SS$_WASCLR ) IERR3 = IERR
C
C even if that failed, we must not forget to unlock
C - now unlock
C
	IF ( UNLOCK(IERR) ) GOTO 9999
C
C now check if there was an error with the event flag clear
C
	IF ( IERR2.NE.SS$_NORMAL ) THEN
	   IERR = IERR2
	   GOTO 9999
	ELSEIF ( IERR3.NE.SS$_NORMAL ) THEN
	   IERR = IERR3
	   GOTO 9999
	ENDIF
C
C success
C
	READ_ERROR = .FALSE.
C
C and that is all we do
C
9999	RETURN
	END
