C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-10-27 12:47:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION RESUME_TAB( TMO, IERR )
C
***	IDENT	27OC86
***	MODULE	RESUME_TAB
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 4 September 1984
C
C This function is called to resume operation after a call of STOP_TAB
C - it merely wakes the table monitor process up
C
C we return FALSE if it all works, and TRUE if we fail
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C and our own parameters
C
***	PARAMETER/CMN:TABMON/		! names, offsets, etc
C
C and common
C
***	COMMON/CMN:SECTION/		! global section base, etc
***	COMMON/CMN:TABNAMES/
C
C we were passed
C
	INTEGER*4	TMO		! timeout in 1/100 seconds
	INTEGER*4	IERR		! error return
C
C and we call
C
	INTEGER*4	SYS$WAKE	! to wake the process up
	INTEGER*4	SYS$SETEF	! to set an event flag
	LOGICAL		WRITE_LOCK
	LOGICAL		UNLOCK
	LOGICAL		TAB_HAVARG	! check for presence
	LOGICAL		CHECK_STATE	! is the monitor in hibernate?
C
C and workspace
C
	LOGICAL		IN_HIB		! in hibernation?
C
C assume that things go badly
C
	RESUME_TAB = .TRUE.
C
C is the table monitor hibernating? if it isn't, then we shouldn't be
C doing any of this
C
	IF ( CHECK_STATE( IN_HIB, IERR ) ) GOTO 9999
	IF ( .NOT.IN_HIB ) THEN
	   IERR = -2			! signal our own error
	   GOTO 9999			! and give up
	ENDIF
C
C and now assert a real lock on the global section...
C
	IF ( WRITE_LOCK(IERR) ) GOTO 9999
C
C and so let us copy the time-out over - NB this is an optional arg
C
	IF ( TAB_HAVARG(1) ) THEN
	   CALL COPY_LONG( TMO, %VAL( SEC_BASE+TIME_OUT) )
	ELSE
	   CALL COPY_LONG( DEFAULT_TIMEOUT, %VAL( SEC_BASE+TIME_OUT) )
	ENDIF
C
C and now unlock the lock
C
	IF ( UNLOCK(IERR) ) GOTO 9999
C
C and set the 'ready for a button' event flag
C
	IERR = SYS$SETEF( %VAL(NO_BUTTON) )
	IF ( .NOT.IERR ) GOTO 9999
C
C and finally, we must attempt to wake the table monitor process up
C
	IERR = SYS$WAKE( , MONITOR_NAME(1:MONITORL))
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C so we have presumably succeeded in starting things up...
C
	RESUME_TAB = .FALSE.
C
C failure joins us here
C
9999	RETURN
	END
