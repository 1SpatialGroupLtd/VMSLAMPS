C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-08-28 16:12:00.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM BUFFER
C
***	IDENT	28AU84
***	MODULE	BUFFER
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 24 August 1984
C
C A program to test the circular buffer routines...
C
	IMPLICIT NONE
C
C include some parameters
C
	INCLUDE	'($RMSDEF)'
C
***	COMMON/LSL$CMNVIO:CMDCOM/
C
C we call
C
	LOGICAL		READ_BUF	! read a unit
	LOGICAL		WRITE_BUF	! write one
C
	LOGICAL		GOT_ROOM
	LOGICAL		GOT_CHAR
C
	INTEGER		TTRSTR		! get a command line
	INTEGER		RDCOMM		! read a command
C
	INTEGER		RDSTR		! read a string
	LOGICAL		RDCHS
	LOGICAL		RDINT
C
	EXTERNAL	TEST_CMD_TABLE
	EXTERNAL	GOT_CMD_TABLE
C
C and workspace
C
	INTEGER		CMD
C
	PARAMETER	BUF_SIZ = 100
	BYTE		BUF( BUF_SIZ )
	BYTE		LEN
C
	INTEGER		NUM
	BYTE		ICH
	INTEGER*4	IERR
C
	INTEGER*4	STRING(2)
	INTEGER		STRLEN
	EQUIVALENCE	(STRLEN,STRING(1))
C
	BYTE		STRBUF( BUF_SIZ )
C
	STRING(2) = %LOC( STRBUF )
C
C *********************************************************************
C
	CALL WRITEF('Circular buffer routine test program')
C
C let us see what they want us to do...
C
20	CALL WRITEF
	IF ( TTRSTR( ,'Next action: ', IERR).LT.0 ) THEN
C
	   IF (IERR.NE.RMS$_EOF) THEN
	      CALL WRITEF('Error reading command input')
	      CALL GEN_SYSMSG(IERR)
	   ENDIF
C
	   GOTO 9999			! leave the program
C
	ENDIF
C
	CALL BSLN
C
	CMD = RDCOMM( TEST_CMD_TABLE )
	IF (CMD.EQ.0) THEN
	   CALL WRITEF('Main  actions are START, READ, WRITE')
	   CALL WRITEF('Other actions are GET, PUT, GOT')
	   GOTO 20
	ENDIF
C
	GOTO ( 100, 200, 300, 400, 500, 600 ), CMD
C
C *********************************************************************
C
C *** START	- so start the buffer up
C
100	CALL INIT_BUFFER
	CALL WRITEF('Circular buffer now initialised')
	CALL DISPLAY
	GOTO 20
C
C *********************************************************************
C
C *** READ	- read the next item from the buffer
C
200	LEN = 0
	IF ( READ_BUF( BUF, LEN, BUF_SIZ-1 ) ) THEN
	   IF ( LEN.LT.0 ) THEN
	      CALL WRITEF('Length is %^B%N - buffer out of step',LEN)
	   ELSEIF ( LEN.GT.(BUF_SIZ-1) ) THEN
	      CALL WRITEF('Length is %^B%N - max size is %N',
     &				        LEN,		 BUF_SIZ-1 )
	   ELSE
	      CALL WRITEF('Buffer is empty')
	   ENDIF
	   CALL WRITEF('Nothing read')
	ELSE
	   BUF(LEN+1) = 0
	   CALL WRITEF('%^B%N chars - "%AZ"',LEN,BUF)
	ENDIF
	CALL DISPLAY
	GOTO 20
C
C *********************************************************************
C
C *** WRITE	- write the string into the buffer
C
300	IF ( RDCHS(ICH) ) THEN
	   CALL WRITEF('Please specify what to WRITE in quotes')
	   GOTO 20
	ELSEIF ( ICH.NE.'''' .AND. ICH.NE. '"' ) THEN
	   CALL WRITEF('Please specify what to WRITE in quotes')
	   CALL WRITEF(' - quotes are '' and "')
	   GOTO 20
	ENDIF
	STRLEN = BUF_SIZ
	STRLEN = RDSTR( STRING, ICH )
	IF ( STRLEN.LE.0 ) THEN
	   CALL WRITEF('Please specify what to WRITE in quotes')
	ELSEIF ( STRLEN.GT.15 ) THEN
	   CALL WRITEF('Too many characters - max 15')
	ELSE
	   IF ( WRITE_BUF( STRBUF, STRLEN ) ) THEN
	      CALL WRITEF('No room in buffer')
	      CALL WRITEF('Nothing written')
	   ELSE
	      CALL WRITEF('%N chars - "%S"',STRLEN,STRING)
	   ENDIF
	ENDIF
	CALL DISPLAY
	GOTO 20			! get next command
C
C *********************************************************************
C
C *** PUT_CH	- insert a single char
C
400	IF ( .NOT.RDCHS(ICH) ) THEN
	   IF ( ICH.EQ.'''' .OR. ICH.EQ.'"' ) THEN
	      STRLEN = BUF_SIZ
	      STRLEN = RDSTR( STRING, ICH )
	      IF ( STRLEN.LE.0 ) THEN
	         CALL WRITEF('Please specify char to PUT_CH in quotes')
		 CALL WRITEF('- or a length (ie a number)')
	      ELSE
	         IF ( STRLEN.GT.1 ) THEN
		    CALL WRITEF('Only one char may be PUT')
		 ELSE
		    CALL PUT_CH( STRBUF(1) )
		    CALL WRITEF('PUT char "%A1"',STRBUF(1))
		 ENDIF
	      ENDIF
	   ELSE
	      CALL BSCH
	      IF ( RDINT(NUM) ) THEN
	         CALL WRITEF('Please specify char to PUT_CH in quotes')
		 CALL WRITEF('- or a length (ie a number)')
	      ELSE
		 IF (NUM.LE.0) THEN
		    CALL WRITEF('Must be positive')
		 ELSE
		    CALL PUT_CH( -NUM )
	            CALL WRITEF('PUT length %N',NUM)
		 ENDIF
	      ENDIF
	   ENDIF
	ELSE
	   CALL WRITEF('Please specify char to PUT_CH in quotes')
	   CALL WRITEF('- or a length (ie a number)')
	ENDIF
C
	CALL DISPLAY
	GOTO 20			! get next command
C
C *********************************************************************
C
C *** GET_CH	- read a single char
C
500	CALL GET_CH( ICH )
	IF ( ICH.LT.0 ) THEN
	   CALL WRITEF('Read length %^B%N',-ICH)
	ELSE
	   CALL WRITEF('GOT char "%A1"',ICH)
	ENDIF
C
	CALL DISPLAY
	GOTO 20			! get next command
C
C *********************************************************************
C
C *** GOT	- check GOT what?
C
600	CMD = RDCOMM( GOT_CMD_TABLE )
	IF ( CMD.EQ.0 ) THEN
	   CALL WRITEF('You may ask GOT ROOM or GOT CHAR')
	   GOTO 20
	ENDIF
C
	GOTO ( 620, 630 ), CMD
C
C *** GOT ROOM
C
620	IF ( ARGMSG ) THEN
	   CALL WRITEF('GOT ROOM for how many bytes?')
	ELSE
	   IF ( GOT_ROOM( INTARG(1) ) ) THEN
	      CALL WRITEF('Buffer has room')
	   ELSE
	      CALL WRITEF('There is no room')
	   ENDIF
	ENDIF
	GOTO 20
C
C *** GOT CHAR
C
630	IF ( GOT_CHAR() ) THEN
	   CALL WRITEF('There are chars in the buffer')
	ELSE
	   CALL WRITEF('The buffer is empty')
	ENDIF
	CALL DISPLAY
	GOTO 20
C
C *********************************************************************
C
C and that's all
C
9999	CALL WRITEF('Goodbye')
	CALL EXIT
	END
