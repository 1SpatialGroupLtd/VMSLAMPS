C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-10 11:47:18.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
C
C This is the parameter block for the TABLE_MONITOR process
C It should also be used by the library routines which interface
C with TABLE_MONITOR via the lock manager and global section
C
C *********************************************************************
C
C The following value defines what version of this file we are in.
C The table monitor will write this value into the global section,
C in the SECTION_VERSION field, and the library will check that it
C matches the value it expects
C
C Thus ALWAYS remember to increment this value when changing this file
C
	PARAMETER	FILE_VERSION = 1
C
C
C *********************************************************************
C
	CHARACTER*(*)	L_NAME	! fixed part of lock name for global
				! section
	CHARACTER*(*)	LT_NAME ! fixed part of lock name for tablib
	CHARACTER*(*)	S_NAME	! fixed part of global section file name
	CHARACTER*(*)	E_NAME	! fixed part of event flag cluster name
	CHARACTER*(*)	T_NAME  ! fixed part of table monitor name
	CHARACTER*(*)	ER_NAME	! fixed part of error file name
C
	PARAMETER	(L_NAME  = 'T_LOCK_')
	PARAMETER	(LT_NAME = 'TAB_LOCK_')
	PARAMETER	(S_NAME  = 'TABLE_')
	PARAMETER	(E_NAME  = 'T_EFC_')
	PARAMETER	(T_NAME  = 'MONITOR_')
	PARAMETER	(ER_NAME = 'LSL$MGMT:TABLE_')
C
C and define default names to use
C
	CHARACTER*(*)	DEF_L_NAME   ! lock name for global section
	CHARACTER*(*)	DEF_LT_NAME  ! lock name for tablib
	CHARACTER*(*)	DEF_S_NAME   ! section name
	CHARACTER*(*)	DEF_E_NAME   ! event flag cluster name
	CHARACTER*(*)	DEF_T_NAME   ! monitor name
	CHARACTER*(*)	DEF_ER_NAME  ! error file name
	CHARACTER*(*)	DEF_R_NAME   ! logical name for decoding routine
C
	PARAMETER	(DEF_L_NAME  = 'LSL_TABLE_LOCK')
	PARAMETER	(DEF_LT_NAME = 'TABLIB_TABLE_NAME')
	PARAMETER	(DEF_S_NAME  = 'LSLTABLE')
	PARAMETER	(DEF_E_NAME  = 'LSL_TABLE_EFC')
	PARAMETER	(DEF_T_NAME  = 'TABLE_MONITOR')
	PARAMETER	(DEF_ER_NAME = 'LSL$MGMT:TABMON')
	PARAMETER	(DEF_R_NAME  = 'LSL$TABMON_ROUTINE')
C
C ********************************************************************
C
C define a logical name that TABLIB must find if no other is given
C
	CHARACTER*(*)	LOG_NAME
C
	PARAMETER	(LOG_NAME = 'LSL$MONITOR_TABLE')
C
C *********************************************************************
C
C define a default time out of 1/10 second
C		 (ie 10 hundredths of a second)
C
	PARAMETER	DEFAULT_TIMEOUT = 10
C
C *********************************************************************
C
C and some event flags for communicating with the library routines
C
	PARAMETER	EFC_FIRST  = 64
	PARAMETER	EFC_LAST   = EFC_FIRST + 31
C
	PARAMETER	NEW_BUTTON = EFC_FIRST
	PARAMETER	STREAMED   = NEW_BUTTON+1
	PARAMETER	GOT_ERROR  = STREAMED  +1
	PARAMETER	HIBERNATE  = GOT_ERROR +1
	PARAMETER	TABLE_EFN  = HIBERNATE +1
	PARAMETER	NO_BUTTON  = TABLE_EFN +1
	PARAMETER	ASK_TABLE  = NO_BUTTON +1
	PARAMETER	WAIT_TABLE = ASK_TABLE +1
C
	PARAMETER	FIRST_FREE = WAIT_TABLE+1
C
	PARAMETER	EFC_WAIT   = '07'X	!  1  2  4  .  .  .  .  .
	PARAMETER	EFC_PUCK   = '05'X	!  1  .  4  .  .  .  .  .
	PARAMETER	EFC_STREAM = '06'X	!  .  2  4  .  .  .  .  .
	PARAMETER	EFC_TABLE  = '38'X	!  .  .  .  8 10 20
	PARAMETER	EFC_BREQ   = '18'X	!  .  .  .  8 10  .
	PARAMETER	EFC_TABLE_E= '78'X	!  .  .  .  8 10 20 40  .
	PARAMETER	EFC_BREQ_E = '58'X	!  .  .  .  8 10  . 40  .
	PARAMETER	EFC_ASKERR = '84'X      !  .  .  4  .  .  .  . 80
C
C event flags
C
C NEW_BUTTON is set when a button (not the stream button) is pressed
C STREAMED   is set if the stream button's coordinates have changed
C GOT_ERROR  is set when an error condition occurs
C HIBERNATE  is set if the TABLE_MONITOR should hibernate again
C TABLE_EFN  is set when the table responds - it is 'private' to the
C	     TABLE_MONITOR itself
C NO_BUTTON  is set when the library has read the button from the
C	     section, so the monitor 
C ASK_TABLE  is set if the table monitor is to probe the table (all
C            other inputs are lost)
C
C FIRST_FREE is the first free event flag in this cluster
C
C masks - firstly those for the library
C
C EFC_WAIT   is the mask for waiting for any of the first 3 event flags
C EFC_PUCK   is the mask for waiting for NEW_BUTTON or GOT_ERROR
C EFC_STREAM is the mask for waiting for STREAMED   or GOT_ERROR
C
C and then those used by the TABLE_MONITOR itself
C
C EFC_TABLE  is the mask for waiting for HIBERNATE or TABLE_EFN
C						   or NO_BUTTON
C EFC_BREQ   is the mask for waiting for HIBERNATE or TABLE_EFN only
C
C *********************************************************************
C
C and some parameters defining offsets within the global section
C (byte offsets, as usual)
C
	PARAMETER	LONG_WORD = 4
C
C first comes our identification number
C
	PARAMETER	SECTION_VERSION = 0
	PARAMETER	SEC_VER_LEN = LONG_WORD
C
C define the last button press on the puck (does not include
C presses of the streaming button)
C
	PARAMETER	LAST_BUTTON = SECTION_VERSION + SEC_VER_LEN
	PARAMETER	LAST_BUTTON_LEN = 1	! 1 byte only
	PARAMETER	LAST_BUTTON_PAD = 3	! 3 pad bytes
C
C and the X,Y coorinates of that button press
C
	PARAMETER	LAST_X = LAST_BUTTON + LAST_BUTTON_LEN
     &					     + LAST_BUTTON_PAD
	PARAMETER	LAST_Y = LAST_X + LONG_WORD
C
C and the coordinates which our streamed output has reached
C
	PARAMETER	STREAM_X = LAST_Y   + LONG_WORD
	PARAMETER	STREAM_Y = STREAM_X + LONG_WORD
C
C note whether we have stored the corner points of the map yet
C (these are actually written in by the first process to
C attempt to digitise them)
C
	PARAMETER	SET_CPTS = STREAM_Y + LONG_WORD
	PARAMETER	SET_CPTS_LEN = 1
	PARAMETER	SET_CPTS_PAD = 3
C
C and a place to store the corner points of the map
C We need 4*2 longwords to hold this data
C
	PARAMETER	MAP_CPTS = SET_CPTS + SET_CPTS_LEN
     &					    + SET_CPTS_PAD
C
	PARAMETER	MAP_CPTS_SIZ = 2*4
	PARAMETER	MAP_CPTS_LEN = MAP_CPTS_SIZ*LONG_WORD
C
C note the number of hundredths of a second to use as a time-out
C in deciding if a streamed button has been released
C
	PARAMETER	TIME_OUT = MAP_CPTS + MAP_CPTS_LEN
C
C and we must also have a place to hold an error message -
C first its length
C
	PARAMETER	ERROR_PTR = TIME_OUT + LONG_WORD
	PARAMETER	ERROR_PTR_LEN = 1
	PARAMETER	ERROR_PTR_PAD = 3
C
C and then the actual message itself
C
	PARAMETER	ERROR_MESSAGE  = ERROR_PTR + ERROR_PTR_LEN
     &						   + ERROR_PTR_PAD
	PARAMETER	ERROR_MESS_LEN = 80
C
C and also a system error code
C
	PARAMETER	ERROR_NUMBER = ERROR_MESSAGE + ERROR_MESS_LEN
C
C the X and Y coordinates of the last table probe
C
	PARAMETER	TABLE_X = ERROR_NUMBER + LONG_WORD
	PARAMETER	TABLE_Y = TABLE_X + LONG_WORD
C
C a flag to say if we are using new TABLIB (and thus an extra
C 2 event flags)
C
	PARAMETER	EXTRA_FLGS = TABLE_Y + LONG_WORD
C
C and the length of the table is thus
C
	PARAMETER	SECTION_SIZE = EXTRA_FLGS + LONG_WORD
C
