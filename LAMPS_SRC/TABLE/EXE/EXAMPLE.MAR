;
; * This file is part of the LAMPS distribution, released as a software
; * preservation project to archive digital history for future historians.
; * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
; *
; * Timestamp of this file for the 2002 release was: 1992-01-10 13:55:38.000000000 +0000
; *
; * This program is free software: you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation, version 3.
; *
; * This program is distributed in the hope that it will be useful, but
; * WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; * General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program. If not, see http://www.gnu.org/licenses/.
;
; This is an example of a table decode routine written in; VAX MACRO 32. It may be used as a starting point for decode routines; in cases when no Fortran compiler is available;; Copyright Laser Scan Laboratories Ltd., Cambridge, England.; Author:	Clarke Brunt		10-January-1992;; Must be linked as a shareable image with universal symbol DECODE.; e.g. (assuming routine is EXAMPLE.MAR);	$ MACRO EXAMPLE;	$ LINK/SHARE EXAMPLE,SYS$INPUT:/OPT;	UNIVERSAL=DECODE;	$ ...;; To probe the table directly, a prompt string is required. By default; the string 'V' is used (the prompt for an ALTEK 40 controller);; if another prompt string is required then a second entry point ; GET_TABLE_PROMPT should be used. This must also be a universal symbol; in the shared image, and the link instruction should be:;;	$ LINK/SHARE EXAMPLE,SYS$INPUT:/OPT;	UNIVERSAL=DECODE,GET_TABLE_PROMPT;	$ ...;; The command file DECODE.COM in the same directory as the example will; perform this task for you. (Include the .MAR on the end of the filename; to inform the command file that it is MACRO and not FORTRAN).;; ----------------------------------------------------------------------;;			 Use by programs;			 ---------------; In order to be used by a program, a logical name in either the group; or system tables must be defined to point to the sharable image. The; following programs currently use this facility:;; - Table Monitor;   Logical names LSL$TABMON_ROUTINE;	       or LSL$TABMON_ROUTINE_<terminal> (for a named monitor);; - LITES2;   Logical name LSL$TABMON_ROUTINE_<terminal>;; - DIGSYS;   Logical name LSL$DIGSYS_DECODE<n>;   (where <n> is the same number used in the table name LSL$DIG<n>);; Laserscan programs expect tables to measure in units of 0.02mm.; LITES2 can accept table output in other units (with the SETUP; TABLE_COUNT command). If this routine is to be used by other programs; then the coordinates should be scaled to units on 0.02mm; ----------------------------------------------------------------------;; Some parameters to ease changing things...;	LENGTH = 14		; length of string (without linefeed)	NDIG = 5		; number of digits in each coord	XPOS = 3		; start of X (first char is 0)	YPOS = 9		; start of Y	BPOS = 1		; position of button character; Main entry point to decode string in BUFF;	LOGICAL FUNCTION DECODE(BUFF,BUFLEN,BUT,X,Y);; this is an example for the ALTEK table format; format is '$L,xxxxx,yyyyy, where L can be 0-F or H (when table; is probed); It also allows for an option linefeed at the start of the record;; return TRUE if fail, FALSE if succeed;	.ENTRY DECODE,^M<R2>	MNEGL	#1,R0		; assume failure	MOVAB	@4(AP),R2	; address of buffer	CMPB	(R2),#10	; is first character linefeed?	BNEQ	10$	CMPL	@8(AP),#LENGTH+1 ; is length correct?	BNEQ	99$		; no	INCL	R2		; step past linefeed	BRB	20$10$:	CMPL	@8(AP),#LENGTH	; is length correct?	BNEQ	99$		; no20$:	CMPB	(R2),#^A/$/	; is first char $?	BNEQ	99$	CMPB	2(R2),#^A/,/	; is 3rd char ','	BNEQ	99$	CMPB	8(R2),#^A/,/	; is 9th char ','	BNEQ	99$	PUSHAB	XPOS(R2)	; x starts at 4th char	PUSHAL	@16(AP)		; return in 4th argument	CALLS	#2,GETCRD	; get x	BLBS	R0,99$		; failed?	PUSHAB	YPOS(R2)	; y starts at 10th char	PUSHAL	@20(AP)		; return in 5th argument	CALLS	#2,GETCRD	; get y	BLBS	R0,99$		; failed?;; If these units are not 0.02mm, then they should be scaled.; eg. if the table produces coordinates in 0.001mm then the following; lines should be uncommented;;;;	DIVL2	#20,@16(AP);;;	DIVL2	#20,@20(AP);	MOVZBL	BPOS(R2),R1	; get button (2nd char)	CMPL	R1,#48		; compare with '0'	BLSS	30$	CMPL	R1,#57		; compare with '9'	BGTR	30$	SUBL2	#48,R1		; convert '0' to '9' to integer	BRB	40$30$:	SUBL2	#55,R1		; convert 'A' (=65) to 'F' to integer; check value of button (note H is returned when table is interrogated)40$:	CMPL	R1,#0	BLSS	99$		; less than 0	CMPL	R1,#15	BLEQ	50$		; 0-15 so OK	CMPL	R1,#17	BNEQ	99$		; not 1750$:	MOVL	R1,@12(AP)	; return button in 3rd argument	CLRL	R0		; success99$:	RET;; and another subroutine that defines the prompt string, and length to; be used when interrogating the table position;;	SUBROUTINE GET_TABLE_PROMPT(PBUF,PBUFMAX,PBUFL);	.ENTRY	GET_TABLE_PROMPT,^M<>	MOVB	#^A/V/,@4(AP)	; return 'V'	MOVL	#1,@12(AP)	; length 1	RET; local subroutine to read a coordinate;	LOGICAL FUNCTION GETCRD(C,BUFF);	INTEGER	C;	BYTE	BUFF(5)	.ENTRY	GETCRD,^M<R2,R3,R4>	MNEGL	#1,R0		; assume failure	CLRL	R1		; zero the answer	MOVAB	@8(AP),R2	; get address of buffer	MOVL	#NDIG,R4	; count 5 characters10$:	MULL2	#10,R1		; multiply by 10 for each character	MOVZBL	(R2)+,R3	; get next character	CMPB	R3,#32		; ignore space	BEQL	50$20$:	CMPB	R3,#48		; compare with '0'	BLSS	99$	CMPB	R3,#57		; compare with '9'	BGTR	99$	SUBL2	#48,R3		; convert '0' to '9' to integer	ADDL2	R3,R1		; and add into answer50$:	SOBGTR	R4,10$		; loop for each character	MOVL	R1,@4(AP)	; return the answer	CLRL	R0		; success99$:	RET	.END