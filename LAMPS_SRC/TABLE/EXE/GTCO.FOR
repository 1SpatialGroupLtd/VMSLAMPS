C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-05-24 11:49:54.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
 	LOGICAL FUNCTION DECODE(BUFF,BUFLEN,BUT,X,Y)CC Copyright Laser Scan Laboratories Ltd., Cambridge, England.C Author	Clarke Brunt,	November 1985C Amended by	Tony J Ibbs,	November 1986C optional LF	Ron Russell	24-May-1988C	IMPLICIT NONECC function to decode a digitising table stringC - returns TRUE if it fails, FALSE if it succeedsCC	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * C	 * *  G T C O    v e r s i o n  (with optional linefeed) * * *C	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *CC NOTE that:CC	1) optional CR (carriage-return) is requiredC	2) optional LF (lin-feed) may or may not be disabledCC argumentsC	BYTE		BUFF(*)		! byte string to decode	INTEGER*2	BUFLEN		! length of byte string	INTEGER		BUT		! button number pressed	INTEGER		X		! x coordinate	INTEGER		Y		! y coordinateCC ----------------------------------------------------------------------C Example DECODE routine for use by programs to interpret digitisingC table input. It must be linked as a shareable image with universalC symbol DECODE, so that the program can pull it in at run-time.C e.g.C	$ FORTRAN DECODEC	$ LINK/SHARE DECODE,SYS$INPUT:/OPTC	UNIVERSAL=DECODEC	<CTRL/Z>C      	$ ...CC			 Use by programsC			 ---------------C In order to be used by a program, a logical name in either the groupC or system tables must be defined to point to the sharable image. TheC following programs currently use this facility:CC - Table MonitorC   Logical names LSL$TABMON_ROUTINEC	       or LSL$TABMON_ROUTINE_<terminal> (for a named monitor)CC - LITES2C   Logical name LSL$TABMON_ROUTINE_<terminal>CC - DIGSYSC   Logical name LSL$DIGSYS_DECODE<n>C   (where <n> is the same number used in the table name LSL$DIG<n>)CC ----------------------------------------------------------------------C	BYTE		TBUT		! temporary - button character	LOGICAL		GETCRD		! function to read a number	INTEGER		OFFCC The GTCO format is 'Fxxxxx yyyyy' terminated by <CR>, which lastC we don't see as it's our terminator...C	DECODE = .TRUE.			! assume failureCCC check for line feed	IF (BUFLEN.EQ.13.AND.BUFF(1).EQ.10) THEN	   OFF = 1	ELSE	   OFF = 0	ENDIFC	IF (BUFLEN-OFF.NE.12) GOTO 9999		! wrong lengthC	IF (BUFF(7+OFF).NE.' ') GOTO 9999	! bad separatorCC work out the button number - the button 'digit' is one of theC charactersC		0 1 2 3 4 5 6 7 8 9 : ; < = > ?CC which just happen to be the sixteen ASCII characters that startC at '0' and run through. Thus the following gives us the decimalC value of the button...C	TBUT = BUFF(1+OFF)	IF (TBUT.GE.'0' .OR. TBUT.LE.'?') THEN	   BUT = TBUT-'0'	ELSE	   GOTO 9999			! bad button digit	ENDIFC	IF (GETCRD(X,BUFF(2+OFF))) GOTO 9999	! get x	IF (GETCRD(Y,BUFF(8+OFF))) GOTO 9999	! get yC9000	DECODE = .FALSE.		! success9999	RETURN	ENDC ----------------------------------------------------------------------	LOGICAL FUNCTION GETCRD(C,BUFF)C	IMPLICIT NONEC	INTEGER	SIZE	PARAMETER (SIZE=5)C	INTEGER	C 	BYTE	BUFF(SIZE)C	INTEGER	IC	GETCRD = .TRUE.	C = 0	DO 100 I = 1,SIZE	   IF (BUFF(I).LT.'0'.OR.BUFF(I).GT.'9') GOTO 9999	   C = C*10 + BUFF(I) - 48100	CONTINUE	GETCRD = .FALSE.9999	RETURN	END                         