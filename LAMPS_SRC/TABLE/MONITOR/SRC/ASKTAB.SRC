C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-02-09 12:07:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ASKTAB
C
***	IDENT	09FE88
***	MODULE	ASKTAB
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author RW Russell, 5 February,1987
C
C Stop everything else, and get the position form the table
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE		'($IODEF)'
	INCLUDE		'($SSDEF)'
C
C common blocks, etc
C
***	PARAMETER/HERE:ERROR/		! error numbers
***	PARAMETER/CMN:TABMON/
C
***	COMMON/HERE:DIGADR/
***	COMMON/HERE:TABIFC/
***	COMMON/CMN:SECTION/
C
C functions
	INTEGER*4	SYS$QIOW	
	LOGICAL		WRITE_LOCK	! establish an exclusive
C					! lock on the section
	LOGICAL		UNLOCK		! release the lock again
	LOGICAL		DIGTRN
C
C local workspace
	INTEGER*4	IERR		! return from the function
	INTEGER*4	VAL
	INTEGER*4	LEN
	INTEGER*4	BUTTON
	INTEGER*4	IX,IY		! table coordinates
	INTEGER*2	IOSB(4)
	EQUIVALENCE	(IOSB,TABISB)
C
C take down any QIO that is up on the table line
	CALL STOPTAB
C
C and clear error event flag
	CALL SYS$CLREF(%VAL(GOT_ERROR))
C
C send qio
	IERR=SYS$QIOW(,			! efn
     &	              %VAL(TABCHN),		! channel
     &	              %VAL(IO$_READPROMPT.OR.
     &	              IO$M_PURGE.OR.IO$M_TIMED.OR.
     &	              IO$M_NOECHO),	! function
     &	              TABISB,		! iosb
     &	              ,			! astadr
     &	              ,			! astprm
     &	              TABBUF,		! 
     &	              %VAL(40),		! length of BUFF
     &	              %VAL(10),		! p3 - time out (10 seconds)
     &	              ,			! p4
     &	              TABPROMPT,	! p5 - prompt string
     &	              %VAL(TABPROMPTL))	! p6 - prompt string length
C
	IF (.NOT.IERR) THEN
	   CALL ERROR(ERR_QIOSUBMIT,IERR)
	   GOTO 9999
	ENDIF
	IF (.NOT.IOSB(1)) THEN
	   IERR = IOSB(1)
	   CALL ERROR(ERR_QIORETURN,IERR)
	   GOTO 9999
	ENDIF
C
	TABLEN = IOSB(2)
C
C interpret response from table
	IF (DIGTRN(BUTTON,IX,IY,USEFUN,%VAL(FUNADR))) THEN
	   TABBUF(TABLEN+1) = 0
	   CALL ERROR(ERR_TABLE,TABBUF)
	   GOTO 9999
	ENDIF
C
C now write these coordinates to global section
C
C first we must ensure that we have the lock
C
	IF ( WRITE_LOCK() ) GOTO 9999	! give up if can't
C
	CALL COPY_LONG( IX,    %VAL( SEC_BASE+TABLE_X ) )
	CALL COPY_LONG( IY,    %VAL( SEC_BASE+TABLE_Y ) )
C
C and now unlock
C
	IF ( UNLOCK() ) GOTO 9999
C
C succeeded, so set WAIT_TABLE event flag so that TABLIB can get
C coords or error
	CALL SYS$SETEF(%VAL(WAIT_TABLE))
C
9999	RETURN
	END
