	LOGICAL FUNCTION LOCK_TABLE( IERR )
C
***	IDENT	16DE89
***	MODULE	LOCK_TABLE
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author CC Ibbs, 16 December 1989
C
C This routine attempts to place a null lock on the resource
C LOCKT_NAME
C
C This is the same lock as TABLIB should have in exclusive mode.
C We attempt to grab this lock in POKE_TABLE so as to fire off
C the blocking AST in TABLIB.
C
C We return TRUE if this fails, but FALSE on success
C
	IMPLICIT NONE
C
C lock definitions and system definitions
C
	INCLUDE		'($LCKDEF)'
	INCLUDE		'($SSDEF)'
C
C and common
C
***	COMMON/CMN:TABLE/		! for TABLE_STATUS/LOCKID
***	COMMON/CMN:TABNAMES/
C
C functions used
C
	INTEGER*4	SYS$ENQW	! enqueue a lock request
C					! and wait for result
C
C workspace
C
	INTEGER*4	IERR		! return from function
C
C
C start off with pessimism
C
	LOCK_TABLE = .TRUE.
C
C now let us attempt the lock...
C
	IERR = SYS$ENQW(
     &			,			! efn
     &			%VAL(LCK$K_NLMODE),	! null lock
     &			TABLE_STATUS,		! status block
     &			,			! flags
     &			LOCKT_NAME(1:LOCKTL),	! resource name
     &			,			! parent lock ID
     &			,			! astadr
     &			,			! astprm
     &			,			! blocking ast
     &			,			! access mode
     &			 )			! final arg reserved
C
C what status do we have for the enqueue?
C
	IF ( IERR.NE.SS$_NORMAL ) GOTO 9999
C
C and what was the final status?
C
	IF ( TABLE_STATUS(1).NE.SS$_NORMAL ) THEN
	   IERR = TABLE_STATUS(1)
	   GOTO 9999
	ENDIF
C
C otherwise, we have success
C
	LOCK_TABLE = .FALSE.
C
9999	RETURN
	END
