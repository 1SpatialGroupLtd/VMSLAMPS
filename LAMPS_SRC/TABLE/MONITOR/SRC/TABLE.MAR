	.TITLE	TABLE
	.IDENT	/05FE88/

;
; Copyright Laser-Scan Laboratories, Ltd., Cambridge, England
;
; stolen for the TVES table process, by TJ Ibbs, 26 July 1984
; from DIGSYS version (where it's called BITPAD.MAR), which was
; modified for Altek tables by TJ Ibbs, 11 November 81
; after version for LITES by Paul Hardy,
; from original RSX version by R. Fairbairns

; R e a d   f r o m   T a b l e

; assemble with TABIFC.MAR ('common block' for things)


	.PSECT	TABLE_CODE,NOWRT

;**********************************************************************
;
; start table up (request next table read)
;

 .ENTRY	STRTAB,^M<>
	MOVL	TABEFN,R1		; get event flag number
	CLRW	TABLEN			; read nothing yet
;
; request a read, with no echo (don't want the table string written to
; SYS$OUTPUT)
;
	$QIO_S	FUNC =#IO$_READVBLK!IO$M_NOECHO,-
		CHAN = TABCHN,-		; channel
		EFN  = R1,-		; event flag
		IOSB = TABISB,-		; i/o status block
		P1   = TABBUF,-		; buffer
		P2   =#TABBSZ		; and its size
;
	BLBC	R0,ERR
	RET

; error in I/O (obviously not expected to happen)

ERR:	PUSHL	R0
	CALLS	#1,G^LIB$SIGNAL
	RET

;
;**********************************************************************
;
; purge and start the table (request next table read, purge typeahead)
;

 .ENTRY	PURTAB,^M<>
	MOVL	TABEFN,R1		; get event flag number
	CLRW	TABLEN			; read nothing yet
;
; read as for STRTAB, except we also request a purge of the typeahead
; buffer. Send a CTRL/Q as prompt character - mainly to cause a terminal
; server to establish the connection when the table initialised. (It
; needs some character to be written)
;
	$QIO_S	FUNC =#IO$_READPROMPT!IO$M_NOECHO!IO$M_PURGE,-
		CHAN = TABCHN,-		; channel
		EFN  = R1,-		; event flag
		IOSB = TABISB,-		; i/o status block
		P1   = TABBUF,-		; buffer
		P2   =#TABBSZ,-		; and its size
		P5   =#PRBUF,-		; prompt buffer
		P6   =#1		; its length
;
	BLBC	R0,ERR
	RET

PRBUF:	.BYTE	17			; CTRL/Q
;
;**********************************************************************
;
; stop table at task exit
;

 .ENTRY	STOPTAB,^M<>
	$CANCEL_S	CHAN = TABCHN
;
	BLBC	R0,ERR
	RET

;
;**********************************************************************
;
; CALLR(arg1,arg2...,routine)
; Calls routine passing the same argument list as we are passed
; Intended to call things whose address we have in a Fortran variable
;
	.ENTRY	CALLR, ^M<>
	MOVZBL	(AP),R0			; number of arguments
	MOVL	(AP)[R0],R0		; last argument (routine)
	CALLG	(AP),(R0)
	RET

	.END
