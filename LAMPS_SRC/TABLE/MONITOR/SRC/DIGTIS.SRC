C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1985-08-12 22:52:14.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION DIGTIS( BUTTN, COORDX, COORDY )
C
***	IDENT	12AU85
***	MODULE	DIGTIS
C
C Copyright Laser Scan Laboratories Ltd., Cambridge, England.
C
C modified from DIGSYS source, TJ Ibbs, 26 July 1984
C - that was by TJ Ibbs, 11 nov 81
C from IGES version, author Paul Hardy,
C after RSX version by R. Fairbairns
C
	IMPLICIT NONE
C
C function to read the coords from an Altek table
C
C *** return value is TRUE if succeed, FALSE if fail ***
C
	INTEGER*4	BUTTN	! button used on puck
	INTEGER*4	COORDX	! X coordinate from table
	INTEGER*4	COORDY	! Y coordinate
C
C common, etc
C
***	PARAMETER/HERE:ERROR/		! for error parameters
***	COMMON/HERE:DIGADR/		! for decode function address
***	COMMON/HERE:GEN/		! for BEFORE
***	COMMON/HERE:STREAM/		! for OLDX,OLDY
***	COMMON/HERE:TABIFC/		! general table related stuff
C
C w/s
C
	LOGICAL		READOK		! was the read a success
	INTEGER*4	CHANGE(2)	! quadword time change
C
C functions called
C
	LOGICAL		DIGTRN		! translate digitiser input
C
C *********************************************************************
C
C firstly, check that our read was a success
C
	IF ( .NOT.TABISB(1) ) THEN
	   CALL ERROR( ERR_TABERR, TABISB(1) )
	   GOTO 9998
	ENDIF
C
C get the length of what we read from the i/o status block...
C
	TABLEN = TABISB(3)
C
C now call routine to decode line for us
C
	IF (DIGTRN(BUTTN,COORDX,COORDY,USEFUN,%VAL(FUNADR))) GOTO 9999
C
	DIGTIS = .TRUE.			! we will return success
	READOK = .TRUE.			! read was successful
C
C *********************************************************************
C
C common exit route - reset status quo and check our state
C
100	CONTINUE
C
C now - deduce the length of time that the read took (difference
C between before the QIO and after the event flag was set)
C
	CALL SUBQUAD( AFTER, BEFORE, CHANGE )
C
C did the read 'time-out' - if so then presumably the user let go of
C a button, so we are no longer in STREAM mode, as this first 'press'
C is treated as an ordinary press
C
	WAS_STREAM = ( CHANGE(1).LT.DELTA .AND. CHANGE(2).EQ.0 )
C
C has the button changed, even though we think we're streaming?
C
	IF ( WAS_STREAM .AND. BUTTN.NE.OLD_BUTN ) WAS_STREAM = .FALSE.
C
C and update the value of OLD_BUTN
C
	OLD_BUTN = BUTTN
C
C if we have exited stream mode, then we must clear the memory of the
C current stream position
C
	IF (.NOT.WAS_STREAM ) THEN
	   OLDX = -32767
	   OLDY = -32767
	ENDIF
C
C all done - now request the next read of the table (for when we
C are called again)
C
	IF (READOK) THEN
C
C	 the string was valid - just note the time, so we know how long
C	 before our request is satisfied, and then put in a request for
C	 another string
C
	   CALL SYS$GETTIM( BEFORE )
	   CALL STRTAB		! just a read request
C
	ELSE
C
C	 the string was invalid - if we were streaming last button
C	 press, then we behave as for the OK case, ignoring this string
C	 BUT if we were not streaming - ie if the gap was large and we
C	 had thus timed-out - then we want to force the time to the
C	 next string to be at least as large as it is now - ie don't
C	 update BEFORE
C
	   IF ( WAS_STREAM ) CALL SYS$GETTIM( BEFORE )
	   CALL PURTAB		! read request & purge
C
	ENDIF
C
	RETURN
C
C *********************************************************************
C
C error route - terminate the buffer with a null, and report
C the error
C
9999	TABBUF(TABLEN+1) = 0
C
	CALL ERROR( ERR_TABLE, TABBUF )
C
9998	DIGTIS = .FALSE.	! return failure
	READOK = .FALSE.	! note failure internally
	GOTO 100
C
	END
