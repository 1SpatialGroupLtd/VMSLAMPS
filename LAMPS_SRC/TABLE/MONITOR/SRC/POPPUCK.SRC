	SUBROUTINE POP_PUCK
C
***	IDENT	07SE84
***	MODULE	POP_PUCK
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984 and 31 August 1984
C
C This subroutine pops a button and coordinates off the stack,
C and writes them to the global section
C
	IMPLICIT NONE
C
C define system parameters
C
	INCLUDE	'($SSDEF)'
C
C define our offsets
C
***	PARAMETER/CMN:TABMON/
C
C and our error states
C
***	PARAMETER/HERE:ERROR/
C
C and common for BUTN_REQ
C
***	COMMON/HERE:GEN/
C
C and functions
C
	LOGICAL		READ_BUF	! read from circular buffer
	LOGICAL		GOT_CHAR	! TRUE if something in buffer
C
C workspace
C
	INTEGER*4	IERR		! error code
C
C and define the format of what we read from the buffer
C
	PARAMETER	BUF_L = 9
C
	BYTE		BUF(BUF_L)	! to be read from buffer
	BYTE		BUF_B		! button in buffer
	INTEGER*4	BUF_X,BUF_Y	! the coordinate
C
	BYTE		LEN		! length read
C
	EQUIVALENCE	(BUF(1),BUF_B)
	EQUIVALENCE	(BUF(2),BUF_X)
	EQUIVALENCE	(BUF(6),BUF_Y)
C
C *********************************************************************
C
C Do we have something in the circular buffer?
C
	IF ( GOT_CHAR() ) THEN
C
C    there is something - we attempt to read it
C
C    if we can't read from the buffer, then we clear it (throw
C    the type-ahead away), and don't do anthing
C
	   IF ( READ_BUF( BUF, LEN, BUF_L ) ) THEN
	      CALL ERROR( ERR_BUFREAD, BUF, LEN, BUF_L )
	      CALL INIT_BUFFER		! clear the buffer
	   ENDIF
C
C    so we now have something to be output, and are free to do so
C
	   CALL WRITE_PUCK( BUF_B, BUF_X, BUF_Y )
C
	ELSE
C
C    note that we have an outstanding request for a button
C
	   BUTN_REQ = .TRUE.
C
	ENDIF
C
C and that is all we do
C
9999	RETURN
	END
