	SUBROUTINE WRITE_PUCK( BUTN, X, Y )
C
***	IDENT	23OC91
***	MODULE	WRITE_PUCK
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984
C
C This subroutine writes the button and coordinates into the
C global section
C
	IMPLICIT NONE
C
C define system parameters
C
	INCLUDE	'($SSDEF)'
C
C define our offsets
C
***	PARAMETER/CMN:TABMON/
C
C and our error states
C
***	PARAMETER/HERE:ERROR/
C
C and common which holds the relevant addresses for the section
C
***	COMMON/CMN:SECTION/
C
C and common for BUTN_REQ
C
***	COMMON/HERE:GEN/
C
C and functions
C
	LOGICAL		WRITE_LOCK	! establish an exclusive
C					! lock on the section
	LOGICAL		UNLOCK		! release the lock again
	LOGICAL		POKE_TABLE	! signal to TABLIB
	INTEGER*4	SYS$SETEF	! set an event flag
	INTEGER*4	SYS$CLREF	! clear an event flag
C
C we were passed
C
	BYTE		BUTN		! button pressed
	INTEGER*4	X,Y		! coordinate it was pressed at
C
C workspace
C
	INTEGER*4	IERR		! error code
C
C first we must ensure that we have the lock
C
	IF ( WRITE_LOCK() ) GOTO 9999	! give up if can't
C
C and so let us copy things over
C
	CALL COPY_BYTE( BUTN, %VAL( SEC_BASE+LAST_BUTTON ) )
	CALL COPY_LONG( X,    %VAL( SEC_BASE+LAST_X ) )
	CALL COPY_LONG( Y,    %VAL( SEC_BASE+LAST_Y ) )
C
C now set the 'got a new button' event flag
C
	IERR = SYS$SETEF( %VAL(NEW_BUTTON) )
	IF ( IERR.NE.SS$_WASCLR ) THEN
	   CALL ERROR( ERR_SETEF, IERR )
	ENDIF
C
C and now clear the 'don't have a button' flag (since we do)
C
	IERR = SYS$CLREF( %VAL(NO_BUTTON) )
	IF ( IERR.NE.SS$_WASSET ) THEN
	   CALL ERROR( ERR_CLREF, IERR )
	ENDIF
C
C and note that there is thus no outstanding request for a button press
C
	BUTN_REQ = .FALSE.
C
C finally signal to TABLIB that an event has happened
C
	IF ( POKE_TABLE() ) GOTO 9999
C
C and now unlock
C
	IF ( UNLOCK() ) GOTO 9999
C
C and that is all we do
C
9999	RETURN
	END
