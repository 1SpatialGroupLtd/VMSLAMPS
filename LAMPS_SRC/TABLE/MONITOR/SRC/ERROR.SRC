C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-12-16 13:32:36.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE ERROR( ERRNUM, ARG1, ARG2, ARG3 )
C
***	IDENT	16DE89
***	MODULE	ERROR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984
C
C this routine outputs an appropriate error message, into the
C relevant place in the global section, and signals that an
C error has occurred (so that the library routines may detect
C and report it).
C
C Before the global section is established, ABANDON should be
C used to produce a message and exit.
C
	IMPLICIT NONE
C
C system parameters
C
	INCLUDE	'($SSDEF)'
C
C our error number definitions
C
***	PARAMETER/HERE:ERROR/
C
C and common for the text strings
C
***	COMMON/LSL$CMNVIO:EXPC/
C
C and we are passed
C
	INTEGER*4	ERRNUM		! which error it is
	INTEGER*4	ARG1		! untyped argument #1
	INTEGER*4	ARG2		!    "       "     #2
	INTEGER*4	ARG3		!    "       "     #3
C
C local workspace
C
	INTEGER*4	IERR		! error code
	LOGICAL		LOCK		! true if safe to writelock
C
C function
C
	LOGICAL		HAVE_I_AN_ARG
C
C
C we set LOCK false if the error was in locking - ie we might
C expect an attempt to lock whilst writing the global section
C to fail
C
	LOCK = .TRUE.			! assume that's not needed
C
C and we simply do the appropriate thing...
C
	IF ( ERRNUM.EQ.ERR_TABLE ) THEN
C
	   CALL EXPAND('Bad table string "%AZ"',ARG1)
	   IERR = -1			! no numeric error
C
	ELSEIF ( ERRNUM.EQ.ERR_RELTAB ) THEN
C
	   CALL EXPAND('Error deassigning table input')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_HIBER ) THEN
C
	   CALL EXPAND('Error hibernating TABLE_MONITOR')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_GETTAB ) THEN
C
	   CALL EXPAND('Error assigning table input')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_WAITFR ) THEN
C
	   CALL EXPAND('Error waiting for table input')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_WRITE_ENQ ) THEN
C
	   CALL EXPAND('Error submitting lock request')
	   IERR = ARG1
	   LOCK = .FALSE.
C
	ELSEIF ( ERRNUM.EQ.ERR_WRITE_STATUS ) THEN
C
	   CALL EXPAND('Error during lock')
	   IERR = ARG1
	   LOCK = .FALSE.
C
	ELSEIF ( ERRNUM.EQ.ERR_SETEF ) THEN
C
	   IF (ARG1.EQ.SS$_WASSET) THEN
	      CALL EXPAND('Button push event flag not cleared?')
	   ELSE
	      CALL EXPAND('Error setting button push event flag')
	   ENDIF
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_TABERR ) THEN
C
	   CALL EXPAND('Error in reading from table')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_BUFFULL ) THEN
C
	   CALL EXPAND('Type-ahead buffer is full')
	   IERR = -1
C
	ELSEIF ( ERRNUM.EQ.ERR_BUFREAD ) THEN
C
C	 at the moment, ignore the 3 arguments passed to us
C
	   CALL EXPAND('Corrupt type-ahead - invalid length record')
	   IERR = -1
C
	ELSEIF ( ERRNUM.EQ.ERR_CLREF ) THEN
C
	   IF (ARG1.EQ.SS$_WASCLR) THEN
	      CALL EXPAND('Want another button flag not set?')
	   ELSE
	      CALL EXPAND('Error clearing button request event flag')
	   ENDIF
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_PURGWS ) THEN
C
	   CALL EXPAND('Error purging TABLE_MONITOR''s working set')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_QIOSUBMIT) THEN
C
	   CALL EXPAND('Error submitting position inquiry to table')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_QIORETURN) THEN
C
	   CALL EXPAND('Error while inquiring position from table')
	   IERR = ARG1
C
	ELSEIF ( ERRNUM.EQ.ERR_TAB_ENQ ) THEN
C
	   CALL EXPAND('Error submitting table lock request')
	   IERR = ARG1
	   LOCK = .FALSE.
C
	ELSEIF ( ERRNUM.EQ.ERR_TAB_DEQ ) THEN
C
	   CALL EXPAND('Error dequeuing table lock')
	   IERR = ARG1
	   LOCK = .FALSE.
C
	ELSEIF ( ERRNUM.EQ.ERR_TAB_STATUS ) THEN
C
	   CALL EXPAND('Error during table lock')
	   IERR = ARG1
	   LOCK = .FALSE.
C
	ELSE
C
	   CALL EXPAND('Unknown error')
	   IF ( HAVE_I_AN_ARG(1) ) THEN
	      IERR = ARG1
	   ELSE
	      IERR = -1
	   ENDIF
	   LOCK = .FALSE.
C
	ENDIF
C
C *********************************************************************
C
C so we have the error message and an error code - let us write them
C into the global section, for our user to receive
C
	CALL WRITE_ERROR( LOCK, EXPBUF, EXPLEN, IERR )
C
C and return for further execution
C
	RETURN
	END
