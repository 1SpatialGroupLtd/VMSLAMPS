C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1984-08-31 17:00:36.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE OUT_PUCK( BUTN, X, Y )
C
***	IDENT	31AU84
***	MODULE	OUT_PUCK
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984 and 31 August 1984
C
C This subroutine writes the button and coordinates into the
C global section, also performing type-ahead if needs be
C
	IMPLICIT NONE
C
C define system parameters
C
	INCLUDE	'($SSDEF)'
C
C define our offsets
C
***	PARAMETER/CMN:TABMON/
C
C and our error states
C
***	PARAMETER/HERE:ERROR/
C
C and functions
C
	INTEGER*4	SYS$READEF	! read an event flag
C
	LOGICAL		WRITE_BUF	! write to circular buffer
	LOGICAL		READ_BUF	! read from circular buffer
	LOGICAL		GOT_CHAR	! TRUE if something in buffer
C
C we were passed
C
	BYTE		BUTN		! button pressed
	INTEGER*4	X,Y		! coordinate it was pressed at
C
C workspace
C
	INTEGER*4	IERR		! error code
	INTEGER*4	DUMMY
C
C and define the format of what we read/write for the buffer
C
	PARAMETER	BUF_LEN = 9
C
C first, what we put INto the buffer
C
	BYTE		IN(BUF_LEN)	! to be written to buffer
	BYTE		IN_B		! button in buffer
	INTEGER*4	IN_X,IN_Y	! the coordinate
C
C second, what we get OUT of the buffer
C
	BYTE		OUT(BUF_LEN)	! to be read from buffer
	BYTE		OUT_B
	INTEGER*4	OUT_X,OUT_Y
	BYTE		OUT_LEN		! length read
C
	EQUIVALENCE	(IN(1),IN_B)
	EQUIVALENCE	(IN(2),IN_X)
	EQUIVALENCE	(IN(6),IN_Y)
C
	EQUIVALENCE	(OUT(1),OUT_B)
	EQUIVALENCE	(OUT(2),OUT_X)
	EQUIVALENCE	(OUT(6),OUT_Y)
C
C *********************************************************************
C
C before doing anything, preserve our current values
C - these are likely to be written IN to the buffer
C
	IN_B = BUTN
	IN_X = X
	IN_Y = Y
C
C firstly, has the library read the last button press
C
	IERR = SYS$READEF( %VAL(NO_BUTTON), DUMMY )
C
	IF ( IERR.EQ.SS$_WASSET ) THEN
C
C	 the library has read the last button, so we may insert a new
C	 one. Do we have something in the circular buffer, which we
C	 should be passing to the library?
C
	   IF ( .NOT.GOT_CHAR() ) THEN
C
C	    there is nothing in the buffer - so we must output
C	    our current values
C
	      OUT_B = BUTN
	      OUT_X = X
	      OUT_Y = Y
C
	   ELSE
C
C	    there is something - first we attempt to get the old value
C	    from the buffer, then put this latest value back in
C
C	    if we can't read from the buffer, then we clear it (throw
C	    the type-ahead away), and use the latest value instead...
C
	      IF ( READ_BUF( OUT, OUT_LEN, BUF_LEN ) ) THEN
		 CALL ERROR( ERR_BUFREAD, OUT, OUT_LEN, BUF_LEN )
		 CALL INIT_BUFFER		! clear the buffer
		 OUT_B = BUTN			! use the latest
		 OUT_X = X			! values instead
		 OUT_Y = Y
	      ELSE
C
C	       well, our read succeeded, so now insert the latest
C	       values into the buffer
C
	         IF ( WRITE_BUF(IN,BUF_LEN) ) CALL ERROR( ERR_BUFFULL )
C
	      ENDIF
C
	   ENDIF
C
C	 and we now have something to be output, and are free to do so
C	 - write what we read from the buffer into the section
C
	   CALL WRITE_PUCK( OUT_B, OUT_X, OUT_Y )
C
	ELSE
C
C	 the library hasn't read the last button yet, so we must
C	 just attempt to stack this press up in the type-ahead
C
	   IF ( WRITE_BUF( IN, BUF_LEN ) ) CALL ERROR( ERR_BUFFULL )
C
	ENDIF
C
C and that is all we do
C
9999	RETURN
	END
