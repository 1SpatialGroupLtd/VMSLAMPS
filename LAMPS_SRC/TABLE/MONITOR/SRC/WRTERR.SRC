	SUBROUTINE WRITE_ERROR( LOCK, ERRMESS, ERRLEN, ERRNUM )
C
***	IDENT	23OC91
***	MODULE	WRITE_ERROR
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984
C
C This subroutine writes the given error message and error number
C into the global section
C
	IMPLICIT NONE
C
C define our offsets
C
***	PARAMETER/CMN:TABMON.PAR/
C
C and common which holds the relevant addresses for the section
C
***	COMMON/CMN:SECTION/
C
C and we were passed
C
	LOGICAL		LOCK		! is it safe to lock?
	INTEGER*2	ERRLEN		! length of message
	BYTE		ERRMESS		! 'buffer' holding message
	INTEGER*4	ERRNUM		! system error number
C
C and functions
C
	LOGICAL		WRITE_LOCK	! establish an exclusive
C					! lock on the section
	LOGICAL		UNLOCK		! release the lock again
	LOGICAL		POKE_TABLE	! signal to TABLIB
C
C normally, before writing to the global section, we attempt a
C write lock. However, this routine may be called because of an
C error in locking, so only if LOCK is true do we use the locks
C
	IF ( LOCK ) THEN
	   IF ( WRITE_LOCK() ) GOTO 9999	! give up if can't
	ENDIF
C
C and so let us copy things over
C
	CALL COPY_TEXT( ERRMESS, %VAL( SEC_BASE+ERROR_MESSAGE ),
     &			ERRLEN )
	CALL COPY_BYTE( ERRLEN,  %VAL( SEC_BASE+ERROR_PTR ) )
	CALL COPY_LONG( ERRNUM,  %VAL( SEC_BASE+ERROR_NUMBER ) )
C
C set the error event flag (note we don't check for an error here,
C as if there is one we can't very well do much about it, without
C possibly provoking another such error, etc)
C
	CALL SYS$SETEF( %VAL(GOT_ERROR) )
C
C and now unlock (caveat as above)
C and signal to TABLIB that an event has happened
C
	IF ( LOCK ) THEN
	   IF ( POKE_TABLE() ) GOTO 9999
	   IF ( UNLOCK() ) GOTO 9999
	ENDIF
C
C and that is all we do
C
9999	RETURN
	END
