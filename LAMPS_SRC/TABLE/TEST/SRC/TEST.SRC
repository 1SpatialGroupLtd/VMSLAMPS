C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1990-01-03 15:57:14.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM TEST
C
***	IDENT	03JA90
***	MODULE	TEST
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author TJ Ibbs, 27 July 1984
C
C program to test the library routines which interface to the
C TVES TABLE_MONITOR
C
	IMPLICIT NONE
C
C include some parameters
C
	INCLUDE	'($RMSDEF)'
C
***	PARAMETER/CMN:TABMON/
***	COMMON/LSL$CMNVIO:CMDCOM/
C
C we call
C
	LOGICAL		INIT_TAB	! initialise the library
	LOGICAL		STOP_TAB	! stop the library
	LOGICAL		RESUME_TAB	! start again after STOP_TAB
	LOGICAL		CLOSE_TAB	! stop finally
C
	LOGICAL		WAIT_TAB	! wait for an event
	LOGICAL		WAIT_PUCK	! wait for puck or error
	LOGICAL		WAIT_STREAM	! wait for stream or error
C
	LOGICAL		HAD_ERROR	! was there an error?
	LOGICAL		HAD_PUCK	! or a puck button?
	LOGICAL		HAD_STREAM	! or a streamed button?
C
	LOGICAL		READ_ERROR
	LOGICAL		READ_STREAM
	LOGICAL		READ_PUCK
C
	LOGICAL		HAD_CPTS
	LOGICAL		READ_CPTS
	LOGICAL		WRITE_CPTS
C
	INTEGER		TTRSTR		! get a command line
	INTEGER		RDCOMM		! read a command
C
	EXTERNAL	TEST_CMD_TABLE
	EXTERNAL	FUNC_CMD_TABLE
	EXTERNAL	TABAST
C
C and workspace
C
	INTEGER*4	IERR
	BYTE		BUTN
	INTEGER*4	X,Y
C
	INTEGER*4	ERRNO
	INTEGER		CMD
	LOGICAL		STARTED
	LOGICAL		READ_ALL
C
	INTEGER		ARG1,ARG2,ARG3,ARG4,ARG5
C
	INTEGER*4	CP(8)
	INTEGER		I
C
	INTEGER*4	ERRDSC(2)
	INTEGER*2	ERRLEN
	BYTE		ERRBUF(ERROR_MESS_LEN+1)
C
	EQUIVALENCE	(ERRDSC(1),ERRLEN)
C
	ERRDSC(2) = %LOC(ERRBUF)
C
C *********************************************************************
C
	STARTED = .FALSE.
	CALL WRITEF('TABLE_MONITOR and library test program')
C
C let us see what they want us to do...
C
20	CALL WRITEF
	IF ( TTRSTR( ,'Next action: ', IERR).LT.0 ) THEN
C
	   IF (IERR.NE.RMS$_EOF) THEN
	      CALL WRITEF('Error reading command input')
	      CALL GEN_SYSMSG(IERR)
	   ENDIF
C
	   IF ( STARTED ) THEN
	      IF ( CLOSE_TAB(IERR) ) THEN
	         CALL WRITEF('Error closing TABLE_MONITOR system down')
		 IF ( IERR.EQ.-2 ) THEN
		    CALL WRITEF('TABLE_MONITOR already asleep')
		 ELSE
	            CALL GEN_SYSMSG(IERR)
		 ENDIF
	      ELSE
	   	 CALL WRITEF('TABLE_MONITOR system closed down')
	      ENDIF
	   ENDIF
C
	   GOTO 9999			! leave the program
C
	ENDIF
C
	CALL BSLN
C
	CMD = RDCOMM( TEST_CMD_TABLE )
	IF (CMD.EQ.0) THEN
	   CALL WRITEF('Actions are START, STOP, RESUME, CLOSE')
	   CALL WRITEF('            READ, WRITE, LOOP, WAIT')
	   GOTO 20
	ENDIF
C
	GOTO ( 100, 200, 300, 400, 500, 600, 700, 800 ), CMD
	CALL WRITEF('No command with number %N',CMD)
	GOTO 20
C
C *********************************************************************
C
C *** START	- so try to start the library up
C
100	IF ( ARGMSG ) THEN
	   CALL WRITEF(
     &	'Specify argument 0 to use default time-out - ie 1/10 second')
	   CALL WRITEF(
     &	'or specify your own (units one-hundredth of a second)')
	   GOTO 20
	ENDIF
C
	IF ( INIT_TAB( INTARG(1),IERR,TABAST)) THEN
	   CALL WRITEF('Error initialising library')
	   IF ( IERR.EQ.-2 ) THEN
	      CALL WRITEF('TABLE_MONITOR already awake')
	   ELSEIF ( IERR.EQ.-4 ) THEN
	      CALL WRITEF('Interface version mismatch %S',
     &			'- TABLIB does not match TABLE_MONITOR')
	   ELSEIF ( IERR.EQ.-6 ) THEN
	      CALL WRITEF('Failed to translate logical name %S',
     &	                     LOG_NAME)
	   ELSE
	      CALL GEN_SYSMSG( IERR )
	   ENDIF
	   GOTO 20
	ELSE
	   IF (INTARG(1).EQ.0) INTARG(1) = 10
	   CALL WRITEF('Library initialised with time-out %F seconds',
     &						INTARG(1)/100.0 )
	   STARTED = .TRUE.
	ENDIF
	GOTO 20
C
C *********************************************************************
C
C *** READ	- determine what we should read
C
200	CMD = RDCOMM( FUNC_CMD_TABLE )
	IF (CMD.EQ.0) THEN
	   CALL WRITEF(
     &	'READ has arguments PUCK, STREAM, ERROR, ALL, EFN, CPTS')
	   GOTO 20
	ENDIF
C
	READ_ALL = .FALSE.
C
	GOTO ( 210, 220, 230, 240, 250, 260 ), CMD
	CALL WRITEF('No command with number %N',CMD)
	GOTO 20
C
C *** READ PUCK	- read from the ordinary puck button
C
210	IF ( READ_PUCK( BUTN, X, Y, IERR ) ) THEN
	   CALL WRITEF('Error reading button')
	   CALL GEN_SYSMSG( IERR )
	ELSE
	   CALL WRITEF('Button %^B%X, pos %^L%I5,%I5',BUTN,X,Y)
	ENDIF
	IF (.NOT.READ_ALL) GOTO 20	! get next command line
C
C *** READ STREAM - read the latest streamed coordinates
C
220	IF ( READ_STREAM( X, Y, IERR ) ) THEN
	   CALL WRITEF('Error reading streamed output')
	   CALL GEN_SYSMSG( IERR )
	ELSE
	   CALL WRITEF('Streamed  pos %I5,%I5',X,Y)
	ENDIF
	IF (.NOT.READ_ALL) GOTO 20	! get next command
C
C *** READ ERROR	- read the error message
C
230	IF ( READ_ERROR( ERRBUF, ERRLEN, ERRNO, IERR ) ) THEN
	   CALL WRITEF('Error reading error message')
	   CALL GEN_SYSMSG( IERR )
	ELSE
	   IF (ERRLEN.LE.0) THEN
	      CALL WRITEF('Error message length is %N',ERRLEN)
	   ELSE
	      CALL WRITEF('*** %S',ERRDSC)
	      IF (ERRNO.NE.-1) CALL GEN_SYSMSG( ERRNO )
	   ENDIF
	ENDIF
	GOTO 20			! always get next command
C
C *** READ ALL	- read all of the above
C
240	READ_ALL = .TRUE.
	GOTO 210
C
C *** READ EFN	- read the event flag numbers
C
250	CALL RETURN_EFN( ARG1, ARG2, ARG3, ARG4, ARG5 )
	CALL WRITEF('The event flag numbers you might want are')
	CALL WRITEF
	CALL WRITEF('Puck button depressed = %N',ARG1)
	CALL WRITEF('Stream coord changed  = %N',ARG2)
	CALL WRITEF('Error detected        = %N',ARG3)
	CALL WRITEF
	CALL WRITEF('Next free EFN in the cluster = %N',ARG4)
	CALL WRITEF('Final     EFN in the cluster = %N',ARG5)
	GOTO 20				! get next command
C
C *** READ CPTS	- read the corner points back
C
260	IF ( HAD_CPTS( IERR ) ) THEN
	   IF ( READ_CPTS( CP, IERR ) ) THEN
	      CALL WRITEF('Error reading cpts back')
	      CALL GEN_SYSMSG(IERR)
	   ELSE
	      CALL WRITEF('Cpts were %^L%N,%N  %N,%N  %N,%N  %N,%N',
     &		CP(1),CP(2),CP(3),CP(4),CP(5),CP(6),CP(7),CP(8) )
	   ENDIF
	ELSE
	   CALL WRITEF('No corner points in the section')
	ENDIF
	GOTO 20
C
C *********************************************************************
C
C *** WAIT	- wait for an event
C
300	CMD = RDCOMM( FUNC_CMD_TABLE )
	IF (CMD.EQ.0) THEN
	   CALL WRITEF(
     &		'WAIT has arguments PUCK, STREAM, ERROR, ALL')
	   GOTO 20
	ENDIF
C
	READ_ALL = .FALSE.
C
	GOTO ( 310, 320, 330, 340, 350, 360 ), CMD
	CALL WRITEF('No command with number %N',CMD)
	GOTO 20
C
C *** WAIT PUCK	- wait for puck or error
C
310	CALL WRITEF('Waiting for puck button (or error)')
	IF ( WAIT_PUCK( IERR ) ) THEN
	   CALL WRITEF('Error waiting for puck button')
	   CALL GEN_SYSMSG( IERR )
	   GOTO 20
	ENDIF
	GOTO 390
C
C *** WAIT STREAM	- wait for stream or error
C
320	CALL WRITEF('Waiting for stream (or error)')
	IF ( WAIT_STREAM( IERR ) ) THEN
	   CALL WRITEF('Error waiting for stream')
	   CALL GEN_SYSMSG( IERR )
	   GOTO 20
	ENDIF
	GOTO 390
C
C *** WAIT ERROR	- wait for error
C
330	CALL WRITEF('Sorry - wait for error only is not provided')
	GOTO 20
C
C *** WAIT ALL	- wait for anything
C
340	CALL WRITEF('Waiting...')
	IF ( WAIT_TAB( IERR ) ) THEN
	   CALL WRITEF('Error waiting for event')
	   CALL GEN_SYSMSG( IERR )
	   GOTO 20
	ENDIF
	GOTO 390
C
C *** WAIT EFN	- not allowed
C *** WAIT CPTS	- not allowed
C
350	CONTINUE
360	CALL WRITEF('Pardon? That''s not allowed')
	GOTO 20
C
C
C so the wait ends - what happened?
C
390	IF ( HAD_PUCK(IERR) ) THEN
	   CALL WRITEF('PUCK   - a puck button was pressed')
	ENDIF
C
	IF ( HAD_STREAM(IERR) ) THEN
	   CALL WRITEF('STREAM - the streamed button moved')
	ENDIF
C
	IF ( HAD_ERROR(IERR) ) THEN
	   CALL WRITEF('ERROR  - an error occurred')
	ENDIF
C
	GOTO 20			! get next command
C
C *********************************************************************
C
C *** STOP	- stop the TABLE_MONITOR
C
400	IF ( STOP_TAB(IERR) ) THEN
	   CALL WRITEF('Error stopping TABLE_MONITOR')
	   IF ( IERR.EQ.2 ) THEN
	      CALL WRITEF('TABLE_MONITOR already asleep')
	   ELSE
	      CALL GEN_SYSMSG( IERR )
	   ENDIF
	ELSE
	   CALL WRITEF(
     &		'TABLE_MONITOR now stopped - use RESUME to restart it')
	   STARTED = .FALSE.
	ENDIF
	GOTO 20			! get next command
C
C *********************************************************************
C
C *** LOOP	- loop reading what comes, until button F is hit
C
500	CALL WRITEF
	CALL WRITEF('Loop - hit button F to exit')
	CALL WRITEF
C
510	IF ( WAIT_TAB( IERR ) ) THEN
	   CALL WRITEF('Error waiting for event')
	   CALL GEN_SYSMSG( IERR )
	   GOTO 20
	ENDIF
C
C so the wait ends - what happened?
C
	IF ( HAD_PUCK(IERR) ) THEN
	   IF ( READ_PUCK( BUTN, X, Y, IERR ) ) THEN
	      CALL WRITEF('Error reading button')
	      CALL GEN_SYSMSG( IERR )
	   ELSE
	      CALL WRITEF('Button %^B%X pos %^L%I5,%I5',BUTN,X,Y)
C***
	      IF ( BUTN.EQ.'F'X ) THEN
		 CALL WRITEF('End of LOOP')
	         GOTO 20	! ends this loop
	      ENDIF
C***
	   ENDIF
	ENDIF
C
	IF ( HAD_STREAM(IERR) ) THEN
	   IF ( READ_STREAM( X, Y, IERR ) ) THEN
	      CALL WRITEF('Error reading streamed output')
	      CALL GEN_SYSMSG( IERR )
	   ELSE
	      CALL WRITEF('Streamed pos %^L%I5,%I5',X,Y)
	   ENDIF
	ENDIF
C
	IF ( HAD_ERROR(IERR) ) THEN
	   IF ( READ_ERROR( ERRBUF, ERRLEN, ERRNO, IERR ) ) THEN
	      CALL WRITEF('Error reading error message')
	      CALL GEN_SYSMSG( IERR )
	   ELSE
	      IF (ERRLEN.LE.0) THEN
	         CALL WRITEF('Error message length is %N',ERRLEN)
	      ELSE
	         CALL WRITEF('*** %S',ERRDSC)
	         IF (ERRNO.NE.-1) CALL GEN_SYSMSG( ERRNO )
	      ENDIF
	   ENDIF
	ENDIF
C
	GOTO 510			! do another loop
C
C *********************************************************************
C
C *** WRITE CPTS
C
600	CMD = RDCOMM( FUNC_CMD_TABLE )
	IF (CMD.EQ.0) THEN
	   CALL WRITEF('WRITE has argument CPTS')
	   GOTO 20
	ENDIF
C
	GOTO ( 610, 610, 610, 610, 610, 660 ), CMD
	CALL WRITEF('No command with number %N',CMD)
	GOTO 20
C
C *** WRITE almost anything
C
610	CALL WRITEF('Not allowed to WRITE that')
	GOTO 20
C
C *** WRITE CPTS
C
660	CALL WRITEF('Writing some varied corner points...')
	DO 665 I = 1, 8
	   CP(I) = I*(I-1)*2.5
665	CONTINUE
	CALL WRITEF('Cpts are %^L%N,%N  %N,%N  %N,%N  %N,%N',
     &		CP(1),CP(2),CP(3),CP(4),CP(5),CP(6),CP(7),CP(8) )
	IF ( WRITE_CPTS( CP, IERR ) ) THEN
	   CALL WRITEF('Error writing corner points')
	   CALL GEN_SYSMSG(IERR)
	ENDIF
	GOTO 20
C
C *********************************************************************
C
C *** RESUME		- restart after a STOP
C
700	IF ( ARGMSG ) THEN
	   INTARG(1) = 10
	   CALL WRITEF(
     &		'Using default timeout of 10 hundredths of a second')
	ENDIF
	IF ( RESUME_TAB(INTARG(1),IERR) ) THEN
	   CALL WRITEF('Unable to RESUME')
	   IF ( IERR.EQ.-2 ) THEN
	      CALL WRITEF('TABLE_MONITOR not asleep - was it STOP-ed?')
	   ELSE
	      CALL GEN_SYSMSG(IERR)
	   ENDIF
	ELSE
	   CALL WRITEF('TABLE_MONITOR woken up')
	ENDIF
	GOTO 20
C
C *********************************************************************
C
C *** CLOSE		- close down totally
C
800	IF ( CLOSE_TAB(IERR) ) THEN
	   IF ( IERR.EQ.-2 ) THEN
	      CALL WRITEF(
     &		'TABLE_MONITOR already asleep - has it been STARTed?')
	   ELSE
	      CALL GEN_SYSMSG( IERR )
	   ENDIF
	ELSE
	   CALL WRITEF('TABLE_MONITOR system closed down')
	ENDIF
	GOTO 20
C
C *********************************************************************
C
C and that's all
C
9999	CALL WRITEF('Goodbye')
	CALL EXIT
	END
C
	SUBROUTINE TABAST
C
***	IDENT	02SE85
***	MODULE	TABAST
C
C	Copyright LaserScan Laboratories Ltd., Cambridge, England
C
C Author CC Brunt, 3-Jan-1989
C
C AST routine
C
	IMPLICIT NONE
C
	CALL WRITEF('AST routine called')
	RETURN
	END
