C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-25 17:58:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL*4 FUNCTION POLYNOMIAL_TRANSF
C
***	MODULE	POLYNOMIAL_TRANSF
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Original author: 			DJG	22-Apr-1988
CMOD	Rewritten to LSL standards: 		ACM	21-Nov-1988
C
	IMPLICIT NONE
C
C Commons
***	COMMON/LSL$CMNTRANSP:TRANSP/
C
C Workspace
	REAL*8		A(2*MAXRCPS,MAXPARAMS)	! obs equation matrix
	REAL*8		B(2*MAXRCPS)		! obs. eqtn RHS
	REAL*8		NORRHS(MAXPARAMS)	! normd RHS of obs. eqtn
	REAL*8		NORM(MAXPARAMS,MAXPARAMS) ! normal equations
C
	INTEGER*4	POINTN,POINT,I,J,K
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Calculates the second order polynomial transformation for
C	an image.
C
C	Ref. ???
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	POLYNOMIAL_TRANSF = .FALSE.
C
C Initialise the Observation equation matrix and RHS
C
	DO 20 I = 1,2*MAXRCPS
	  DO 10 J = 1,MAXPARAMS
	    A(I,J) = 0
10	  CONTINUE
	  B(I)	= 0
20	CONTINUE
C
C Check that there is a sufficient No.of points for the selected No.of
C parameters in the solution If OK,calculate the TRANSFORMATION 
C
	IF (NOUP.LT.MINNOP(POLYNOMIAL)) GOTO 999
C
C Compute the GROUND -> IMAGE transformation parameters
C
	POINT = 0
C
C Go through all points adding to the equations
C
	DO 30 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq. 
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
	    POINT = POINT + 1
	    I = POINT*2 - 1
	    J = I + 1
C
	    A(I,1) = 1
	    A(I,2) = GROUND(1,POINTN)
	    A(I,3) = GROUND(2,POINTN)
	    A(I,4) = GROUND(1,POINTN)**2
	    A(I,5) = GROUND(2,POINTN)**2
	    A(I,6) = GROUND(1,POINTN) * GROUND(2,POINTN)
C
	    A(J,7) = 1
	    A(J,8) = GROUND(1,POINTN)
	    A(J,9) = GROUND(2,POINTN) 
	    A(J,10) = GROUND(1,POINTN)**2
	    A(J,11) = GROUND(2,POINTN)**2
	    A(J,12) = GROUND(1,POINTN) * GROUND(2,POINTN)
C
C Form RHS of equations,which has already been calculated
C
	    B(I) = IMAGEC(1,POINTN) 
	    B(J) = IMAGEC(2,POINTN)
C
	  END IF	! if a point has not been disregarded
30	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method).
C
	CALL CHOLESKY(NORM,NORRHS,UNKNOWN,NOPARM)
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Ground -> Image Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('SECOND-ORDER POLYNOMIAL TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
C Compute the IMAGE -> GROUND transformation parameters
C
	POINT = 0
C
C Go through all points adding to the equations
C
	DO 40 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq. 
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
	    POINT = POINT + 1
	    I = POINT*2 - 1
	    J = I + 1
C
	    A(I,1) = 1
	    A(I,2) = IMAGEC(1,POINTN)
	    A(I,3) = IMAGEC(2,POINTN)
	    A(I,4) = IMAGEC(1,POINTN)**2
	    A(I,5) = IMAGEC(2,POINTN)**2
	    A(I,6) = IMAGEC(1,POINTN) * IMAGEC(2,POINTN)
C
	    A(J,7) = 1
	    A(J,8) = IMAGEC(1,POINTN)
	    A(J,9) = IMAGEC(2,POINTN)
	    A(J,10) = IMAGEC(1,POINTN)**2
	    A(J,11) = IMAGEC(2,POINTN)**2
	    A(J,12) = IMAGEC(1,POINTN) * IMAGEC(2,POINT)
C
C Form RHS of equations,which has already been calculated
C
	    B(I) = GROUND(1,POINTN)
	    B(J) = GROUND(2,POINTN)
	  END IF	! if a point has not been disregarded
40	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method).
C
	CALL CHOLESKY(NORM,NORRHS,UNKNOWN,NOPARM)
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Image -> Ground Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('SECOND-ORDER POLYNOMIAL TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
	POLYNOMIAL_TRANSF = .TRUE.
999	RETURN
	END
