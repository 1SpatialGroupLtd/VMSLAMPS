	LOGICAL*4 FUNCTION PROJECTIVE_TRANSF
C
***	MODULE	PROJECTIVE_TRANSF
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Original author: 			DJG	22-Apr-1988
CMOD	Rewritten to LSL standards: 		ACM	21-Nov-1988
C
	IMPLICIT NONE
C
C Commons
***	COMMON/LSL$CMNTRANSP:TRANSP/
C
C Workspace
	REAL*8		A(2*MAXRCPS,MAXPARAMS)	! observation equtn mtrx
	REAL*8		B(2*MAXRCPS)		! obs. eqtn RHS
	REAL*8		NORRHS(MAXPARAMS)	! normd RHS of obs. eqtn
	REAL*8		NORM(MAXPARAMS,MAXPARAMS)! normal equations
	REAL*8		SOL(2)		! solution of 2 equations
	REAL*8		DXSOL(2)	! sol'n of eq. with DXSOL input
	REAL*8		DELTAU(8)	! unknowns with 1 parameter dX
	REAL*8		SOLUTN(MAXPARAMS)	! Cholesky solution
C
	INTEGER*4	POINTN,POINT,I,J,K
	INTEGER*4	ITER,PNUM
C
	LOGICAL*4	EXLOOP,CONVRG,CONADD
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Calculates the projective transformation for a single image 
C
C	Ref. ???
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	PROJECTIVE_TRANSF = .FALSE.
C
C Initialise the Observation equation matrix and RHS
C
	DO 20 I = 1,2*MAXRCPS
	  DO 10 J = 1,MAXPARAMS
	    A(I,J) = 0
10	  CONTINUE
	  B(I) = 0
20	CONTINUE
C
C Check that there is a sufficient number of points for the selected
C number of parameters in the solution If OK,calculate the
C TRANSFORMATION 
C
	IF (NOUP.LT.MINNOP(PROJECTIVE)) GOTO 999
C
C Compute the GROUND -> IMAGE transformation parameters
C
	ITER = 0
	EXLOOP = .FALSE.
C
C set up initial values
C
	UNKNOWN(1) = 1
	UNKNOWN(5) = 1
C
C While the solution has not converged,repeat the calculations
C
30	CONVRG = .TRUE.
	POINT = 0
	EXLOOP = .TRUE.
	ITER = ITER + 1
	WRITE(*,'(1H+,'' Calculating iteration '',I2)') ITER
C
C Go through all points adding to the equations
C
	DO 70 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq. 
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
	    POINT = POINT + 1
	    J = POINT*2 - 1
	    K = J + 1
C
C Set up the differentials
C
	    DO 60 PNUM = 1,8
C	
C Find the differential of each parameter. This is done by numerical
C differentiation rather than by coding the actual differential 
C
C Form equations with slightly DECREMENTED unknowns
C (1 parameter at a time)
C
	      DO 40 I = 1,8
	        DELTAU(I) = UNKNOWN(I)
40	      CONTINUE
C
C If a parameter has a value of zero,then decrement it slightly by
C subtracting a little bit.Otherwise,decrement it by multiplying it by a
C small fraction of itself 
C
	      IF (ABS(DELTAU(PNUM)).LT.0.00000001D0) THEN
	        CONADD = .TRUE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) - 0.00000001D0
	      ELSE
	        CONADD = .FALSE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) - UNKNOWN(PNUM)*0.0000001D0
	      END IF
C
C Form up and solve the equations with one parameter decremented
C Calculate projective equations with decremented unknowns
C
	      SOL(1) = (DELTAU(1)*GROUND(1,POINT) +
     &	                DELTAU(2)*GROUND(2,POINT) + DELTAU(3)) -
     &	                IMAGEC(1,POINT) *
     &	               (DELTAU(7)*GROUND(1,POINT) +
     &	                DELTAU(8)*GROUND(2,POINT) + 1)
C
	      SOL(2) = (DELTAU(4)*GROUND(1,POINT) +
     &	                DELTAU(5)*GROUND(2,POINT) + DELTAU(6)) -
     &	                IMAGEC(2,POINT) *
     &	               (DELTAU(7)*GROUND(1,POINT) +
     &	                DELTAU(8)*GROUND(2,POINT) + 1)
C
C Reform equations with the slightly INCREMENTED unknowns
C
C If a parameter has a value of zero,then increment it slightly by
C adding a little bit.Otherwise,increment it by multiplying it by a
C small fraction of itself 
C
	      DO 50 I = 1,8
	        DELTAU(I) = UNKNOWN(I)
50	      CONTINUE
C
	      IF (ABS(DELTAU(PNUM)).LT.0.00000001D0) THEN
	        CONADD =.TRUE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) + 0.00000001D0
	      ELSE
	        CONADD =.FALSE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) + UNKNOWN(PNUM)*0.0000001D0
	      END IF
C
C Form up and solve the equations with one parameter decremented
C Calculate projective equations with decremented unknowns 
C
	      DXSOL(1) = (DELTAU(1)*GROUND(1,POINT) +
     &	                  DELTAU(2)*GROUND(2,POINT) + DELTAU(3)) -
     &	                  IMAGEC(1,POINT) *
     &	                 (DELTAU(7)*GROUND(1,POINT) +
     &	                  DELTAU(8)*GROUND(2,POINT) + 1)
C
	      DXSOL(2) = (DELTAU(4)*GROUND(1,POINT) +
     &	                  DELTAU(5)*GROUND(2,POINT) + DELTAU(6)) -
     &	                  IMAGEC(2,POINT) *
     &	                 (DELTAU(7)*GROUND(1,POINT) +
     &	                  DELTAU(8)*GROUND(2,POINT) + 1)
C
C The differential is found by dividing the difference of the two
C solutions by the amount the parameter was changed 
C
	      IF (CONADD) THEN
	        A(J,PNUM) = (DXSOL(1) - SOL(1)) / 0.00000002D0
	        A(K,PNUM) = (DXSOL(2) - SOL(2)) / 0.00000002D0
	      ELSE
	        A(J,PNUM) = (DXSOL(1) - SOL(1)) /
     &	                        (UNKNOWN(PNUM)*0.0000002D0)
	        A(K,PNUM) = (DXSOL(2) - SOL(2)) /
     &	                        (UNKNOWN(PNUM)*0.0000002D0)
	      END IF
60	    CONTINUE		! end of Loop for each parameter
C
C Form RHS of equations,which has already been calculated
C
	    B(J) = (SOL(1) + DXSOL(1)) / 2
	    B(K) = (SOL(2) + DXSOL(2)) / 2
C
	  END IF	! if a point has not been disregarded
70	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method)
C
	CALL CHOLESKY(NORM,NORRHS,SOLUTN,NOPARM)
C
C Add the increments found by least squares to the previous values of
C the unkmnowms.Check the solution to see if the results are very small
C in which case the solution has converged. 
C
	DO 80 I = 1,8
	  UNKNOWN(I) = UNKNOWN(I) - SOLUTN(I)
80	CONTINUE
C
	DO 90 I = 1,8
	  IF ((ABS (SOLUTN(I))).GE.0.000001D0) THEN
	    CONVRG =.FALSE.
	    EXLOOP =.FALSE.
	  END IF
90	CONTINUE
C
C Write the solution and updated unknowns into the listing file
C
	IF (HAD_LIST) THEN
	  CALL FLWSEL(LST_LUN)
	  CALL FLWRTF('         Solution          Unknowns'
     &	  //'             Iteration %I2',ITER)
	  DO 100 I = 1,8
	    CALL FLWRTF(' %F17.8 %F17.8',SOLUTN(I),UNKNOWN(I))
100	  CONTINUE
	END IF
C
	IF (ITER.EQ.20) EXLOOP = .TRUE.
C
C If the solution has not converged,then repeat the computations
C
	IF (.NOT.EXLOOP) GOTO 30 
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Ground -> Image Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('PROJECTIVE TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
C Compute the IMAGE -> GROUND transformation parameters
C
	ITER	= 0
	EXLOOP =.FALSE.
C
C Set up initial values
C
	UNKNOWN(1) = 1
	UNKNOWN(5) = 1
C
C While the solution has not converged,repeat the calculations
C
110	CONVRG = .TRUE.
	POINT = 0
	EXLOOP = .TRUE.
	ITER = ITER + 1
	WRITE(*,'(1H+,'' Calculating iteration  '',I2)') ITER
C
C Go through all points adding to the equations
C
	DO 150 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq. 
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
	    POINT = POINT + 1
	    J = POINT*2 - 1
	    K = J + 1
C
C Set up the differentials
C
	    DO 140 PNUM = 1,8
C	
C Find the differential of each parameter. This is done by numerical
C differentiation rather than by coding the actual differential 
C
C Form equations with slightly DECREMENTED unknowns
C (1 parameter at a time)
C
	      DO 120 I = 1,8
		DELTAU(I) = UNKNOWN(I)
120	      CONTINUE
C
C If a parameter has a value of zero,then decrement it slightly by
C subtracting a little bit.Otherwise,decrement it by multiplying it by
C a small fraction of itself 
C
	      IF (ABS(DELTAU(PNUM)).LT.0.00000001D0) THEN
	        CONADD = .TRUE.
		DELTAU(PNUM) = UNKNOWN(PNUM) - 0.00000001D0
	      ELSE
	        CONADD = .FALSE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) - UNKNOWN(PNUM)*0.0000001D0
	      END IF
C
C Form up and solve the equations with one parameter decremented
C Calculate projective equations with decremented unknowns 
C
	      SOL(1) = (DELTAU(1)*IMAGEC(1,POINT) +
     &	                DELTAU(2)*IMAGEC(2,POINT) + DELTAU(3)) -
     &	                GROUND(1,POINT) *
     &	               (DELTAU(7)*IMAGEC(1,POINT) +
     &	                DELTAU(8)*IMAGEC(2,POINT) + 1)
C
	      SOL(2) = (DELTAU(4)*IMAGEC(1,POINT) +
     &	                DELTAU(5)*IMAGEC(2,POINT) + DELTAU(6)) -
     &	                GROUND(2,POINT) *
     &	               (DELTAU(7)*IMAGEC(1,POINT) +
     &	                DELTAU(8)*IMAGEC(2,POINT) + 1)
C
C Reform equations with the slightly INCREMENTED unknowns
C
C If a parameter has a value of zero,then increment it slightly by
C adding a little bit.Otherwise,increment it by multiplying it by a
C small fraction of itself 
C
	      DO 130 I = 1,8
		DELTAU(I) = UNKNOWN(I)
130	      CONTINUE
C
	      IF (ABS(DELTAU(PNUM)).LT.0.00000001D0) THEN
	        CONADD = .TRUE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) + 0.00000001D0
	      ELSE
	        CONADD = .FALSE.
	        DELTAU(PNUM) = UNKNOWN(PNUM) + UNKNOWN(PNUM)*0.0000001D0
	      END IF
C
C Form up and solve the equations with one parameter decremented
C Calculate projective equations with decremented unknowns
C
	      DXSOL(1) = (DELTAU(1)*IMAGEC(1,POINT) +
     &	                  DELTAU(2)*IMAGEC(2,POINT) + DELTAU(3)) -
     &	                  GROUND(1,POINT) *
     &	                 (DELTAU(7)*IMAGEC(1,POINT) +
     &	                  DELTAU(8)*IMAGEC(2,POINT) + 1)
C
	      DXSOL(2) = (DELTAU(4)*IMAGEC(1,POINT) +
     &	                  DELTAU(5)*IMAGEC(2,POINT) + DELTAU(6)) -
     &	                  GROUND(2,POINT) *
     &	                 (DELTAU(7)*IMAGEC(1,POINT) +
     &	                  DELTAU(8)*IMAGEC(2,POINT) + 1)
C
C The differential is found by dividing the difference of the two
C solutions by the amount the parameter was changed 
C
	      IF (CONADD) THEN
	        A(J,PNUM) = (DXSOL(1) - SOL(1)) / 0.00000002D0
	        A(K,PNUM) = (DXSOL(2) - SOL(2)) / 0.00000002D0
	      ELSE
	        A(J,PNUM) = (DXSOL(1) - SOL(1)) /
     &				(UNKNOWN(PNUM)*0.0000002D0)
	        A(K,PNUM) = (DXSOL(2) - SOL(2)) /
     &				(UNKNOWN(PNUM)*0.0000002D0)
	      END IF
C
140	    CONTINUE		! end of Loop for each parameter
C
C Form RHS of equations,which has already been calculated
C
	    B(J) = (SOL(1) + DXSOL(1)) / 2
	    B(K) = (SOL(2) + DXSOL(2)) / 2
C
	  END IF	! if a point has not been disregarded
150	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method).
C
	CALL CHOLESKY(NORM,NORRHS,SOLUTN,NOPARM)
C
C Add the increments found by least squares to the previous values of
C the unkmnowms.Check the solution to see if the results are very small
C in which case the solution has converged. 
C
	DO 160 I = 1,8
	  UNKNOWN(I) = UNKNOWN(I) - SOLUTN(I)
160	CONTINUE
C
	DO 170 I = 1,8
	  IF ((ABS (SOLUTN(I))).GE.0.000001D0) THEN
	    CONVRG =.FALSE.
	    EXLOOP =.FALSE.
	  END IF
170	CONTINUE
C
C Write the solution and updated unknowns into the listing file
C
	IF (HAD_LIST) THEN
	  CALL FLWSEL(LST_LUN)
	  CALL FLWRTF('         Solution          Unknowns'
     &	  //'             Iteration %I2',ITER)
	  DO 180 I = 1,8
	    CALL FLWRTF(' %F17.8 %F17.8',SOLUTN(I),UNKNOWN(I))
180	  CONTINUE
	END IF
C
	IF (ITER.EQ.20) EXLOOP = .TRUE.
C
C If the solution has not converged,then repeat the computations
C
	IF (.NOT.EXLOOP) GOTO 110
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Image -> Ground Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('PROJECTIVE TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
	PROJECTIVE_TRANSF = .TRUE.
999	RETURN
	END
