C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1992-03-26 10:42:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE SORT_BY_ID(ID,TYPE,XYZ,WGT,N_RCPS)
C
***	MODULE	SORT_BY_ID
***	IDENT	26MR92
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C Created						ACM	Feb-1988
C
CMOD1098 Pass INTEGER*4 N_RCPS to QUICK_SORT rather than converting
C	to *2. QUICK_SORT now expects *4. Also expect		
C	*4 index in COMPARE and SWAP_IDS below.		CCB 26-Mar-1992
C
	IMPLICIT	NONE
C
C Local parameters
	INTEGER*4	MAXRCPS
	PARAMETER(	MAXRCPS = 300)
C
	INTEGER*4	SORT_WORKSPACE_SIZE	! sort workspace
	PARAMETER(	SORT_WORKSPACE_SIZE = 30)
C	Allows up to 2*LOG(N_RCPS)/LOG(2.0) = 10**6.5  RCPs
C
C Commons
	COMMON/SORT/INDX
C
C Data in
	INTEGER*4	N_RCPS			! No.of RCPs
C
C Data in/out
	CHARACTER*10	ID(N_RCPS)		! RCP identifier
	CHARACTER*2	TYPE(N_RCPS)		! RCP type
	REAL*8		XYZ(3,N_RCPS)		! RCP X,Y,Z coords
	REAL*8		WGT(2,N_RCPS)		! RCP XY,Z weights
C
C Workspace
	CHARACTER*2	TEMP_TYPE(MAXRCPS)	! temp RCP type
	REAL*8		TEMP_XYZ(3,MAXRCPS)	! temp RCP X,Y,Z coords
	REAL*8		TEMP_WGT(2,MAXRCPS)	! temp RCP XY,Z weights
	INTEGER*4	I
	INTEGER*4	INDX(MAXRCPS)
	INTEGER*4	SORT_WORKSPACE(SORT_WORKSPACE_SIZE)
C
C External functions
	EXTERNAL	COMPARE_IDS,SWAP_IDS	! for QUICK_SORT

C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Sorts RCPs by increasing identifier using LSLLIB QUICK_SORT.
C
C	Assumes no duplicate IDs.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	IF (N_RCPS.LE.1) GOTO 999	! check > 1 RCPs for sorting
	DO 10 I = 1,N_RCPS
10	INDX(I) = I
	CALL QUICK_SORT(		! sort by ID
     &		ID,N_RCPS,COMPARE_IDS,SWAP_IDS,SORT_WORKSPACE)
	DO 40 I = 1,N_RCPS
	  TEMP_TYPE(I) = TYPE(I)
	  TEMP_XYZ(1,I) = XYZ(1,I)
	  TEMP_XYZ(2,I) = XYZ(2,I)
	  TEMP_XYZ(3,I) = XYZ(3,I)
	  TEMP_WGT(1,I) = WGT(1,I)
	  TEMP_WGT(2,I) = WGT(2,I)
40	CONTINUE
	DO 50 I = 1,N_RCPS
	  TYPE(I) = TEMP_TYPE(INDX(I))
	  XYZ(1,I) = TEMP_XYZ(1,INDX(I))
	  XYZ(2,I) = TEMP_XYZ(2,INDX(I))
	  XYZ(3,I) = TEMP_XYZ(3,INDX(I))
	  WGT(1,I) = TEMP_WGT(1,INDX(I))
	  WGT(2,I) = TEMP_WGT(2,INDX(I))
50	CONTINUE
999	RETURN
	END

	SUBROUTINE SWAP_IDS(ID,I1,I2)
	IMPLICIT	NONE
	COMMON/SORT/INDX
	INTEGER*4	MAXRCPS
	PARAMETER(	MAXRCPS = 300)
	INTEGER*4	INDX(MAXRCPS)
	INTEGER		I1,I2
	CHARACTER*10	ID(*)
	CHARACTER*10	TEMP_ID
	INTEGER*4	TEMP_INDX
	TEMP_ID = ID(I1)
	ID(I1) = ID(I2)
	ID(I2) = TEMP_ID
	TEMP_INDX = INDX(I1)
	INDX(I1) = INDX(I2)
	INDX(I2) = TEMP_INDX
	END

	INTEGER*4 FUNCTION COMPARE_IDS(ID,I1,I2)
	IMPLICIT	NONE
	CHARACTER*10	ID(*)
	INTEGER		I1,I2
	IF (ID(I1).EQ.ID(I2)) THEN
	  COMPARE_IDS = 0
	ELSEIF (ID(I1).LT.ID(I2)) THEN
	  COMPARE_IDS = -1
	ELSE
	  COMPARE_IDS = 1
	ENDIF
	END
