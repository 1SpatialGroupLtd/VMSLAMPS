	LOGICAL*4 FUNCTION GET_COMMANDS()
C
***	MODULE	GET_COMMANDS
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Created   : ACM					     Jan 1986
C
	IMPLICIT NONE
C
C Commons
	INCLUDE		'LSL$CMNLSL:CLD.CMN'
	INCLUDE		'LSL$CMNLSL:FILENAME.CMN'
	INCLUDE		'LSL$CMNTRANSP:TRANSP.CMN'
C
C Workspace
	LOGICAL*4	OK,SPLIT,SPEAK
C
C DCL command decoding stuff
	LOGICAL*4	ABSENT,PRESENT,HAD_QUAL,NEGATED
C
C Functions
	INTEGER*4	DCL_STARTUP,DCL_QUAL,DCL_FILE
C
C External
	INTEGER*4	TRANSP_CLD
	EXTERNAL	TRANSP_CLD	! DCL command definitions
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Decodes TRANSP DCL command line
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Get command line
C
	SPLIT = .FALSE.		! don't split parameter list
	SPEAK = .TRUE.		! allow LSLDCL routine error reporting
C
	OK = DCL_STARTUP('TRANSP',SPLIT,TRANSP_CLD,SPEAK)
	IF (.NOT.OK) GOTO 999
C
C Get GROUND filespec

	OK = DCL_FILE('GROUND','LSL$RCP:RCP.RCP;0',ABSENT,.FALSE.
     &	  ,SPEAK)
	IF (.NOT.OK) GOTO 999
C
	GND_NAM = FILARY(1)(1:FIL_LEN(1))
	GND_LEN = FIL_LEN(1)
C
C Get IMAGE filespec

	OK = DCL_FILE('IMAGE','LSL$RCP:RCP.RCP;0',ABSENT,.FALSE.
     &	  ,SPEAK)
	IF (.NOT.OK) GOTO 999
C
	IMG_NAM = FILARY(1)(1:FIL_LEN(1))
	IMG_LEN = FIL_LEN(1)
C
C Get /HDR[=filespec] qualifier
C
	OK = DCL_QUAL('HDR',HAD_HDR,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_HDR) THEN
C
C Get HDR file-spec
C
C Assemble default HDR filespec as LSL$HDR:<image file name>.HDR;0
C
	  CALL PUTFLN(IMG_NAM(:IMG_LEN))
	  HDR_NAM = STR_NAM(:LEN_NAM)
	  HDR_LEN = LEN_NAM
	  CALL PUTFLN('LSL$HDR:HDR.HDR;0')
	  STR_NAM = HDR_NAM
	  LEN_NAM = HDR_LEN
	  CALL EXPFLN(HDR_NAM,HDR_LEN)
	  OK = DCL_FILE('HDR',HDR_NAM(:HDR_LEN),ABSENT,.FALSE.,
     &	    .TRUE.) 
	  IF (.NOT.OK) GOTO 999
	  IF (.NOT.ABSENT) THEN
	    HDR_NAM = FILARY(1)(1:FIL_LEN(1))
	    HDR_LEN = FIL_LEN(1)
	  END IF
	END IF
C
C Get /OUTPUT[=filespec] qualifier
C
	OK = DCL_QUAL('OUTPUT',HAD_OUTPUT,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
C Default OUTPUT file-spec is 'TRANSP.DAT'
C
	OUT_NAM = 'TRANSP.DAT'
	OUT_LEN = 10
C
	IF (HAD_OUTPUT) THEN
	  OK = DCL_FILE('OUTPUT',OUT_NAM(:OUT_LEN),ABSENT,.FALSE.,
     &	    .TRUE.)
	  IF (.NOT.OK) GOTO 999
	  IF (.NOT.ABSENT) THEN
	    OUT_NAM = FILARY(1)(:FIL_LEN(1))
	    OUT_LEN = FIL_LEN(1)
	  END IF
	END IF
C
C Get /TRANSFORMATION qualifier
C
	OK = DCL_QUAL('TRANSFORMATION',HAD_QUAL,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	TRANSFORMATION = 0
	IF (.NOT.HAD_QUAL) THEN
	  TRANSFORMATION = AFFINE
	  GOTO 10
	END IF
C
	OK = DCL_QUAL('TRANSFORMATION.AFFINE',HAD_QUAL,PRESENT,
     &	  NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_QUAL) TRANSFORMATION = AFFINE
C
	OK = DCL_QUAL('TRANSFORMATION.PROJECTIVE',HAD_QUAL,PRESENT,
     &	  NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_QUAL) TRANSFORMATION = PROJECTIVE
C
	OK = DCL_QUAL('TRANSFORMATION.POLYNOMIAL',HAD_QUAL,PRESENT,
     &	  NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
	IF (HAD_QUAL) TRANSFORMATION = POLYNOMIAL
C
	IF (TRANSFORMATION.EQ.0) TRANSFORMATION = AFFINE
C
C Get /[NO]LIST qualifier
C
10	OK = DCL_QUAL('LIST',HAD_LIST,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
	IF (HAD_LIST) THEN
C Assemble LIST file-spec as <output file name>.LST
C
	  CALL PUTFLN(OUT_NAM(:OUT_LEN))
	  LST_NAM = STR_NAM(:LEN_NAM)//'.LST'
	  LST_LEN = LEN_NAM+4
	END IF
C
C Get /[NO]INTERACT qualifier
C
	OK = DCL_QUAL('INTERACT',HAD_INTERACT,PRESENT,NEGATED,.TRUE.)
	IF (.NOT.OK) GOTO 999
C
999	GET_COMMANDS = OK.EQV..TRUE.
	RETURN
	END
