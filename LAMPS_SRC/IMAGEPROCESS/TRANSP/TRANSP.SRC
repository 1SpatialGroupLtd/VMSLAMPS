C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-25 18:44:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM TRANSP
C
***	MODULE	TRANSP
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Original author: 			DJG	22-Apr-1988
CMOD	Latest Update:				DJG	29-Feb-1988
CMOD	Rewritten to LSL standards: 		ACM	25-Nov-1988
C
	IMPLICIT NONE
C
C Parameters
***	PARAMETER/LSL$CMNTRANSP:TRANSPMSG/
C
C Commons
***	COMMON/LSL$CMNTRANSP:TRANSP/
C
C Workspace
	INTEGER*4	I,IERR
	LOGICAL*4	EXITP		! exit program?
	LOGICAL*4	EXITL		! exit loop?
	LOGICAL*4	OK
C
C Functions
	LOGICAL*4	FLWOPN,FLWCLO
	LOGICAL*4	GET_COMMANDS,READ_POINTS
	LOGICAL*4	AFFINE_TRANSF
	LOGICAL*4	PROJECTIVE_TRANSF
	LOGICAL*4	POLYNOMIAL_TRANSF
C
C Data
	DATA MINNOP/3,4,6/		! min num of pts for each transf
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	TRANSP is the LSL SATMAP utility which creates the
C	transformation coefficients for a number of two dimensional
C	image orientation transformations.
C
C	Transformations provided are:
C
C		* affine (general linear transformation)
C		* projective (perspective transformation)
C		* second-order polynomial.
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Initialise LSLLIB, with timer
C
	CALL LSL_INIT(.TRUE.)
C
C Get DCL-like parameters and qualifiers
C
	IF (.NOT.GET_COMMANDS()) GOTO 999
C
C Declare yourself
C
	IF (HAD_INTERACT) THEN
	  CALL WRITEF
	  CALL WRITEF
     &	('                 *** LSL 2 Dimensional Image Orientation ***')
	  CALL WRITEF
	END IF
C
C Read image and ground RCP data
C
	IF (.NOT.READ_POINTS()) GOTO 999
C
C Show number of matching control points found
C
	CALL LSL_PUTMSG(TRANSP__NUMPTS,NOP)
C
C Read angle from SPOT header file
C
	IF (HAD_HDR) CALL READ_SPOT_HEADER()
C
C Set the number of coefficients for the given transformation
C
	IF (TRANSFORMATION.EQ.PROJECTIVE) THEN
	  NOPARM = 8
	  CALL LSL_PUTMSG(TRANSP__TRANAM,'PROJECTIVE')
	ELSE IF (TRANSFORMATION.EQ.POLYNOMIAL) THEN
	  NOPARM = 12
	  CALL LSL_PUTMSG(TRANSP__TRANAM,'POLYNOMIAL')
	ELSE IF (TRANSFORMATION.EQ.AFFINE) THEN
	  NOPARM = 6
	  CALL LSL_PUTMSG(TRANSP__TRANAM,'AFFINE')
	END IF
C
C Count number of points to be used in the computations
C
	NOUP = 0
	DO 20 I = 1,NOP
	  IF (IMAGEC(3,I).EQ.0) NOUP = NOUP + 1
20	CONTINUE
C
	LST_OPN = .FALSE.
	IF (HAD_LIST) THEN
C Show LIST filespec
	  CALL LSL_PUTMSG(TRANSP__LSTNAM,LST_NAM(:LST_LEN))
C
C Open the LIST file to contain details of the computations & residuals
	  LST_OPN = FLWOPN(LST_LUN,LST_NAM(:LST_LEN),IERR)
	  IF (.NOT.LST_OPN) THEN
	    CALL LSL_PUTMSG(TRANSP__LSTOPN,LST_NAM(:LST_LEN))
	    GOTO 999
	  END IF
	END IF
C
C Show OUTPUT filespec
	CALL LSL_PUTMSG(TRANSP__OUTNAM,OUT_NAM(:OUT_LEN))
C
	GOTO 40
C
C (Re)open the OUTPUT file to contain details of the computations
C
30	CALL FLWDEL(OUT_LUN)
40	OUT_OPN = FLWOPN(OUT_LUN,OUT_NAM(:OUT_LEN),IERR)
	IF (.NOT.OUT_OPN) THEN
	  CALL LSL_PUTMSG(TRANSP__OUTOPN,OUT_NAM(:OUT_LEN))
	  GOTO 999
	END IF
C
C Calculate image orientation transformation parameters
C
	IF (TRANSFORMATION.EQ.PROJECTIVE) THEN
	  OK = PROJECTIVE_TRANSF()
	ELSE IF (TRANSFORMATION.EQ.POLYNOMIAL) THEN
	  OK = POLYNOMIAL_TRANSF()
	ELSE IF (TRANSFORMATION.EQ.AFFINE) THEN
	  OK = AFFINE_TRANSF()
	END IF
C
C Calculate image residuals
C
	IF (OK) THEN
	  IF (HAD_LIST.OR.HAD_INTERACT) CALL CALCULATE_RESIDUALS
	ELSE
	  CALL LSL_PUTMSG(TRANSP__TOOFEWCPS,NOUP,MINNOP(TRANSFORMATION))
	  IF (HAD_LIST.OR.HAD_INTERACT) CALL SHOW_POINTS
	END IF
C
	IF (.NOT.HAD_INTERACT) GOTO 999
C
C Allow user to view residuals and change point selection
C
	CALL SELECT_POINTS(EXITL,EXITP)
C
C If EXITP then exit the whole program
C
	IF (EXITP) GOTO 999
C
C If not EXITL (i.e. if point selection has been changed) then repeat
C the calculations until they are accepted.
C
	IF (.NOT.EXITL) GOTO 30
C
999	IF (OUT_OPN) CALL FLWCLO(OUT_LUN)
	IF (LST_OPN) CALL FLWCLO(LST_LUN)
C
	CALL LSL_EXIT
	END

