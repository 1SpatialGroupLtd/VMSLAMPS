	LOGICAL*4 FUNCTION AFFINE_TRANSF
C
***	MODULE	AFFINE_TRANSF
***	IDENT	25NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Original author: 			DJG	22-Apr-1988
CMOD	Rewritten to LSL standards: 		ACM	21-Nov-1988
C
	IMPLICIT NONE
C
C Commons
***	COMMON/LSL$CMNTRANSP:TRANSP/
C
C Workspace
	REAL*8		A(2*MAXRCPS,MAXPARAMS)	! obs equation matrix
	REAL*8		B(2*MAXRCPS)		! obs. eq. RHS
	REAL*8		NORRHS(MAXPARAMS)	! normd RHS of obs. eq.
	REAL*8		NORM(MAXPARAMS,MAXPARAMS) ! normal equations
	INTEGER*4	POINTN,POINT,I,J,K
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Calculates affine transformation coefficients
C
C	Ref. ???
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
	AFFINE_TRANSF = .FALSE.
C
C Initialise the Observation equation matrix and RHS
C
	DO 20 I = 1,2*MAXRCPS
	  DO 10 J = 1,MAXPARAMS
	    A(I,J) = 0
10	  CONTINUE
	  B(I)	= 0
20	CONTINUE
C
C Check that there is a sufficient number of points for the selected
C number of parameters in the solution
C
C If OK, calculate the TRANSFORMATION
C
	IF (NOUP.LT.MINNOP(AFFINE)) GOTO 999
C
C Compute the GROUND -> IMAGE transformation parameters
C
	POINT = 0
C
C Go through all points adding to the equations
C
	DO 30 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq.
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
C
	    POINT = POINT + 1
	    I = POINT*2 - 1
	    J = I + 1
C
	    A(I,1) = GROUND(1,POINTN)
	    A(I,2) = GROUND(2,POINTN)
	    A(I,3) = 0
	    A(I,4) = 0
	    A(I,5) = 1
	    A(I,6) = 0
C
	    A(J,1) = 0
	    A(J,2) = 0
	    A(J,3) = -GROUND(1,POINTN)
	    A(J,4) = GROUND(2,POINTN)
	    A(J,5) = 0
	    A(J,6) = 1
C
C Form RHS of equations,which has already been calculated
C
	    B(I) = IMAGEC(1,POINTN) 
	    B(J) = IMAGEC(2,POINTN)
C
	  END IF	! if a point has not been disregarded
30	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method).
C
	CALL CHOLESKY(NORM,NORRHS,UNKNOWN,NOPARM)
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Ground -> Image Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('AFFINE TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
C Compute the IMAGE -> GROUND transformation parameters
C
	POINT = 0
C
C Go through all points adding to the equations
C
	DO 40 POINTN = 1,NOP
C
C If a point has been measured but has not been disregarded, add it to
C the observation eq.
C
	  IF (IMAGEC(3,POINTN).EQ.0) THEN
C
	    POINT = POINT + 1
	    I = POINT*2 - 1
	    J = I + 1
C
	    A(I,1) = IMAGEC(1,POINTN)
	    A(I,2) = IMAGEC(2,POINTN)
	    A(I,3) = 0
	    A(I,4) = 0
	    A(I,5) = 1
	    A(I,6) = 0
C
	    A(J,1) = 0
	    A(J,2) = 0
	    A(J,3) = -IMAGEC(1,POINTN)
	    A(J,4) = IMAGEC(2,POINTN)
	    A(J,5) = 0
	    A(J,6) = 1
C
C Form RHS of equations,which has already been calculated
C
	    B(I) = GROUND(1,POINTN)
	    B(J) = GROUND(2,POINTN)
C
	  END IF	! if a point has not been disregarded
40	CONTINUE	! loop to set up 2 obs. equations for each point
C
C Normalise the observation equations
C
	CALL NORMALISE(A,B,NORM,NORRHS)
C
C Solve the equations by least squares (Cholesky method)
C
	CALL CHOLESKY(NORM,NORRHS,UNKNOWN,NOPARM)
C
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('Image -> Ground Transformation Parameters :')
	CALL WRITE_LINE(' ')
	CALL WRITE_LINE('AFFINE TRANSFORMATION')
C
	CALL WRITE_PARAMETERS(UNKNOWN,NOPARM)	! print results
C
	AFFINE_TRANSF = .TRUE.
999	RETURN
	END

