C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-04-25 12:23:20.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION CMDLIN()
C
***	MODULE	CMDLIN
***	IDENT	25AP89
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	The command decoder for READCCT
C
	IMPLICIT NONE
C
C Command Language Definitions:
	EXTERNAL	READCCT_CLD
C
***	PARAMETER/HERE:READCCTMSG/
***	COMMON   /HERE:READCCT/
***	COMMON   /HERE:TAPE_RECORDS/
***	COMMON   /LSL$CMNLSL:CLD/
C
C Functions called:
	INTEGER*4	DCL_INT	   ! looks for qualifier integer args.
	INTEGER*4	DCL_QUAL   ! looks for specified qualifier
        INTEGER*4       DCL_STARTUP! looks for command line
        INTEGER*4       DCL_STR	   ! looks for qualifier string args.
	INTEGER*4	PARFILN	   ! to parse filename
C Local
	INTEGER*4	I	   ! counter
	INTEGER*4	IERR	   ! function return
	LOGICAL		HAD_QUAL   ! had this qualifier
	LOGICAL		LOCAL	   ! DCL qualifier
	LOGICAL		LOCNEG	   ! decoding values
C
C----------------------------------------------------------------------
C----------------------------------------------------------------------
C	Begin by setting all decode logicals to false
C
	DECODE_VOLUME_DESCR=.FALSE.	!volume descriptor record
	DECODE_FILE_POINTER=.FALSE.	!file pointer record
	DECODE_TEXT	   =.FALSE.	!text record
	DECODE_FILE_DESCR  =.FALSE.	!file descriptor record
	DECODE_HEADER	   =.FALSE.	!header record
	DECODE_EPHEMERIS   =.FALSE.	!ephmeris/attitude record
	DECODE_CALIBRATION =.FALSE.	!radiometric calib. record
	DECODE_HISTOGRAM   =.FALSE.	!histogram record
	DECODE_PROJECTION  =.FALSE.	!map projection record
	DECODE_GCP	   =.FALSE.	!GCP or RCP record
	DECODE_ANNOTATION  =.FALSE.	!annotation record
	DECODE_IMAGE       =.FALSE.	!image data record
	DECODE_TRAILER     =.FALSE.	!trailer record
	DECODE_NULL	   =.FALSE.	!null volume record
C
	DECODE_NRSC_TAPE   =.FALSE.	!not a NRSC format tape
C
C---------------------------------------------------------------------
C	Get the command line
	CMDLIN=DCL_STARTUP('READCCT',.FALSE.,READCCT_CLD,.TRUE.)
        IF (.NOT.CMDLIN) GOTO 100 		! return
C
C----------------------------------------------------------------------
C 	Check for the presense of the various qualifiers
C----------------------------------------------------------------------
C	/DEVICE
C	Get input device. (By default it is set to MT0:)
	MTNAME='MT0:'
C
	CMDLIN=DCL_QUAL('DEVICE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)THEN
	   CMDLIN=DCL_STR('DEVICE',.TRUE.)
	   IF(CMDLIN)THEN
	     MTNAME=CARRAY(1)(:STR_LEN(1))
	   ENDIF
	ENDIF
C
C----------------------------------------------------------------------
C	/NRSC
	HAD_QUAL=.FALSE.
	CMDLIN=DCL_QUAL('NRSC',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_NRSC_TAPE=.TRUE.
	WHICH_SCENE=1
C
C----------------------------------------------------------------------
C	/IMAGE
C	Read the image data
C
	HAD_QUAL=.FALSE.
	CMDLIN=DCL_QUAL('IMAGE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
C	If we've had this qualifier also check for a DTI filename
C	By default the file LSL$DTI:DTI.DTI will be created
C
	IF(HAD_QUAL)THEN
C
	  DECODE_IMAGE=.TRUE.
	  CMDLIN=DCL_QUAL('DTI',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	  IF(.NOT.CMDLIN) GOTO 100
C
C	Get output DTI filename
	  IF(HAD_QUAL)THEN
	    CMDLIN=DCL_STR('DTI',.TRUE.)
	    IF(CMDLIN)THEN
	      DTI_FILENAME=CARRAY(1)(:STR_LEN(1)) !transfer filename
	      LENGTH=STR_LEN(1)
	    ENDIF
C
C	Parse the supplied filename against the default
	   IERR=PARFILN(DTI_FILENAME,LENGTH,CARRAY,'LSL$DTI:SPOT.DTI',
     &              .TRUE.)
	   IF(.NOT.IERR)THEN
	     CALL LSL_PUTMSG(IERR)
	     CMDLIN=.FALSE.
	    GOTO 999
	   ENDIF
	   HAD_DTI=.TRUE.
	   DTI_OUT_LUN=1		!assume 1 band input image
C
	  ENDIF
	ENDIF
C
C---------------------------------------------------------------------
C	/SUMMARY
	HAD_SUMMARY=.FALSE.
	CMDLIN=DCL_QUAL('SUMMARY',HAD_SUMMARY,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN)GOTO 100
C
C----------------------------------------------------------------------
C	/HEADER
	CMDLIN=DCL_QUAL('HEADER',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_HEADER=.TRUE.
C	/HDR
C
	HAD_HDR= .FALSE.
	HAD_QUAL=.FALSE.
	CMDLIN=DCL_QUAL('HDR',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
C	Get HDR filename
	IF(HAD_QUAL)THEN
	  HAD_HDR=.TRUE.
	  CMDLIN=DCL_STR('HDR',.TRUE.) 
	  IF(CMDLIN)THEN
	    HDR_FILENAME=CARRAY(1)(:STR_LEN(1))!transfer filename
	    HDR_LENGTH=STR_LEN(1)
	  ENDIF
C
C	Parse the supplied filename against the default
	  IERR=PARFILN(HDR_FILENAME,HDR_LENGTH,CARRAY,'LSL$DTI:SPOT.HDR',
     &              .TRUE.)
	  IF(.NOT.IERR)THEN
	    CALL LSL_PUTMSG(IERR)
	    CMDLIN=.FALSE.
	    GOTO 999
	  ENDIF
	ENDIF
C
C	/SUMMARY
	HAD_SUMMARY=.FALSE.
	CMDLIN=DCL_QUAL('SUMMARY',HAD_SUMMARY,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN)GOTO 100
C
C----------------------------------------------------------------------------
C	Skip many of the qualifiers if we're dealing with a
C	NRSC format.
C
	IF(DECODE_NRSC_TAPE)GOTO 50
C
C----------------------------------------------------------------------------
C
C	/SCENE
	WHICH_SCENE=1		!default scene value
	CMDLIN=DCL_QUAL('SCENE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN)GOTO 100
C
	IF(HAD_QUAL)THEN
	  CMDLIN=DCL_INT('SCENE',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
	  WHICH_SCENE=IARRAY(1)
	ENDIF
C
C-------------------------------------------------------------------------	
C	/ANCILLARY
	CMDLIN=DCL_QUAL('ANCILLARY',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)THEN
	  DECODE_EPHEMERIS   =.TRUE.
	  DECODE_HISTOGRAM   =.TRUE.
	  DECODE_CALIBRATION =.TRUE.
	  DECODE_PROJECTION  =.TRUE.
	  DECODE_GCP         =.TRUE.
	ENDIF	  
C
C----------------------------------------------------------------------
C	/EPHEMERIS
	CMDLIN=DCL_QUAL('EPHEMERIS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_EPHEMERIS=.TRUE.
C
C	/NOEPHEMERIS
	CMDLIN=DCL_QUAL('NOEPHEMERIS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_EPHEMERIS=.FALSE.
C
C----------------------------------------------------------------------	
C	/HISTOGRAM
	CMDLIN=DCL_QUAL('HISTOGRAM',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_HISTOGRAM=.TRUE.
C
C	/NOHISTOGRAM
	CMDLIN=DCL_QUAL('NOHISTOGRAM',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_HISTOGRAM=.FALSE.
C
C----------------------------------------------------------------------	
C	/CALIBRATION
	CMDLIN=DCL_QUAL('CALIBRATION',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_CALIBRATION=.TRUE.
C
C	/NOCALIBRATION
	CMDLIN=DCL_QUAL('NOCALIBRATION',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_CALIBRATION=.FALSE.
C
C----------------------------------------------------------------------	
C	/PROJECTION
	CMDLIN=DCL_QUAL('PROJECTION',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_PROJECTION=.TRUE.
C
C	/NOPROJECTION
	CMDLIN=DCL_QUAL('NOPROJECTION',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_PROJECTION=.FALSE.
C
C----------------------------------------------------------------------	
C	/GCP
	CMDLIN=DCL_QUAL('GCP',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_GCP=.TRUE.
C
C	/NOGCP
	CMDLIN=DCL_QUAL('NOGCP',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
	IF(HAD_QUAL)DECODE_GCP=.FALSE.
C
C----------------------------------------------------------------------------
C
C	/ANNOTATIONS
	CMDLIN=DCL_QUAL('ANNOTATIONS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_ANNOTATION=.TRUE.
C	
C----------------------------------------------------------------------------
C
C	/DESCRIPTOR
	CMDLIN=DCL_QUAL('DESCRIPTOR',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_FILE_DESCR=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/POINTER
	CMDLIN=DCL_QUAL('POINTER',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_FILE_POINTER=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/NULL
	CMDLIN=DCL_QUAL('NULL',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_NULL=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/TEXT
	CMDLIN=DCL_QUAL('TEXT',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_TEXT=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/TRAILER
	CMDLIN=DCL_QUAL('TRAILER',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_TRAILER=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/VOLUME
	CMDLIN=DCL_QUAL('VOLUME',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
 	IF(HAD_QUAL)DECODE_VOLUME_DESCR=.TRUE.
C
C----------------------------------------------------------------------------
C
C	/DIAGNOSTICS
50	CMDLIN=DCL_QUAL('DIAGNOSTICS',HAD_DIAG,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN) GOTO 100
C
C----------------------------------------------------------------------------
C
C	/LIST
C
	HAD_LIST=.FALSE.	!default
	LIST_LENGTH=10		!default length
	CMDLIN=DCL_QUAL('LIST',HAD_LIST,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN)GOTO 100
C
	IF(HAD_LIST)THEN
	  CMDLIN=DCL_STR('LIST',.TRUE.)
	  IF(CMDLIN)THEN
	    LIST_FILENAME=CARRAY(1)(:STR_LEN(1)) !transfer filename
	    LIST_LENGTH=STR_LEN(1)
	  ENDIF
	ENDIF
C
C----------------------------------------------------------------------------
C
C	/PRINT			!output to line_printer
	HAD_PRINT=.FALSE.	!default
	CMDLIN=DCL_QUAL('PRINT',HAD_PRINT,LOCAL,LOCNEG,.TRUE.)
	IF(.NOT.CMDLIN)GOTO 100
C
C----------------------------------------------------------------------------
C
C	/START_LINE
	FIRST_LINE=1		!default value
	CMDLIN=DCL_QUAL('START_LINE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.CMDLIN) GOTO 100
C
C	Get the associated value
	IF(HAD_QUAL)THEN
	  CMDLIN=DCL_INT('START_LINE',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
	  FIRST_LINE=IARRAY(1)
	ENDIF
C
C----------------------------------------------------------------------------	
C	/START_SAMPLE
	FIRST_SAMPLE=1		!default value
	CMDLIN=DCL_QUAL('START_SAMPLE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.CMDLIN) GOTO 100
C
C	Get the associated value
	IF(HAD_QUAL)THEN
	  CMDLIN=DCL_INT('START_SAMPLE',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
	  FIRST_SAMPLE=IARRAY(1)
	ENDIF
C			
C---------------------------------------------------------------------------
C	/END_LINE
	LAST_LINE=9999
	CMDLIN=DCL_QUAL('END_LINE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.CMDLIN) GOTO 100
C
C	Get the associated value
	IF(HAD_QUAL)THEN
	  CMDLIN=DCL_INT('END_LINE',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
	  LAST_LINE=IARRAY(1)
	ENDIF
C
C---------------------------------------------------------------------------
C	/END_SAMPLE
	LAST_SAMPLE=9999
	CMDLIN=DCL_QUAL('END_SAMPLE',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.CMDLIN) GOTO 100
C
C	Get the associated value
	IF(HAD_QUAL)THEN
	  CMDLIN=DCL_INT('END_SAMPLE',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
	  LAST_SAMPLE=IARRAY(1)
	ENDIF
C
C---------------------------------------------------------------------------
C	Verify and reset if necessary the line/sample information
	IF     (FIRST_LINE.LT.1.OR.FIRST_LINE.GT.9999)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADSTARTLINE)	
	       CMDLIN=.FALSE.
	       GOTO 100
	ELSE IF(FIRST_SAMPLE.LT.1.OR.FIRST_SAMPLE.GT.9999)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADSTARTSAMPLE)	
	       CMDLIN=.FALSE.
	       GOTO 100
	ELSE IF(LAST_LINE.LT.1.OR.LAST_LINE.GT.9999)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADENDLINE)	
	       CMDLIN=.FALSE.
	       GOTO 100
	ELSE IF(LAST_SAMPLE.LT.1.OR.LAST_SAMPLE.GT.9999)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADENDSAMPLE)	
	       CMDLIN=.FALSE.
	       GOTO 100
	ELSE IF(LAST_SAMPLE.LE.FIRST_SAMPLE)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADENDSAMPLE)	
	       CMDLIN=.FALSE.
	       GOTO 100
	ELSE IF(LAST_LINE.LE.FIRST_LINE)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__BADENDLINE)
	       CMDLIN=.FALSE.
	       GOTO 100
	ENDIF
C
	HOW_MANY_PIXELS=(LAST_SAMPLE-FIRST_SAMPLE)+1
C---------------------------------------------------------------------------
C
C	BAND definition.  For panchromatic will generally not be supplied.
	HAD_BAND=.FALSE.
	THIS_BAND(1)=.TRUE.	!select band 1
C
C	/BANDS
	CMDLIN=DCL_QUAL('BANDS',HAD_QUAL,LOCAL,LOCNEG,.TRUE.)
	IF (.NOT.CMDLIN) GOTO 100
C
C	Get the associated value
	IF(HAD_QUAL)THEN
C
	  CMDLIN=DCL_INT('BANDS',.TRUE.)
	  IF(.NOT.CMDLIN)GOTO 100
C
	  IF(NUMINT.GT.MAX_BANDS)THEN
	    CALL LSL_PUTMSG(READCCT__BADQUAL)
	    CALL LSL_PUTMSG(READCCT__TOOMANYBANDS)
	    CMDLIN=.FALSE.
	    GOTO 100
	  ENDIF
C
C	If we've had an argument list first
C	initialise the array of selected bands.
	  DO 80 I=1,MAX_BANDS
	     THIS_BAND(I)=.FALSE.
80	  CONTINUE
C
C	Flag which bands have been selected by the user
	  DO 90 I=1,NUMINT
	     IF(IARRAY(I).LE.0.OR.IARRAY(I).GT.MAX_BANDS)THEN
	       CALL LSL_PUTMSG(READCCT__BADQUAL)
	       CALL LSL_PUTMSG(READCCT__INVBAND)
	       CMDLIN=.FALSE.
	       GOTO 100
	     ENDIF
C
	     THIS_BAND(IARRAY(I))=.TRUE.	
90	  CONTINUE
C
	  HAD_BAND=.TRUE.	!flag that we've had this argument
  	ENDIF
C
C---------------------------------------------------------------------------
100     IF (CMDLIN)THEN
           CMDLIN=READCCT__NORMAL
	ELSE
	   CMDLIN=READCCT__BADQUAL
	ENDIF	
C
999	RETURN
C
   	END
