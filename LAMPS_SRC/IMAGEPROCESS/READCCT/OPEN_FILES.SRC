C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-08-04 11:40:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        INTEGER*4 FUNCTION OPEN_FILES(DTI_FILE,TEXT_FILE)
C
***	MODULE	OPEN_FILES
***	IDENT	04AU88
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	Routine for READCCT to open either a DTI file or text file
C
	IMPLICIT NONE
C
	INCLUDE '($JPIDEF)'
C
C	DTILIB common block and parameter files
	INCLUDE 'LSL$CMNDTI:DTIHDR.CMN'
	INCLUDE 'LSL$CMNDTI:DTIPAR.PAR'
	INCLUDE 'LSL$CMNDTI:DTILIBMSG.PAR'
	INCLUDE 'LSL$CMNLSL:EXPC.CMN'
C
C	READCCT common block
	INCLUDE 'HERE:READCCT.CMN'
C
C	Arguments
	LOGICAL		DTI_FILE	!if .t. create a DTI file
	LOGICAL		TEXT_FILE	!if .t. create a text file for
C					!header information
C	Local
	INTEGER*4	XSIZE		!x size of DTI file
	INTEGER*4	YSIZE		!y size of DTI file
	INTEGER*4	IERR		!function return code
	INTEGER*4	ERROR		!system error code
	INTEGER*4	CH_POS		!ch position returned via INDEX
	INTEGER*4	I		!counter
C
	INTEGER*2	USELEN
	CHARACTER*128	NEW_FILENAME
	CHARACTER*20	USER		!user ID
	CHARACTER*9	SDATE		!date
	CHARACTER*8	STIME		!time
C
C	Functions
	INTEGER*4	LIB$GETJPI
	INTEGER*4	DTI_CREATE	!create a new DTI file
	INTEGER*4	FLWOPN		!open a file for writing
C
C-----------------------------------------------------------------------------
C	Assume the routine has failed
	OPEN_FILES=.FALSE.
C
	IF(DTI_FILE)THEN		
C	Create a DTI file to receive the image data
C
C	Filename is in DTI_FILENAME and LENGTH is the length of
C	the filename.  Size is determined using FIRST_LINE, LAST_LINE  		
C	and FIRST_SAMPLE, LAST_SAMPLE.
C	Note that for the purpose of storage in the DTI file sample
C	and lines are swopped.
C
	  XSIZE=(LAST_LINE  -FIRST_LINE  )+1
	  YSIZE=(LAST_SAMPLE-FIRST_SAMPLE)+1
C
C	Unless we've had the BAND command, just open 1 file as
C	specified by the user
	    IF(.NOT.HAD_BAND)THEN
C
	    IERR=DTI_CREATE(DTI_OUT_LUN,DTI_FILENAME,LENGTH,
     &                      DTI_ALVY,DEFAULT_LSLA_HEADER,
     &                      DATA_BYTE,XSIZE,YSIZE,ERROR)
	
	    IF(IERR.NE.DTI__NORMAL)THEN		!unsuccessful
	      CALL LSL_PUTMSG(IERR)
	      IF(IERR.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	      GOTO 999
	    ENDIF
C
	    DTI_OPEN=.TRUE.	!signal that we have a DTI file open
C
C	If BAND qualifier is present, then we must open a number
C	of files.  The filenames are an amended version of the original,
C	with an indication of what channel of data they contain.
C	Eg. Original 'SPOT.DTI' becomes 'SPOT1.DTI' for band 1;
C	'SPOT2.DTI' for band 2 etc. (up to MAX_BANDS).
C
	  ELSE
C
	    DO 100 I=1,MAX_BANDS
C
	    IF(THIS_BAND(I))THEN
C
	      DTI_OUT_LUN=I	!LUN on which to open the DTI file(s)
C
C	Modify the DTI filename to reflect the band number
C
	      CH_POS=INDEX(DTI_FILENAME,'.')
	      CALL EXPAND('%S',DTI_FILENAME(1:CH_POS-1))	      
	      CALL APPEND('%I1',I)
	      CALL APPEND('%S',DTI_FILENAME(CH_POS:LENGTH))
	      LENGTH=LENGTH+1
C	     	  
	      IERR=DTI_CREATE(DTI_OUT_LUN,EXPDSC,LENGTH,
     &                        DTI_ALVY,DEFAULT_LSLA_HEADER,
     &                        DATA_BYTE,XSIZE,YSIZE,ERROR)
	
	      IF(IERR.NE.DTI__NORMAL)THEN		!unsuccessful
	        CALL LSL_PUTMSG(IERR)
	        IF(IERR.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	        GOTO 999
	      ENDIF
	   ENDIF
C
100	   CONTINUE
C
	   ENDIF
C
	  DTI_OPEN=.TRUE.	!signal that we have a DTI file open
	ENDIF
C
500	IF(TEXT_FILE)THEN
C	Create a text file.
C	The name of the file is TEXT_FILENAME of length TEXT_LENGTH
	  IERR=FLWOPN(TEXT_LUN,HDR_FILENAME(1:HDR_LENGTH),ERROR)
	  IF(.NOT.IERR)THEN
            CALL LSL_PUTMSG(IERR)
	    GOTO 999
	  ENDIF
	  TEXT_OPEN=.TRUE.
	  CALL FLWRTF('!HEADER RECORD FILE')
	  CALL EXPAND('!Produced by ')
C	  Get user name
	  IERR=LIB$GETJPI(JPI$_USERNAME,,,,USER,USELEN)
	  CALL APPEND('   %S',USER(1:USELEN))
C	  Get date and time
	  CALL DATE(SDATE)
	  CALL APPEND(' on %S',SDATE)
	  CALL TIME(STIME)
	  CALL APPEND(' %S',STIME(1:5))
	  CALL FLWLIN
	  CALL FLWRTF('!')
C
	ENDIF
C
C	Signal success
	OPEN_FILES=.TRUE.
C
C-------------------------------------------------------------------------
999	RETURN
C
	END
