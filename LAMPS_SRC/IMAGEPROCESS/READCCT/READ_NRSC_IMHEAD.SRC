C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-08-05 11:12:48.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION READ_NRSC_IMAGE_HEADER()
C
***	MODULE	READ_NRSC_IMAGE_HEADER
***	IDENT	05AU87
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	Routine for to decode a RAE CCT image header record.
C	MOD  05AU87  If reading of band number fails, then assume
C	band 1.
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:READCCT.CMN'
	INCLUDE 'HERE:TAPE_RECORDS.CMN'
	INCLUDE 'HERE:TAPE.CMN'
	INCLUDE 'HERE:READCCTMSG.PAR'
C
C	Locals
	INTEGER*4	IERR		!function return
	INTEGER*4	I		!counter
	INTEGER*4	SKIP_NBLKS	!number of tape records to skip
	INTEGER*2	NUMBER_PIXELS	!number of pixels / line
	INTEGER*2	NUMBER_LINES	!number of lines / image
C
C	Functions
	INTEGER*4	MTISPC		!to skip tape blocks
	LOGICAL		RDINT		!to read word
	INTEGER*4	FLWSEL		!to select file on specified LUN
C
C--------------------------------------------------------------------------
C
	COUNT_IMAGE_HEADER=COUNT_IMAGE_HEADER+1
C	!increment counter for this record type
C
	LINE_NUMBER=0			!initialise image line count
	COUNT_COLUMNS=1			!initialise column count
C
	READ_NRSC_IMAGE_HEADER=.TRUE.	!assume successful
C
	IF(SKIP_SCENE)GOTO 999
C
C---------------------------------------------------------------------------
C
C	The character information is encoded as 8 bit ASCII
C	so mask out in order to interprete correctly.
C	but first determine the number of pixels per line,
C	and number of lines per image.
C
	CALL FORM_WORD(NUMBER_PIXELS,15)
	IMAGE_DATA_LENGTH=NUMBER_PIXELS
	CALL FORM_WORD(NUMBER_LINES ,17)
	NUMBER_IMAGE_LINES=NUMBER_LINES
C	
C	Modify the number of pixels that are required for
C	transfer if necessary
	HOW_MANY_PIXELS=
     &  MIN(HOW_MANY_PIXELS,(NUMBER_PIXELS-FIRST_SAMPLE)+1)
C
	DO 100 I=1,IMAGE_HEADER_LENGTH
	   MTBUF(I)=MIN(127,MTBUF(I)+128)
100	CONTINUE
C	   	
C	Extract the band number
	CALL SETAUX(MTBUF,IMAGE_HEADER_LENGTH)
	CALL SETWIN(47,4)
C
CMOD	If reading the band number fails, then
C	assume band 1.
	IF(RDINT(BAND_NUMBER))THEN
	   BAND_NUMBER=1
	ENDIF
C
	IF(HAD_DIAG)THEN
	  CALL WRITEF
     &    ('*** NRSC Image Header Record Band %^W%I6',BAND_NUMBER)
	ENDIF
C
	IF((HAD_LIST.OR.HAD_PRINT).AND.DECODE_HEADER)THEN
C
	  IERR=FLWSEL(2)
	  IF(.NOT.IERR)THEN
	    CALL LSL_PUTMSG(IERR)
	    READ_NRSC_IMAGE_HEADER=.FALSE.
	    GOTO 999
	  ENDIF
C
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF
     & ('               *** NRSC IMAGE HEADER RECORD ***')
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF('Bytes per Pixel      :      %A1',  MTBUF(14))
	  CALL FLWRTF('Pixels per Line      : %^W%I6',  NUMBER_PIXELS)
	  CALL FLWRTF('Lines per Image      : %^W%I6',  NUMBER_LINES)
	  CALL FLWRTF('Band number          : %^W%I6',  BAND_NUMBER)
	  CALL FLWRTF('Image Description    : ')
	  CALL FLWRTF('%A80',MTBUF(19))
C
	ENDIF
C	That's all there is!
C
C	Test if the FIRST_SAMPLE is within the image sample limit
C	if output of the imagery to a DTI file has been selected
	IF(DECODE_IMAGE.AND.HAD_DTI)THEN
	  IF(FIRST_SAMPLE.GT.NUMBER_PIXELS)THEN
	    CALL LSL_PUTMSG(READCCT__SAMPLEOUTSIDE)
	    READ_NRSC_IMAGE_HEADER=.FALSE.
	    GOTO 999
	  ENDIF
C
	  IF(FIRST_LINE.GT.NUMBER_LINES)THEN
	    CALL LSL_PUTMSG(READCCT__LINEOUTSIDE)
	    READ_NRSC_IMAGE_HEADER=.FALSE.
	    GOTO 999
	  ENDIF
	ENDIF
C
C	Modify LAST_SAMPLE,LAST_LINE and HOW_MANY_PIXELS values 
C	if necessary
	LAST_SAMPLE=MIN(LAST_SAMPLE,NUMBER_PIXELS)
	LAST_LINE  =MIN(LAST_LINE,NUMBER_LINES)
	HOW_MANY_PIXELS=(LAST_SAMPLE-FIRST_SAMPLE)+1
C
C	Test if this is one of the band's we are interested in.
	IF(.NOT.THIS_BAND(BAND_NUMBER))GOTO 999
C	
	IF(HAD_HDR.AND.DECODE_HEADER)THEN
C
	  IERR=FLWSEL(1)
	  IF(.NOT.IERR)THEN
	    CALL LSL_PUTMSG(IERR)
	    READ_NRSC_IMAGE_HEADER=.FALSE.
	    GOTO 999
	  ENDIF
C
	  CALL FLWRTF('!')
	  CALL FLWRTF('!Band number          : %^W%I6',  BAND_NUMBER)
	  CALL FLWRTF('!Bytes per Pixel      :      %A1',  MTBUF(14))
	  CALL FLWRTF('!Pixels per Line      : %^W%I6',  NUMBER_PIXELS)
	  CALL FLWRTF('!Lines per Image      : %^W%I6',  NUMBER_LINES)
	  CALL FLWRTF('!Image Description    : ')
	  CALL FLWRTF('!%A80',MTBUF(19))
	  CALL FLWRTF('!')
	ENDIF
C
	GOTO 999
C
C
900	READ_NRSC_IMAGE_HEADER=.FALSE.
C
C--------------------------------------------------------------------------
999	RETURN
C
	END
