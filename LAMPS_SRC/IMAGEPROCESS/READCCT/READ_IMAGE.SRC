C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1987-04-01 15:41:24.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION READ_IMAGE()
C
***	MODULE	READ_IMAGE
***	IDENT	30MR87
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	Routine for READCCT to decode a image data record.
C	The byte image data is transferred directly to the
C	DTI file using DTILIB routine DTI_COPY_BYTE_DATA.
C
	IMPLICIT NONE
C
***	COMMON/HERE:READCCT/		!SPOTIN variables
***	COMMON/HERE:TAPE/		!Values relating to the tape records
***	COMMON/HERE:TAPE_RECORDS/
C
***	PARAMETER/LSL$CMNDTI:DTILIBMSG/ !DTILIB error returns
C
C	Local
	INTEGER*2	SEQUENCE_NUMBER	!record sequence number
	INTEGER*4	LEFT_PADDING	!number of left fill pixels
	INTEGER*4	RIGHT_PADDING	!number of right fill pixels
	INTEGER*4	TIME		!time of start of scan
	INTEGER*4	HRS,MNS,SCS	!time in hours,mins,secs
C	
	INTEGER*4	IERR		!function return
	INTEGER*4	ERROR		!system error code
C
	INTEGER*4	DTI_COPY_BYTE_DATA	!to transfer an array
C						!of byte data
	INTEGER*4	OPEN_FILES		!to open DTI file
C----------------------------------------------------------------------------
C
	READ_IMAGE=.TRUE.		!set to signal success
C
	COUNT_IMAGE=COUNT_IMAGE+1	!increment counter for this
C					!record type
C
	IF(.NOT.DECODE_IMAGE)GOTO 999	!no further action
C
	IF(SKIP_SCENE)GOTO 999
C----------------------------------------------------------------------------
C	Extract Information from the PREFIX record
	CALL FORM_LONGWORD(LINE_NUMBER,13)
	CALL FORM_WORD	  (BAND_NUMBER,19)
C	CALL FORM_WORD    (SEQUENCE_NUMBER,17)
C	CALL FORM_LONGWORD(TIME,21)
C	CALL FORM_TIME(TIME,HRS,MNS,SCS)
	CALL FORM_LONGWORD(LEFT_PADDING,25)
	CALL FORM_LONGWORD(RIGHT_PADDING,29)
C	
	IF(HAD_LIST)THEN
	  CALL WRITEF
	  CALL WRITEF('* * * IMAGE PREFIX DATA * * *')
	  CALL WRITEF('-----------------------------')
	  CALL WRITEF('Image Line Number     : %N',LINE_NUMBER)
	  CALL WRITEF('Sequence Number       : %^W%N',SEQUENCE_NUMBER)
	  CALL WRITEF('Image Band Number     : %^W%N',BAND_NUMBER)
	  CALL WRITEF('Left Fill Pixels      : %N',LEFT_PADDING)
	  CALL WRITEF('Right Fill Pixels     : %N',RIGHT_PADDING)
C	  CALL WRITEF
C	  CALL WRITEF('Time of Scan : %N h %N m %N s',HRS,MNS,SCS)
C	  CALL WRITEF
	ENDIF
C
C--------------------------------------------------------------------------
C
	IF(.NOT.HAD_DTI)GOTO 999	!don't actually transfer the data
C
C	Open the output file or files if we haven't already done so.
	  IF(.NOT.DTI_OPEN)THEN
	    IF(.NOT.OPEN_FILES(.TRUE.,.FALSE.))THEN
	      READ_IMAGE=.FALSE.
	      GOTO 999
	    ENDIF
	  ENDIF
C
C	Transfer the image data from MTBUF to the DTI file.
C	Take into account any start and end sample/line
C	values input by the user.
C
C	Do we require this line of data?
	IF(LINE_NUMBER.LT.FIRST_LINE.OR.LINE_NUMBER.GT.LAST_LINE)GOTO 999
C
C	Do we require this band of data?
	IF(.NOT.THIS_BAND(BAND_NUMBER))GOTO 999
C
C	Write to the appropriate DTI file for this band
	DTI_OUT_LUN=BAND_NUMBER
	IF(DTI_OUT_LUN.LE.0.OR.DTI_OUT_LUN.GT.7)THEN
	  READ_IMAGE=.FALSE.
	  GOTO 999
	ENDIF
C
	COUNT_COLUMNS=(LINE_NUMBER-FIRST_LINE)+1
C
C	Transfer the appropriate number of bytes directly to the DTI file	
	IERR=DTI_COPY_BYTE_DATA (DTI_OUT_LUN, MTBUF(33+FIRST_SAMPLE),
     &                           .TRUE.,
     &                           COUNT_COLUMNS,1,
     &			         1,HOW_MANY_PIXELS,ERROR)
C
	IF(.NOT.IERR)THEN
	  CALL LSL_PUTMSG(IERR)
	  IF(IERR.EQ.DTI__SYSERR)CALL LSL_PUTMSG(ERROR)
	  READ_IMAGE=.FALSE.
	  GOTO 999
	ENDIF
C
C	COUNT_COLUMNS=COUNT_COLUMNS+1
C
C--------------------------------------------------------------------------
C
999	RETURN
C
	END
