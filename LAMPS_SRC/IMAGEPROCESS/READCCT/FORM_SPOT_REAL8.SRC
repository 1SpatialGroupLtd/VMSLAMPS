C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-01-20 18:11:30.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION FORM_SPOT_REAL8 ( REAL_VALUE, BYTE_OFFSET )
C
***	MODULE	FORM_SPOT_REAL8
***	IDENT	20JA88
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	Routine for READCCT to return a REAL*8 value formed
C	from 8 bytes in the buffer MTBUF.
C	This routine is specific to real values on a Standard SPOT CCT,
C	The values are written according to format on a SOLAR, and
C	is therefore different to a REAL*8 on a VAX.
C	
C
	IMPLICIT NONE
C
C	Arguments:
	REAL*8		REAL_VALUE	!VAX REAL*8 value (returned)
	INTEGER*4	BYTE_OFFSET	!byte offset in MTBUF
C
	INCLUDE 'HERE:TAPE.CMN'		!contains MTBUF
C
C	Locals
	REAL*8		REAL_VALUE_TEMP	!workspace copy of REAL_VALUE
	BYTE		IN_BYTES(8)	!The 8 bytes used to form the 
C					!REAL*4
	BYTE		ZERO_SOLAR(8)	!8 bytes representing value 0.0 in
C					!SOLAR format
	INTEGER*4	INT_EXP		!equivalenced to EXPONENT
	INTEGER*4	MANTISSA_IN(2)	!MANTISSA_IN(1) holds first 4 bytes
C					!of SOLAR value
C					!MANTISSA_IN(2) holds last 4 bytes 
C					!of SOLAR value
	INTEGER*4	MANTISSA_OUT(2)	!MANTISSA_OUT(1) holds first 4 bytes
C					!of VAX value
C					!MANTISSA_OUT(2) holds last 4 bytes
C					!of VAX value
	INTEGER*4	MASK_EXP	!mask value for INT_EXP
	PARAMETER	(MASK_EXP = '0000FF80'X)
C
	INTEGER*4	MASK_MAN	!mask value for MANTISSA_IN(1)
	PARAMETER	(MASK_MAN = '007FFFFF'X)
C
	INTEGER*4	I		!counter
C
	BYTE		EXPONENT	!exponent byte
	BYTE		BYTE_TEMP	!to hold temporary byte value
C
C	Equivalences
	EQUIVALENCE	(MANTISSA_IN(1), IN_BYTES(1))
	EQUIVALENCE	(REAL_VALUE_TEMP, MANTISSA_OUT(1))
	EQUIVALENCE	(EXPONENT,INT_EXP)
C
	DATA		ZERO_SOLAR/ '00'X, '80'X, '00'X, '00'X,
     &                              '00'X, '00'X, '00'X, '00'X/
C
C----------------------------------------------------------------------------
C
	FORM_SPOT_REAL8 = .FALSE.	!assume failure
C
C	First extract the relevant 8 bytes from MTBUF
C
	IN_BYTES(1)=MTBUF(BYTE_OFFSET)
	IN_BYTES(2)=MTBUF(BYTE_OFFSET+1)
	IN_BYTES(3)=MTBUF(BYTE_OFFSET+2)
	IN_BYTES(4)=MTBUF(BYTE_OFFSET+3)
	IN_BYTES(5)=MTBUF(BYTE_OFFSET+4)
	IN_BYTES(6)=MTBUF(BYTE_OFFSET+5)
	IN_BYTES(7)=MTBUF(BYTE_OFFSET+6)
	IN_BYTES(8)=MTBUF(BYTE_OFFSET+7)
C
C	Check if the input bytes represent a SOLAR real value of 0.0
C	If they are then the output value is of course 0.0
C
	IF ((IN_BYTES(1).EQ.ZERO_SOLAR(1)).AND.
     &      (IN_BYTES(2).EQ.ZERO_SOLAR(2)).AND.
     &      (IN_BYTES(3).EQ.ZERO_SOLAR(3)).AND.
     &      (IN_BYTES(4).EQ.ZERO_SOLAR(4)).AND.
     &      (IN_BYTES(5).EQ.ZERO_SOLAR(5)).AND.
     &      (IN_BYTES(6).EQ.ZERO_SOLAR(6)).AND.
     &      (IN_BYTES(7).EQ.ZERO_SOLAR(7)).AND.
     &      (IN_BYTES(8).EQ.ZERO_SOLAR(8)))THEN
           REAL_VALUE = 0.0
	   FORM_SPOT_REAL8 = .TRUE.
	   RETURN
	ENDIF
C
C----------------------------------------------------------------------------
	INT_EXP = '0000'X
C	First deal with the exponent
C	The exponent of the SOLAR value is byte 2
	EXPONENT = IN_BYTES(2)
C
C	On the SOLAR bit 7 of is the sign
C	0 = positive   1 = negative
C	The exponent is coded in twos complement
C
C	Test if bit 7 is set 
C	We use INT_EXP which is equivalenced on to EXPONENT
	IF (BJTEST(INT_EXP,7))THEN
C	Unset
	   INT_EXP = JIBCLR(INT_EXP,7)
	ELSE
C	Set
	   INT_EXP = JIBSET(INT_EXP,7)
	ENDIF
C	   
C	Shift bits in INT_EXP so that exponent is in correct
C	position for VAX
	INT_EXP = JISHFT(INT_EXP,7)
C
C	Mask the reamaining bits in INT_EXP which form part of 
C	the mantissa on the VAX
	INT_EXP = JIAND(INT_EXP,MASK_EXP)
C
C-------------------------------------------------------------------------
C	Now deal with the MANTISSA
C	
C	Test the sign prior to transforming
C	On the SOLAR bit 7 of the first byte is the sign
C	0 = positive  1 = negative
C	The mantissa is written in twos complement
C
C	Is bit 7 set?
	IF(BJTEST(MANTISSA_IN(1),7))THEN
C	yes, so set the appropriate bit in INT_EXP (bit 15)
	  INT_EXP = JIBSET(INT_EXP,15)
	  IF(.NOT.(BJTEST(MANTISSA_IN(1),6)))THEN
	    MANTISSA_IN(1)=JNOT(MANTISSA_IN(1))
	    MANTISSA_IN(2)=JNOT(MANTISSA_IN(2))
	  ENDIF
	ELSE
C	no, so put 0 in bit 15
	  INT_EXP = JIBCLR(INT_EXP,15)
	ENDIF
C
C	Reorder the bytes forming MANTISSA_IN(1)
	BYTE_TEMP   = IN_BYTES(4)
	IN_BYTES(4) = IN_BYTES(2)
	IN_BYTES(2) = IN_BYTES(3)
	IN_BYTES(3) = IN_BYTES(1)
	IN_BYTES(1) = BYTE_TEMP
C	
C	Shift to the right in MANTISSA_IN(1) by 1
	MANTISSA_IN(1) = JISHFT(MANTISSA_IN(1),1)
C
C	Reorder the bytes forming MANTISSA(2)
	BYTE_TEMP   = IN_BYTES(8)
	IN_BYTES(8) = IN_BYTES(5)
	IN_BYTES(5) = BYTE_TEMP
	BYTE_TEMP   = IN_BYTES(7)
	IN_BYTES(7) = IN_BYTES(6)
	IN_BYTES(6) = BYTE_TEMP
C
	IF(BJTEST(MANTISSA_IN(2),31))THEN
	  MANTISSA_IN(1) = JIBSET(MANTISSA_IN(1),0)
	ELSE
	  MANTISSA_IN(1) = JIBCLR(MANTISSA_IN(1),0)
	ENDIF
C
C	Shift to the right in MANTISSA(2) by 1
	MANTISSA_IN(2) = JISHFT(MANTISSA_IN(2),1)
C	Put 0 in the last bit of the mantissa
	MANTISSA_IN(2) = JIBCLR(MANTISSA_IN(2),0)
C
C	Mask those bits in MANTISSA(1) that will hold the exponent
	MANTISSA_IN(1) = JIAND(MANTISSA_IN(1),MASK_MAN)
C	
C	Reverse the order of the bytes of forming MANTISSA(1) into
C	their final VAX order
	BYTE_TEMP   = IN_BYTES(1)
	IN_BYTES(1) = IN_BYTES(3)
	IN_BYTES(3) = BYTE_TEMP
	BYTE_TEMP   = IN_BYTES(2)
	IN_BYTES(2) = IN_BYTES(4)
	IN_BYTES(4) = BYTE_TEMP
C
C	Reverse the order of the bytes of forming MANTISSA(2) into
C	their final VAX order
	BYTE_TEMP   = IN_BYTES(8)
	IN_BYTES(8) = IN_BYTES(6)
	IN_BYTES(6) = BYTE_TEMP
	BYTE_TEMP   = IN_BYTES(7)
	IN_BYTES(7) = IN_BYTES(5)
	IN_BYTES(5) = BYTE_TEMP
C
C	Combine MANTISSA(1) with INT_EXP to get MANTISSA_OUT(1)
	MANTISSA_OUT(1)  = JIOR(MANTISSA_IN(1),INT_EXP)
C
C	MANTISSA_OUT(2) is simply MANTISSA_IN(2)
	MANTISSA_OUT(2)  = MANTISSA_IN(2)
C
C	Remember MANTISSA_OUT is equivalenced on to REAL_VALUE_TEMP
C	Copy from this value to returned real value
	REAL_VALUE = REAL_VALUE_TEMP
C
C	Signal success
	FORM_SPOT_REAL8 =.TRUE.
C
	RETURN
C
	END
