C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-11-14 12:37:32.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
        LOGICAL FUNCTION READ_EPHEMERIS()
C
***	MODULE	READ_EPHEMERIS
***	IDENT	14NO88
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: D R Catlow
C
C	Routine for READCCT to decode an ancilary record
C	containing ephemeris and altitude data.
C
	IMPLICIT NONE
C
	INCLUDE 'HERE:READCCT.CMN'
	INCLUDE 'HERE:TAPE.CMN'		!Values relating to the tape records
	INCLUDE 'HERE:TAPE_RECORDS.CMN'
C
	INTEGER*4	IERR		!function return
C
C	Function
	INTEGER*4	FLWSEL		!select file opened on required LUN
C
C----------------------------------------------------------------------------
C	Local
	REAL*8			REAL_VALUE
	INTEGER*4		I	!counter
	INTEGER*4		POINTER !decode pointer into MTBUF
	INTEGER*4		DAYS	!number of days since 1.1.50
	INTEGER*4		TIME	!time in millisecs
	INTEGER*4		HRS,MNS,SCS	!time in hours,mins,secs
	INTEGER*4		YEAR,MONTH,DAY	!date
C
C	Functions
	LOGICAL			FORM_DATE!form data from DAYS
	LOGICAL			FORM_TIME!convert from millisecs to hrs/mins
	INTEGER*4		FORM_SPOT_REAL8!to form real*8
C
	LOGICAL			RDLONG	!decode longword
C
C----------------------------------------------------------------------------
C----------------------------------------------------------------------------
C
	COUNT_EPHEMERIS=COUNT_EPHEMERIS+1	!increment counter for this
C						!record type
C
	READ_EPHEMERIS=.TRUE.			!signal success
C
	IF(.NOT.DECODE_EPHEMERIS)GOTO 999	!decoding of this record is
C						!not required
C
	IF(SKIP_SCENE)GOTO 999
C---------------------------------------------------------------------------
        CALL SETAUX(MTBUF,MAX_RECORD_LENGTH)
C
	IF((HAD_PRINT.OR.HAD_LIST).AND.SPOT)THEN
C
 	  IERR=FLWSEL(2)
	  IF(.NOT.IERR)THEN
	    CALL LSL_PUTMSG(IERR)
	    READ_EPHEMERIS=.FALSE.
	    GOTO 999
	  ENDIF
C
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF
     & ('            *** SPOT EPHEMERIS-ATTITUDE DATA ***')
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF
     & ('EPHEMERIS DATA FOR 9 POINTS')
	  CALL FLWRTF
     & ('-------------------------------------------------------------')

C	Set Decode Pointer
	  POINTER=21
	  DO 100 I=1,9
	     CALL FLWRTF('POINT %N:',I)	   
	     CALL FLWRTF
     &       ('Position    (Kms) : X:%A12 Y:%A12 Z:%A12',
     &       MTBUF(POINTER),MTBUF(POINTER+12),MTBUF(POINTER+24))
	     POINTER=POINTER+36
	     CALL FLWRTF
     &       ('Velocity (KMs/sec): X:%A12 Y:%A12 Z:%A12',	       
     &       MTBUF(POINTER),MTBUF(POINTER+12),MTBUF(POINTER+24))
	     POINTER=POINTER+36
C
	     CALL SETWIN(POINTER,5)
	     IF(RDLONG(DAYS))DAYS=0
	     IF(.NOT.FORM_DATE(DAYS,YEAR,MONTH,DAY))GOTO 999
C
	     CALL SETWIN(POINTER+5,5)
	     IF(RDLONG(TIME))TIME=0
	     TIME=TIME*1000
	     IF(.NOT.FORM_TIME(TIME,HRS,MNS,SCS))GOTO 999
C	       
	     CALL FLWRTF
     &       ('Time              :
     & %P0%I2:%I2%P0:%I4     %I2%P0:%I2%P0:%I2%P0', 
     &       DAY,MONTH,YEAR,HRS,MNS,SCS)
	     POINTER=POINTER+28
C
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
100	  CONTINUE
C
	  CALL FLWRTF
     & ('Satellite Altitude                 (metres) : %A8',MTBUF(957))
C
C    Form the scene centre time
	  POINTER=977
	  CALL SETWIN(POINTER,5)
	  IF(RDLONG(DAYS))DAYS=0
	  IF(.NOT.FORM_DATE(DAYS,YEAR,MONTH,DAY))GOTO 999
C
	  CALL SETWIN(POINTER+5,5)
	  IF(RDLONG(TIME))TIME=0
	  TIME=TIME*1000
	  IF(.NOT.FORM_TIME(TIME,HRS,MNS,SCS))GOTO 999
C
	  CALL FLWRTF
     & ('Scene Centre Time                  :
     & %P0%I2:%I2%P0:%I4  %I2%P0:%I2%P0:%I2%P0.%A3', 
     &    DAY,MONTH,YEAR,HRS,MNS,SCS,MTBUF(988))
C
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF('HRV LOOK ANGLES')
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
C
C	Extract the HRV look angle values
	  CALL FLWRTF
     & ('PSI X Angle for Last Detector    (sDDDMMSS) : %A8',MTBUF(2461))
C
	  CALL FLWRTF
     & ('PSI X Angle for First Detector   (sDDDMMSS) : %A8',MTBUF(2469)) 
C
	  CALL FLWRTF
     & ('PSI Y Angle for Last Detector    (sDDDMMSS) : %A8',MTBUF(2477)) 
C
	  CALL FLWRTF
     & ('PSI Y Angle for First Detector   (sDDDMMSS) : %A8',MTBUF(2485)) 
C
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
	  CALL FLWRTF('ATTITUDE DATA FOR 73 POINTS')
	  CALL FLWRTF
     & ('-------------------------------------------------------------')
C
	  POINTER=1001
	  CALL FLWRTF
     &  ('Line Number and Rotation about')
	  CALL FLWRTF
     &  ('Yaw, Roll and Pitch Axes             :')
C
	  DO 250 I=1,73
C
	     CALL EXPAND
     &  ('Point %I2   (10**-6 degrees per sec.) :',I)
	     CALL APPEND(' %A4 %A5 %A5 %A5', 
     &       MTBUF(POINTER),MTBUF(POINTER+4),
     &       MTBUF(POINTER+9),MTBUF(POINTER+14))
	     CALL FLWLIN
C
	     POINTER=POINTER+20
C
250	    CONTINUE
C
C	Extract the REAL*8 values containing information on the
C	deformation model etc.
	    
	    CALL FLWRTF
     & ('-------------------------------------------------------------')
	    CALL FLWRTF('COEFFICIENTS OF DEFORMATION MODEL')
	    CALL FLWRTF
     & ('-------------------------------------------------------------')
C
	    POINTER=3001
	    DO 260 I=1,4
	      IERR = FORM_SPOT_REAL8(REAL_VALUE,POINTER)
	      IF(.NOT.IERR)REAL_VALUE=0.0
	      POINTER=POINTER+8
	      IF(I.EQ.1)THEN
	        CALL EXPAND
     &  ('Raw Central Column                   :')
	      ELSE
	        CALL EXPAND
     &  ('                                     :')
	      ENDIF
	      CALL APPEND('%^D%E16',REAL_VALUE)
	      CALL FLWLIN
  260       CONTINUE
C
	    POINTER = 3033
	    DO 265 I=1,4
	      IERR = FORM_SPOT_REAL8(REAL_VALUE,POINTER)
	      IF(.NOT.IERR)REAL_VALUE=0.0
	      POINTER=POINTER+8
	      IF(I.EQ.1)THEN
	        CALL EXPAND
     &  ('Raw Central Line                     :')
	      ELSE
	        CALL EXPAND
     &  ('                                     :')
	      ENDIF
	      CALL APPEND('%^D%E16',REAL_VALUE)
	      CALL FLWLIN
  265       CONTINUE
C
	    POINTER = 3065
	    DO 270 I=1,4
	      IERR = FORM_SPOT_REAL8(REAL_VALUE,POINTER)
	      IF(.NOT.IERR)REAL_VALUE=0.0
	      POINTER=POINTER+8
	      IF(I.EQ.1)THEN
	        CALL EXPAND
     &  ('Resampling along Columns             :')
	      ELSE
	        CALL EXPAND
     &  ('                                     :')
	      ENDIF
	      CALL APPEND('%^D%E16',REAL_VALUE)
	      CALL FLWLIN
  270       CONTINUE
C
	    POINTER = 3097
	    DO 275 I=1,4
	      IERR = FORM_SPOT_REAL8(REAL_VALUE,POINTER)
	      IF(.NOT.IERR)REAL_VALUE=0.0
	      POINTER=POINTER+8
	      IF(I.EQ.1)THEN
	        CALL EXPAND
     &  ('Resampling along Lines               :')
	      ELSE
	        CALL EXPAND
     &  ('                                     :')
	      ENDIF
	      CALL APPEND('%^D%E16',REAL_VALUE)
	      CALL FLWLIN
  275       CONTINUE
C
	    POINTER=3129
	    DO 280 I=1,4
	      IERR = FORM_SPOT_REAL8(REAL_VALUE,POINTER)
	      IF(.NOT.IERR)REAL_VALUE=0.0
	      POINTER=POINTER+8
	      IF(I.EQ.1)THEN
	        CALL EXPAND
     &  ('Lines Translation Model              :')
	      ELSE
	        CALL EXPAND
     &  ('                                     :')
	      ENDIF
	      CALL APPEND('%^D%E16',REAL_VALUE)
	      CALL FLWLIN
  280       CONTINUE
C
	  ENDIF
C----------------------------------------------------------------------------
	  IF(HAD_HDR.AND.SPOT)THEN
C
 	    IERR=FLWSEL(1)
	    IF(.NOT.IERR)THEN
	      CALL LSL_PUTMSG(IERR)
	      READ_EPHEMERIS=.FALSE.
	      GOTO 999
	    ENDIF
C
	    CALL FLWRTF('!*** Ephemeris Data ***')
C
	    CALL EXPAND('SATELLITE_POSITION=')
	    CALL APPEND('                !X,Y,Z (kms)')
	    CALL FLWLIN
C
	    POINTER=21
            DO 200 I=1,9
	       CALL EXPAND('%A9,%A9,%A9,',
     &         MTBUF(POINTER),MTBUF(POINTER+12),MTBUF(POINTER+24))
	       CALL APPEND('     !Point %N',I)
	       CALL FLWLIN	
C
	       POINTER=POINTER+100
200	    CONTINUE
C
	    CALL EXPAND('INERTIAL_VELOCITY=')
	    CALL APPEND('                 !X,Y,Z (kms/sec)')
	    CALL FLWLIN
C
	    POINTER=57
C
	    DO 230 I=1,9
	       CALL EXPAND('%A9,%A9,%A9,',
     &         MTBUF(POINTER),MTBUF(POINTER+12),MTBUF(POINTER+24))
	       CALL APPEND('     !Point %N',I)
	       CALL FLWLIN	
C
	       POINTER=POINTER+100
C
230	    CONTINUE
C
	    CALL EXPAND('UNIVERSAL_TIME=')
	    CALL APPEND('                    !YYYYMMDDHHMMSSSSS')
	    CALL FLWLIN
C
	    POINTER=93
C
	    DO 240 I=1,9
C
	       CALL SETWIN(POINTER,5)
	       IF(RDLONG(DAYS))DAYS=0		!failure
	       IF(.NOT.FORM_DATE(DAYS,YEAR,MONTH,DAY))GOTO 999
C
	       CALL SETWIN(POINTER+5,5)
	       IF(RDLONG(TIME))TIME=0
	       TIME=TIME*1000
	       IF(.NOT.FORM_TIME(TIME,HRS,MNS,SCS))GOTO 999
C	       
	       CALL EXPAND(' %I4%P0%I2%P0%I2%P0%I2%P0%I2%P0%I2% 000',
     &         YEAR,MONTH,DAY,HRS,MNS,SCS)
	       CALL APPEND('                 !Point %N',I)
	       CALL FLWLIN	
C
	       POINTER=POINTER+100
C
240	    CONTINUE
C
C	    Extract the altitude and scene centre time
	    CALL EXPAND('SATELLITE_ALTITUDE=')
	    CALL APPEND('%A8',MTBUF(957))
	    CALL APPEND('        !Altitude of satellite')
	    CALL FLWLIN
C
C----------------------------------------------------------------------------
C	    Set pointer to first byte of scene centre time
	    POINTER=977
C
	    CALL SETWIN(POINTER,5)
	    IF(RDLONG(DAYS))DAYS=0		!failure
	    IF(.NOT.FORM_DATE(DAYS,YEAR,MONTH,DAY))GOTO 999
C
	    CALL SETWIN(POINTER+5,5)
	    IF(RDLONG(TIME))TIME=0
	    TIME=TIME*1000
	    IF(.NOT.FORM_TIME(TIME,HRS,MNS,SCS))GOTO 999
C
	    CALL EXPAND(' %I4%P0%I2%P0%I2%P0%I2%P0%I2%P0%I2.%A3',
     &      YEAR,MONTH,DAY,HRS,MNS,SCS,MTBUF(988))
	    CALL APPEND('                !Scene Centre Time')
	    CALL FLWLIN
C
C----------------------------------------------------------------------------
C	    Set pointer to read the attitude data
	    POINTER=1001
C
	    CALL EXPAND('ATTITUDE_DATA=')
	    CALL FLWLIN
C	  
            CALL EXPAND('!Line, rotation around yaw, 
     & roll and pitch axes')
	    CALL FLWLIN
C
	    DO 300 I=1,73
C
	       CALL EXPAND('%A4,%A5,%A5,%A5,',
     &         MTBUF(POINTER),MTBUF(POINTER+4),
     &         MTBUF(POINTER+9),MTBUF(POINTER+14))
	       CALL APPEND('            !Point %N',I)
	       CALL FLWLIN
C
	       POINTER=POINTER+20
C
300	    CONTINUE
C
C	Extract the HRV look angle values
	    CALL EXPAND('PSI_X_LAST_PIXEL=')
	    CALL APPEND('%A8',MTBUF(2461))
	    CALL APPEND('          !PSI x angle for last pixel DDDMMSS')
	    CALL FLWLIN	    
C
	    CALL EXPAND('PSI_X_FIRST_PIXEL=')	    
	    CALL APPEND('%A8',MTBUF(2469))
	    CALL APPEND('         !PSI x angle for first pixel DDDMMSS')
	    CALL FLWLIN	    
C
	    CALL EXPAND('PSI_Y_LAST_PIXEL=')	    
	    CALL APPEND('%A8',MTBUF(2477))
	    CALL APPEND('          !PSI y angle for last pixel DDDMMSS')
	    CALL FLWLIN	    
C
	    CALL EXPAND('PSI_Y_FIRST_PIXEL=')	    
	    CALL APPEND('%A8',MTBUF(2485))
	    CALL APPEND('         !PSI y angle for first pixel DDDMMSS')
	    CALL FLWLIN	    
C
	  ENDIF
C
C
999	RETURN
C
	END

