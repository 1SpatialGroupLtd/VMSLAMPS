C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-12-22 17:49:54.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION OPNLKP
C
***	MODULE	OPNLKP
***	IDENT	12DE86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    28-Nov-1986
C
C parses and opens lookup text file
C
	IMPLICIT NONE
C
C Parameters
***	COMMON/LSL$CMNLSL:READSTR.PAR/
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
C
C Common Blocks
***	COMMON/LSL$CMNDTIFILTER:LKPCMN/
***	COMMON/LSL$CMNLSL:STATUS/
C
C local variables
C
	INTEGER*4	FAKSTR(2)
	INTEGER*2	FAKLEN
	BYTE		FAKBUF(80)
	BYTE		CH
	INTEGER*4	ERR,IERR		!system error return
	INTEGER*4	UNIT
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C functions
C
	LOGICAL 	READSTR
	INTEGER*4	PARFILN
	LOGICAL		RDCHS
	INTEGER*4	FLWUPD
	INTEGER*4	FLWOPN
	INTEGER*4	FLWCLO
C
C**********************************************************************
C
	FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
C
C	Check for optional quotes
50	IF(RDCHS(CH))THEN
	  CALL LSL_PUTMSG(DTIFIL__MISSFILNAM)
	  CALL BSLN
	  OPNLKP = LSL_STATUS
	  GOTO 999	  
	ELSE
	  FAKLEN=80
	  IF(CH.EQ.34.OR.CH.EQ.39)THEN
	    FAKLEN=READSTR(FAKSTR,CH,ON_CHAR2,.FALSE.)
	  ELSE
	    CALL BSCH
	    FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.FALSE.)
	  ENDIF
	ENDIF
C
C	Get input file
	OPNLKP=PARFILN(LKP_FIL,LKP_LEN,FAKSTR,'LSL$LOOKUP:.DAT'
     &	,.TRUE.)
	IF(.NOT. OPNLKP)THEN
	  CALL LSL_PUTMSG(OPNLKP)
	  GOTO 999
	ENDIF
C
	UNIT = 3
C
Cclose any open look up files
C
	IF (LKP_HADTABLE) THEN
	    OPNLKP = FLWCLO(UNIT,IERR)
	    IF (.NOT. OPNLKP) THEN
	       CALL LSL_PUTMSG(DTIFIL__ERRCLOLKP)
	       CALL LSL_ADDMSG(IERR)
	       GOTO 999
	    ENDIF
	ENDIF
C
C open look up file
C
	OPNLKP = FLWUPD(UNIT,LKP_FIL,IERR)      !open existing file
C
	IF (OPNLKP) THEN			! did it open ok?
	     CALL LSL_PUTMSG(DTIFIL__OPNLKP,LKP_FIL(1:LKP_LEN))
	     LKP_HADTABLE= .TRUE.
	ELSE	
	   IF (OPNLKP .EQ. LSL__NOSUCHFILE) THEN	! No, error !! 
	      OPNLKP = FLWOPN(UNIT,LKP_FIL,IERR)	! open new one
	   ENDIF
	   IF (.NOT. OPNLKP) THEN
	     CALL LSL_PUTMSG(DTIFIL__ERROPLKP,LKP_FIL(1:LKP_LEN))
	     CALL LSL_ADDMSG(OPNLKP)		! give any 2ndary error
	     IF (IERR.NE.0) THEN
	       CALL LSL_ADDMSG(IERR)		! give any system error
	     ENDIF
	     LKP_HADTABLE = .FALSE.
	     GOTO 999				! error exit
	   ELSE
	      CALL LSL_PUTMSG(DTIFIL__CREATELKP,LKP_FIL(1:LKP_LEN))
	      LKP_HADTABLE = .TRUE.
	   ENDIF
	ENDIF
C
999	RETURN
	END
