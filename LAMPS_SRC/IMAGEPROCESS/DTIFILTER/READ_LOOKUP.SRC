	LOGICAL FUNCTION READ_LOOKUP
C
***	MODULE	READ_LOOKUP
***	IDENT	09DE86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    28-Nov-1986
C
C reads the text file whih contains user defined kernel values
C 
C
	IMPLICIT NONE
C
C Parameters
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***	COMMON/LSL$CMNLSL:READSTR.PAR/
C
C Common Blocks
***	COMMON/LSL$CMNDTIFILTER:LKPCMN.CMN/
C
C Functions
	LOGICAL		RDREAL
	LOGICAL		RDCHS
	INTEGER*4	READSTR
	INTEGER*4	FLRLIN
	INTEGER*4	LONG_LKP
	INTEGER*4	REAL_LKP
C
C Local Varaiables
	INTEGER*4	SUCCESS		! return code
	INTEGER*4	IERR		! error code
	BYTE		ICH		! read character
	INTEGER*4	RET		! return code
	INTEGER*4	I,J		! counters
	REAL		VAL		! temp
	INTEGER*4	UNIT
C
C
C assume success
	READ_LOOKUP = .FALSE.
C
C....................................................................
C initialise reading
C
	LKP_NUM = 1
	LKP_LIN = 1
C
	UNIT = 3
C select for read
	CALL FLRSEL(UNIT)
C
C rewind file
C since its been rewound we're in an unstable position with a
C file opened for write.
C the file must be read to the end or there is a DANGER of
C things being overwritten
C
	CALL FLRREW
C read line
C
10	LKP_LIN = LKP_LIN+1
	SUCCESS = FLRLIN()
	IF (.NOT.SUCCESS) THEN
	  IF (SUCCESS.EQ.LSL__EOF) THEN
	    LKP_NUM = LKP_NUM -1
	    GOTO 1000				! end of file
	  ELSE
	    CALL LSL_PUTMSG(DTIFIL__ERRRLKP) 		! error in read
	    GOTO 999
	  ENDIF
	ENDIF
C
C.....................................................................
C decode the line
C get first character
C
	CALL BSLN
	IF(RDCHS(ICH)) GOTO 10			!blank line
	IF(ICH.GE.'A'.AND.ICH.LE.'Z') GOTO 100	! alpha - new filter
	IF(ICH.GE.'a'.AND.ICH.LE.'z') GOTO 100	! alpha - new filter
	IF(ICH.EQ.'!')		      GOTO 10	! comment
C
C none of these so moan
C
	CALL LSL_PUTMSG(DTIFIL__INVALLINE,LKP_LIN)
	GOTO 10					! ignore line
C
C look for the filter name
C
100     CALL BSCH
	LKP_NAMELEN(LKP_NUM)=
     &	          READSTR(LKP_NAME(LKP_NUM),'/',ON_SPACE,.TRUE.,RET)
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(DTIFIL__INVALLINE,LKP_LIN)
	   CALL LSL_ADDMSG(RET)
	   GOTO 10
	ENDIF
C
C look for optional / separator
C
	IF (RET .EQ. LSL__STRSPACE) THEN
	  CALL RDCHS(ICH)
	  IF (ICH .NE. '/') THEN	!no / so backspace
	      CALL BSCH
	  ENDIF
	ENDIF
C
C
C look for the size fields X and Y
C we have to allow for fields being on the next line
C
	SUCCESS = LONG_LKP(LKP_XSIZE(LKP_NUM))
	IF (.NOT. SUCCESS) THEN
	   CALL LSL_PUTMSG(SUCCESS,LKP_LIN)
	   IF (SUCCESS .EQ. DTIFIL__INVALLINE) THEN
	      GOTO 10				! not fatal
	   ELSE
	      GOTO 999				! stop reading
	   ENDIF
	ENDIF 
C
	SUCCESS = LONG_LKP(LKP_YSIZE(LKP_NUM))
	IF (.NOT. SUCCESS) THEN
	   IF (SUCCESS .EQ. DTIFIL__INVALLINE) THEN
	      CALL LSL_PUTMSG(SUCCESS,LKP_LIN)
	      GOTO 10				! not fatal
	   ELSE
	      CALL LSL_PUTMSG(DTIFIL__ERRRLKP)
	      CALL LSL_ADDMSG(SUCCESS)
	      GOTO 999				! stop reading
	   ENDIF
	ENDIF 
C
Ccheck X and Y sizes are'nt too big
	IF((LKP_YSIZE(LKP_NUM).GT.25).OR.(LKP_YSIZE(LKP_NUM).GT.25))THEN
	   CALL LSL_PUTMSG(DTIFIL__INVALLINE,LKP_LIN)
	   CALL LSL_ADDMSG(DTIFIL__KERTOOBIG)
	   GOTO 10
	ENDIF
C
C look for optional separator again	
C
	CALL RDCHS(ICH)
	IF (ICH .NE. '/') THEN	!no / so backspace
	   CALL BSCH
	ENDIF
C
C read in the kernel weightings
C
	DO 300 I = LKP_YSIZE(LKP_NUM),1,-1 ! makes it easier if kernel 
C					   ! starts at bottom 
	   DO 350 J = 1,LKP_XSIZE(LKP_NUM)
	      SUCCESS = REAL_LKP(LKP_KERNEL(LKP_NUM,J,I)) 
	      IF (.NOT. SUCCESS) THEN
		 CALL LSL_PUTMSG(SUCCESS,LKP_LIN)	
		 IF (SUCCESS .EQ. DTIFIL__INVALLINE) THEN
	            CALL LSL_ADDMSG(DTIFIL__TOOFEWVALS)
		    GOTO 10		   ! not fatal
		 ELSE
		    GOTO 999		   ! exit
		 ENDIF
	      ENDIF
350	   CONTINUE
300	CONTINUE
C
Ccheck for excess values
C
	IF (.NOT. RDREAL(VAL)) THEN
	   CALL LSL_PUTMSG(DTIFIL__EXTRAVALIGN,LKP_LIN)
	ENDIF
C
C if we've reached this point then we've successfully read a record
C the record counter can be incremented
C
	LKP_NUM = LKP_NUM + 1
	GOTO 10
C
999	LKP_NUM = LKP_NUM - 1
	READ_LOOKUP = .TRUE.			!failure
C	
1000  	RETURN
	END
