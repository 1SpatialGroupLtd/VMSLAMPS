C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-21 19:59:20.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION CONVOLVE
C
***	MODULE	CONVOLVE
***	IDENT	21NO86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    17-Nov-1986
C
C The main processing routine in DTIFILTER
C Called in response to PROCESS command
C loosely based on FILTER routine from VECTORISE by ACM
C
	IMPLICIT NONE
C
C Parameters
C
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
C
C Common Blocks
C
***	COMMON/LSL$CMNDTIFILTER:DFILCMN/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C Functions
	INTEGER*4	DTI_READ_DATA
	INTEGER*4	DTI_WRITE_DATA
C
C Local Varaiables
C
	REAL		TOT		!sum of output kernel values
	INTEGER*2	INTTOT		! NINTed above
	INTEGER*4	XKERHWID	!half the kernel size
	INTEGER*4	YKERHWID	
	INTEGER*4	XMIN,YMIN,XMAX,YMAX !actual working window
	INTEGER*4	I,J,K,X,Y,L
	REAL		PCENT,LPCENT,PCF	!% process completion	
	INTEGER*4	RET
	INTEGER*2	DTIKER(0:DF_MAXKERNEL,0:DF_MAXKERNEL)
	REAL	 	Z(625)
C	
C
	XKERHWID = INT((DF_XKERSIZE)/2)
	YKERHWID = INT((DF_YKERSIZE)/2)
C
	IF (.NOT. DF_HADINP) THEN
	    CALL LSL_PUTMSG(DTIFIL__NOINPUT)
	    GOTO 999
	ENDIF
C
	IF (.NOT.DF_HADOUP) THEN
	   IF (.NOT. DF_INSITU) THEN
	      CALL LSL_PUTMSG(DTIFIL__NOOUTPUT)
	      GOTO 999
	   ENDIF
	ENDIF
C	   
C if DTI window corresponds to edges then window to be filtered 
C then edge values are omitted from the output matrix. 
C The number of rows and columns omitted depends on the x and y kernel
C extents
C
	XMIN = MAX(XKERHWID+1,DF_XMINWIN)
	YMIN = MAX(YKERHWID+1,DF_YMINWIN)
	XMAX = MIN(X_EXTENT(DF_INLUN)-XKERHWID,DF_XMAXWIN)
	YMAX = MIN(Y_EXTENT(DF_INLUN)-YKERHWID,DF_YMAXWIN)
C
C progress stuff
	PCF = 100.0/(DF_XMAXWIN-DF_XMINWIN+1)
	PCENT = 0
	LPCENT = 0
	WRITE(*,'(1X,F6.2,''%'')')PCENT
C
Cmain loop
	DO 100 X = XMIN , XMAX
C
C put an area of DTI into a local array which corresponds to the kernel 
C in dimensions. The values can be cycled as we move up the DTI column.
C	
	   DO 30 I = 0, DF_YKERSIZE-2
	      DO 35 J = 1,DF_XKERSIZE
		 RET = DTI_READ_DATA
     &		 (DF_INLUN,DTIKER(J,I),X-XKERHWID+J-1,YMIN-YKERHWID+I)
		 IF (.NOT. RET) THEN
		   CALL LSL_PUTMSG(RET)
		   GOTO 999
		 ENDIF
C	        DTIKER(I,J) = DTI(YMIN-YKERHWID+I,X-XKERHWID+J)
35	      CONTINUE
30	   CONTINUE
C
	   K= 1
	   DO 80 Y = YMIN , YMAX
C
	      K = MOD(K+1,DF_YKERSIZE)		! sneaky cycling method
	      DO 55 I = 1,DF_XKERSIZE
		 RET =DTI_READ_DATA(DF_INLUN,DTIKER(I,K),X-XKERHWID+I,Y)
		 IF (.NOT. RET) THEN
		   CALL LSL_PUTMSG(RET)
		   GOTO 999
		 ENDIF
C	         DTIKER(K,I) = DTI(Y,X-XKERHWID) 
55	      CONTINUE
C
C now multiply values in matrix with corresponding values in kernel
C
	      L = 1
	      TOT = 0
	      DO 70 I = 1, DF_XKERSIZE
		DO 65 J = 0,DF_YKERSIZE-1
		   Z(L) = DTIKER(I,J) * DF_KERNEL(I,J+1)
	           IF (DTIKER(I,J) .GT.-32766) THEN   ! value not null
		     TOT = TOT + Z(L)		      ! keep total
	           ENDIF
	           L = L+1
65		CONTINUE
70            CONTINUE
C
	      IF (DF_ABSOLUTE) TOT = ABS(TOT)  ! absolute switch
C
C assign new value
C
	      INTTOT = NINT(TOT)
	      IF (DF_INSITU) THEN
		 RET = DTI_WRITE_DATA(DF_INLUN,INTTOT,X-DF_XMINWIN+1
     &		,Y-DF_YMINWIN+1)
	      ELSE
		 RET = DTI_WRITE_DATA(DF_OUTLUN,INTTOT,X-DF_XMINWIN+1
     &		,Y-DF_YMINWIN+1)
	      ENDIF
	      IF (.NOT. RET) THEN
	   	CALL LSL_PUTMSG(RET)
		GOTO 999
	      ENDIF
C show progress
	     PCENT = (X-DF_XMINWIN+1)*PCF
	     IF (PCENT-LPCENT.GT.1) THEN
	      WRITE(*,'(1H+,F6.2)')PCENT	! don't WRITE too often
	      LPCENT = PCENT
	     END IF
80	  CONTINUE
100	CONTINUE
C
999	RETURN
	END
