	SUBROUTINE SCRNKER(PROMPT)
C
***	MODULE	SCRNKER
***	IDENT	05DE86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Dec-1985
C
C Comments
C a routine to invoke the VAX screen management facility to allow 
C user friendly kernel definition for DTIFILTER
C
	IMPLICIT NONE
C
C Parameters
***	COMMON/LSL$CMNLSL:LSLLIBMSG.PAR/
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
C
C Common Blocks
***	COMMON/LSL$CMNDTIFILTER:DFILCMN/
***	COMMON/LSL$CMNLSL:EXPC/
C
C Argument
	LOGICAL		PROMPT		!if true prompt for new vals 
C
C Functions
	INTEGER*4	TTRLIN		!reads line from terminal
	LOGICAL		RDREAL		!reads a real
C
C Local Varaiables
C
	INTEGER*4	RET			!return code
	INTEGER		I,J			!counters
	INTEGER*4	TOPLIN,BOTLIN		!top and bot of scrollin
	INTEGER*4	STARTCOL,STARTLINE	!start pos of kernel
	LOGICAL		NODIG			!return
	INTEGER*4	NCHS			!no. chars from TTRLIN
	INTEGER*4	IERR			!error return
	REAL		VAL			!value read
C
C
	BOTLIN =  24
	TOPLIN =  18
C
	CALL LIB$SET_SCROLL(TOPLIN,BOTLIN)
C
	STARTCOL = INT((80-DF_XKERSIZE*6)/2)-6
	STARTLINE = INT((TOPLIN + DF_YKERSIZE*2)/2)-1+2
	CALL LIB$ERASE_PAGE(1,1)
C
C display existing kernel
C	
	DO 20 I = 1,DF_YKERSIZE
	   DO 10 J = 1,DF_XKERSIZE
	      CALL EXPAND('%F5.2',DF_KERNEL(J,I))
	      CALL LIB$PUT_SCREEN(EXPDSC,STARTLINE-I*2,STARTCOL+J*6,2)
10	   CONTINUE
20	CONTINUE
C
	IF (.NOT. PROMPT) GOTO 900
C
C prompt for kernel values if required
C
	DO 60 I = DF_YKERSIZE,1, -1
	   DO 40 J = 1,DF_XKERSIZE
C
C make this value flash
C
	      CALL EXPAND('%F5.2',DF_KERNEL(J,I))
	      CALL LIB$PUT_SCREEN(EXPDSC,STARTLINE-I*2,STARTCOL+J*6,6)
C
C prompt for new value
C	      
	      CALL LIB$SET_CURSOR(BOTLIN,1)
30	      RET = TTRLIN(,NCHS,,'Kernel Value> ',IERR)
C
C decode it
C
	      IF (RET) THEN
	         IF (NCHS .NE. 0) THEN		!something,s been typed
		    CALL BSLN
	            NODIG= RDREAL(VAL)
		    IF (NODIG) THEN
	               CALL LIB$SET_CURSOR(BOTLIN,1)
	 	       CALL LSL_PUTMSG(DTIFIL__INVALNUM)
		       GOTO 30
		    ENDIF
		    DF_KERNEL(J,I) = VAL
C
C set up logical kernel
C
	            IF (ABS(DF_KERNEL(J,I)) .GT. 0.001) THEN
		       DF_LOGKERNEL(J,I) = .TRUE.
	            ELSE
		       DF_LOGKERNEL(J,I) = .FALSE.
	            ENDIF
C
	         ENDIF
	      ENDIF
C
C rewrite it
C
	      CALL EXPAND('%F5.2',DF_KERNEL(J,I))
	      CALL LIB$PUT_SCREEN(EXPDSC,STARTLINE-I*2,STARTCOL+J*6,2)
C 
	      IF (.NOT. RET ) THEN   		!ctrl/Z
		IF (RET .NE. LSL__EOF) THEN
	           CALL LIB$SET_CURSOR(BOTLIN,1)
		   CALL LSL_PUTMSG(RET)
		   CALL LSL_ADDMSG(IERR)
		ENDIF
	        GOTO 900
	      ENDIF
C
40	   CONTINUE
60	CONTINUE
C
900	CALL LIB$SET_CURSOR(BOTLIN,1)
	CALL LIB$SET_SCROLL(1,BOTLIN)
C
999	RETURN
	END
