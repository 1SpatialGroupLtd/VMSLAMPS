C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1986-11-28 14:10:10.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 READ_LOOKUP.SRC
C
***	MODULE	READ_LOOKUP.SRC
***	IDENT	02DE85
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    02-Dec-1985
C
C reads the text file whih contains user defined kernel values
C 
C
	IMPLICIT NONE
C
C Parameters
C
C Common Blocks
C
C Functions
C
C Local Varaiables
C
C
C open the lookup
	UNIT = 1
	SUCCESS = FLROPN(UNIT,LKPFIL,IERR)
C
	IF (SUCCESS) THEN			! did it open ok?
	  READ_LOOKUP = DTIFIL__OPNLKP		! Yes
	  CALL LSL_PUTMSG(READ_LOOKUP,LKPFIL(1:LKPLEN))
	ELSE					! No, error !! 
	  READ_LOOKUP = ISELAC__ERROPLKPL		! tell user
	  CALL LSL_PUTMSG(READ_LOOKUP,LKPFIL(1:LKPLEN))
	  CALL LSL_ADDMSG(SUCCESS)		! give any 2ndary error
	  IF (IERR.NE.0) THEN
	    CALL LSL_ADDMSG(IERR)		! give any system error
	  ENDIF
	  READ_LOOKUP = .TRUE.
	  GOTO 999				! error exit
	ENDIF
C
C....................................................................
C read line
10	LIN = LIN+1
	SUCCESS = FLRLIN()
	IF (.NOT.SUCCESS) THEN
	  IF (SUCCESS.EQ.LSL__EOF) THEN
	    GOTO 1000				! end of file
	  ELSE
	    READ_LOOKUP= DTIFIL__ERRRLKP		! error in read
	    CALL LSL_PUTMSG(READ_LOOKUP)
	    GOTO 999
	  ENDIF
	ENDIF
C
C.....................................................................
C decode the line
C get first character
C
	CALL BSLN
	IF(RDCHS(ICH)) GOTO 10			!blank line
	IF(ICH.GE.'A'.AND.ICH.LE.'Z') GOTO 100	! alpha - new filter
	IF(ICH.GE.'a'.AND.ICH.LE.'z') GOTO 100	! alpha - new filter
	IF(ICH.EQ.'!')		      GOTO 10	! comment
C
C none of these so moan
C
	CALL LSL_PUTMSG(DTIFIL__INVALLINE,LIN)
	GOTO 10					! ignore line
C
C look for the filter name
C
100     CALL BSCH
	LEN = READSTR(LKP_NAME(LKP_NUM),'/',ON_SPACE,,RET)
	IF (.NOT. RET) THEN
	   CALL LSL_PUTMSG(DTIFIL__INVALLINE,LIN)
	   CALL LSL_ADDMSG(IERR)
	   GOTO 10
	ENDIF
C
C look for optional / separator
	IF (RET .EQ. LSL__STRSPACE) THEN
	  CALL RDCHS(ICH)
	  IF (ICH .NE. '/') THEN	!no / so backspace
	      CALL BSCH
	  ENDIF
	ENDIF
C
C
C look for the size fields X and Y
C we have to allow for fields being on the next line
C
30	IF RDLONG(LKP_XSIZE(LKP_NUM)) THEN
	    IF (ERRNUM .EQ. LSL__UNEXPEOLN) THEN
	       SUCCESS = FLRLIN()
	       CALL BSLN
	       IF (.NOT. SUCCESS) THEN
  		  IF (SUCCESS .EQ. LSL__EOF) THEN
		     CALL LSL_PUTMSG(DTIFIL__UNEXPEOF)
		  ENDIF
	          CALL LSL_PUTMSG(SUCCESS)
		  GOTO 999
	       ENDIF
	       GOTO 30
	    CALL LSL_PUTMSG(DTIFIL__INVALLLINE,LIN)
	    GOTO 10
	ENDIF
C
	IF (LKP_LONG(LKP_YSIZE(LKP_NUM)))THEN
	   CALL LSL_PUTMSG(DTIFIL__INVALLINE,LIN)
	   GOTO 10				
	ENDIF
C
C look for optional separator again	
C
	CALL RDCHS(ICH)
	IF (ICH .NE. '/') THEN	!no / so backspace
	   CALL BSCH
	ENDIF
C
C read in the kernel weightings
C
	DO 300 I = LKP_YSIZE(LKP_NUM),1,-1 ! makes it easier if kernel 
C					   ! starts at bottom 
	   DO 350 J = 1,LKP_XSIZE(LKP_NUM)
	      IF( LKP_REAL(LKP_KERNEL(LKP_NUM,J,I))) THEN 
	         CALL LSL_PUTMSG(DTIFIL__TOOFEWVALS)
		 GOTO 10
	      ENDIF
350	   CONTINUE
300	CONTINUE
C
Ccheck for excess values
C
	IF (.NOT. RDREAL(VAL)) THEN
	   CALL LSL_PUTMSG(DFTIFIL__EXTRAVALIGN,LIN)
	ENDIF
C
	GOTO 10

999  	RETURN
	END
