C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-15 12:08:22.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	INTEGER*4 FUNCTION NEWDTI
C
***	MODULE	NEWDTI
**	IDENT	15FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    14-Nov-1986
CMOD    To ensure info. from input file is 
C	corrected copied to output               DRC    15-Feb-1989
C
C decodes and parses file specification
C uses DTI_CREATE to open specified DTI file
C
	IMPLICIT NONE
C
C parameters
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
***	COMMON/LSL$CMNDTI:DTILIBMSG.PAR/
C common blocks
***	COMMON/LSL$CMNLSL:TXTC/
***	COMMON/LSL$CMNLSL:EXPC/
***	COMMON/LSL$CMNLSL:READSTR.PAR/
***	COMMON/LSL$CMNDTIFILTER:DFILCMN/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNDTI:DTIPROJ/
***	COMMON/LSL$CMNLSL:STATUS/
C
C functions
	INTEGER*4	DTI_CREATE
	INTEGER*4	DTI_MINMAX_DATA
	INTEGER*4	DTI_WRITE_PROJ_REC
	LOGICAL 	READSTR
	INTEGER*4	PARFILN
	INTEGER*4	DTI_COPY_HEADER
	LOGICAL		RDCHS
	INTEGER*4	DTI_CLOSE
C
C local variables
	INTEGER*4	FAKSTR(2)
	INTEGER*2	FAKLEN
	BYTE		FAKBUF(80)
	BYTE		CH
	INTEGER*4	ERR		!system error return
	INTEGER		LENGTH
	CHARACTER*80	FILNAM
C
	EQUIVALENCE	(FAKLEN,FAKSTR(1))
C
C**********************************************************************
C
	FAKSTR(2)=%LOC(FAKBUF)	! set up fake string descriptor
C
C don't allow command without input file
C 
	IF (.NOT. DF_HADINP) THEN
	    NEWDTI = DTIFIL__NOINPUT
	    CALL LSL_PUTMSG(DTIFIL__NOINPUT)
	    GOTO 999
	ENDIF
C
C	Check for optional quotes
50	IF(RDCHS(CH))THEN
	  CALL LSL_PUTMSG(DTIFIL__MISSFILNAM)
	  CALL BSLN
	  NEWDTI = LSL_STATUS
	  GOTO 999	  
	ELSE
	  FAKLEN=80
	  IF(CH.EQ.34.OR.CH.EQ.39)THEN
	    FAKLEN=READSTR(FAKSTR,CH,ON_CHAR2,.FALSE.)
	  ELSE
	    CALL BSCH
	    FAKLEN=READSTR(FAKSTR,' ',ON_CHAR2,.FALSE.)
	  ENDIF
	ENDIF
C
C	Get input file
	NEWDTI=PARFILN(FILNAM,LENGTH,FAKSTR,'LSL$DTI:.DTI'
     &	,.TRUE.)
	IF(.NOT. NEWDTI)THEN
	  CALL LSL_PUTMSG(NEWDTI)
	  GOTO 999
	ENDIF
C
C close any open file
C
	IF ( DF_HADOUP) THEN
	   NEWDTI = DTI_MINMAX_DATA(DF_OUTLUN,.TRUE.,ERR)
	   IF (.NOT. NEWDTI) THEN 
	      CALL LSL_PUTMSG(ERR)
	      GOTO 999
	   ENDIF
C
	   NEWDTI = DTI_CLOSE(DF_OUTLUN ,.TRUE.,.FALSE. ,ERR)	
	   IF (.NOT. NEWDTI) THEN
	      IF (NEWDTI .EQ. DTI__SYSERR) THEN
	        CALL LSL_PUTMSG(ERR)
	      ELSE
		CALL LSL_PUTMSG(NEWDTI)
	      ENDIF
	      GOTO 999
	   ENDIF
	   CALL LSL_PUTMSG(DTIFIL__OUTFILCLO)
           DF_HADOUP = .FALSE.
	ENDIF
C
C now create the file
	X_GRID(DF_OUTLUN)=X_GRID(DF_INLUN)
	Y_GRID(DF_OUTLUN)=Y_GRID(DF_INLUN)
C
	NEWDTI= DTI_CREATE(DF_OUTLUN		   !output lun
     &			    ,FILNAM		   !file name
     &			    ,LENGTH	           !file name length
     &	                    ,HEADER_TYPE(DF_INLUN) !header type as input
     &			    ,DATA_OFFSET(DF_INLUN) !header size as input
     &			    ,DATA_TYPE(DF_INLUN)   !data type as input
     &	                    ,(DF_XMAXWIN-DF_XMINWIN+1)! x extent
     &			    ,(DF_YMAXWIN-DF_YMINWIN+1)! y extent
     &			    ,ERR)		   ! system error
C
	IF (.NOT. NEWDTI) THEN
	   CALL LSL_PUTMSG(NEWDTI)
	   IF(NEWDTI .EQ. DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(ERR)
	   ENDIF
	   GOTO 999
	ELSE
	   CALL LSL_PUTMSG(DTIFIL__OPNDTI,FILNAM(:LENGTH),DF_OUTLUN)
	   CALL DTI_PRINT_HEADER(DF_OUTLUN,1)
	   DF_HADOUP = .TRUE.
	ENDIF   
C
C	Modify the projection record origin values if necessary
C	and write to the output file
	IF(HAD_PROJ_RECORD(DF_INLUN))THEN
	  DTIPROJ_ORIGIN(1,DF_OUTLUN)=DTIPROJ_ORIGIN(1,DF_INLUN)+
     &    ((DF_XMINWIN-1)*DTIPROJ_SAMPLE(1,DF_INLUN))
	  DTIPROJ_ORIGIN(2,DF_OUTLUN)=DTIPROJ_ORIGIN(2,DF_INLUN)+
     &    ((DF_YMINWIN-1)*DTIPROJ_SAMPLE(2,DF_INLUN))
	ENDIF	  
C
C now copy the header from the input file
C
	NEWDTI = DTI_COPY_HEADER (DF_INLUN,DF_OUTLUN,ERR)
	IF (.NOT. NEWDTI) THEN
	   CALL LSL_PUTMSG(NEWDTI)
	   IF(NEWDTI .EQ. DTI__SYSERR) THEN
	      CALL LSL_PUTMSG(ERR)
	   ENDIF
	   GOTO 999
	ENDIF   
C
C	Modify the projection record origin values if necessary
C	and write to the output file
	IF(HAD_PROJ_RECORD(DF_INLUN))THEN
	  DTIPROJ_ORIGIN(1,DF_OUTLUN)=DTIPROJ_ORIGIN(1,DF_INLUN)+
     &    ((DF_XMINWIN-1)*DTIPROJ_SAMPLE(1,DF_INLUN))
	  DTIPROJ_ORIGIN(2,DF_OUTLUN)=DTIPROJ_ORIGIN(2,DF_INLUN)+
     &    ((DF_YMINWIN-1)*DTIPROJ_SAMPLE(2,DF_INLUN))
C
	  NEWDTI = DTI_WRITE_PROJ_REC(DF_OUTLUN,,ERR)
	  IF (.NOT. NEWDTI) THEN
	     CALL LSL_PUTMSG(NEWDTI)
	     IF(NEWDTI .EQ. DTI__SYSERR)CALL LSL_PUTMSG(ERR)
	  ENDIF
	ENDIF   
C
999	RETURN
	END
