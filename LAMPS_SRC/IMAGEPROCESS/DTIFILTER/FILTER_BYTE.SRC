	LOGICAL FUNCTION FILTER_BYTE(FILTER_TYPE)
C
***	MODULE	FILTER_BYTE
***	IDENT	17DE86
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    26-Nov-1986
C
C filtering routine with BYTE data
C Works by passing kernel over data
C actual filtering troutine called from this routine
C loosely based on FILTER routine from VECTORISE by ACM
C
	IMPLICIT NONE
C
C Parameters
C
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
C
C Common Blocks
C
***	COMMON/LSL$CMNDTIFILTER:DFILCMN/
***	COMMON/LSL$CMNDTI:DTIHDR/
C
C argument
	INTEGER*4	FILTER_TYPE		! 1 convolution
C						! 2 median
C						! 3 mode
C Functions
	INTEGER*4	DTI_READ_BYTE_DATA
	INTEGER*4	DTI_WRITE_BYTE_DATA
	BYTE		CONVOLVE_BYTE
	BYTE		MEDIAN_BYTE
	BYTE		MODE_BYTE
	BYTE		SHARPEN_BYTE
	LOGICAL		HADCTRLC
C
C Local Varaiables
C
	BYTE		OUTVAL(2,1)	! output value for pixel
	INTEGER*2	INTOUTVAL(1)
	INTEGER*4	XKERHWID	!half the kernel size
	INTEGER*4	YKERHWID	
	INTEGER*4	XMIN,YMIN,XMAX,YMAX !actual working window
	INTEGER*4	I,J,X,Y
	REAL		PCENT,LPCENT,PCF	!% process completion	
	INTEGER*4	RET
	BYTE		DTIKER(2,1:DF_MAXKERNEL,1:DF_MAXKERNEL)
C
	EQUIVALENCE	(INTOUTVAL,OUTVAL)
C
	IF (.NOT. DF_HADINP) THEN
	    CALL LSL_PUTMSG(DTIFIL__NOINPUT)
	    GOTO 999
	ENDIF
C
	IF (.NOT.DF_HADOUP) THEN
	   IF (.NOT. DF_INSITU) THEN
	      CALL LSL_PUTMSG(DTIFIL__NOOUTPUT)
	      GOTO 999
	   ENDIF
	ENDIF
C	   
C if DTI window corresponds to edges then window to be filtered 
C then edge values are omitted from the output matrix. 
C The number of rows and columns omitted depends on the x and y kernel
C extents
C
	XMIN = MAX(DF_XKERHWID+1,DF_XMINWIN)
	YMIN = MAX(DF_YKERHWID+1,DF_YMINWIN)
	XMAX = MIN(X_EXTENT(DF_INLUN)-DF_XKERHWID,DF_XMAXWIN)
	YMAX = MIN(Y_EXTENT(DF_INLUN)-DF_YKERHWID,DF_YMAXWIN)
C
C progress stuff
C
	IF (DF_LOG .AND. (.NOT. DF_CMDFIL)) THEN
	   PCF = 100.0/(DF_XMAXWIN-DF_XMINWIN+1)
	   PCENT = 0
	   LPCENT = 0
	   WRITE(*,'(1X,F6.2,''%'')')PCENT
	ENDIF
C
Cmain loop
C
	DO 100 X = XMIN , XMAX
C
C put an area of DTI into a local array which corresponds to the kernel 
C in dimensions. The values can be cycled as we move up the DTI column.
C	
	   DO 30 I = 1, DF_YKERSIZE-1
	      DO 35 J = 1,DF_XKERSIZE
		 RET = DTI_READ_BYTE_DATA
     &	       (DF_INLUN,DTIKER(1,J,I+1),X-DF_XKERHWID+J-1,
     &	       YMIN-DF_YKERHWID+I-1)
		 IF (.NOT. RET) THEN
		   CALL LSL_PUTMSG(RET)
		   GOTO 999
		 ENDIF
35	      CONTINUE
30	   CONTINUE
C
	   DO 80 Y = YMIN , YMAX
C
C cycle values
C
	      DO 42 I= 1,DF_YKERSIZE-1
		 DO 41 J =1, DF_XKERSIZE
	           DTIKER(1,J,I) = DTIKER(1,J,I+1)
41	         CONTINUE
42	      CONTINUE
C
C read in next row of kernel
C
	      DO 55 I = 1,DF_XKERSIZE
		 RET =DTI_READ_BYTE_DATA
     &	   	    (DF_INLUN,DTIKER(1,I,DF_YKERSIZE),X-DF_XKERHWID+I-1,
     &			   Y+DF_YKERHWID)
		 IF (.NOT. RET) THEN
		   CALL LSL_PUTMSG(RET)
		   GOTO 999
		 ENDIF
55	      CONTINUE
C
C branch according to filter type 
C
	      GOTO(60,62,64,66)FILTER_TYPE
C
C convolution
60	      INTOUTVAL(1)= CONVOLVE_BYTE(DTIKER)
	      GOTO 70
C
C median
62	      INTOUTVAL(1) = MEDIAN_BYTE(DTIKER)
	      GOTO 70
C mode
64	      INTOUTVAL(1) = MODE_BYTE(DTIKER)
  	      GOTO 70
C sharpen
66	      INTOUTVAL(1) = SHARPEN_BYTE(DTIKER)
	      GOTO 70
C
70	      IF (DF_INSITU) THEN
		 RET = DTI_WRITE_BYTE_DATA
     &			(DF_INLUN,OUTVAL(1,1),X-DF_XMINWIN+1
     &		         ,Y-DF_YMINWIN+1)
	      ELSE
		 RET = DTI_WRITE_BYTE_DATA
     &                  (DF_OUTLUN,OUTVAL(1,1),X-DF_XMINWIN+1
     &		       ,Y-DF_YMINWIN+1)
	      ENDIF
	      IF (.NOT. RET) THEN
	   	CALL LSL_PUTMSG(RET)
		GOTO 999
	      ENDIF
80	  CONTINUE
C
C show progress
C
	  IF (DF_LOG) THEN
	     PCENT = (X-DF_XMINWIN+1)*PCF
	     IF (PCENT-LPCENT.GT.1) THEN
	       WRITE(*,'(1H+,F6.2)')PCENT	! don't WRITE too often
	       LPCENT = PCENT
	     END IF
	  ENDIF
C
C check for CTRLC
C
	IF (HADCTRLC()) GOTO 999	
C
100	CONTINUE
	IF (DF_LOG .AND. (.NOT. DF_CMDFIL)) THEN
	   PCENT = 100
	   WRITE(*,'(1H+,F6.2)')PCENT
	ENDIF
C
	FILTER_BYTE = .FALSE.
C
999	RETURN
	END
