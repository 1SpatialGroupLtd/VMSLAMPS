C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-02-15 12:20:04.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	SUBROUTINE FILTER(FILTER_TYPE)
C
***	MODULE	FILTER
***	IDENT	15FE89
C
C Copyright Laser-Scan Laboratories Ltd., Cambridge, England
C
C Author M.W.S. Reid
C
C 	Created					MWSR    18-Nov-1986
CMOD	To assume a default kernal of 1s         DRC    15-Feb-1989
C
C deals with FILTER command and calls appropriate processing routine
C 
C
	IMPLICIT NONE
C
C Parameters
***	COMMON/LSL$CMNDTIFILTER:DTIFILTERMSG.PAR/
C
C Common Blocks
***	COMMON/LSL$CMNDTIFILTER:DFILCMN/
***	COMMON/LSL$CMNDTI:DTIHDR/
***	COMMON/LSL$CMNLSL:CMDCOM/
C
C Argument
	INTEGER*4	FILTER_TYPE	!1 convolve
C					!2 median
C					!3 mode
C					!4 median
C					!5 sharpen
C
C Local Varaiables
	INTEGER*4	I,J
	INTEGER*2	PTR		! for dcpset
	INTEGER*4	FILTYPE		! local filter type
	INTEGER*4	NUMNONZER	! number of non zero elements
C
	FILTYPE = FILTER_TYPE
C
	IF (.NOT. DF_HADINP) THEN
	    CALL LSL_PUTMSG(DTIFIL__NOINPUT)
	    GOTO 999
	ENDIF
C
	IF (.NOT.DF_HADOUP) THEN
	      CALL LSL_PUTMSG(DTIFIL__NOOUTPUT)
	      GOTO 999
	ENDIF
C
C check for zero kernel
C
	NUMNONZER = 0
	DO 35 I = 1,DF_XKERSIZE
	   DO 30 J = 1,DF_YKERSIZE
	     IF (DF_LOGKERNEL(I,J)) THEN
	        NUMNONZER = NUMNONZER + 1
	     ENDIF
30	    CONTINUE
35	CONTINUE
C
	IF (NUMNONZER .EQ. 0) THEN
	   IF(FILTYPE.EQ.1.OR.FILTYPE.EQ.5)THEN
	      CALL LSL_PUTMSG(DTIFIL__KERZERO)
	      GOTO 999
	   ENDIF
	   DO 37 I = 1,DF_XKERSIZE
              DO 36 J = 1,DF_YKERSIZE
	         DF_KERNEL(I,J) = 1.0
	         DF_LOGKERNEL(I,J) = .TRUE.
36            CONTINUE
37         CONTINUE
	ENDIF
C
C mean and sharpen filters require that the kernel elements
C are divided by the number of non-zero kernel elements
C
	IF ((FILTYPE .EQ. 4) .OR. (FILTYPE  .EQ. 5)) THEN
	   IF (FILTYPE .EQ. 4) THEN
C
C mean almost same as convolution but reset thresholds to defaults
C
	      FILTYPE = 1
	      CMDNEG = .TRUE.
	      CALL SETTHRESH     ! a bit of a fudge
	   ENDIF
C
	   IF (FILTYPE .EQ. 5) FILTYPE = 4
	   DO 50 I = 1,DF_XKERSIZE
	     DO 40 J = 1,DF_YKERSIZE
		DF_KERNEL(I,J) = DF_KERNEL(I,J)/NUMNONZER
40	     CONTINUE
50	   CONTINUE
	ENDIF
C
C
C for efficiency we need a different subroutine to deal with each
C data type
C
60	GOTO (110,120,130,140)DATA_TYPE(DF_INLUN)
C
C byte data 
110	CALL FILTER_BYTE(FILTYPE)
	GOTO 999 
C
C word data
120	CALL FILTER_WORD(FILTYPE)
	GOTO 999
C
C longword data
130	CALL FILTER_LONG(FILTYPE)
	GOTO 999
C
C real data
140	CALL FILTER_REAL(FILTYPE)
C 	GOTO 999
C-----------------------------------------------------------------------
C
999	RETURN
	END
