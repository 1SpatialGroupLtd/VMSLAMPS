C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1989-03-17 18:02:38.000000000 +0000
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	PROGRAM RCPEDT
C
***	MODULE	RCPEDT
***	IDENT	23NO88
C
C	Copyright : Laser-Scan Laboratories Ltd., Cambridge, England
C	Original author: D.J.Gugan			22-Apr-1988
C	Totally rewritten to LSL standards: ACM		17-Nov-1988
C
	IMPLICIT NONE
C
C Parameters
***	PARAMETER/LSL$CMNLSL:LSLLIBMSG/
***	PARAMETER/LSL$CMNRCPEDT:RCPEDTMSG/
C
C Commons
***	COMMON/LSL$CMNLSL:CMDCOM/
***	COMMON/LSL$CMNRCPEDT:RCPEDT/
C
C Workspace
	LOGICAL*4	OK		! function return
	LOGICAL*4	EOL		! end of line?
	BYTE		CH		! character read by RDCHS
	INTEGER*4	IERR		! secondary return
	INTEGER*4	FIRST,LAST	! lines to be displayed
	INTEGER*4	CMD		! command number from RDCOMM
	INTEGER*4	LINE		! line number
C
C Functions
	LOGICAL*4	TTRSTR		! prompt and read line
	LOGICAL*4	RDLONG	        ! read longword integer
	LOGICAL*4	RDCHS	        ! read next non blnk chr
	INTEGER*4	RDCOMM		! read a command
	LOGICAL*4	READ_RCP_FILE
	LOGICAL*4	GET_COMMANDS
	LOGICAL*4	FLWOPN,FLWCLO
C
C Externals
	EXTERNAL	RCPEDT_CMD_TABLE
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C	Program to input RCPs into an RCP format file
C
C	Originally written by D.J.Gugan as a preliminary SATMAP,
C	utility, and rewritten into LSL standard FORTRAN by ACM.
C
C	This program is used to view, edit or create registration
C	control point coordinates and auxiliary information into a
C	standard control points ".RCP" file. A RCP file has 7 fields : 
C
C	* Point ID    - a 10 character identifier
C	* Point type  - a 2 character string used for orign/usage
C                         identification. Current types in use include :
C	                  DD - disregarded point
C	                  TT - bundle adjustment tie point
C	                     - (2 spaces) normal control point
C	* XYZ coords  - format 3F20.8, able to accept sizes of
C		        coordinates ranging from geocentric to decimal
C	                degrees.
C	* Weights     - plan and height weights (not used by any current
C	                software).
C
C	The main function of this program is to ensure that the output
C	file is correctly formatted.
C
C	The user is provided with the following options :
C
C	- Creating, updating or viewing an RCP file
C	- Adding/deleting/editing RCPs
C	- Adding/deleting comment lines
C	- Exiting, writing the coordinate data to a new data file
C	- Quiting
C	- On line help
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C Initialise LSLLIB, with timer
C
	CALL LSL_INIT(.TRUE.)
C
C Get DCL-like parameters and qualifiers
C
	IF (.NOT.GET_COMMANDS()) GOTO 999
C
C Declare yourself
	CALL WRITEF
	CALL WRITEF
     & ('            *** LSL Registration Control Point Management ***')
	CALL WRITEF
C
C Read contents of existing RCP file into memory
C
	IF (HAD_NEW) GOTO 5
	OK = READ_RCP_FILE(
     &		IN_LUN,IN_NAM,IN_LEN,
     &		ID,TYPE,GROUND,WEIGHT,
     &		N_RCPS,MAXRCPS,
     &		N_COMMENTS,MAXCOMMENTS,
     &		COMMENT,CMT_LEN,RCP_CMT_INDEX,.TRUE.,IERR)
	IF (.NOT.OK) THEN
	  CALL LSL_PUTMSG(RCPEDT__RCPREAD,IERR,IN_NAM(:IN_LEN))
	  GOTO 999
	END IF
	N_LINES = N_RCPS+N_COMMENTS
C
C Open new CP file for write, before accepting any new RCPs
C
5	IF (HAD_NEW.OR.HAD_UPDATE) THEN
	   OK = FLWOPN(OUT_LUN,OUT_NAM(:OUT_LEN),IERR)
	   IF (.NOT.OK) THEN
	     CALL LSL_PUTMSG(RCPEDT__RCPOUTOPN,OUT_NAM(:OUT_LEN))
	     GOTO 999
	   END IF
	ENDIF
C
C Prompt the user for a command (note that ^Z will be treated as EXIT)
C
10	OK = TTRSTR(,,'RCPEDT> ',IERR)
	IF (.NOT.OK) GOTO 70		! ^Z = EXIT
	CALL BSLN			! pointer to begining of line
	EOL = RDCHS(CH)			! nothing on line?
	IF (EOL) GOTO 10		! try gain
	CALL BSCH			! unread first char read
	CMD = RDCOMM(RCPEDT_CMD_TABLE)	! read the command
	IF (CMD.LE.0) GOTO 10		! ignore bad commands
C
	GOTO ( 20,	! DISPLAY
     &	       30,	! RCP
     &	       40,	! EDIT
     &	       40,	! DELETE
     &	       60,	! COMMENT
     &	       70,	! EXIT
     &	       80,	! HELP
     &	       90) CMD	! QUIT
C
C DISPLAY command - display lines FIRST to LAST
20	FIRST = 1
	LAST = N_LINES
	IF (CMDICT.GE.1) FIRST = INTARG(1)
	IF (CMDICT.GE.2) LAST = INTARG(2)
	CALL DISPLAY(FIRST,LAST)
	GOTO 10

C RCP command - add a RCP line
30	IF (CMDICT.LT.1) THEN		! if no line number given then
	  LINE = N_LINES		! add line after last line
	ELSE
	  LINE = INTARG(1)
	END IF
	CALL ADD_RCP(LINE)
	GOTO 10
C
C RCP, EDIT or DELETE command - edit or delete a RCP line
40	IF (CMDICT.GE.1) THEN		! if line num not given, get one
	  LINE = INTARG(1)
	ELSE
45	  OK = TTRSTR(,,'Line number> ',IERR)
	  IF (.NOT.OK) GOTO 10		! abandon command on ^Z
	  CALL BSLN			! pointer to begining of line
	  EOL = RDCHS(CH)		! nothing on line?
	  IF (EOL) GOTO 45		! try gain
	  CALL BSCH()			! backspace
	  OK = .NOT.RDLONG(LINE)	! read integer
	  IF (.NOT.OK) GOTO 45		! try again if necessary
	END IF
C
	GOTO (46,			! EDIT
     &	      50) CMD-2			! DELETE
	GOTO 10				! catch silly CMD val

C EDIT command - edit a line
46	CALL EDIT_RCP(LINE)
	GOTO 10
C
C DELETE command - delete (CP or comment) line
50	CALL DELETE(LINE)
	GOTO 10
C
C COMMENT command - add a comment line
60	IF (CMDICT.LT.1) THEN		! if no line number given then
	  LINE = N_LINES		! add line after last line
	ELSE
	  LINE = INTARG(1)
	END IF
	CALL ADD_COMMENT(LINE)
	GOTO 10
C
C EXIT command - write RCPs to output file, and exit
70	IF (.NOT.(HAD_NEW.OR.HAD_UPDATE)) GOTO 999
C
	CALL WRITEF
     &	  ('%SDo you want to type a file description message?',BELL)
	READ(*,'(A)') CH
	IF (CH.EQ.'Y'.OR.CH.EQ.'y') CALL ADD_COMMENT(0)
	CALL WRITE_RCP_FILE
	OK = FLWCLO(OUT_LUN)		! close CP file
	IF (.NOT.OK)
     &	  CALL LSL_PUTMSG(RCPEDT__RCPOUTCLO,OUT_NAM(:OUT_LEN))
	GOTO 999
C
C QUIT command - quit the program (without saving the data)
C
C HELP command
80	CALL HELP
	GOTO 10
C
C Confirm QUIT command first 
90	CALL WRITEF('%SAre you absolutely sure you want to QUIT?',BELL)
	READ(*,'(A)') CH
	IF (CH.NE.'Y'.AND.CH.NE.'y') GOTO 10
C
999	CALL LSL_EXIT
	END
