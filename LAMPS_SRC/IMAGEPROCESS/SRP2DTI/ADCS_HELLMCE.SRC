C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-21 17:29:56.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION ADCS_HELLMCE(BYTE_BUF,INT2_BUF,INT4_BUF,
     &				       NPOINTS,	FORM,REVERSE,RET_CODE)
C
***	MODULE	ADCS_HELLMCE
***	IDENT	17AU87
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: A.Stevens
C
C	Routine for ADCS to decode a HELL (MCE) image data tape.
C	this form of data has 1 logical block = 1 physical block
C	Colour has been tested
C	Binary and greyscale have not
C
	IMPLICIT NONE
C
C Common blocks
C
	INCLUDE 'HERE:SRP2DTIMSG.PAR'
	INCLUDE 'HERE:LSL_TAPE.CMN'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'		!Tape input common
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	!LSLLIB error messages
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE '($SSDEF)'

C Arguments
C
	BYTE		BYTE_BUF(*)		! where to put results
	INTEGER*2	INT2_BUF(*)		!
	INTEGER*4	INT4_BUF(*)		!
C
	INTEGER*4	NPOINTS			! max. no of data points
	INTEGER*4	FORM			! how required back:
						! 1 = byte
						! 2 = integer*2
						! 4 = integer*4
	LOGICAL		REVERSE			! reversed o/p required
	INTEGER*4	RET_CODE		! to signal back failure
C
C	Functions
C
	INTEGER*4	UNRUN		! decode binary data	
	INTEGER*4	UNRUN_COLOUR	! decode greyscale/colour data	
	INTEGER*4	RDPHYSICAL	! reads a block
C
C	Local
C
	INTEGER*4	I,N		! counters
	INTEGER*4	BYTCNT		! byte counter
	LOGICAL		OK,STATUS	! error flags
C
	INTEGER*4	SHORT_CODE	! to signal less pixels 
	INTEGER*4	FORM_CODE	! signal illegal form  
	INTEGER*4	OTHER_CODE	! to signal some other error
	PARAMETER	(SHORT_CODE = -3)
	PARAMETER	(FORM_CODE = -4)
	PARAMETER	(OTHER_CODE = -999)
C	
	INTEGER*4	IERR		! function return
	INTEGER*4	ERROR		! system error code
	INTEGER*4	COUNT		! run length actually found
	INTEGER*4	BLKMAX		! expected block size
	PARAMETER	(BLKMAX = 10200)
	BYTE		BUFFER(10200)	! temp. buffer for tape data
C
C--------------------------------------------------------------------
C
C..Set up in the beginning
C
	STATUS = SS$_NORMAL		! If I exit without error
	IF(.NOT.DECODE_HELLMCE)GOTO 999! no further action
	RET_CODE = OTHER_CODE		! general error unless reset
	ADCS_HELLMCE =.TRUE.		! set to signal success
C
C-------------------------------------------------------------------
C
C... read  block into BUFFER 
C
	IF (.NOT.RDPHYSICAL(BUFFER,BLKMAX,RET_CODE)) GOTO 999
C
C-------------------------------------------------------------------
C...ensure run decoding does not try to extract more values than have 
C   been  admitted to in the header.
C 
	  N = MIN(NPOINTS,NSAMPLES)
C
C...unencode run-length data to output buffer in byte,word or 
C   longword form.  
C
	IF (BINARY) THEN
	  COUNT = UNRUN(BUFFER,BYTE_BUF(1),FORM,N,REVERSE)
	ELSE				! greyscale/colour
	  COUNT = UNRUN_COLOUR(BUFFER,BYTE_BUF(1),FORM,N,REVERSE)
	ENDIF
C
	IF (COUNT.LT.0) THEN		! form error detected by unrun
	  RET_CODE = FORM_CODE		! send code back
	  GOTO 999	  		! exit with error
	ENDIF
C...see if the requested number of pixels are present.
C
	IF (NPOINTS.GT.COUNT) THEN	! too few pixels
	  RET_CODE = SHORT_CODE		! send code back
	  NPOINTS = COUNT		! send count back
	  GOTO 999			! exit with error
	ENDIF
C
C--------------------------------------------------------------
C
	RETURN					! without error
C
999	ADCS_HELLMCE = .FALSE.
	RETURN					! with error
	END
C
C------------------------------------------------------------------
