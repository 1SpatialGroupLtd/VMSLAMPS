C
C * This file is part of the LAMPS distribution, released as a software
C * preservation project to archive digital history for future historians.
C * Copyright (c) 1980-2002 Laser-Scan Ltd, 1Spatial Group Ltd
C *
C * Timestamp of this file for the 2002 release was: 1988-09-21 16:29:06.000000000 +0100
C *
C * This program is free software: you can redistribute it and/or modify
C * it under the terms of the GNU General Public License as published by
C * the Free Software Foundation, version 3.
C *
C * This program is distributed in the hope that it will be useful, but
C * WITHOUT ANY WARRANTY; without even the implied warranty of
C * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
C * General Public License for more details.
C *
C * You should have received a copy of the GNU General Public License
C * along with this program. If not, see http://www.gnu.org/licenses/.
C
	LOGICAL FUNCTION HELLMCE_HEADER(px,py,direction)
C
***	MODULE	HELLMCE_HEADER
***	IDENT	17AU87
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: A.Stevens
C
C	Routine to decode a HELL interim MCE format image header tape.
C	(see full documentation)
C
	IMPLICIT NONE
C
C Common blocks
C
	INCLUDE 'HERE:SRP2DTIMSG.PAR'
	INCLUDE 'HERE:LSL_TAPE.CMN'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'		!Tape input common
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	!LSLLIB error messages
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE '($SSDEF)'

C	Functions
C
	LOGICAL		MXIRDB		! read a block from MT/file
	INTEGER*4	VIOMV3		! quick array move
C
	INTEGER*2	REVB		! swaps bytes in a word 
C
C	Arguments
C
	INTEGER*2	PX,PY		! decoding bits 
	INTEGER*2	DIRECTION
C
C	Local
C
	INTEGER*4	I,NPOINTS	! counters
	INTEGER*4	BYTCNT		! byte counter
	LOGICAL		OK,STATUS	! error flags
C
	INTEGER*4	IERR		! function return
	INTEGER*4	ERROR		! system error code
C
	BYTE		BUFFER(80)	! temp. buffer for tape data
	INTEGER*2	WD_BUF(40)	!        ditto
	equivalence     (BUFFER(1),WD_BUF(1))
C
	INTEGER*2	NCOLOURS
C
C--------------------------------------------------------------------
C
C..Set up in the beginning
C
	STATUS = SS$_NORMAL		!If I exit without error
	HELLMCE_HEADER =.TRUE.		!set to signal success
C
	IF(.NOT.DECODE_HELLMCE)GOTO 999	!no further action
	NPOINTS = 80		!header points to read in 
C
C-------------------------------------------------------------------
C
C...read the VOLUME LABEL into the byte buffer
C
	OK = MXIRDB(BUFFER,NPOINTS,BYTCNT)		! Read a block
	IF ((.NOT. OK).AND.(OK .NE. LSL__BUFOVFLW)) THEN! problem
	  IF (OK .EQ. LSL__EOF) THEN			! Handle eof
C
	      CALL LSL_PUTMSG(SRP2DTI__NOVOLHDR)
	      CALL LSL_ADDMSG(OK)
	      STATUS = OK
      	      GOTO 900				! exit error
C
C...handle some other error during tape reading
C
	  ELSE
	    CALL LSL_PUTMSG(SRP2DTI__ERRMTREAD)	! report general error  
	    CALL LSL_ADDMSG(OK)
	    STATUS = OK
	    GOTO 999				! exit with error
	  ENDIF					! .not. ok
C
	ENDIF
C
C...decode and output some volume label information
C	WRITE(6,101) BUFFER(1),BUFFER(2),BUFFER(3),BUFFER(4)
C 101	FORMAT (1X,4A)
C
C--------------------------------------------------------------
C
C...decode the FILE HDR 1 block 
C
	OK = MXIRDB(BUFFER,NPOINTS,BYTCNT)	! Read a block
	IF ((.NOT. OK).AND.(OK .NE. LSL__BUFOVFLW)) GOTO 900 !problem
C
C...decode and output some useless information

C
C--------------------------------------------------------------
C
C...decode the FILE HDR 2 block 
C
	OK = MXIRDB(BUFFER,NPOINTS,BYTCNT)	! Read a block
	IF ((.NOT. OK).AND.(OK .NE. LSL__BUFOVFLW)) GOTO 900 !problem
C
C...decode and output some useless information

C
C--------------------------------------------------------------
C
C...now expect to read an eof
C
	OK = MXIRDB(BUFFER,NPOINTS,BYTCNT)	! Read a block
	IF (OK .NE. LSL__EOF) THEN		! Handle non-eof
      	      GOTO 900				! error
	ENDIF
C
C--------------------------------------------------------------
C...decode the file header information record
C
	OK = MXIRDB(BUFFER,NPOINTS,BYTCNT)	! Read a block
	IF ((.NOT. OK).AND.(OK .NE. LSL__BUFOVFLW)) GOTO 900 !problem
C
C...extract the file header values as required (see format doc)
C 	  
	NSAMPLES = REVB(WD_BUF(1))		! pixels/line
	NLINES 	 = REVB(WD_BUF(2))		! no. of lines
	PX       = REVB(WD_BUF(3))		! pixels/cm	
	PY       = REVB(WD_BUF(4))		! lines/cm	
	DIRECTION= REVB(WD_BUF(5))		! digitising direction
	NCOLOURS = REVB(WD_BUF(6))		! colours in LUT
C
	IF (PX.NE.PY) THEN
	  CALL LSL_PUTMSG(SRP2DTI__RESDIFF)	! warn operator
	ENDIF
	RESOLUTION = 10000/PX 
C 	  
C...make some elementary checks for sensible values:
C
	IF (NSAMPLES.LT.1)		GOTO 900
	IF (NLINES.LT.1)		GOTO 900
	IF ((PX.GT.800).OR.(PX.LT.10)) 	GOTO 900
	IF ((PY.GT.800).OR.(PY.LT.10)) 	GOTO 900
C
C--------------------------------------------------------------
	RETURN					! without error
C
 900	CONTINUE				! bad header format
	CALL LSL_PUTMSG(SRP2DTI__BADHDR)
	STATUS = OK
C
999	HELLMCE_HEADER = .FALSE.
	RETURN					! with error
	END
