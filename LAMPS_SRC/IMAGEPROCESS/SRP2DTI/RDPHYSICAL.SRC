	LOGICAL FUNCTION RDPHYSICAL(BUFFER,BLKMAX,RET_CODE)
C
C
***	MODULE	RDPHYSICAL
***	IDENT	17AU87
C
C 	Copyright Laser-Scan Laboratories Ltd.,Cambridge,England
C 	Author: A.Stevens
C

	IMPLICIT NONE
C
C Common blocks
C
	INCLUDE 'HERE:SRP2DTIMSG.PAR'
	INCLUDE 'HERE:LSL_TAPE.CMN'
	INCLUDE 'LSL$CMNLSL:MTIVCM.CMN'		!Tape input common
	INCLUDE 'LSL$CMNLSL:LSLLIBMSG.PAR'	!LSLLIB error messages
	INCLUDE 'LSL$CMNLSL:TXTC.CMN'
	INCLUDE '($SSDEF)'
C
C Arguments
C
	BYTE		BUFFER(*)		! where to put results
	INTEGER*4	BLKMAX		! expected physical blocksize
	INTEGER*4	RET_CODE		! to signal back failure
C
C	Functions
C
	LOGICAL		MXIRDB		! read a block from serial MT
	LOGICAL		MXIRWD		! rewind tape
C
C	Local
C
	INTEGER*4	I		! counters
	INTEGER*4	BYTCNT		! byte counter
	LOGICAL		OK,STATUS	! error flags
C
	INTEGER*4	EOV_CODE	! to signal end of volume	
	INTEGER*4	EOT_CODE	! to signal end of tape
	INTEGER*4	EOF_CODE	! to signal end of disk file
	INTEGER*4	SHORT_CODE	! to signal less pixels 
	INTEGER*4	FORM_CODE	! signal illegal form  
	INTEGER*4	OTHER_CODE	! to signal some other error
	PARAMETER	(EOV_CODE = -1)
	PARAMETER	(EOT_CODE = -2)
	PARAMETER	(EOF_CODE =  -9)
	PARAMETER	(SHORT_CODE = -3)
	PARAMETER	(FORM_CODE = -4)
	PARAMETER	(OTHER_CODE = -999)
C	
	RDPHYSICAL = .TRUE.
C
	OK = MXIRDB(BUFFER,BLKMAX,BYTCNT)	! Read a block
	IF (.NOT. OK) THEN			! some problem
C
	  IF (OK .EQ. LSL__BUFOVFLW) THEN	! I didnt allocate enough
	    RET_CODE = OTHER_CODE		! internal problem 
	    CALL LSL_PUTMSG(SRP2DTI__ERRMTBUF)	! inform operator
	    CALL LSL_ADDMSG(OK)			! and extra info
	    STATUS = OK
	    GOTO 999				! exit with error
	  ENDIF
C
	  IF (OK .EQ. LSL__EOF) THEN		! Handle eof
C
C...handle end of volume
C
	    IF (HAD_MULTI) THEN			! signal multi-vol set
	      IF (MAGFILE) THEN 
	        RET_CODE = EOV_CODE		! code for end volume
	      ELSE
	        RET_CODE = EOF_CODE		! for end of disk file
	      ENDIF
	      OK = MXIRWD()			! rewind current tape
	      IF (.NOT.OK) THEN 
	        CALL LSL_PUTMSG(SRP2DTI__ERRMTREW)
	        CALL LSL_ADDMSG(OK)
	        STATUS = OK
	        GOTO 999			! exit with error
	      ENDIF				! .not. ok 
	      GOTO 999				! exit with EOV
C
C...handle unexpected end of file
C
	    ELSE
	      RET_CODE = EOT_CODE		! code for end tape
      	      GOTO 999				! exit with error
	    ENDIF				! if had_multi
C
	  ENDIF					! ok = lsl_eof
C
C...handle some other error during tape reading
C
	  RET_CODE = OTHER_CODE
	  CALL LSL_PUTMSG(SRP2DTI__ERRMTREAD)	! report general error  
	  CALL LSL_ADDMSG(OK)
	  STATUS = OK
	  GOTO 999
	ENDIF					! .not. ok

C
C...if get to here, physical block has been read OK and put in BUFFER 
C
990	RETURN
C
 999	RDPHYSICAL = .FALSE.
	RETURN
	END
